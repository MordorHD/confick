// load //
case INSTR_LDQRAI: REGISTER.AQ = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQRARA: REGISTER.AQ = REGISTER.AQ; continue;
case INSTR_LDQRARB: REGISTER.AQ = REGISTER.BQ; continue;
case INSTR_LDQRARC: REGISTER.AQ = REGISTER.CQ; continue;
case INSTR_LDQRARD: REGISTER.AQ = REGISTER.DQ; continue;
case INSTR_LDQRAR0: REGISTER.AQ = REGISTER._0Q; continue;
case INSTR_LDQRAR1: REGISTER.AQ = REGISTER._1Q; continue;
case INSTR_LDQRAR2: REGISTER.AQ = REGISTER._2Q; continue;
case INSTR_LDQRAR3: REGISTER.AQ = REGISTER._3Q; continue;
case INSTR_LDQRAR4: REGISTER.AQ = REGISTER._4Q; continue;
case INSTR_LDQRAR5: REGISTER.AQ = REGISTER._5Q; continue;
case INSTR_LDQRAR6: REGISTER.AQ = REGISTER._6Q; continue;
case INSTR_LDQRAR7: REGISTER.AQ = REGISTER._7Q; continue;
case INSTR_LDQRAR8: REGISTER.AQ = REGISTER._8Q; continue;
case INSTR_LDQRAR9: REGISTER.AQ = REGISTER._9Q; continue;
case INSTR_LDQRAR10: REGISTER.AQ = REGISTER._10Q; continue;
case INSTR_LDQRAR11: REGISTER.AQ = REGISTER._11Q; continue;
case INSTR_LDQRAR12: REGISTER.AQ = REGISTER._12Q; continue;
case INSTR_LDQRARIP: REGISTER.AQ = REGISTER.IPQ; continue;
case INSTR_LDQRARSP: REGISTER.AQ = REGISTER.SPQ; continue;
case INSTR_LDQRARBP: REGISTER.AQ = REGISTER.BPQ; continue;
case INSTR_LDQRBI: REGISTER.BQ = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQRBRA: REGISTER.BQ = REGISTER.AQ; continue;
case INSTR_LDQRBRB: REGISTER.BQ = REGISTER.BQ; continue;
case INSTR_LDQRBRC: REGISTER.BQ = REGISTER.CQ; continue;
case INSTR_LDQRBRD: REGISTER.BQ = REGISTER.DQ; continue;
case INSTR_LDQRBR0: REGISTER.BQ = REGISTER._0Q; continue;
case INSTR_LDQRBR1: REGISTER.BQ = REGISTER._1Q; continue;
case INSTR_LDQRBR2: REGISTER.BQ = REGISTER._2Q; continue;
case INSTR_LDQRBR3: REGISTER.BQ = REGISTER._3Q; continue;
case INSTR_LDQRBR4: REGISTER.BQ = REGISTER._4Q; continue;
case INSTR_LDQRBR5: REGISTER.BQ = REGISTER._5Q; continue;
case INSTR_LDQRBR6: REGISTER.BQ = REGISTER._6Q; continue;
case INSTR_LDQRBR7: REGISTER.BQ = REGISTER._7Q; continue;
case INSTR_LDQRBR8: REGISTER.BQ = REGISTER._8Q; continue;
case INSTR_LDQRBR9: REGISTER.BQ = REGISTER._9Q; continue;
case INSTR_LDQRBR10: REGISTER.BQ = REGISTER._10Q; continue;
case INSTR_LDQRBR11: REGISTER.BQ = REGISTER._11Q; continue;
case INSTR_LDQRBR12: REGISTER.BQ = REGISTER._12Q; continue;
case INSTR_LDQRBRIP: REGISTER.BQ = REGISTER.IPQ; continue;
case INSTR_LDQRBRSP: REGISTER.BQ = REGISTER.SPQ; continue;
case INSTR_LDQRBRBP: REGISTER.BQ = REGISTER.BPQ; continue;
case INSTR_LDQRCI: REGISTER.CQ = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQRCRA: REGISTER.CQ = REGISTER.AQ; continue;
case INSTR_LDQRCRB: REGISTER.CQ = REGISTER.BQ; continue;
case INSTR_LDQRCRC: REGISTER.CQ = REGISTER.CQ; continue;
case INSTR_LDQRCRD: REGISTER.CQ = REGISTER.DQ; continue;
case INSTR_LDQRCR0: REGISTER.CQ = REGISTER._0Q; continue;
case INSTR_LDQRCR1: REGISTER.CQ = REGISTER._1Q; continue;
case INSTR_LDQRCR2: REGISTER.CQ = REGISTER._2Q; continue;
case INSTR_LDQRCR3: REGISTER.CQ = REGISTER._3Q; continue;
case INSTR_LDQRCR4: REGISTER.CQ = REGISTER._4Q; continue;
case INSTR_LDQRCR5: REGISTER.CQ = REGISTER._5Q; continue;
case INSTR_LDQRCR6: REGISTER.CQ = REGISTER._6Q; continue;
case INSTR_LDQRCR7: REGISTER.CQ = REGISTER._7Q; continue;
case INSTR_LDQRCR8: REGISTER.CQ = REGISTER._8Q; continue;
case INSTR_LDQRCR9: REGISTER.CQ = REGISTER._9Q; continue;
case INSTR_LDQRCR10: REGISTER.CQ = REGISTER._10Q; continue;
case INSTR_LDQRCR11: REGISTER.CQ = REGISTER._11Q; continue;
case INSTR_LDQRCR12: REGISTER.CQ = REGISTER._12Q; continue;
case INSTR_LDQRCRIP: REGISTER.CQ = REGISTER.IPQ; continue;
case INSTR_LDQRCRSP: REGISTER.CQ = REGISTER.SPQ; continue;
case INSTR_LDQRCRBP: REGISTER.CQ = REGISTER.BPQ; continue;
case INSTR_LDQRDI: REGISTER.DQ = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQRDRA: REGISTER.DQ = REGISTER.AQ; continue;
case INSTR_LDQRDRB: REGISTER.DQ = REGISTER.BQ; continue;
case INSTR_LDQRDRC: REGISTER.DQ = REGISTER.CQ; continue;
case INSTR_LDQRDRD: REGISTER.DQ = REGISTER.DQ; continue;
case INSTR_LDQRDR0: REGISTER.DQ = REGISTER._0Q; continue;
case INSTR_LDQRDR1: REGISTER.DQ = REGISTER._1Q; continue;
case INSTR_LDQRDR2: REGISTER.DQ = REGISTER._2Q; continue;
case INSTR_LDQRDR3: REGISTER.DQ = REGISTER._3Q; continue;
case INSTR_LDQRDR4: REGISTER.DQ = REGISTER._4Q; continue;
case INSTR_LDQRDR5: REGISTER.DQ = REGISTER._5Q; continue;
case INSTR_LDQRDR6: REGISTER.DQ = REGISTER._6Q; continue;
case INSTR_LDQRDR7: REGISTER.DQ = REGISTER._7Q; continue;
case INSTR_LDQRDR8: REGISTER.DQ = REGISTER._8Q; continue;
case INSTR_LDQRDR9: REGISTER.DQ = REGISTER._9Q; continue;
case INSTR_LDQRDR10: REGISTER.DQ = REGISTER._10Q; continue;
case INSTR_LDQRDR11: REGISTER.DQ = REGISTER._11Q; continue;
case INSTR_LDQRDR12: REGISTER.DQ = REGISTER._12Q; continue;
case INSTR_LDQRDRIP: REGISTER.DQ = REGISTER.IPQ; continue;
case INSTR_LDQRDRSP: REGISTER.DQ = REGISTER.SPQ; continue;
case INSTR_LDQRDRBP: REGISTER.DQ = REGISTER.BPQ; continue;
case INSTR_LDQR0I: REGISTER._0Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR0RA: REGISTER._0Q = REGISTER.AQ; continue;
case INSTR_LDQR0RB: REGISTER._0Q = REGISTER.BQ; continue;
case INSTR_LDQR0RC: REGISTER._0Q = REGISTER.CQ; continue;
case INSTR_LDQR0RD: REGISTER._0Q = REGISTER.DQ; continue;
case INSTR_LDQR0R0: REGISTER._0Q = REGISTER._0Q; continue;
case INSTR_LDQR0R1: REGISTER._0Q = REGISTER._1Q; continue;
case INSTR_LDQR0R2: REGISTER._0Q = REGISTER._2Q; continue;
case INSTR_LDQR0R3: REGISTER._0Q = REGISTER._3Q; continue;
case INSTR_LDQR0R4: REGISTER._0Q = REGISTER._4Q; continue;
case INSTR_LDQR0R5: REGISTER._0Q = REGISTER._5Q; continue;
case INSTR_LDQR0R6: REGISTER._0Q = REGISTER._6Q; continue;
case INSTR_LDQR0R7: REGISTER._0Q = REGISTER._7Q; continue;
case INSTR_LDQR0R8: REGISTER._0Q = REGISTER._8Q; continue;
case INSTR_LDQR0R9: REGISTER._0Q = REGISTER._9Q; continue;
case INSTR_LDQR0R10: REGISTER._0Q = REGISTER._10Q; continue;
case INSTR_LDQR0R11: REGISTER._0Q = REGISTER._11Q; continue;
case INSTR_LDQR0R12: REGISTER._0Q = REGISTER._12Q; continue;
case INSTR_LDQR0RIP: REGISTER._0Q = REGISTER.IPQ; continue;
case INSTR_LDQR0RSP: REGISTER._0Q = REGISTER.SPQ; continue;
case INSTR_LDQR0RBP: REGISTER._0Q = REGISTER.BPQ; continue;
case INSTR_LDQR1I: REGISTER._1Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR1RA: REGISTER._1Q = REGISTER.AQ; continue;
case INSTR_LDQR1RB: REGISTER._1Q = REGISTER.BQ; continue;
case INSTR_LDQR1RC: REGISTER._1Q = REGISTER.CQ; continue;
case INSTR_LDQR1RD: REGISTER._1Q = REGISTER.DQ; continue;
case INSTR_LDQR1R0: REGISTER._1Q = REGISTER._0Q; continue;
case INSTR_LDQR1R1: REGISTER._1Q = REGISTER._1Q; continue;
case INSTR_LDQR1R2: REGISTER._1Q = REGISTER._2Q; continue;
case INSTR_LDQR1R3: REGISTER._1Q = REGISTER._3Q; continue;
case INSTR_LDQR1R4: REGISTER._1Q = REGISTER._4Q; continue;
case INSTR_LDQR1R5: REGISTER._1Q = REGISTER._5Q; continue;
case INSTR_LDQR1R6: REGISTER._1Q = REGISTER._6Q; continue;
case INSTR_LDQR1R7: REGISTER._1Q = REGISTER._7Q; continue;
case INSTR_LDQR1R8: REGISTER._1Q = REGISTER._8Q; continue;
case INSTR_LDQR1R9: REGISTER._1Q = REGISTER._9Q; continue;
case INSTR_LDQR1R10: REGISTER._1Q = REGISTER._10Q; continue;
case INSTR_LDQR1R11: REGISTER._1Q = REGISTER._11Q; continue;
case INSTR_LDQR1R12: REGISTER._1Q = REGISTER._12Q; continue;
case INSTR_LDQR1RIP: REGISTER._1Q = REGISTER.IPQ; continue;
case INSTR_LDQR1RSP: REGISTER._1Q = REGISTER.SPQ; continue;
case INSTR_LDQR1RBP: REGISTER._1Q = REGISTER.BPQ; continue;
case INSTR_LDQR2I: REGISTER._2Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR2RA: REGISTER._2Q = REGISTER.AQ; continue;
case INSTR_LDQR2RB: REGISTER._2Q = REGISTER.BQ; continue;
case INSTR_LDQR2RC: REGISTER._2Q = REGISTER.CQ; continue;
case INSTR_LDQR2RD: REGISTER._2Q = REGISTER.DQ; continue;
case INSTR_LDQR2R0: REGISTER._2Q = REGISTER._0Q; continue;
case INSTR_LDQR2R1: REGISTER._2Q = REGISTER._1Q; continue;
case INSTR_LDQR2R2: REGISTER._2Q = REGISTER._2Q; continue;
case INSTR_LDQR2R3: REGISTER._2Q = REGISTER._3Q; continue;
case INSTR_LDQR2R4: REGISTER._2Q = REGISTER._4Q; continue;
case INSTR_LDQR2R5: REGISTER._2Q = REGISTER._5Q; continue;
case INSTR_LDQR2R6: REGISTER._2Q = REGISTER._6Q; continue;
case INSTR_LDQR2R7: REGISTER._2Q = REGISTER._7Q; continue;
case INSTR_LDQR2R8: REGISTER._2Q = REGISTER._8Q; continue;
case INSTR_LDQR2R9: REGISTER._2Q = REGISTER._9Q; continue;
case INSTR_LDQR2R10: REGISTER._2Q = REGISTER._10Q; continue;
case INSTR_LDQR2R11: REGISTER._2Q = REGISTER._11Q; continue;
case INSTR_LDQR2R12: REGISTER._2Q = REGISTER._12Q; continue;
case INSTR_LDQR2RIP: REGISTER._2Q = REGISTER.IPQ; continue;
case INSTR_LDQR2RSP: REGISTER._2Q = REGISTER.SPQ; continue;
case INSTR_LDQR2RBP: REGISTER._2Q = REGISTER.BPQ; continue;
case INSTR_LDQR3I: REGISTER._3Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR3RA: REGISTER._3Q = REGISTER.AQ; continue;
case INSTR_LDQR3RB: REGISTER._3Q = REGISTER.BQ; continue;
case INSTR_LDQR3RC: REGISTER._3Q = REGISTER.CQ; continue;
case INSTR_LDQR3RD: REGISTER._3Q = REGISTER.DQ; continue;
case INSTR_LDQR3R0: REGISTER._3Q = REGISTER._0Q; continue;
case INSTR_LDQR3R1: REGISTER._3Q = REGISTER._1Q; continue;
case INSTR_LDQR3R2: REGISTER._3Q = REGISTER._2Q; continue;
case INSTR_LDQR3R3: REGISTER._3Q = REGISTER._3Q; continue;
case INSTR_LDQR3R4: REGISTER._3Q = REGISTER._4Q; continue;
case INSTR_LDQR3R5: REGISTER._3Q = REGISTER._5Q; continue;
case INSTR_LDQR3R6: REGISTER._3Q = REGISTER._6Q; continue;
case INSTR_LDQR3R7: REGISTER._3Q = REGISTER._7Q; continue;
case INSTR_LDQR3R8: REGISTER._3Q = REGISTER._8Q; continue;
case INSTR_LDQR3R9: REGISTER._3Q = REGISTER._9Q; continue;
case INSTR_LDQR3R10: REGISTER._3Q = REGISTER._10Q; continue;
case INSTR_LDQR3R11: REGISTER._3Q = REGISTER._11Q; continue;
case INSTR_LDQR3R12: REGISTER._3Q = REGISTER._12Q; continue;
case INSTR_LDQR3RIP: REGISTER._3Q = REGISTER.IPQ; continue;
case INSTR_LDQR3RSP: REGISTER._3Q = REGISTER.SPQ; continue;
case INSTR_LDQR3RBP: REGISTER._3Q = REGISTER.BPQ; continue;
case INSTR_LDQR4I: REGISTER._4Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR4RA: REGISTER._4Q = REGISTER.AQ; continue;
case INSTR_LDQR4RB: REGISTER._4Q = REGISTER.BQ; continue;
case INSTR_LDQR4RC: REGISTER._4Q = REGISTER.CQ; continue;
case INSTR_LDQR4RD: REGISTER._4Q = REGISTER.DQ; continue;
case INSTR_LDQR4R0: REGISTER._4Q = REGISTER._0Q; continue;
case INSTR_LDQR4R1: REGISTER._4Q = REGISTER._1Q; continue;
case INSTR_LDQR4R2: REGISTER._4Q = REGISTER._2Q; continue;
case INSTR_LDQR4R3: REGISTER._4Q = REGISTER._3Q; continue;
case INSTR_LDQR4R4: REGISTER._4Q = REGISTER._4Q; continue;
case INSTR_LDQR4R5: REGISTER._4Q = REGISTER._5Q; continue;
case INSTR_LDQR4R6: REGISTER._4Q = REGISTER._6Q; continue;
case INSTR_LDQR4R7: REGISTER._4Q = REGISTER._7Q; continue;
case INSTR_LDQR4R8: REGISTER._4Q = REGISTER._8Q; continue;
case INSTR_LDQR4R9: REGISTER._4Q = REGISTER._9Q; continue;
case INSTR_LDQR4R10: REGISTER._4Q = REGISTER._10Q; continue;
case INSTR_LDQR4R11: REGISTER._4Q = REGISTER._11Q; continue;
case INSTR_LDQR4R12: REGISTER._4Q = REGISTER._12Q; continue;
case INSTR_LDQR4RIP: REGISTER._4Q = REGISTER.IPQ; continue;
case INSTR_LDQR4RSP: REGISTER._4Q = REGISTER.SPQ; continue;
case INSTR_LDQR4RBP: REGISTER._4Q = REGISTER.BPQ; continue;
case INSTR_LDQR5I: REGISTER._5Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR5RA: REGISTER._5Q = REGISTER.AQ; continue;
case INSTR_LDQR5RB: REGISTER._5Q = REGISTER.BQ; continue;
case INSTR_LDQR5RC: REGISTER._5Q = REGISTER.CQ; continue;
case INSTR_LDQR5RD: REGISTER._5Q = REGISTER.DQ; continue;
case INSTR_LDQR5R0: REGISTER._5Q = REGISTER._0Q; continue;
case INSTR_LDQR5R1: REGISTER._5Q = REGISTER._1Q; continue;
case INSTR_LDQR5R2: REGISTER._5Q = REGISTER._2Q; continue;
case INSTR_LDQR5R3: REGISTER._5Q = REGISTER._3Q; continue;
case INSTR_LDQR5R4: REGISTER._5Q = REGISTER._4Q; continue;
case INSTR_LDQR5R5: REGISTER._5Q = REGISTER._5Q; continue;
case INSTR_LDQR5R6: REGISTER._5Q = REGISTER._6Q; continue;
case INSTR_LDQR5R7: REGISTER._5Q = REGISTER._7Q; continue;
case INSTR_LDQR5R8: REGISTER._5Q = REGISTER._8Q; continue;
case INSTR_LDQR5R9: REGISTER._5Q = REGISTER._9Q; continue;
case INSTR_LDQR5R10: REGISTER._5Q = REGISTER._10Q; continue;
case INSTR_LDQR5R11: REGISTER._5Q = REGISTER._11Q; continue;
case INSTR_LDQR5R12: REGISTER._5Q = REGISTER._12Q; continue;
case INSTR_LDQR5RIP: REGISTER._5Q = REGISTER.IPQ; continue;
case INSTR_LDQR5RSP: REGISTER._5Q = REGISTER.SPQ; continue;
case INSTR_LDQR5RBP: REGISTER._5Q = REGISTER.BPQ; continue;
case INSTR_LDQR6I: REGISTER._6Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR6RA: REGISTER._6Q = REGISTER.AQ; continue;
case INSTR_LDQR6RB: REGISTER._6Q = REGISTER.BQ; continue;
case INSTR_LDQR6RC: REGISTER._6Q = REGISTER.CQ; continue;
case INSTR_LDQR6RD: REGISTER._6Q = REGISTER.DQ; continue;
case INSTR_LDQR6R0: REGISTER._6Q = REGISTER._0Q; continue;
case INSTR_LDQR6R1: REGISTER._6Q = REGISTER._1Q; continue;
case INSTR_LDQR6R2: REGISTER._6Q = REGISTER._2Q; continue;
case INSTR_LDQR6R3: REGISTER._6Q = REGISTER._3Q; continue;
case INSTR_LDQR6R4: REGISTER._6Q = REGISTER._4Q; continue;
case INSTR_LDQR6R5: REGISTER._6Q = REGISTER._5Q; continue;
case INSTR_LDQR6R6: REGISTER._6Q = REGISTER._6Q; continue;
case INSTR_LDQR6R7: REGISTER._6Q = REGISTER._7Q; continue;
case INSTR_LDQR6R8: REGISTER._6Q = REGISTER._8Q; continue;
case INSTR_LDQR6R9: REGISTER._6Q = REGISTER._9Q; continue;
case INSTR_LDQR6R10: REGISTER._6Q = REGISTER._10Q; continue;
case INSTR_LDQR6R11: REGISTER._6Q = REGISTER._11Q; continue;
case INSTR_LDQR6R12: REGISTER._6Q = REGISTER._12Q; continue;
case INSTR_LDQR6RIP: REGISTER._6Q = REGISTER.IPQ; continue;
case INSTR_LDQR6RSP: REGISTER._6Q = REGISTER.SPQ; continue;
case INSTR_LDQR6RBP: REGISTER._6Q = REGISTER.BPQ; continue;
case INSTR_LDQR7I: REGISTER._7Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR7RA: REGISTER._7Q = REGISTER.AQ; continue;
case INSTR_LDQR7RB: REGISTER._7Q = REGISTER.BQ; continue;
case INSTR_LDQR7RC: REGISTER._7Q = REGISTER.CQ; continue;
case INSTR_LDQR7RD: REGISTER._7Q = REGISTER.DQ; continue;
case INSTR_LDQR7R0: REGISTER._7Q = REGISTER._0Q; continue;
case INSTR_LDQR7R1: REGISTER._7Q = REGISTER._1Q; continue;
case INSTR_LDQR7R2: REGISTER._7Q = REGISTER._2Q; continue;
case INSTR_LDQR7R3: REGISTER._7Q = REGISTER._3Q; continue;
case INSTR_LDQR7R4: REGISTER._7Q = REGISTER._4Q; continue;
case INSTR_LDQR7R5: REGISTER._7Q = REGISTER._5Q; continue;
case INSTR_LDQR7R6: REGISTER._7Q = REGISTER._6Q; continue;
case INSTR_LDQR7R7: REGISTER._7Q = REGISTER._7Q; continue;
case INSTR_LDQR7R8: REGISTER._7Q = REGISTER._8Q; continue;
case INSTR_LDQR7R9: REGISTER._7Q = REGISTER._9Q; continue;
case INSTR_LDQR7R10: REGISTER._7Q = REGISTER._10Q; continue;
case INSTR_LDQR7R11: REGISTER._7Q = REGISTER._11Q; continue;
case INSTR_LDQR7R12: REGISTER._7Q = REGISTER._12Q; continue;
case INSTR_LDQR7RIP: REGISTER._7Q = REGISTER.IPQ; continue;
case INSTR_LDQR7RSP: REGISTER._7Q = REGISTER.SPQ; continue;
case INSTR_LDQR7RBP: REGISTER._7Q = REGISTER.BPQ; continue;
case INSTR_LDQR8I: REGISTER._8Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR8RA: REGISTER._8Q = REGISTER.AQ; continue;
case INSTR_LDQR8RB: REGISTER._8Q = REGISTER.BQ; continue;
case INSTR_LDQR8RC: REGISTER._8Q = REGISTER.CQ; continue;
case INSTR_LDQR8RD: REGISTER._8Q = REGISTER.DQ; continue;
case INSTR_LDQR8R0: REGISTER._8Q = REGISTER._0Q; continue;
case INSTR_LDQR8R1: REGISTER._8Q = REGISTER._1Q; continue;
case INSTR_LDQR8R2: REGISTER._8Q = REGISTER._2Q; continue;
case INSTR_LDQR8R3: REGISTER._8Q = REGISTER._3Q; continue;
case INSTR_LDQR8R4: REGISTER._8Q = REGISTER._4Q; continue;
case INSTR_LDQR8R5: REGISTER._8Q = REGISTER._5Q; continue;
case INSTR_LDQR8R6: REGISTER._8Q = REGISTER._6Q; continue;
case INSTR_LDQR8R7: REGISTER._8Q = REGISTER._7Q; continue;
case INSTR_LDQR8R8: REGISTER._8Q = REGISTER._8Q; continue;
case INSTR_LDQR8R9: REGISTER._8Q = REGISTER._9Q; continue;
case INSTR_LDQR8R10: REGISTER._8Q = REGISTER._10Q; continue;
case INSTR_LDQR8R11: REGISTER._8Q = REGISTER._11Q; continue;
case INSTR_LDQR8R12: REGISTER._8Q = REGISTER._12Q; continue;
case INSTR_LDQR8RIP: REGISTER._8Q = REGISTER.IPQ; continue;
case INSTR_LDQR8RSP: REGISTER._8Q = REGISTER.SPQ; continue;
case INSTR_LDQR8RBP: REGISTER._8Q = REGISTER.BPQ; continue;
case INSTR_LDQR9I: REGISTER._9Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR9RA: REGISTER._9Q = REGISTER.AQ; continue;
case INSTR_LDQR9RB: REGISTER._9Q = REGISTER.BQ; continue;
case INSTR_LDQR9RC: REGISTER._9Q = REGISTER.CQ; continue;
case INSTR_LDQR9RD: REGISTER._9Q = REGISTER.DQ; continue;
case INSTR_LDQR9R0: REGISTER._9Q = REGISTER._0Q; continue;
case INSTR_LDQR9R1: REGISTER._9Q = REGISTER._1Q; continue;
case INSTR_LDQR9R2: REGISTER._9Q = REGISTER._2Q; continue;
case INSTR_LDQR9R3: REGISTER._9Q = REGISTER._3Q; continue;
case INSTR_LDQR9R4: REGISTER._9Q = REGISTER._4Q; continue;
case INSTR_LDQR9R5: REGISTER._9Q = REGISTER._5Q; continue;
case INSTR_LDQR9R6: REGISTER._9Q = REGISTER._6Q; continue;
case INSTR_LDQR9R7: REGISTER._9Q = REGISTER._7Q; continue;
case INSTR_LDQR9R8: REGISTER._9Q = REGISTER._8Q; continue;
case INSTR_LDQR9R9: REGISTER._9Q = REGISTER._9Q; continue;
case INSTR_LDQR9R10: REGISTER._9Q = REGISTER._10Q; continue;
case INSTR_LDQR9R11: REGISTER._9Q = REGISTER._11Q; continue;
case INSTR_LDQR9R12: REGISTER._9Q = REGISTER._12Q; continue;
case INSTR_LDQR9RIP: REGISTER._9Q = REGISTER.IPQ; continue;
case INSTR_LDQR9RSP: REGISTER._9Q = REGISTER.SPQ; continue;
case INSTR_LDQR9RBP: REGISTER._9Q = REGISTER.BPQ; continue;
case INSTR_LDQR10I: REGISTER._10Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR10RA: REGISTER._10Q = REGISTER.AQ; continue;
case INSTR_LDQR10RB: REGISTER._10Q = REGISTER.BQ; continue;
case INSTR_LDQR10RC: REGISTER._10Q = REGISTER.CQ; continue;
case INSTR_LDQR10RD: REGISTER._10Q = REGISTER.DQ; continue;
case INSTR_LDQR10R0: REGISTER._10Q = REGISTER._0Q; continue;
case INSTR_LDQR10R1: REGISTER._10Q = REGISTER._1Q; continue;
case INSTR_LDQR10R2: REGISTER._10Q = REGISTER._2Q; continue;
case INSTR_LDQR10R3: REGISTER._10Q = REGISTER._3Q; continue;
case INSTR_LDQR10R4: REGISTER._10Q = REGISTER._4Q; continue;
case INSTR_LDQR10R5: REGISTER._10Q = REGISTER._5Q; continue;
case INSTR_LDQR10R6: REGISTER._10Q = REGISTER._6Q; continue;
case INSTR_LDQR10R7: REGISTER._10Q = REGISTER._7Q; continue;
case INSTR_LDQR10R8: REGISTER._10Q = REGISTER._8Q; continue;
case INSTR_LDQR10R9: REGISTER._10Q = REGISTER._9Q; continue;
case INSTR_LDQR10R10: REGISTER._10Q = REGISTER._10Q; continue;
case INSTR_LDQR10R11: REGISTER._10Q = REGISTER._11Q; continue;
case INSTR_LDQR10R12: REGISTER._10Q = REGISTER._12Q; continue;
case INSTR_LDQR10RIP: REGISTER._10Q = REGISTER.IPQ; continue;
case INSTR_LDQR10RSP: REGISTER._10Q = REGISTER.SPQ; continue;
case INSTR_LDQR10RBP: REGISTER._10Q = REGISTER.BPQ; continue;
case INSTR_LDQR11I: REGISTER._11Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR11RA: REGISTER._11Q = REGISTER.AQ; continue;
case INSTR_LDQR11RB: REGISTER._11Q = REGISTER.BQ; continue;
case INSTR_LDQR11RC: REGISTER._11Q = REGISTER.CQ; continue;
case INSTR_LDQR11RD: REGISTER._11Q = REGISTER.DQ; continue;
case INSTR_LDQR11R0: REGISTER._11Q = REGISTER._0Q; continue;
case INSTR_LDQR11R1: REGISTER._11Q = REGISTER._1Q; continue;
case INSTR_LDQR11R2: REGISTER._11Q = REGISTER._2Q; continue;
case INSTR_LDQR11R3: REGISTER._11Q = REGISTER._3Q; continue;
case INSTR_LDQR11R4: REGISTER._11Q = REGISTER._4Q; continue;
case INSTR_LDQR11R5: REGISTER._11Q = REGISTER._5Q; continue;
case INSTR_LDQR11R6: REGISTER._11Q = REGISTER._6Q; continue;
case INSTR_LDQR11R7: REGISTER._11Q = REGISTER._7Q; continue;
case INSTR_LDQR11R8: REGISTER._11Q = REGISTER._8Q; continue;
case INSTR_LDQR11R9: REGISTER._11Q = REGISTER._9Q; continue;
case INSTR_LDQR11R10: REGISTER._11Q = REGISTER._10Q; continue;
case INSTR_LDQR11R11: REGISTER._11Q = REGISTER._11Q; continue;
case INSTR_LDQR11R12: REGISTER._11Q = REGISTER._12Q; continue;
case INSTR_LDQR11RIP: REGISTER._11Q = REGISTER.IPQ; continue;
case INSTR_LDQR11RSP: REGISTER._11Q = REGISTER.SPQ; continue;
case INSTR_LDQR11RBP: REGISTER._11Q = REGISTER.BPQ; continue;
case INSTR_LDQR12I: REGISTER._12Q = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQR12RA: REGISTER._12Q = REGISTER.AQ; continue;
case INSTR_LDQR12RB: REGISTER._12Q = REGISTER.BQ; continue;
case INSTR_LDQR12RC: REGISTER._12Q = REGISTER.CQ; continue;
case INSTR_LDQR12RD: REGISTER._12Q = REGISTER.DQ; continue;
case INSTR_LDQR12R0: REGISTER._12Q = REGISTER._0Q; continue;
case INSTR_LDQR12R1: REGISTER._12Q = REGISTER._1Q; continue;
case INSTR_LDQR12R2: REGISTER._12Q = REGISTER._2Q; continue;
case INSTR_LDQR12R3: REGISTER._12Q = REGISTER._3Q; continue;
case INSTR_LDQR12R4: REGISTER._12Q = REGISTER._4Q; continue;
case INSTR_LDQR12R5: REGISTER._12Q = REGISTER._5Q; continue;
case INSTR_LDQR12R6: REGISTER._12Q = REGISTER._6Q; continue;
case INSTR_LDQR12R7: REGISTER._12Q = REGISTER._7Q; continue;
case INSTR_LDQR12R8: REGISTER._12Q = REGISTER._8Q; continue;
case INSTR_LDQR12R9: REGISTER._12Q = REGISTER._9Q; continue;
case INSTR_LDQR12R10: REGISTER._12Q = REGISTER._10Q; continue;
case INSTR_LDQR12R11: REGISTER._12Q = REGISTER._11Q; continue;
case INSTR_LDQR12R12: REGISTER._12Q = REGISTER._12Q; continue;
case INSTR_LDQR12RIP: REGISTER._12Q = REGISTER.IPQ; continue;
case INSTR_LDQR12RSP: REGISTER._12Q = REGISTER.SPQ; continue;
case INSTR_LDQR12RBP: REGISTER._12Q = REGISTER.BPQ; continue;
case INSTR_LDQRIPI: REGISTER.IPQ = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQRIPRA: REGISTER.IPQ = REGISTER.AQ; continue;
case INSTR_LDQRIPRB: REGISTER.IPQ = REGISTER.BQ; continue;
case INSTR_LDQRIPRC: REGISTER.IPQ = REGISTER.CQ; continue;
case INSTR_LDQRIPRD: REGISTER.IPQ = REGISTER.DQ; continue;
case INSTR_LDQRIPR0: REGISTER.IPQ = REGISTER._0Q; continue;
case INSTR_LDQRIPR1: REGISTER.IPQ = REGISTER._1Q; continue;
case INSTR_LDQRIPR2: REGISTER.IPQ = REGISTER._2Q; continue;
case INSTR_LDQRIPR3: REGISTER.IPQ = REGISTER._3Q; continue;
case INSTR_LDQRIPR4: REGISTER.IPQ = REGISTER._4Q; continue;
case INSTR_LDQRIPR5: REGISTER.IPQ = REGISTER._5Q; continue;
case INSTR_LDQRIPR6: REGISTER.IPQ = REGISTER._6Q; continue;
case INSTR_LDQRIPR7: REGISTER.IPQ = REGISTER._7Q; continue;
case INSTR_LDQRIPR8: REGISTER.IPQ = REGISTER._8Q; continue;
case INSTR_LDQRIPR9: REGISTER.IPQ = REGISTER._9Q; continue;
case INSTR_LDQRIPR10: REGISTER.IPQ = REGISTER._10Q; continue;
case INSTR_LDQRIPR11: REGISTER.IPQ = REGISTER._11Q; continue;
case INSTR_LDQRIPR12: REGISTER.IPQ = REGISTER._12Q; continue;
case INSTR_LDQRIPRIP: REGISTER.IPQ = REGISTER.IPQ; continue;
case INSTR_LDQRIPRSP: REGISTER.IPQ = REGISTER.SPQ; continue;
case INSTR_LDQRIPRBP: REGISTER.IPQ = REGISTER.BPQ; continue;
case INSTR_LDQRSPI: REGISTER.SPQ = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQRSPRA: REGISTER.SPQ = REGISTER.AQ; continue;
case INSTR_LDQRSPRB: REGISTER.SPQ = REGISTER.BQ; continue;
case INSTR_LDQRSPRC: REGISTER.SPQ = REGISTER.CQ; continue;
case INSTR_LDQRSPRD: REGISTER.SPQ = REGISTER.DQ; continue;
case INSTR_LDQRSPR0: REGISTER.SPQ = REGISTER._0Q; continue;
case INSTR_LDQRSPR1: REGISTER.SPQ = REGISTER._1Q; continue;
case INSTR_LDQRSPR2: REGISTER.SPQ = REGISTER._2Q; continue;
case INSTR_LDQRSPR3: REGISTER.SPQ = REGISTER._3Q; continue;
case INSTR_LDQRSPR4: REGISTER.SPQ = REGISTER._4Q; continue;
case INSTR_LDQRSPR5: REGISTER.SPQ = REGISTER._5Q; continue;
case INSTR_LDQRSPR6: REGISTER.SPQ = REGISTER._6Q; continue;
case INSTR_LDQRSPR7: REGISTER.SPQ = REGISTER._7Q; continue;
case INSTR_LDQRSPR8: REGISTER.SPQ = REGISTER._8Q; continue;
case INSTR_LDQRSPR9: REGISTER.SPQ = REGISTER._9Q; continue;
case INSTR_LDQRSPR10: REGISTER.SPQ = REGISTER._10Q; continue;
case INSTR_LDQRSPR11: REGISTER.SPQ = REGISTER._11Q; continue;
case INSTR_LDQRSPR12: REGISTER.SPQ = REGISTER._12Q; continue;
case INSTR_LDQRSPRIP: REGISTER.SPQ = REGISTER.IPQ; continue;
case INSTR_LDQRSPRSP: REGISTER.SPQ = REGISTER.SPQ; continue;
case INSTR_LDQRSPRBP: REGISTER.SPQ = REGISTER.BPQ; continue;
case INSTR_LDQRBPI: REGISTER.BPQ = *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LDQRBPRA: REGISTER.BPQ = REGISTER.AQ; continue;
case INSTR_LDQRBPRB: REGISTER.BPQ = REGISTER.BQ; continue;
case INSTR_LDQRBPRC: REGISTER.BPQ = REGISTER.CQ; continue;
case INSTR_LDQRBPRD: REGISTER.BPQ = REGISTER.DQ; continue;
case INSTR_LDQRBPR0: REGISTER.BPQ = REGISTER._0Q; continue;
case INSTR_LDQRBPR1: REGISTER.BPQ = REGISTER._1Q; continue;
case INSTR_LDQRBPR2: REGISTER.BPQ = REGISTER._2Q; continue;
case INSTR_LDQRBPR3: REGISTER.BPQ = REGISTER._3Q; continue;
case INSTR_LDQRBPR4: REGISTER.BPQ = REGISTER._4Q; continue;
case INSTR_LDQRBPR5: REGISTER.BPQ = REGISTER._5Q; continue;
case INSTR_LDQRBPR6: REGISTER.BPQ = REGISTER._6Q; continue;
case INSTR_LDQRBPR7: REGISTER.BPQ = REGISTER._7Q; continue;
case INSTR_LDQRBPR8: REGISTER.BPQ = REGISTER._8Q; continue;
case INSTR_LDQRBPR9: REGISTER.BPQ = REGISTER._9Q; continue;
case INSTR_LDQRBPR10: REGISTER.BPQ = REGISTER._10Q; continue;
case INSTR_LDQRBPR11: REGISTER.BPQ = REGISTER._11Q; continue;
case INSTR_LDQRBPR12: REGISTER.BPQ = REGISTER._12Q; continue;
case INSTR_LDQRBPRIP: REGISTER.BPQ = REGISTER.IPQ; continue;
case INSTR_LDQRBPRSP: REGISTER.BPQ = REGISTER.SPQ; continue;
case INSTR_LDQRBPRBP: REGISTER.BPQ = REGISTER.BPQ; continue;
case INSTR_LDQRAAI: REGISTER.AQ = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQRAARA: REGISTER.AQ = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQRAARB: REGISTER.AQ = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQRAARC: REGISTER.AQ = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQRAARD: REGISTER.AQ = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQRAAR0: REGISTER.AQ = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQRAAR1: REGISTER.AQ = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQRAAR2: REGISTER.AQ = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQRAAR3: REGISTER.AQ = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQRAAR4: REGISTER.AQ = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQRAAR5: REGISTER.AQ = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQRAAR6: REGISTER.AQ = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQRAAR7: REGISTER.AQ = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQRAAR8: REGISTER.AQ = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQRAAR9: REGISTER.AQ = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQRAAR10: REGISTER.AQ = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQRAAR11: REGISTER.AQ = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQRAAR12: REGISTER.AQ = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQRAARIP: REGISTER.AQ = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQRAARSP: REGISTER.AQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQRAARBP: REGISTER.AQ = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQRBAI: REGISTER.BQ = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQRBARA: REGISTER.BQ = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQRBARB: REGISTER.BQ = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQRBARC: REGISTER.BQ = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQRBARD: REGISTER.BQ = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQRBAR0: REGISTER.BQ = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQRBAR1: REGISTER.BQ = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQRBAR2: REGISTER.BQ = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQRBAR3: REGISTER.BQ = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQRBAR4: REGISTER.BQ = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQRBAR5: REGISTER.BQ = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQRBAR6: REGISTER.BQ = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQRBAR7: REGISTER.BQ = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQRBAR8: REGISTER.BQ = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQRBAR9: REGISTER.BQ = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQRBAR10: REGISTER.BQ = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQRBAR11: REGISTER.BQ = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQRBAR12: REGISTER.BQ = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQRBARIP: REGISTER.BQ = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQRBARSP: REGISTER.BQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQRBARBP: REGISTER.BQ = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQRCAI: REGISTER.CQ = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQRCARA: REGISTER.CQ = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQRCARB: REGISTER.CQ = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQRCARC: REGISTER.CQ = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQRCARD: REGISTER.CQ = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQRCAR0: REGISTER.CQ = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQRCAR1: REGISTER.CQ = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQRCAR2: REGISTER.CQ = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQRCAR3: REGISTER.CQ = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQRCAR4: REGISTER.CQ = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQRCAR5: REGISTER.CQ = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQRCAR6: REGISTER.CQ = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQRCAR7: REGISTER.CQ = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQRCAR8: REGISTER.CQ = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQRCAR9: REGISTER.CQ = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQRCAR10: REGISTER.CQ = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQRCAR11: REGISTER.CQ = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQRCAR12: REGISTER.CQ = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQRCARIP: REGISTER.CQ = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQRCARSP: REGISTER.CQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQRCARBP: REGISTER.CQ = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQRDAI: REGISTER.DQ = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQRDARA: REGISTER.DQ = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQRDARB: REGISTER.DQ = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQRDARC: REGISTER.DQ = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQRDARD: REGISTER.DQ = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQRDAR0: REGISTER.DQ = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQRDAR1: REGISTER.DQ = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQRDAR2: REGISTER.DQ = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQRDAR3: REGISTER.DQ = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQRDAR4: REGISTER.DQ = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQRDAR5: REGISTER.DQ = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQRDAR6: REGISTER.DQ = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQRDAR7: REGISTER.DQ = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQRDAR8: REGISTER.DQ = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQRDAR9: REGISTER.DQ = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQRDAR10: REGISTER.DQ = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQRDAR11: REGISTER.DQ = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQRDAR12: REGISTER.DQ = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQRDARIP: REGISTER.DQ = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQRDARSP: REGISTER.DQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQRDARBP: REGISTER.DQ = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR0AI: REGISTER._0Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR0ARA: REGISTER._0Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR0ARB: REGISTER._0Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR0ARC: REGISTER._0Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR0ARD: REGISTER._0Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR0AR0: REGISTER._0Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR0AR1: REGISTER._0Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR0AR2: REGISTER._0Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR0AR3: REGISTER._0Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR0AR4: REGISTER._0Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR0AR5: REGISTER._0Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR0AR6: REGISTER._0Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR0AR7: REGISTER._0Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR0AR8: REGISTER._0Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR0AR9: REGISTER._0Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR0AR10: REGISTER._0Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR0AR11: REGISTER._0Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR0AR12: REGISTER._0Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR0ARIP: REGISTER._0Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR0ARSP: REGISTER._0Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR0ARBP: REGISTER._0Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR1AI: REGISTER._1Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR1ARA: REGISTER._1Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR1ARB: REGISTER._1Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR1ARC: REGISTER._1Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR1ARD: REGISTER._1Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR1AR0: REGISTER._1Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR1AR1: REGISTER._1Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR1AR2: REGISTER._1Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR1AR3: REGISTER._1Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR1AR4: REGISTER._1Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR1AR5: REGISTER._1Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR1AR6: REGISTER._1Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR1AR7: REGISTER._1Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR1AR8: REGISTER._1Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR1AR9: REGISTER._1Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR1AR10: REGISTER._1Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR1AR11: REGISTER._1Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR1AR12: REGISTER._1Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR1ARIP: REGISTER._1Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR1ARSP: REGISTER._1Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR1ARBP: REGISTER._1Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR2AI: REGISTER._2Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR2ARA: REGISTER._2Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR2ARB: REGISTER._2Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR2ARC: REGISTER._2Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR2ARD: REGISTER._2Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR2AR0: REGISTER._2Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR2AR1: REGISTER._2Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR2AR2: REGISTER._2Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR2AR3: REGISTER._2Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR2AR4: REGISTER._2Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR2AR5: REGISTER._2Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR2AR6: REGISTER._2Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR2AR7: REGISTER._2Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR2AR8: REGISTER._2Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR2AR9: REGISTER._2Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR2AR10: REGISTER._2Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR2AR11: REGISTER._2Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR2AR12: REGISTER._2Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR2ARIP: REGISTER._2Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR2ARSP: REGISTER._2Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR2ARBP: REGISTER._2Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR3AI: REGISTER._3Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR3ARA: REGISTER._3Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR3ARB: REGISTER._3Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR3ARC: REGISTER._3Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR3ARD: REGISTER._3Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR3AR0: REGISTER._3Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR3AR1: REGISTER._3Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR3AR2: REGISTER._3Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR3AR3: REGISTER._3Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR3AR4: REGISTER._3Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR3AR5: REGISTER._3Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR3AR6: REGISTER._3Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR3AR7: REGISTER._3Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR3AR8: REGISTER._3Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR3AR9: REGISTER._3Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR3AR10: REGISTER._3Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR3AR11: REGISTER._3Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR3AR12: REGISTER._3Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR3ARIP: REGISTER._3Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR3ARSP: REGISTER._3Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR3ARBP: REGISTER._3Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR4AI: REGISTER._4Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR4ARA: REGISTER._4Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR4ARB: REGISTER._4Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR4ARC: REGISTER._4Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR4ARD: REGISTER._4Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR4AR0: REGISTER._4Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR4AR1: REGISTER._4Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR4AR2: REGISTER._4Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR4AR3: REGISTER._4Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR4AR4: REGISTER._4Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR4AR5: REGISTER._4Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR4AR6: REGISTER._4Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR4AR7: REGISTER._4Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR4AR8: REGISTER._4Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR4AR9: REGISTER._4Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR4AR10: REGISTER._4Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR4AR11: REGISTER._4Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR4AR12: REGISTER._4Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR4ARIP: REGISTER._4Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR4ARSP: REGISTER._4Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR4ARBP: REGISTER._4Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR5AI: REGISTER._5Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR5ARA: REGISTER._5Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR5ARB: REGISTER._5Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR5ARC: REGISTER._5Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR5ARD: REGISTER._5Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR5AR0: REGISTER._5Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR5AR1: REGISTER._5Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR5AR2: REGISTER._5Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR5AR3: REGISTER._5Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR5AR4: REGISTER._5Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR5AR5: REGISTER._5Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR5AR6: REGISTER._5Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR5AR7: REGISTER._5Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR5AR8: REGISTER._5Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR5AR9: REGISTER._5Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR5AR10: REGISTER._5Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR5AR11: REGISTER._5Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR5AR12: REGISTER._5Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR5ARIP: REGISTER._5Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR5ARSP: REGISTER._5Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR5ARBP: REGISTER._5Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR6AI: REGISTER._6Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR6ARA: REGISTER._6Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR6ARB: REGISTER._6Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR6ARC: REGISTER._6Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR6ARD: REGISTER._6Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR6AR0: REGISTER._6Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR6AR1: REGISTER._6Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR6AR2: REGISTER._6Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR6AR3: REGISTER._6Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR6AR4: REGISTER._6Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR6AR5: REGISTER._6Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR6AR6: REGISTER._6Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR6AR7: REGISTER._6Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR6AR8: REGISTER._6Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR6AR9: REGISTER._6Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR6AR10: REGISTER._6Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR6AR11: REGISTER._6Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR6AR12: REGISTER._6Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR6ARIP: REGISTER._6Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR6ARSP: REGISTER._6Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR6ARBP: REGISTER._6Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR7AI: REGISTER._7Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR7ARA: REGISTER._7Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR7ARB: REGISTER._7Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR7ARC: REGISTER._7Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR7ARD: REGISTER._7Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR7AR0: REGISTER._7Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR7AR1: REGISTER._7Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR7AR2: REGISTER._7Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR7AR3: REGISTER._7Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR7AR4: REGISTER._7Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR7AR5: REGISTER._7Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR7AR6: REGISTER._7Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR7AR7: REGISTER._7Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR7AR8: REGISTER._7Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR7AR9: REGISTER._7Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR7AR10: REGISTER._7Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR7AR11: REGISTER._7Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR7AR12: REGISTER._7Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR7ARIP: REGISTER._7Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR7ARSP: REGISTER._7Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR7ARBP: REGISTER._7Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR8AI: REGISTER._8Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR8ARA: REGISTER._8Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR8ARB: REGISTER._8Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR8ARC: REGISTER._8Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR8ARD: REGISTER._8Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR8AR0: REGISTER._8Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR8AR1: REGISTER._8Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR8AR2: REGISTER._8Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR8AR3: REGISTER._8Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR8AR4: REGISTER._8Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR8AR5: REGISTER._8Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR8AR6: REGISTER._8Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR8AR7: REGISTER._8Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR8AR8: REGISTER._8Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR8AR9: REGISTER._8Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR8AR10: REGISTER._8Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR8AR11: REGISTER._8Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR8AR12: REGISTER._8Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR8ARIP: REGISTER._8Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR8ARSP: REGISTER._8Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR8ARBP: REGISTER._8Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR9AI: REGISTER._9Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR9ARA: REGISTER._9Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR9ARB: REGISTER._9Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR9ARC: REGISTER._9Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR9ARD: REGISTER._9Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR9AR0: REGISTER._9Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR9AR1: REGISTER._9Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR9AR2: REGISTER._9Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR9AR3: REGISTER._9Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR9AR4: REGISTER._9Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR9AR5: REGISTER._9Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR9AR6: REGISTER._9Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR9AR7: REGISTER._9Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR9AR8: REGISTER._9Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR9AR9: REGISTER._9Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR9AR10: REGISTER._9Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR9AR11: REGISTER._9Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR9AR12: REGISTER._9Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR9ARIP: REGISTER._9Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR9ARSP: REGISTER._9Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR9ARBP: REGISTER._9Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR10AI: REGISTER._10Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR10ARA: REGISTER._10Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR10ARB: REGISTER._10Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR10ARC: REGISTER._10Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR10ARD: REGISTER._10Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR10AR0: REGISTER._10Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR10AR1: REGISTER._10Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR10AR2: REGISTER._10Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR10AR3: REGISTER._10Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR10AR4: REGISTER._10Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR10AR5: REGISTER._10Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR10AR6: REGISTER._10Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR10AR7: REGISTER._10Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR10AR8: REGISTER._10Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR10AR9: REGISTER._10Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR10AR10: REGISTER._10Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR10AR11: REGISTER._10Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR10AR12: REGISTER._10Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR10ARIP: REGISTER._10Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR10ARSP: REGISTER._10Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR10ARBP: REGISTER._10Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR11AI: REGISTER._11Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR11ARA: REGISTER._11Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR11ARB: REGISTER._11Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR11ARC: REGISTER._11Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR11ARD: REGISTER._11Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR11AR0: REGISTER._11Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR11AR1: REGISTER._11Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR11AR2: REGISTER._11Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR11AR3: REGISTER._11Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR11AR4: REGISTER._11Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR11AR5: REGISTER._11Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR11AR6: REGISTER._11Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR11AR7: REGISTER._11Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR11AR8: REGISTER._11Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR11AR9: REGISTER._11Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR11AR10: REGISTER._11Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR11AR11: REGISTER._11Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR11AR12: REGISTER._11Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR11ARIP: REGISTER._11Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR11ARSP: REGISTER._11Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR11ARBP: REGISTER._11Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQR12AI: REGISTER._12Q = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQR12ARA: REGISTER._12Q = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQR12ARB: REGISTER._12Q = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQR12ARC: REGISTER._12Q = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQR12ARD: REGISTER._12Q = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQR12AR0: REGISTER._12Q = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQR12AR1: REGISTER._12Q = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQR12AR2: REGISTER._12Q = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQR12AR3: REGISTER._12Q = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQR12AR4: REGISTER._12Q = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQR12AR5: REGISTER._12Q = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQR12AR6: REGISTER._12Q = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQR12AR7: REGISTER._12Q = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQR12AR8: REGISTER._12Q = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQR12AR9: REGISTER._12Q = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQR12AR10: REGISTER._12Q = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQR12AR11: REGISTER._12Q = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQR12AR12: REGISTER._12Q = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQR12ARIP: REGISTER._12Q = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQR12ARSP: REGISTER._12Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQR12ARBP: REGISTER._12Q = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQRIPAI: REGISTER.IPQ = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQRIPARA: REGISTER.IPQ = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQRIPARB: REGISTER.IPQ = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQRIPARC: REGISTER.IPQ = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQRIPARD: REGISTER.IPQ = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQRIPAR0: REGISTER.IPQ = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQRIPAR1: REGISTER.IPQ = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQRIPAR2: REGISTER.IPQ = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQRIPAR3: REGISTER.IPQ = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQRIPAR4: REGISTER.IPQ = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQRIPAR5: REGISTER.IPQ = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQRIPAR6: REGISTER.IPQ = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQRIPAR7: REGISTER.IPQ = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQRIPAR8: REGISTER.IPQ = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQRIPAR9: REGISTER.IPQ = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQRIPAR10: REGISTER.IPQ = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQRIPAR11: REGISTER.IPQ = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQRIPAR12: REGISTER.IPQ = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQRIPARIP: REGISTER.IPQ = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQRIPARSP: REGISTER.IPQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQRIPARBP: REGISTER.IPQ = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQRSPAI: REGISTER.SPQ = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQRSPARA: REGISTER.SPQ = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQRSPARB: REGISTER.SPQ = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQRSPARC: REGISTER.SPQ = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQRSPARD: REGISTER.SPQ = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQRSPAR0: REGISTER.SPQ = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQRSPAR1: REGISTER.SPQ = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQRSPAR2: REGISTER.SPQ = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQRSPAR3: REGISTER.SPQ = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQRSPAR4: REGISTER.SPQ = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQRSPAR5: REGISTER.SPQ = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQRSPAR6: REGISTER.SPQ = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQRSPAR7: REGISTER.SPQ = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQRSPAR8: REGISTER.SPQ = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQRSPAR9: REGISTER.SPQ = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQRSPAR10: REGISTER.SPQ = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQRSPAR11: REGISTER.SPQ = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQRSPAR12: REGISTER.SPQ = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQRSPARIP: REGISTER.SPQ = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQRSPARSP: REGISTER.SPQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQRSPARBP: REGISTER.SPQ = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDQRBPAI: REGISTER.BPQ = *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDQRBPARA: REGISTER.BPQ = *(int*) (RAM + REGISTER.A); continue;
case INSTR_LDQRBPARB: REGISTER.BPQ = *(int*) (RAM + REGISTER.B); continue;
case INSTR_LDQRBPARC: REGISTER.BPQ = *(int*) (RAM + REGISTER.C); continue;
case INSTR_LDQRBPARD: REGISTER.BPQ = *(int*) (RAM + REGISTER.D); continue;
case INSTR_LDQRBPAR0: REGISTER.BPQ = *(int*) (RAM + REGISTER._0); continue;
case INSTR_LDQRBPAR1: REGISTER.BPQ = *(int*) (RAM + REGISTER._1); continue;
case INSTR_LDQRBPAR2: REGISTER.BPQ = *(int*) (RAM + REGISTER._2); continue;
case INSTR_LDQRBPAR3: REGISTER.BPQ = *(int*) (RAM + REGISTER._3); continue;
case INSTR_LDQRBPAR4: REGISTER.BPQ = *(int*) (RAM + REGISTER._4); continue;
case INSTR_LDQRBPAR5: REGISTER.BPQ = *(int*) (RAM + REGISTER._5); continue;
case INSTR_LDQRBPAR6: REGISTER.BPQ = *(int*) (RAM + REGISTER._6); continue;
case INSTR_LDQRBPAR7: REGISTER.BPQ = *(int*) (RAM + REGISTER._7); continue;
case INSTR_LDQRBPAR8: REGISTER.BPQ = *(int*) (RAM + REGISTER._8); continue;
case INSTR_LDQRBPAR9: REGISTER.BPQ = *(int*) (RAM + REGISTER._9); continue;
case INSTR_LDQRBPAR10: REGISTER.BPQ = *(int*) (RAM + REGISTER._10); continue;
case INSTR_LDQRBPAR11: REGISTER.BPQ = *(int*) (RAM + REGISTER._11); continue;
case INSTR_LDQRBPAR12: REGISTER.BPQ = *(int*) (RAM + REGISTER._12); continue;
case INSTR_LDQRBPARIP: REGISTER.BPQ = *(int*) (RAM + REGISTER.IP); continue;
case INSTR_LDQRBPARSP: REGISTER.BPQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_LDQRBPARBP: REGISTER.BPQ = *(int*) (RAM + REGISTER.BP); continue;
case INSTR_LDWRAI: REGISTER.AW = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWRARA: REGISTER.AW = REGISTER.AW; continue;
case INSTR_LDWRARB: REGISTER.AW = REGISTER.BW; continue;
case INSTR_LDWRARC: REGISTER.AW = REGISTER.CW; continue;
case INSTR_LDWRARD: REGISTER.AW = REGISTER.DW; continue;
case INSTR_LDWRAR0: REGISTER.AW = REGISTER._0W; continue;
case INSTR_LDWRAR1: REGISTER.AW = REGISTER._1W; continue;
case INSTR_LDWRAR2: REGISTER.AW = REGISTER._2W; continue;
case INSTR_LDWRAR3: REGISTER.AW = REGISTER._3W; continue;
case INSTR_LDWRAR4: REGISTER.AW = REGISTER._4W; continue;
case INSTR_LDWRAR5: REGISTER.AW = REGISTER._5W; continue;
case INSTR_LDWRAR6: REGISTER.AW = REGISTER._6W; continue;
case INSTR_LDWRAR7: REGISTER.AW = REGISTER._7W; continue;
case INSTR_LDWRAR8: REGISTER.AW = REGISTER._8W; continue;
case INSTR_LDWRAR9: REGISTER.AW = REGISTER._9W; continue;
case INSTR_LDWRAR10: REGISTER.AW = REGISTER._10W; continue;
case INSTR_LDWRAR11: REGISTER.AW = REGISTER._11W; continue;
case INSTR_LDWRAR12: REGISTER.AW = REGISTER._12W; continue;
case INSTR_LDWRARIP: REGISTER.AW = REGISTER.IPW; continue;
case INSTR_LDWRARSP: REGISTER.AW = REGISTER.SPW; continue;
case INSTR_LDWRARBP: REGISTER.AW = REGISTER.BPW; continue;
case INSTR_LDWRBI: REGISTER.BW = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWRBRA: REGISTER.BW = REGISTER.AW; continue;
case INSTR_LDWRBRB: REGISTER.BW = REGISTER.BW; continue;
case INSTR_LDWRBRC: REGISTER.BW = REGISTER.CW; continue;
case INSTR_LDWRBRD: REGISTER.BW = REGISTER.DW; continue;
case INSTR_LDWRBR0: REGISTER.BW = REGISTER._0W; continue;
case INSTR_LDWRBR1: REGISTER.BW = REGISTER._1W; continue;
case INSTR_LDWRBR2: REGISTER.BW = REGISTER._2W; continue;
case INSTR_LDWRBR3: REGISTER.BW = REGISTER._3W; continue;
case INSTR_LDWRBR4: REGISTER.BW = REGISTER._4W; continue;
case INSTR_LDWRBR5: REGISTER.BW = REGISTER._5W; continue;
case INSTR_LDWRBR6: REGISTER.BW = REGISTER._6W; continue;
case INSTR_LDWRBR7: REGISTER.BW = REGISTER._7W; continue;
case INSTR_LDWRBR8: REGISTER.BW = REGISTER._8W; continue;
case INSTR_LDWRBR9: REGISTER.BW = REGISTER._9W; continue;
case INSTR_LDWRBR10: REGISTER.BW = REGISTER._10W; continue;
case INSTR_LDWRBR11: REGISTER.BW = REGISTER._11W; continue;
case INSTR_LDWRBR12: REGISTER.BW = REGISTER._12W; continue;
case INSTR_LDWRBRIP: REGISTER.BW = REGISTER.IPW; continue;
case INSTR_LDWRBRSP: REGISTER.BW = REGISTER.SPW; continue;
case INSTR_LDWRBRBP: REGISTER.BW = REGISTER.BPW; continue;
case INSTR_LDWRCI: REGISTER.CW = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWRCRA: REGISTER.CW = REGISTER.AW; continue;
case INSTR_LDWRCRB: REGISTER.CW = REGISTER.BW; continue;
case INSTR_LDWRCRC: REGISTER.CW = REGISTER.CW; continue;
case INSTR_LDWRCRD: REGISTER.CW = REGISTER.DW; continue;
case INSTR_LDWRCR0: REGISTER.CW = REGISTER._0W; continue;
case INSTR_LDWRCR1: REGISTER.CW = REGISTER._1W; continue;
case INSTR_LDWRCR2: REGISTER.CW = REGISTER._2W; continue;
case INSTR_LDWRCR3: REGISTER.CW = REGISTER._3W; continue;
case INSTR_LDWRCR4: REGISTER.CW = REGISTER._4W; continue;
case INSTR_LDWRCR5: REGISTER.CW = REGISTER._5W; continue;
case INSTR_LDWRCR6: REGISTER.CW = REGISTER._6W; continue;
case INSTR_LDWRCR7: REGISTER.CW = REGISTER._7W; continue;
case INSTR_LDWRCR8: REGISTER.CW = REGISTER._8W; continue;
case INSTR_LDWRCR9: REGISTER.CW = REGISTER._9W; continue;
case INSTR_LDWRCR10: REGISTER.CW = REGISTER._10W; continue;
case INSTR_LDWRCR11: REGISTER.CW = REGISTER._11W; continue;
case INSTR_LDWRCR12: REGISTER.CW = REGISTER._12W; continue;
case INSTR_LDWRCRIP: REGISTER.CW = REGISTER.IPW; continue;
case INSTR_LDWRCRSP: REGISTER.CW = REGISTER.SPW; continue;
case INSTR_LDWRCRBP: REGISTER.CW = REGISTER.BPW; continue;
case INSTR_LDWRDI: REGISTER.DW = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWRDRA: REGISTER.DW = REGISTER.AW; continue;
case INSTR_LDWRDRB: REGISTER.DW = REGISTER.BW; continue;
case INSTR_LDWRDRC: REGISTER.DW = REGISTER.CW; continue;
case INSTR_LDWRDRD: REGISTER.DW = REGISTER.DW; continue;
case INSTR_LDWRDR0: REGISTER.DW = REGISTER._0W; continue;
case INSTR_LDWRDR1: REGISTER.DW = REGISTER._1W; continue;
case INSTR_LDWRDR2: REGISTER.DW = REGISTER._2W; continue;
case INSTR_LDWRDR3: REGISTER.DW = REGISTER._3W; continue;
case INSTR_LDWRDR4: REGISTER.DW = REGISTER._4W; continue;
case INSTR_LDWRDR5: REGISTER.DW = REGISTER._5W; continue;
case INSTR_LDWRDR6: REGISTER.DW = REGISTER._6W; continue;
case INSTR_LDWRDR7: REGISTER.DW = REGISTER._7W; continue;
case INSTR_LDWRDR8: REGISTER.DW = REGISTER._8W; continue;
case INSTR_LDWRDR9: REGISTER.DW = REGISTER._9W; continue;
case INSTR_LDWRDR10: REGISTER.DW = REGISTER._10W; continue;
case INSTR_LDWRDR11: REGISTER.DW = REGISTER._11W; continue;
case INSTR_LDWRDR12: REGISTER.DW = REGISTER._12W; continue;
case INSTR_LDWRDRIP: REGISTER.DW = REGISTER.IPW; continue;
case INSTR_LDWRDRSP: REGISTER.DW = REGISTER.SPW; continue;
case INSTR_LDWRDRBP: REGISTER.DW = REGISTER.BPW; continue;
case INSTR_LDWR0I: REGISTER._0W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR0RA: REGISTER._0W = REGISTER.AW; continue;
case INSTR_LDWR0RB: REGISTER._0W = REGISTER.BW; continue;
case INSTR_LDWR0RC: REGISTER._0W = REGISTER.CW; continue;
case INSTR_LDWR0RD: REGISTER._0W = REGISTER.DW; continue;
case INSTR_LDWR0R0: REGISTER._0W = REGISTER._0W; continue;
case INSTR_LDWR0R1: REGISTER._0W = REGISTER._1W; continue;
case INSTR_LDWR0R2: REGISTER._0W = REGISTER._2W; continue;
case INSTR_LDWR0R3: REGISTER._0W = REGISTER._3W; continue;
case INSTR_LDWR0R4: REGISTER._0W = REGISTER._4W; continue;
case INSTR_LDWR0R5: REGISTER._0W = REGISTER._5W; continue;
case INSTR_LDWR0R6: REGISTER._0W = REGISTER._6W; continue;
case INSTR_LDWR0R7: REGISTER._0W = REGISTER._7W; continue;
case INSTR_LDWR0R8: REGISTER._0W = REGISTER._8W; continue;
case INSTR_LDWR0R9: REGISTER._0W = REGISTER._9W; continue;
case INSTR_LDWR0R10: REGISTER._0W = REGISTER._10W; continue;
case INSTR_LDWR0R11: REGISTER._0W = REGISTER._11W; continue;
case INSTR_LDWR0R12: REGISTER._0W = REGISTER._12W; continue;
case INSTR_LDWR0RIP: REGISTER._0W = REGISTER.IPW; continue;
case INSTR_LDWR0RSP: REGISTER._0W = REGISTER.SPW; continue;
case INSTR_LDWR0RBP: REGISTER._0W = REGISTER.BPW; continue;
case INSTR_LDWR1I: REGISTER._1W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR1RA: REGISTER._1W = REGISTER.AW; continue;
case INSTR_LDWR1RB: REGISTER._1W = REGISTER.BW; continue;
case INSTR_LDWR1RC: REGISTER._1W = REGISTER.CW; continue;
case INSTR_LDWR1RD: REGISTER._1W = REGISTER.DW; continue;
case INSTR_LDWR1R0: REGISTER._1W = REGISTER._0W; continue;
case INSTR_LDWR1R1: REGISTER._1W = REGISTER._1W; continue;
case INSTR_LDWR1R2: REGISTER._1W = REGISTER._2W; continue;
case INSTR_LDWR1R3: REGISTER._1W = REGISTER._3W; continue;
case INSTR_LDWR1R4: REGISTER._1W = REGISTER._4W; continue;
case INSTR_LDWR1R5: REGISTER._1W = REGISTER._5W; continue;
case INSTR_LDWR1R6: REGISTER._1W = REGISTER._6W; continue;
case INSTR_LDWR1R7: REGISTER._1W = REGISTER._7W; continue;
case INSTR_LDWR1R8: REGISTER._1W = REGISTER._8W; continue;
case INSTR_LDWR1R9: REGISTER._1W = REGISTER._9W; continue;
case INSTR_LDWR1R10: REGISTER._1W = REGISTER._10W; continue;
case INSTR_LDWR1R11: REGISTER._1W = REGISTER._11W; continue;
case INSTR_LDWR1R12: REGISTER._1W = REGISTER._12W; continue;
case INSTR_LDWR1RIP: REGISTER._1W = REGISTER.IPW; continue;
case INSTR_LDWR1RSP: REGISTER._1W = REGISTER.SPW; continue;
case INSTR_LDWR1RBP: REGISTER._1W = REGISTER.BPW; continue;
case INSTR_LDWR2I: REGISTER._2W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR2RA: REGISTER._2W = REGISTER.AW; continue;
case INSTR_LDWR2RB: REGISTER._2W = REGISTER.BW; continue;
case INSTR_LDWR2RC: REGISTER._2W = REGISTER.CW; continue;
case INSTR_LDWR2RD: REGISTER._2W = REGISTER.DW; continue;
case INSTR_LDWR2R0: REGISTER._2W = REGISTER._0W; continue;
case INSTR_LDWR2R1: REGISTER._2W = REGISTER._1W; continue;
case INSTR_LDWR2R2: REGISTER._2W = REGISTER._2W; continue;
case INSTR_LDWR2R3: REGISTER._2W = REGISTER._3W; continue;
case INSTR_LDWR2R4: REGISTER._2W = REGISTER._4W; continue;
case INSTR_LDWR2R5: REGISTER._2W = REGISTER._5W; continue;
case INSTR_LDWR2R6: REGISTER._2W = REGISTER._6W; continue;
case INSTR_LDWR2R7: REGISTER._2W = REGISTER._7W; continue;
case INSTR_LDWR2R8: REGISTER._2W = REGISTER._8W; continue;
case INSTR_LDWR2R9: REGISTER._2W = REGISTER._9W; continue;
case INSTR_LDWR2R10: REGISTER._2W = REGISTER._10W; continue;
case INSTR_LDWR2R11: REGISTER._2W = REGISTER._11W; continue;
case INSTR_LDWR2R12: REGISTER._2W = REGISTER._12W; continue;
case INSTR_LDWR2RIP: REGISTER._2W = REGISTER.IPW; continue;
case INSTR_LDWR2RSP: REGISTER._2W = REGISTER.SPW; continue;
case INSTR_LDWR2RBP: REGISTER._2W = REGISTER.BPW; continue;
case INSTR_LDWR3I: REGISTER._3W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR3RA: REGISTER._3W = REGISTER.AW; continue;
case INSTR_LDWR3RB: REGISTER._3W = REGISTER.BW; continue;
case INSTR_LDWR3RC: REGISTER._3W = REGISTER.CW; continue;
case INSTR_LDWR3RD: REGISTER._3W = REGISTER.DW; continue;
case INSTR_LDWR3R0: REGISTER._3W = REGISTER._0W; continue;
case INSTR_LDWR3R1: REGISTER._3W = REGISTER._1W; continue;
case INSTR_LDWR3R2: REGISTER._3W = REGISTER._2W; continue;
case INSTR_LDWR3R3: REGISTER._3W = REGISTER._3W; continue;
case INSTR_LDWR3R4: REGISTER._3W = REGISTER._4W; continue;
case INSTR_LDWR3R5: REGISTER._3W = REGISTER._5W; continue;
case INSTR_LDWR3R6: REGISTER._3W = REGISTER._6W; continue;
case INSTR_LDWR3R7: REGISTER._3W = REGISTER._7W; continue;
case INSTR_LDWR3R8: REGISTER._3W = REGISTER._8W; continue;
case INSTR_LDWR3R9: REGISTER._3W = REGISTER._9W; continue;
case INSTR_LDWR3R10: REGISTER._3W = REGISTER._10W; continue;
case INSTR_LDWR3R11: REGISTER._3W = REGISTER._11W; continue;
case INSTR_LDWR3R12: REGISTER._3W = REGISTER._12W; continue;
case INSTR_LDWR3RIP: REGISTER._3W = REGISTER.IPW; continue;
case INSTR_LDWR3RSP: REGISTER._3W = REGISTER.SPW; continue;
case INSTR_LDWR3RBP: REGISTER._3W = REGISTER.BPW; continue;
case INSTR_LDWR4I: REGISTER._4W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR4RA: REGISTER._4W = REGISTER.AW; continue;
case INSTR_LDWR4RB: REGISTER._4W = REGISTER.BW; continue;
case INSTR_LDWR4RC: REGISTER._4W = REGISTER.CW; continue;
case INSTR_LDWR4RD: REGISTER._4W = REGISTER.DW; continue;
case INSTR_LDWR4R0: REGISTER._4W = REGISTER._0W; continue;
case INSTR_LDWR4R1: REGISTER._4W = REGISTER._1W; continue;
case INSTR_LDWR4R2: REGISTER._4W = REGISTER._2W; continue;
case INSTR_LDWR4R3: REGISTER._4W = REGISTER._3W; continue;
case INSTR_LDWR4R4: REGISTER._4W = REGISTER._4W; continue;
case INSTR_LDWR4R5: REGISTER._4W = REGISTER._5W; continue;
case INSTR_LDWR4R6: REGISTER._4W = REGISTER._6W; continue;
case INSTR_LDWR4R7: REGISTER._4W = REGISTER._7W; continue;
case INSTR_LDWR4R8: REGISTER._4W = REGISTER._8W; continue;
case INSTR_LDWR4R9: REGISTER._4W = REGISTER._9W; continue;
case INSTR_LDWR4R10: REGISTER._4W = REGISTER._10W; continue;
case INSTR_LDWR4R11: REGISTER._4W = REGISTER._11W; continue;
case INSTR_LDWR4R12: REGISTER._4W = REGISTER._12W; continue;
case INSTR_LDWR4RIP: REGISTER._4W = REGISTER.IPW; continue;
case INSTR_LDWR4RSP: REGISTER._4W = REGISTER.SPW; continue;
case INSTR_LDWR4RBP: REGISTER._4W = REGISTER.BPW; continue;
case INSTR_LDWR5I: REGISTER._5W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR5RA: REGISTER._5W = REGISTER.AW; continue;
case INSTR_LDWR5RB: REGISTER._5W = REGISTER.BW; continue;
case INSTR_LDWR5RC: REGISTER._5W = REGISTER.CW; continue;
case INSTR_LDWR5RD: REGISTER._5W = REGISTER.DW; continue;
case INSTR_LDWR5R0: REGISTER._5W = REGISTER._0W; continue;
case INSTR_LDWR5R1: REGISTER._5W = REGISTER._1W; continue;
case INSTR_LDWR5R2: REGISTER._5W = REGISTER._2W; continue;
case INSTR_LDWR5R3: REGISTER._5W = REGISTER._3W; continue;
case INSTR_LDWR5R4: REGISTER._5W = REGISTER._4W; continue;
case INSTR_LDWR5R5: REGISTER._5W = REGISTER._5W; continue;
case INSTR_LDWR5R6: REGISTER._5W = REGISTER._6W; continue;
case INSTR_LDWR5R7: REGISTER._5W = REGISTER._7W; continue;
case INSTR_LDWR5R8: REGISTER._5W = REGISTER._8W; continue;
case INSTR_LDWR5R9: REGISTER._5W = REGISTER._9W; continue;
case INSTR_LDWR5R10: REGISTER._5W = REGISTER._10W; continue;
case INSTR_LDWR5R11: REGISTER._5W = REGISTER._11W; continue;
case INSTR_LDWR5R12: REGISTER._5W = REGISTER._12W; continue;
case INSTR_LDWR5RIP: REGISTER._5W = REGISTER.IPW; continue;
case INSTR_LDWR5RSP: REGISTER._5W = REGISTER.SPW; continue;
case INSTR_LDWR5RBP: REGISTER._5W = REGISTER.BPW; continue;
case INSTR_LDWR6I: REGISTER._6W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR6RA: REGISTER._6W = REGISTER.AW; continue;
case INSTR_LDWR6RB: REGISTER._6W = REGISTER.BW; continue;
case INSTR_LDWR6RC: REGISTER._6W = REGISTER.CW; continue;
case INSTR_LDWR6RD: REGISTER._6W = REGISTER.DW; continue;
case INSTR_LDWR6R0: REGISTER._6W = REGISTER._0W; continue;
case INSTR_LDWR6R1: REGISTER._6W = REGISTER._1W; continue;
case INSTR_LDWR6R2: REGISTER._6W = REGISTER._2W; continue;
case INSTR_LDWR6R3: REGISTER._6W = REGISTER._3W; continue;
case INSTR_LDWR6R4: REGISTER._6W = REGISTER._4W; continue;
case INSTR_LDWR6R5: REGISTER._6W = REGISTER._5W; continue;
case INSTR_LDWR6R6: REGISTER._6W = REGISTER._6W; continue;
case INSTR_LDWR6R7: REGISTER._6W = REGISTER._7W; continue;
case INSTR_LDWR6R8: REGISTER._6W = REGISTER._8W; continue;
case INSTR_LDWR6R9: REGISTER._6W = REGISTER._9W; continue;
case INSTR_LDWR6R10: REGISTER._6W = REGISTER._10W; continue;
case INSTR_LDWR6R11: REGISTER._6W = REGISTER._11W; continue;
case INSTR_LDWR6R12: REGISTER._6W = REGISTER._12W; continue;
case INSTR_LDWR6RIP: REGISTER._6W = REGISTER.IPW; continue;
case INSTR_LDWR6RSP: REGISTER._6W = REGISTER.SPW; continue;
case INSTR_LDWR6RBP: REGISTER._6W = REGISTER.BPW; continue;
case INSTR_LDWR7I: REGISTER._7W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR7RA: REGISTER._7W = REGISTER.AW; continue;
case INSTR_LDWR7RB: REGISTER._7W = REGISTER.BW; continue;
case INSTR_LDWR7RC: REGISTER._7W = REGISTER.CW; continue;
case INSTR_LDWR7RD: REGISTER._7W = REGISTER.DW; continue;
case INSTR_LDWR7R0: REGISTER._7W = REGISTER._0W; continue;
case INSTR_LDWR7R1: REGISTER._7W = REGISTER._1W; continue;
case INSTR_LDWR7R2: REGISTER._7W = REGISTER._2W; continue;
case INSTR_LDWR7R3: REGISTER._7W = REGISTER._3W; continue;
case INSTR_LDWR7R4: REGISTER._7W = REGISTER._4W; continue;
case INSTR_LDWR7R5: REGISTER._7W = REGISTER._5W; continue;
case INSTR_LDWR7R6: REGISTER._7W = REGISTER._6W; continue;
case INSTR_LDWR7R7: REGISTER._7W = REGISTER._7W; continue;
case INSTR_LDWR7R8: REGISTER._7W = REGISTER._8W; continue;
case INSTR_LDWR7R9: REGISTER._7W = REGISTER._9W; continue;
case INSTR_LDWR7R10: REGISTER._7W = REGISTER._10W; continue;
case INSTR_LDWR7R11: REGISTER._7W = REGISTER._11W; continue;
case INSTR_LDWR7R12: REGISTER._7W = REGISTER._12W; continue;
case INSTR_LDWR7RIP: REGISTER._7W = REGISTER.IPW; continue;
case INSTR_LDWR7RSP: REGISTER._7W = REGISTER.SPW; continue;
case INSTR_LDWR7RBP: REGISTER._7W = REGISTER.BPW; continue;
case INSTR_LDWR8I: REGISTER._8W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR8RA: REGISTER._8W = REGISTER.AW; continue;
case INSTR_LDWR8RB: REGISTER._8W = REGISTER.BW; continue;
case INSTR_LDWR8RC: REGISTER._8W = REGISTER.CW; continue;
case INSTR_LDWR8RD: REGISTER._8W = REGISTER.DW; continue;
case INSTR_LDWR8R0: REGISTER._8W = REGISTER._0W; continue;
case INSTR_LDWR8R1: REGISTER._8W = REGISTER._1W; continue;
case INSTR_LDWR8R2: REGISTER._8W = REGISTER._2W; continue;
case INSTR_LDWR8R3: REGISTER._8W = REGISTER._3W; continue;
case INSTR_LDWR8R4: REGISTER._8W = REGISTER._4W; continue;
case INSTR_LDWR8R5: REGISTER._8W = REGISTER._5W; continue;
case INSTR_LDWR8R6: REGISTER._8W = REGISTER._6W; continue;
case INSTR_LDWR8R7: REGISTER._8W = REGISTER._7W; continue;
case INSTR_LDWR8R8: REGISTER._8W = REGISTER._8W; continue;
case INSTR_LDWR8R9: REGISTER._8W = REGISTER._9W; continue;
case INSTR_LDWR8R10: REGISTER._8W = REGISTER._10W; continue;
case INSTR_LDWR8R11: REGISTER._8W = REGISTER._11W; continue;
case INSTR_LDWR8R12: REGISTER._8W = REGISTER._12W; continue;
case INSTR_LDWR8RIP: REGISTER._8W = REGISTER.IPW; continue;
case INSTR_LDWR8RSP: REGISTER._8W = REGISTER.SPW; continue;
case INSTR_LDWR8RBP: REGISTER._8W = REGISTER.BPW; continue;
case INSTR_LDWR9I: REGISTER._9W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR9RA: REGISTER._9W = REGISTER.AW; continue;
case INSTR_LDWR9RB: REGISTER._9W = REGISTER.BW; continue;
case INSTR_LDWR9RC: REGISTER._9W = REGISTER.CW; continue;
case INSTR_LDWR9RD: REGISTER._9W = REGISTER.DW; continue;
case INSTR_LDWR9R0: REGISTER._9W = REGISTER._0W; continue;
case INSTR_LDWR9R1: REGISTER._9W = REGISTER._1W; continue;
case INSTR_LDWR9R2: REGISTER._9W = REGISTER._2W; continue;
case INSTR_LDWR9R3: REGISTER._9W = REGISTER._3W; continue;
case INSTR_LDWR9R4: REGISTER._9W = REGISTER._4W; continue;
case INSTR_LDWR9R5: REGISTER._9W = REGISTER._5W; continue;
case INSTR_LDWR9R6: REGISTER._9W = REGISTER._6W; continue;
case INSTR_LDWR9R7: REGISTER._9W = REGISTER._7W; continue;
case INSTR_LDWR9R8: REGISTER._9W = REGISTER._8W; continue;
case INSTR_LDWR9R9: REGISTER._9W = REGISTER._9W; continue;
case INSTR_LDWR9R10: REGISTER._9W = REGISTER._10W; continue;
case INSTR_LDWR9R11: REGISTER._9W = REGISTER._11W; continue;
case INSTR_LDWR9R12: REGISTER._9W = REGISTER._12W; continue;
case INSTR_LDWR9RIP: REGISTER._9W = REGISTER.IPW; continue;
case INSTR_LDWR9RSP: REGISTER._9W = REGISTER.SPW; continue;
case INSTR_LDWR9RBP: REGISTER._9W = REGISTER.BPW; continue;
case INSTR_LDWR10I: REGISTER._10W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR10RA: REGISTER._10W = REGISTER.AW; continue;
case INSTR_LDWR10RB: REGISTER._10W = REGISTER.BW; continue;
case INSTR_LDWR10RC: REGISTER._10W = REGISTER.CW; continue;
case INSTR_LDWR10RD: REGISTER._10W = REGISTER.DW; continue;
case INSTR_LDWR10R0: REGISTER._10W = REGISTER._0W; continue;
case INSTR_LDWR10R1: REGISTER._10W = REGISTER._1W; continue;
case INSTR_LDWR10R2: REGISTER._10W = REGISTER._2W; continue;
case INSTR_LDWR10R3: REGISTER._10W = REGISTER._3W; continue;
case INSTR_LDWR10R4: REGISTER._10W = REGISTER._4W; continue;
case INSTR_LDWR10R5: REGISTER._10W = REGISTER._5W; continue;
case INSTR_LDWR10R6: REGISTER._10W = REGISTER._6W; continue;
case INSTR_LDWR10R7: REGISTER._10W = REGISTER._7W; continue;
case INSTR_LDWR10R8: REGISTER._10W = REGISTER._8W; continue;
case INSTR_LDWR10R9: REGISTER._10W = REGISTER._9W; continue;
case INSTR_LDWR10R10: REGISTER._10W = REGISTER._10W; continue;
case INSTR_LDWR10R11: REGISTER._10W = REGISTER._11W; continue;
case INSTR_LDWR10R12: REGISTER._10W = REGISTER._12W; continue;
case INSTR_LDWR10RIP: REGISTER._10W = REGISTER.IPW; continue;
case INSTR_LDWR10RSP: REGISTER._10W = REGISTER.SPW; continue;
case INSTR_LDWR10RBP: REGISTER._10W = REGISTER.BPW; continue;
case INSTR_LDWR11I: REGISTER._11W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR11RA: REGISTER._11W = REGISTER.AW; continue;
case INSTR_LDWR11RB: REGISTER._11W = REGISTER.BW; continue;
case INSTR_LDWR11RC: REGISTER._11W = REGISTER.CW; continue;
case INSTR_LDWR11RD: REGISTER._11W = REGISTER.DW; continue;
case INSTR_LDWR11R0: REGISTER._11W = REGISTER._0W; continue;
case INSTR_LDWR11R1: REGISTER._11W = REGISTER._1W; continue;
case INSTR_LDWR11R2: REGISTER._11W = REGISTER._2W; continue;
case INSTR_LDWR11R3: REGISTER._11W = REGISTER._3W; continue;
case INSTR_LDWR11R4: REGISTER._11W = REGISTER._4W; continue;
case INSTR_LDWR11R5: REGISTER._11W = REGISTER._5W; continue;
case INSTR_LDWR11R6: REGISTER._11W = REGISTER._6W; continue;
case INSTR_LDWR11R7: REGISTER._11W = REGISTER._7W; continue;
case INSTR_LDWR11R8: REGISTER._11W = REGISTER._8W; continue;
case INSTR_LDWR11R9: REGISTER._11W = REGISTER._9W; continue;
case INSTR_LDWR11R10: REGISTER._11W = REGISTER._10W; continue;
case INSTR_LDWR11R11: REGISTER._11W = REGISTER._11W; continue;
case INSTR_LDWR11R12: REGISTER._11W = REGISTER._12W; continue;
case INSTR_LDWR11RIP: REGISTER._11W = REGISTER.IPW; continue;
case INSTR_LDWR11RSP: REGISTER._11W = REGISTER.SPW; continue;
case INSTR_LDWR11RBP: REGISTER._11W = REGISTER.BPW; continue;
case INSTR_LDWR12I: REGISTER._12W = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWR12RA: REGISTER._12W = REGISTER.AW; continue;
case INSTR_LDWR12RB: REGISTER._12W = REGISTER.BW; continue;
case INSTR_LDWR12RC: REGISTER._12W = REGISTER.CW; continue;
case INSTR_LDWR12RD: REGISTER._12W = REGISTER.DW; continue;
case INSTR_LDWR12R0: REGISTER._12W = REGISTER._0W; continue;
case INSTR_LDWR12R1: REGISTER._12W = REGISTER._1W; continue;
case INSTR_LDWR12R2: REGISTER._12W = REGISTER._2W; continue;
case INSTR_LDWR12R3: REGISTER._12W = REGISTER._3W; continue;
case INSTR_LDWR12R4: REGISTER._12W = REGISTER._4W; continue;
case INSTR_LDWR12R5: REGISTER._12W = REGISTER._5W; continue;
case INSTR_LDWR12R6: REGISTER._12W = REGISTER._6W; continue;
case INSTR_LDWR12R7: REGISTER._12W = REGISTER._7W; continue;
case INSTR_LDWR12R8: REGISTER._12W = REGISTER._8W; continue;
case INSTR_LDWR12R9: REGISTER._12W = REGISTER._9W; continue;
case INSTR_LDWR12R10: REGISTER._12W = REGISTER._10W; continue;
case INSTR_LDWR12R11: REGISTER._12W = REGISTER._11W; continue;
case INSTR_LDWR12R12: REGISTER._12W = REGISTER._12W; continue;
case INSTR_LDWR12RIP: REGISTER._12W = REGISTER.IPW; continue;
case INSTR_LDWR12RSP: REGISTER._12W = REGISTER.SPW; continue;
case INSTR_LDWR12RBP: REGISTER._12W = REGISTER.BPW; continue;
case INSTR_LDWRIPI: REGISTER.IPW = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWRIPRA: REGISTER.IPW = REGISTER.AW; continue;
case INSTR_LDWRIPRB: REGISTER.IPW = REGISTER.BW; continue;
case INSTR_LDWRIPRC: REGISTER.IPW = REGISTER.CW; continue;
case INSTR_LDWRIPRD: REGISTER.IPW = REGISTER.DW; continue;
case INSTR_LDWRIPR0: REGISTER.IPW = REGISTER._0W; continue;
case INSTR_LDWRIPR1: REGISTER.IPW = REGISTER._1W; continue;
case INSTR_LDWRIPR2: REGISTER.IPW = REGISTER._2W; continue;
case INSTR_LDWRIPR3: REGISTER.IPW = REGISTER._3W; continue;
case INSTR_LDWRIPR4: REGISTER.IPW = REGISTER._4W; continue;
case INSTR_LDWRIPR5: REGISTER.IPW = REGISTER._5W; continue;
case INSTR_LDWRIPR6: REGISTER.IPW = REGISTER._6W; continue;
case INSTR_LDWRIPR7: REGISTER.IPW = REGISTER._7W; continue;
case INSTR_LDWRIPR8: REGISTER.IPW = REGISTER._8W; continue;
case INSTR_LDWRIPR9: REGISTER.IPW = REGISTER._9W; continue;
case INSTR_LDWRIPR10: REGISTER.IPW = REGISTER._10W; continue;
case INSTR_LDWRIPR11: REGISTER.IPW = REGISTER._11W; continue;
case INSTR_LDWRIPR12: REGISTER.IPW = REGISTER._12W; continue;
case INSTR_LDWRIPRIP: REGISTER.IPW = REGISTER.IPW; continue;
case INSTR_LDWRIPRSP: REGISTER.IPW = REGISTER.SPW; continue;
case INSTR_LDWRIPRBP: REGISTER.IPW = REGISTER.BPW; continue;
case INSTR_LDWRSPI: REGISTER.SPW = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWRSPRA: REGISTER.SPW = REGISTER.AW; continue;
case INSTR_LDWRSPRB: REGISTER.SPW = REGISTER.BW; continue;
case INSTR_LDWRSPRC: REGISTER.SPW = REGISTER.CW; continue;
case INSTR_LDWRSPRD: REGISTER.SPW = REGISTER.DW; continue;
case INSTR_LDWRSPR0: REGISTER.SPW = REGISTER._0W; continue;
case INSTR_LDWRSPR1: REGISTER.SPW = REGISTER._1W; continue;
case INSTR_LDWRSPR2: REGISTER.SPW = REGISTER._2W; continue;
case INSTR_LDWRSPR3: REGISTER.SPW = REGISTER._3W; continue;
case INSTR_LDWRSPR4: REGISTER.SPW = REGISTER._4W; continue;
case INSTR_LDWRSPR5: REGISTER.SPW = REGISTER._5W; continue;
case INSTR_LDWRSPR6: REGISTER.SPW = REGISTER._6W; continue;
case INSTR_LDWRSPR7: REGISTER.SPW = REGISTER._7W; continue;
case INSTR_LDWRSPR8: REGISTER.SPW = REGISTER._8W; continue;
case INSTR_LDWRSPR9: REGISTER.SPW = REGISTER._9W; continue;
case INSTR_LDWRSPR10: REGISTER.SPW = REGISTER._10W; continue;
case INSTR_LDWRSPR11: REGISTER.SPW = REGISTER._11W; continue;
case INSTR_LDWRSPR12: REGISTER.SPW = REGISTER._12W; continue;
case INSTR_LDWRSPRIP: REGISTER.SPW = REGISTER.IPW; continue;
case INSTR_LDWRSPRSP: REGISTER.SPW = REGISTER.SPW; continue;
case INSTR_LDWRSPRBP: REGISTER.SPW = REGISTER.BPW; continue;
case INSTR_LDWRBPI: REGISTER.BPW = *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LDWRBPRA: REGISTER.BPW = REGISTER.AW; continue;
case INSTR_LDWRBPRB: REGISTER.BPW = REGISTER.BW; continue;
case INSTR_LDWRBPRC: REGISTER.BPW = REGISTER.CW; continue;
case INSTR_LDWRBPRD: REGISTER.BPW = REGISTER.DW; continue;
case INSTR_LDWRBPR0: REGISTER.BPW = REGISTER._0W; continue;
case INSTR_LDWRBPR1: REGISTER.BPW = REGISTER._1W; continue;
case INSTR_LDWRBPR2: REGISTER.BPW = REGISTER._2W; continue;
case INSTR_LDWRBPR3: REGISTER.BPW = REGISTER._3W; continue;
case INSTR_LDWRBPR4: REGISTER.BPW = REGISTER._4W; continue;
case INSTR_LDWRBPR5: REGISTER.BPW = REGISTER._5W; continue;
case INSTR_LDWRBPR6: REGISTER.BPW = REGISTER._6W; continue;
case INSTR_LDWRBPR7: REGISTER.BPW = REGISTER._7W; continue;
case INSTR_LDWRBPR8: REGISTER.BPW = REGISTER._8W; continue;
case INSTR_LDWRBPR9: REGISTER.BPW = REGISTER._9W; continue;
case INSTR_LDWRBPR10: REGISTER.BPW = REGISTER._10W; continue;
case INSTR_LDWRBPR11: REGISTER.BPW = REGISTER._11W; continue;
case INSTR_LDWRBPR12: REGISTER.BPW = REGISTER._12W; continue;
case INSTR_LDWRBPRIP: REGISTER.BPW = REGISTER.IPW; continue;
case INSTR_LDWRBPRSP: REGISTER.BPW = REGISTER.SPW; continue;
case INSTR_LDWRBPRBP: REGISTER.BPW = REGISTER.BPW; continue;
case INSTR_LDWRAAI: REGISTER.AW = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWRAARA: REGISTER.AW = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWRAARB: REGISTER.AW = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWRAARC: REGISTER.AW = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWRAARD: REGISTER.AW = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWRAAR0: REGISTER.AW = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWRAAR1: REGISTER.AW = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWRAAR2: REGISTER.AW = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWRAAR3: REGISTER.AW = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWRAAR4: REGISTER.AW = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWRAAR5: REGISTER.AW = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWRAAR6: REGISTER.AW = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWRAAR7: REGISTER.AW = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWRAAR8: REGISTER.AW = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWRAAR9: REGISTER.AW = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWRAAR10: REGISTER.AW = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWRAAR11: REGISTER.AW = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWRAAR12: REGISTER.AW = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWRAARIP: REGISTER.AW = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWRAARSP: REGISTER.AW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWRAARBP: REGISTER.AW = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWRBAI: REGISTER.BW = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWRBARA: REGISTER.BW = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWRBARB: REGISTER.BW = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWRBARC: REGISTER.BW = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWRBARD: REGISTER.BW = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWRBAR0: REGISTER.BW = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWRBAR1: REGISTER.BW = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWRBAR2: REGISTER.BW = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWRBAR3: REGISTER.BW = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWRBAR4: REGISTER.BW = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWRBAR5: REGISTER.BW = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWRBAR6: REGISTER.BW = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWRBAR7: REGISTER.BW = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWRBAR8: REGISTER.BW = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWRBAR9: REGISTER.BW = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWRBAR10: REGISTER.BW = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWRBAR11: REGISTER.BW = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWRBAR12: REGISTER.BW = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWRBARIP: REGISTER.BW = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWRBARSP: REGISTER.BW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWRBARBP: REGISTER.BW = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWRCAI: REGISTER.CW = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWRCARA: REGISTER.CW = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWRCARB: REGISTER.CW = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWRCARC: REGISTER.CW = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWRCARD: REGISTER.CW = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWRCAR0: REGISTER.CW = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWRCAR1: REGISTER.CW = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWRCAR2: REGISTER.CW = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWRCAR3: REGISTER.CW = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWRCAR4: REGISTER.CW = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWRCAR5: REGISTER.CW = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWRCAR6: REGISTER.CW = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWRCAR7: REGISTER.CW = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWRCAR8: REGISTER.CW = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWRCAR9: REGISTER.CW = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWRCAR10: REGISTER.CW = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWRCAR11: REGISTER.CW = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWRCAR12: REGISTER.CW = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWRCARIP: REGISTER.CW = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWRCARSP: REGISTER.CW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWRCARBP: REGISTER.CW = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWRDAI: REGISTER.DW = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWRDARA: REGISTER.DW = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWRDARB: REGISTER.DW = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWRDARC: REGISTER.DW = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWRDARD: REGISTER.DW = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWRDAR0: REGISTER.DW = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWRDAR1: REGISTER.DW = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWRDAR2: REGISTER.DW = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWRDAR3: REGISTER.DW = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWRDAR4: REGISTER.DW = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWRDAR5: REGISTER.DW = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWRDAR6: REGISTER.DW = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWRDAR7: REGISTER.DW = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWRDAR8: REGISTER.DW = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWRDAR9: REGISTER.DW = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWRDAR10: REGISTER.DW = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWRDAR11: REGISTER.DW = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWRDAR12: REGISTER.DW = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWRDARIP: REGISTER.DW = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWRDARSP: REGISTER.DW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWRDARBP: REGISTER.DW = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR0AI: REGISTER._0W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR0ARA: REGISTER._0W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR0ARB: REGISTER._0W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR0ARC: REGISTER._0W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR0ARD: REGISTER._0W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR0AR0: REGISTER._0W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR0AR1: REGISTER._0W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR0AR2: REGISTER._0W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR0AR3: REGISTER._0W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR0AR4: REGISTER._0W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR0AR5: REGISTER._0W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR0AR6: REGISTER._0W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR0AR7: REGISTER._0W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR0AR8: REGISTER._0W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR0AR9: REGISTER._0W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR0AR10: REGISTER._0W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR0AR11: REGISTER._0W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR0AR12: REGISTER._0W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR0ARIP: REGISTER._0W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR0ARSP: REGISTER._0W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR0ARBP: REGISTER._0W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR1AI: REGISTER._1W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR1ARA: REGISTER._1W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR1ARB: REGISTER._1W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR1ARC: REGISTER._1W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR1ARD: REGISTER._1W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR1AR0: REGISTER._1W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR1AR1: REGISTER._1W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR1AR2: REGISTER._1W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR1AR3: REGISTER._1W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR1AR4: REGISTER._1W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR1AR5: REGISTER._1W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR1AR6: REGISTER._1W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR1AR7: REGISTER._1W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR1AR8: REGISTER._1W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR1AR9: REGISTER._1W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR1AR10: REGISTER._1W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR1AR11: REGISTER._1W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR1AR12: REGISTER._1W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR1ARIP: REGISTER._1W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR1ARSP: REGISTER._1W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR1ARBP: REGISTER._1W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR2AI: REGISTER._2W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR2ARA: REGISTER._2W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR2ARB: REGISTER._2W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR2ARC: REGISTER._2W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR2ARD: REGISTER._2W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR2AR0: REGISTER._2W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR2AR1: REGISTER._2W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR2AR2: REGISTER._2W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR2AR3: REGISTER._2W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR2AR4: REGISTER._2W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR2AR5: REGISTER._2W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR2AR6: REGISTER._2W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR2AR7: REGISTER._2W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR2AR8: REGISTER._2W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR2AR9: REGISTER._2W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR2AR10: REGISTER._2W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR2AR11: REGISTER._2W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR2AR12: REGISTER._2W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR2ARIP: REGISTER._2W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR2ARSP: REGISTER._2W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR2ARBP: REGISTER._2W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR3AI: REGISTER._3W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR3ARA: REGISTER._3W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR3ARB: REGISTER._3W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR3ARC: REGISTER._3W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR3ARD: REGISTER._3W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR3AR0: REGISTER._3W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR3AR1: REGISTER._3W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR3AR2: REGISTER._3W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR3AR3: REGISTER._3W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR3AR4: REGISTER._3W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR3AR5: REGISTER._3W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR3AR6: REGISTER._3W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR3AR7: REGISTER._3W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR3AR8: REGISTER._3W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR3AR9: REGISTER._3W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR3AR10: REGISTER._3W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR3AR11: REGISTER._3W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR3AR12: REGISTER._3W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR3ARIP: REGISTER._3W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR3ARSP: REGISTER._3W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR3ARBP: REGISTER._3W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR4AI: REGISTER._4W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR4ARA: REGISTER._4W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR4ARB: REGISTER._4W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR4ARC: REGISTER._4W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR4ARD: REGISTER._4W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR4AR0: REGISTER._4W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR4AR1: REGISTER._4W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR4AR2: REGISTER._4W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR4AR3: REGISTER._4W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR4AR4: REGISTER._4W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR4AR5: REGISTER._4W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR4AR6: REGISTER._4W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR4AR7: REGISTER._4W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR4AR8: REGISTER._4W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR4AR9: REGISTER._4W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR4AR10: REGISTER._4W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR4AR11: REGISTER._4W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR4AR12: REGISTER._4W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR4ARIP: REGISTER._4W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR4ARSP: REGISTER._4W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR4ARBP: REGISTER._4W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR5AI: REGISTER._5W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR5ARA: REGISTER._5W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR5ARB: REGISTER._5W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR5ARC: REGISTER._5W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR5ARD: REGISTER._5W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR5AR0: REGISTER._5W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR5AR1: REGISTER._5W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR5AR2: REGISTER._5W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR5AR3: REGISTER._5W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR5AR4: REGISTER._5W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR5AR5: REGISTER._5W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR5AR6: REGISTER._5W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR5AR7: REGISTER._5W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR5AR8: REGISTER._5W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR5AR9: REGISTER._5W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR5AR10: REGISTER._5W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR5AR11: REGISTER._5W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR5AR12: REGISTER._5W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR5ARIP: REGISTER._5W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR5ARSP: REGISTER._5W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR5ARBP: REGISTER._5W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR6AI: REGISTER._6W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR6ARA: REGISTER._6W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR6ARB: REGISTER._6W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR6ARC: REGISTER._6W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR6ARD: REGISTER._6W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR6AR0: REGISTER._6W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR6AR1: REGISTER._6W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR6AR2: REGISTER._6W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR6AR3: REGISTER._6W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR6AR4: REGISTER._6W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR6AR5: REGISTER._6W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR6AR6: REGISTER._6W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR6AR7: REGISTER._6W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR6AR8: REGISTER._6W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR6AR9: REGISTER._6W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR6AR10: REGISTER._6W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR6AR11: REGISTER._6W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR6AR12: REGISTER._6W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR6ARIP: REGISTER._6W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR6ARSP: REGISTER._6W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR6ARBP: REGISTER._6W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR7AI: REGISTER._7W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR7ARA: REGISTER._7W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR7ARB: REGISTER._7W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR7ARC: REGISTER._7W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR7ARD: REGISTER._7W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR7AR0: REGISTER._7W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR7AR1: REGISTER._7W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR7AR2: REGISTER._7W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR7AR3: REGISTER._7W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR7AR4: REGISTER._7W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR7AR5: REGISTER._7W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR7AR6: REGISTER._7W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR7AR7: REGISTER._7W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR7AR8: REGISTER._7W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR7AR9: REGISTER._7W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR7AR10: REGISTER._7W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR7AR11: REGISTER._7W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR7AR12: REGISTER._7W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR7ARIP: REGISTER._7W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR7ARSP: REGISTER._7W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR7ARBP: REGISTER._7W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR8AI: REGISTER._8W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR8ARA: REGISTER._8W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR8ARB: REGISTER._8W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR8ARC: REGISTER._8W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR8ARD: REGISTER._8W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR8AR0: REGISTER._8W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR8AR1: REGISTER._8W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR8AR2: REGISTER._8W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR8AR3: REGISTER._8W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR8AR4: REGISTER._8W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR8AR5: REGISTER._8W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR8AR6: REGISTER._8W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR8AR7: REGISTER._8W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR8AR8: REGISTER._8W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR8AR9: REGISTER._8W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR8AR10: REGISTER._8W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR8AR11: REGISTER._8W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR8AR12: REGISTER._8W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR8ARIP: REGISTER._8W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR8ARSP: REGISTER._8W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR8ARBP: REGISTER._8W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR9AI: REGISTER._9W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR9ARA: REGISTER._9W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR9ARB: REGISTER._9W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR9ARC: REGISTER._9W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR9ARD: REGISTER._9W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR9AR0: REGISTER._9W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR9AR1: REGISTER._9W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR9AR2: REGISTER._9W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR9AR3: REGISTER._9W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR9AR4: REGISTER._9W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR9AR5: REGISTER._9W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR9AR6: REGISTER._9W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR9AR7: REGISTER._9W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR9AR8: REGISTER._9W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR9AR9: REGISTER._9W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR9AR10: REGISTER._9W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR9AR11: REGISTER._9W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR9AR12: REGISTER._9W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR9ARIP: REGISTER._9W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR9ARSP: REGISTER._9W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR9ARBP: REGISTER._9W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR10AI: REGISTER._10W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR10ARA: REGISTER._10W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR10ARB: REGISTER._10W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR10ARC: REGISTER._10W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR10ARD: REGISTER._10W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR10AR0: REGISTER._10W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR10AR1: REGISTER._10W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR10AR2: REGISTER._10W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR10AR3: REGISTER._10W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR10AR4: REGISTER._10W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR10AR5: REGISTER._10W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR10AR6: REGISTER._10W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR10AR7: REGISTER._10W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR10AR8: REGISTER._10W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR10AR9: REGISTER._10W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR10AR10: REGISTER._10W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR10AR11: REGISTER._10W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR10AR12: REGISTER._10W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR10ARIP: REGISTER._10W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR10ARSP: REGISTER._10W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR10ARBP: REGISTER._10W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR11AI: REGISTER._11W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR11ARA: REGISTER._11W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR11ARB: REGISTER._11W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR11ARC: REGISTER._11W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR11ARD: REGISTER._11W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR11AR0: REGISTER._11W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR11AR1: REGISTER._11W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR11AR2: REGISTER._11W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR11AR3: REGISTER._11W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR11AR4: REGISTER._11W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR11AR5: REGISTER._11W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR11AR6: REGISTER._11W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR11AR7: REGISTER._11W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR11AR8: REGISTER._11W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR11AR9: REGISTER._11W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR11AR10: REGISTER._11W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR11AR11: REGISTER._11W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR11AR12: REGISTER._11W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR11ARIP: REGISTER._11W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR11ARSP: REGISTER._11W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR11ARBP: REGISTER._11W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWR12AI: REGISTER._12W = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWR12ARA: REGISTER._12W = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWR12ARB: REGISTER._12W = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWR12ARC: REGISTER._12W = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWR12ARD: REGISTER._12W = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWR12AR0: REGISTER._12W = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWR12AR1: REGISTER._12W = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWR12AR2: REGISTER._12W = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWR12AR3: REGISTER._12W = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWR12AR4: REGISTER._12W = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWR12AR5: REGISTER._12W = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWR12AR6: REGISTER._12W = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWR12AR7: REGISTER._12W = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWR12AR8: REGISTER._12W = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWR12AR9: REGISTER._12W = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWR12AR10: REGISTER._12W = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWR12AR11: REGISTER._12W = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWR12AR12: REGISTER._12W = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWR12ARIP: REGISTER._12W = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWR12ARSP: REGISTER._12W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWR12ARBP: REGISTER._12W = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWRIPAI: REGISTER.IPW = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWRIPARA: REGISTER.IPW = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWRIPARB: REGISTER.IPW = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWRIPARC: REGISTER.IPW = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWRIPARD: REGISTER.IPW = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWRIPAR0: REGISTER.IPW = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWRIPAR1: REGISTER.IPW = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWRIPAR2: REGISTER.IPW = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWRIPAR3: REGISTER.IPW = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWRIPAR4: REGISTER.IPW = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWRIPAR5: REGISTER.IPW = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWRIPAR6: REGISTER.IPW = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWRIPAR7: REGISTER.IPW = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWRIPAR8: REGISTER.IPW = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWRIPAR9: REGISTER.IPW = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWRIPAR10: REGISTER.IPW = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWRIPAR11: REGISTER.IPW = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWRIPAR12: REGISTER.IPW = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWRIPARIP: REGISTER.IPW = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWRIPARSP: REGISTER.IPW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWRIPARBP: REGISTER.IPW = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWRSPAI: REGISTER.SPW = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWRSPARA: REGISTER.SPW = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWRSPARB: REGISTER.SPW = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWRSPARC: REGISTER.SPW = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWRSPARD: REGISTER.SPW = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWRSPAR0: REGISTER.SPW = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWRSPAR1: REGISTER.SPW = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWRSPAR2: REGISTER.SPW = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWRSPAR3: REGISTER.SPW = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWRSPAR4: REGISTER.SPW = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWRSPAR5: REGISTER.SPW = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWRSPAR6: REGISTER.SPW = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWRSPAR7: REGISTER.SPW = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWRSPAR8: REGISTER.SPW = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWRSPAR9: REGISTER.SPW = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWRSPAR10: REGISTER.SPW = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWRSPAR11: REGISTER.SPW = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWRSPAR12: REGISTER.SPW = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWRSPARIP: REGISTER.SPW = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWRSPARSP: REGISTER.SPW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWRSPARBP: REGISTER.SPW = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDWRBPAI: REGISTER.BPW = *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDWRBPARA: REGISTER.BPW = *(short*) (RAM + REGISTER.A); continue;
case INSTR_LDWRBPARB: REGISTER.BPW = *(short*) (RAM + REGISTER.B); continue;
case INSTR_LDWRBPARC: REGISTER.BPW = *(short*) (RAM + REGISTER.C); continue;
case INSTR_LDWRBPARD: REGISTER.BPW = *(short*) (RAM + REGISTER.D); continue;
case INSTR_LDWRBPAR0: REGISTER.BPW = *(short*) (RAM + REGISTER._0); continue;
case INSTR_LDWRBPAR1: REGISTER.BPW = *(short*) (RAM + REGISTER._1); continue;
case INSTR_LDWRBPAR2: REGISTER.BPW = *(short*) (RAM + REGISTER._2); continue;
case INSTR_LDWRBPAR3: REGISTER.BPW = *(short*) (RAM + REGISTER._3); continue;
case INSTR_LDWRBPAR4: REGISTER.BPW = *(short*) (RAM + REGISTER._4); continue;
case INSTR_LDWRBPAR5: REGISTER.BPW = *(short*) (RAM + REGISTER._5); continue;
case INSTR_LDWRBPAR6: REGISTER.BPW = *(short*) (RAM + REGISTER._6); continue;
case INSTR_LDWRBPAR7: REGISTER.BPW = *(short*) (RAM + REGISTER._7); continue;
case INSTR_LDWRBPAR8: REGISTER.BPW = *(short*) (RAM + REGISTER._8); continue;
case INSTR_LDWRBPAR9: REGISTER.BPW = *(short*) (RAM + REGISTER._9); continue;
case INSTR_LDWRBPAR10: REGISTER.BPW = *(short*) (RAM + REGISTER._10); continue;
case INSTR_LDWRBPAR11: REGISTER.BPW = *(short*) (RAM + REGISTER._11); continue;
case INSTR_LDWRBPAR12: REGISTER.BPW = *(short*) (RAM + REGISTER._12); continue;
case INSTR_LDWRBPARIP: REGISTER.BPW = *(short*) (RAM + REGISTER.IP); continue;
case INSTR_LDWRBPARSP: REGISTER.BPW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_LDWRBPARBP: REGISTER.BPW = *(short*) (RAM + REGISTER.BP); continue;
case INSTR_LDBRAI: REGISTER.AB = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBRARA: REGISTER.AB = REGISTER.AB; continue;
case INSTR_LDBRARB: REGISTER.AB = REGISTER.BB; continue;
case INSTR_LDBRARC: REGISTER.AB = REGISTER.CB; continue;
case INSTR_LDBRARD: REGISTER.AB = REGISTER.DB; continue;
case INSTR_LDBRAR0: REGISTER.AB = REGISTER._0B; continue;
case INSTR_LDBRAR1: REGISTER.AB = REGISTER._1B; continue;
case INSTR_LDBRAR2: REGISTER.AB = REGISTER._2B; continue;
case INSTR_LDBRAR3: REGISTER.AB = REGISTER._3B; continue;
case INSTR_LDBRAR4: REGISTER.AB = REGISTER._4B; continue;
case INSTR_LDBRAR5: REGISTER.AB = REGISTER._5B; continue;
case INSTR_LDBRAR6: REGISTER.AB = REGISTER._6B; continue;
case INSTR_LDBRAR7: REGISTER.AB = REGISTER._7B; continue;
case INSTR_LDBRAR8: REGISTER.AB = REGISTER._8B; continue;
case INSTR_LDBRAR9: REGISTER.AB = REGISTER._9B; continue;
case INSTR_LDBRAR10: REGISTER.AB = REGISTER._10B; continue;
case INSTR_LDBRAR11: REGISTER.AB = REGISTER._11B; continue;
case INSTR_LDBRAR12: REGISTER.AB = REGISTER._12B; continue;
case INSTR_LDBRARIP: REGISTER.AB = REGISTER.IPB; continue;
case INSTR_LDBRARSP: REGISTER.AB = REGISTER.SPB; continue;
case INSTR_LDBRARBP: REGISTER.AB = REGISTER.BPB; continue;
case INSTR_LDBRBI: REGISTER.BB = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBRBRA: REGISTER.BB = REGISTER.AB; continue;
case INSTR_LDBRBRB: REGISTER.BB = REGISTER.BB; continue;
case INSTR_LDBRBRC: REGISTER.BB = REGISTER.CB; continue;
case INSTR_LDBRBRD: REGISTER.BB = REGISTER.DB; continue;
case INSTR_LDBRBR0: REGISTER.BB = REGISTER._0B; continue;
case INSTR_LDBRBR1: REGISTER.BB = REGISTER._1B; continue;
case INSTR_LDBRBR2: REGISTER.BB = REGISTER._2B; continue;
case INSTR_LDBRBR3: REGISTER.BB = REGISTER._3B; continue;
case INSTR_LDBRBR4: REGISTER.BB = REGISTER._4B; continue;
case INSTR_LDBRBR5: REGISTER.BB = REGISTER._5B; continue;
case INSTR_LDBRBR6: REGISTER.BB = REGISTER._6B; continue;
case INSTR_LDBRBR7: REGISTER.BB = REGISTER._7B; continue;
case INSTR_LDBRBR8: REGISTER.BB = REGISTER._8B; continue;
case INSTR_LDBRBR9: REGISTER.BB = REGISTER._9B; continue;
case INSTR_LDBRBR10: REGISTER.BB = REGISTER._10B; continue;
case INSTR_LDBRBR11: REGISTER.BB = REGISTER._11B; continue;
case INSTR_LDBRBR12: REGISTER.BB = REGISTER._12B; continue;
case INSTR_LDBRBRIP: REGISTER.BB = REGISTER.IPB; continue;
case INSTR_LDBRBRSP: REGISTER.BB = REGISTER.SPB; continue;
case INSTR_LDBRBRBP: REGISTER.BB = REGISTER.BPB; continue;
case INSTR_LDBRCI: REGISTER.CB = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBRCRA: REGISTER.CB = REGISTER.AB; continue;
case INSTR_LDBRCRB: REGISTER.CB = REGISTER.BB; continue;
case INSTR_LDBRCRC: REGISTER.CB = REGISTER.CB; continue;
case INSTR_LDBRCRD: REGISTER.CB = REGISTER.DB; continue;
case INSTR_LDBRCR0: REGISTER.CB = REGISTER._0B; continue;
case INSTR_LDBRCR1: REGISTER.CB = REGISTER._1B; continue;
case INSTR_LDBRCR2: REGISTER.CB = REGISTER._2B; continue;
case INSTR_LDBRCR3: REGISTER.CB = REGISTER._3B; continue;
case INSTR_LDBRCR4: REGISTER.CB = REGISTER._4B; continue;
case INSTR_LDBRCR5: REGISTER.CB = REGISTER._5B; continue;
case INSTR_LDBRCR6: REGISTER.CB = REGISTER._6B; continue;
case INSTR_LDBRCR7: REGISTER.CB = REGISTER._7B; continue;
case INSTR_LDBRCR8: REGISTER.CB = REGISTER._8B; continue;
case INSTR_LDBRCR9: REGISTER.CB = REGISTER._9B; continue;
case INSTR_LDBRCR10: REGISTER.CB = REGISTER._10B; continue;
case INSTR_LDBRCR11: REGISTER.CB = REGISTER._11B; continue;
case INSTR_LDBRCR12: REGISTER.CB = REGISTER._12B; continue;
case INSTR_LDBRCRIP: REGISTER.CB = REGISTER.IPB; continue;
case INSTR_LDBRCRSP: REGISTER.CB = REGISTER.SPB; continue;
case INSTR_LDBRCRBP: REGISTER.CB = REGISTER.BPB; continue;
case INSTR_LDBRDI: REGISTER.DB = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBRDRA: REGISTER.DB = REGISTER.AB; continue;
case INSTR_LDBRDRB: REGISTER.DB = REGISTER.BB; continue;
case INSTR_LDBRDRC: REGISTER.DB = REGISTER.CB; continue;
case INSTR_LDBRDRD: REGISTER.DB = REGISTER.DB; continue;
case INSTR_LDBRDR0: REGISTER.DB = REGISTER._0B; continue;
case INSTR_LDBRDR1: REGISTER.DB = REGISTER._1B; continue;
case INSTR_LDBRDR2: REGISTER.DB = REGISTER._2B; continue;
case INSTR_LDBRDR3: REGISTER.DB = REGISTER._3B; continue;
case INSTR_LDBRDR4: REGISTER.DB = REGISTER._4B; continue;
case INSTR_LDBRDR5: REGISTER.DB = REGISTER._5B; continue;
case INSTR_LDBRDR6: REGISTER.DB = REGISTER._6B; continue;
case INSTR_LDBRDR7: REGISTER.DB = REGISTER._7B; continue;
case INSTR_LDBRDR8: REGISTER.DB = REGISTER._8B; continue;
case INSTR_LDBRDR9: REGISTER.DB = REGISTER._9B; continue;
case INSTR_LDBRDR10: REGISTER.DB = REGISTER._10B; continue;
case INSTR_LDBRDR11: REGISTER.DB = REGISTER._11B; continue;
case INSTR_LDBRDR12: REGISTER.DB = REGISTER._12B; continue;
case INSTR_LDBRDRIP: REGISTER.DB = REGISTER.IPB; continue;
case INSTR_LDBRDRSP: REGISTER.DB = REGISTER.SPB; continue;
case INSTR_LDBRDRBP: REGISTER.DB = REGISTER.BPB; continue;
case INSTR_LDBR0I: REGISTER._0B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR0RA: REGISTER._0B = REGISTER.AB; continue;
case INSTR_LDBR0RB: REGISTER._0B = REGISTER.BB; continue;
case INSTR_LDBR0RC: REGISTER._0B = REGISTER.CB; continue;
case INSTR_LDBR0RD: REGISTER._0B = REGISTER.DB; continue;
case INSTR_LDBR0R0: REGISTER._0B = REGISTER._0B; continue;
case INSTR_LDBR0R1: REGISTER._0B = REGISTER._1B; continue;
case INSTR_LDBR0R2: REGISTER._0B = REGISTER._2B; continue;
case INSTR_LDBR0R3: REGISTER._0B = REGISTER._3B; continue;
case INSTR_LDBR0R4: REGISTER._0B = REGISTER._4B; continue;
case INSTR_LDBR0R5: REGISTER._0B = REGISTER._5B; continue;
case INSTR_LDBR0R6: REGISTER._0B = REGISTER._6B; continue;
case INSTR_LDBR0R7: REGISTER._0B = REGISTER._7B; continue;
case INSTR_LDBR0R8: REGISTER._0B = REGISTER._8B; continue;
case INSTR_LDBR0R9: REGISTER._0B = REGISTER._9B; continue;
case INSTR_LDBR0R10: REGISTER._0B = REGISTER._10B; continue;
case INSTR_LDBR0R11: REGISTER._0B = REGISTER._11B; continue;
case INSTR_LDBR0R12: REGISTER._0B = REGISTER._12B; continue;
case INSTR_LDBR0RIP: REGISTER._0B = REGISTER.IPB; continue;
case INSTR_LDBR0RSP: REGISTER._0B = REGISTER.SPB; continue;
case INSTR_LDBR0RBP: REGISTER._0B = REGISTER.BPB; continue;
case INSTR_LDBR1I: REGISTER._1B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR1RA: REGISTER._1B = REGISTER.AB; continue;
case INSTR_LDBR1RB: REGISTER._1B = REGISTER.BB; continue;
case INSTR_LDBR1RC: REGISTER._1B = REGISTER.CB; continue;
case INSTR_LDBR1RD: REGISTER._1B = REGISTER.DB; continue;
case INSTR_LDBR1R0: REGISTER._1B = REGISTER._0B; continue;
case INSTR_LDBR1R1: REGISTER._1B = REGISTER._1B; continue;
case INSTR_LDBR1R2: REGISTER._1B = REGISTER._2B; continue;
case INSTR_LDBR1R3: REGISTER._1B = REGISTER._3B; continue;
case INSTR_LDBR1R4: REGISTER._1B = REGISTER._4B; continue;
case INSTR_LDBR1R5: REGISTER._1B = REGISTER._5B; continue;
case INSTR_LDBR1R6: REGISTER._1B = REGISTER._6B; continue;
case INSTR_LDBR1R7: REGISTER._1B = REGISTER._7B; continue;
case INSTR_LDBR1R8: REGISTER._1B = REGISTER._8B; continue;
case INSTR_LDBR1R9: REGISTER._1B = REGISTER._9B; continue;
case INSTR_LDBR1R10: REGISTER._1B = REGISTER._10B; continue;
case INSTR_LDBR1R11: REGISTER._1B = REGISTER._11B; continue;
case INSTR_LDBR1R12: REGISTER._1B = REGISTER._12B; continue;
case INSTR_LDBR1RIP: REGISTER._1B = REGISTER.IPB; continue;
case INSTR_LDBR1RSP: REGISTER._1B = REGISTER.SPB; continue;
case INSTR_LDBR1RBP: REGISTER._1B = REGISTER.BPB; continue;
case INSTR_LDBR2I: REGISTER._2B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR2RA: REGISTER._2B = REGISTER.AB; continue;
case INSTR_LDBR2RB: REGISTER._2B = REGISTER.BB; continue;
case INSTR_LDBR2RC: REGISTER._2B = REGISTER.CB; continue;
case INSTR_LDBR2RD: REGISTER._2B = REGISTER.DB; continue;
case INSTR_LDBR2R0: REGISTER._2B = REGISTER._0B; continue;
case INSTR_LDBR2R1: REGISTER._2B = REGISTER._1B; continue;
case INSTR_LDBR2R2: REGISTER._2B = REGISTER._2B; continue;
case INSTR_LDBR2R3: REGISTER._2B = REGISTER._3B; continue;
case INSTR_LDBR2R4: REGISTER._2B = REGISTER._4B; continue;
case INSTR_LDBR2R5: REGISTER._2B = REGISTER._5B; continue;
case INSTR_LDBR2R6: REGISTER._2B = REGISTER._6B; continue;
case INSTR_LDBR2R7: REGISTER._2B = REGISTER._7B; continue;
case INSTR_LDBR2R8: REGISTER._2B = REGISTER._8B; continue;
case INSTR_LDBR2R9: REGISTER._2B = REGISTER._9B; continue;
case INSTR_LDBR2R10: REGISTER._2B = REGISTER._10B; continue;
case INSTR_LDBR2R11: REGISTER._2B = REGISTER._11B; continue;
case INSTR_LDBR2R12: REGISTER._2B = REGISTER._12B; continue;
case INSTR_LDBR2RIP: REGISTER._2B = REGISTER.IPB; continue;
case INSTR_LDBR2RSP: REGISTER._2B = REGISTER.SPB; continue;
case INSTR_LDBR2RBP: REGISTER._2B = REGISTER.BPB; continue;
case INSTR_LDBR3I: REGISTER._3B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR3RA: REGISTER._3B = REGISTER.AB; continue;
case INSTR_LDBR3RB: REGISTER._3B = REGISTER.BB; continue;
case INSTR_LDBR3RC: REGISTER._3B = REGISTER.CB; continue;
case INSTR_LDBR3RD: REGISTER._3B = REGISTER.DB; continue;
case INSTR_LDBR3R0: REGISTER._3B = REGISTER._0B; continue;
case INSTR_LDBR3R1: REGISTER._3B = REGISTER._1B; continue;
case INSTR_LDBR3R2: REGISTER._3B = REGISTER._2B; continue;
case INSTR_LDBR3R3: REGISTER._3B = REGISTER._3B; continue;
case INSTR_LDBR3R4: REGISTER._3B = REGISTER._4B; continue;
case INSTR_LDBR3R5: REGISTER._3B = REGISTER._5B; continue;
case INSTR_LDBR3R6: REGISTER._3B = REGISTER._6B; continue;
case INSTR_LDBR3R7: REGISTER._3B = REGISTER._7B; continue;
case INSTR_LDBR3R8: REGISTER._3B = REGISTER._8B; continue;
case INSTR_LDBR3R9: REGISTER._3B = REGISTER._9B; continue;
case INSTR_LDBR3R10: REGISTER._3B = REGISTER._10B; continue;
case INSTR_LDBR3R11: REGISTER._3B = REGISTER._11B; continue;
case INSTR_LDBR3R12: REGISTER._3B = REGISTER._12B; continue;
case INSTR_LDBR3RIP: REGISTER._3B = REGISTER.IPB; continue;
case INSTR_LDBR3RSP: REGISTER._3B = REGISTER.SPB; continue;
case INSTR_LDBR3RBP: REGISTER._3B = REGISTER.BPB; continue;
case INSTR_LDBR4I: REGISTER._4B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR4RA: REGISTER._4B = REGISTER.AB; continue;
case INSTR_LDBR4RB: REGISTER._4B = REGISTER.BB; continue;
case INSTR_LDBR4RC: REGISTER._4B = REGISTER.CB; continue;
case INSTR_LDBR4RD: REGISTER._4B = REGISTER.DB; continue;
case INSTR_LDBR4R0: REGISTER._4B = REGISTER._0B; continue;
case INSTR_LDBR4R1: REGISTER._4B = REGISTER._1B; continue;
case INSTR_LDBR4R2: REGISTER._4B = REGISTER._2B; continue;
case INSTR_LDBR4R3: REGISTER._4B = REGISTER._3B; continue;
case INSTR_LDBR4R4: REGISTER._4B = REGISTER._4B; continue;
case INSTR_LDBR4R5: REGISTER._4B = REGISTER._5B; continue;
case INSTR_LDBR4R6: REGISTER._4B = REGISTER._6B; continue;
case INSTR_LDBR4R7: REGISTER._4B = REGISTER._7B; continue;
case INSTR_LDBR4R8: REGISTER._4B = REGISTER._8B; continue;
case INSTR_LDBR4R9: REGISTER._4B = REGISTER._9B; continue;
case INSTR_LDBR4R10: REGISTER._4B = REGISTER._10B; continue;
case INSTR_LDBR4R11: REGISTER._4B = REGISTER._11B; continue;
case INSTR_LDBR4R12: REGISTER._4B = REGISTER._12B; continue;
case INSTR_LDBR4RIP: REGISTER._4B = REGISTER.IPB; continue;
case INSTR_LDBR4RSP: REGISTER._4B = REGISTER.SPB; continue;
case INSTR_LDBR4RBP: REGISTER._4B = REGISTER.BPB; continue;
case INSTR_LDBR5I: REGISTER._5B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR5RA: REGISTER._5B = REGISTER.AB; continue;
case INSTR_LDBR5RB: REGISTER._5B = REGISTER.BB; continue;
case INSTR_LDBR5RC: REGISTER._5B = REGISTER.CB; continue;
case INSTR_LDBR5RD: REGISTER._5B = REGISTER.DB; continue;
case INSTR_LDBR5R0: REGISTER._5B = REGISTER._0B; continue;
case INSTR_LDBR5R1: REGISTER._5B = REGISTER._1B; continue;
case INSTR_LDBR5R2: REGISTER._5B = REGISTER._2B; continue;
case INSTR_LDBR5R3: REGISTER._5B = REGISTER._3B; continue;
case INSTR_LDBR5R4: REGISTER._5B = REGISTER._4B; continue;
case INSTR_LDBR5R5: REGISTER._5B = REGISTER._5B; continue;
case INSTR_LDBR5R6: REGISTER._5B = REGISTER._6B; continue;
case INSTR_LDBR5R7: REGISTER._5B = REGISTER._7B; continue;
case INSTR_LDBR5R8: REGISTER._5B = REGISTER._8B; continue;
case INSTR_LDBR5R9: REGISTER._5B = REGISTER._9B; continue;
case INSTR_LDBR5R10: REGISTER._5B = REGISTER._10B; continue;
case INSTR_LDBR5R11: REGISTER._5B = REGISTER._11B; continue;
case INSTR_LDBR5R12: REGISTER._5B = REGISTER._12B; continue;
case INSTR_LDBR5RIP: REGISTER._5B = REGISTER.IPB; continue;
case INSTR_LDBR5RSP: REGISTER._5B = REGISTER.SPB; continue;
case INSTR_LDBR5RBP: REGISTER._5B = REGISTER.BPB; continue;
case INSTR_LDBR6I: REGISTER._6B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR6RA: REGISTER._6B = REGISTER.AB; continue;
case INSTR_LDBR6RB: REGISTER._6B = REGISTER.BB; continue;
case INSTR_LDBR6RC: REGISTER._6B = REGISTER.CB; continue;
case INSTR_LDBR6RD: REGISTER._6B = REGISTER.DB; continue;
case INSTR_LDBR6R0: REGISTER._6B = REGISTER._0B; continue;
case INSTR_LDBR6R1: REGISTER._6B = REGISTER._1B; continue;
case INSTR_LDBR6R2: REGISTER._6B = REGISTER._2B; continue;
case INSTR_LDBR6R3: REGISTER._6B = REGISTER._3B; continue;
case INSTR_LDBR6R4: REGISTER._6B = REGISTER._4B; continue;
case INSTR_LDBR6R5: REGISTER._6B = REGISTER._5B; continue;
case INSTR_LDBR6R6: REGISTER._6B = REGISTER._6B; continue;
case INSTR_LDBR6R7: REGISTER._6B = REGISTER._7B; continue;
case INSTR_LDBR6R8: REGISTER._6B = REGISTER._8B; continue;
case INSTR_LDBR6R9: REGISTER._6B = REGISTER._9B; continue;
case INSTR_LDBR6R10: REGISTER._6B = REGISTER._10B; continue;
case INSTR_LDBR6R11: REGISTER._6B = REGISTER._11B; continue;
case INSTR_LDBR6R12: REGISTER._6B = REGISTER._12B; continue;
case INSTR_LDBR6RIP: REGISTER._6B = REGISTER.IPB; continue;
case INSTR_LDBR6RSP: REGISTER._6B = REGISTER.SPB; continue;
case INSTR_LDBR6RBP: REGISTER._6B = REGISTER.BPB; continue;
case INSTR_LDBR7I: REGISTER._7B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR7RA: REGISTER._7B = REGISTER.AB; continue;
case INSTR_LDBR7RB: REGISTER._7B = REGISTER.BB; continue;
case INSTR_LDBR7RC: REGISTER._7B = REGISTER.CB; continue;
case INSTR_LDBR7RD: REGISTER._7B = REGISTER.DB; continue;
case INSTR_LDBR7R0: REGISTER._7B = REGISTER._0B; continue;
case INSTR_LDBR7R1: REGISTER._7B = REGISTER._1B; continue;
case INSTR_LDBR7R2: REGISTER._7B = REGISTER._2B; continue;
case INSTR_LDBR7R3: REGISTER._7B = REGISTER._3B; continue;
case INSTR_LDBR7R4: REGISTER._7B = REGISTER._4B; continue;
case INSTR_LDBR7R5: REGISTER._7B = REGISTER._5B; continue;
case INSTR_LDBR7R6: REGISTER._7B = REGISTER._6B; continue;
case INSTR_LDBR7R7: REGISTER._7B = REGISTER._7B; continue;
case INSTR_LDBR7R8: REGISTER._7B = REGISTER._8B; continue;
case INSTR_LDBR7R9: REGISTER._7B = REGISTER._9B; continue;
case INSTR_LDBR7R10: REGISTER._7B = REGISTER._10B; continue;
case INSTR_LDBR7R11: REGISTER._7B = REGISTER._11B; continue;
case INSTR_LDBR7R12: REGISTER._7B = REGISTER._12B; continue;
case INSTR_LDBR7RIP: REGISTER._7B = REGISTER.IPB; continue;
case INSTR_LDBR7RSP: REGISTER._7B = REGISTER.SPB; continue;
case INSTR_LDBR7RBP: REGISTER._7B = REGISTER.BPB; continue;
case INSTR_LDBR8I: REGISTER._8B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR8RA: REGISTER._8B = REGISTER.AB; continue;
case INSTR_LDBR8RB: REGISTER._8B = REGISTER.BB; continue;
case INSTR_LDBR8RC: REGISTER._8B = REGISTER.CB; continue;
case INSTR_LDBR8RD: REGISTER._8B = REGISTER.DB; continue;
case INSTR_LDBR8R0: REGISTER._8B = REGISTER._0B; continue;
case INSTR_LDBR8R1: REGISTER._8B = REGISTER._1B; continue;
case INSTR_LDBR8R2: REGISTER._8B = REGISTER._2B; continue;
case INSTR_LDBR8R3: REGISTER._8B = REGISTER._3B; continue;
case INSTR_LDBR8R4: REGISTER._8B = REGISTER._4B; continue;
case INSTR_LDBR8R5: REGISTER._8B = REGISTER._5B; continue;
case INSTR_LDBR8R6: REGISTER._8B = REGISTER._6B; continue;
case INSTR_LDBR8R7: REGISTER._8B = REGISTER._7B; continue;
case INSTR_LDBR8R8: REGISTER._8B = REGISTER._8B; continue;
case INSTR_LDBR8R9: REGISTER._8B = REGISTER._9B; continue;
case INSTR_LDBR8R10: REGISTER._8B = REGISTER._10B; continue;
case INSTR_LDBR8R11: REGISTER._8B = REGISTER._11B; continue;
case INSTR_LDBR8R12: REGISTER._8B = REGISTER._12B; continue;
case INSTR_LDBR8RIP: REGISTER._8B = REGISTER.IPB; continue;
case INSTR_LDBR8RSP: REGISTER._8B = REGISTER.SPB; continue;
case INSTR_LDBR8RBP: REGISTER._8B = REGISTER.BPB; continue;
case INSTR_LDBR9I: REGISTER._9B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR9RA: REGISTER._9B = REGISTER.AB; continue;
case INSTR_LDBR9RB: REGISTER._9B = REGISTER.BB; continue;
case INSTR_LDBR9RC: REGISTER._9B = REGISTER.CB; continue;
case INSTR_LDBR9RD: REGISTER._9B = REGISTER.DB; continue;
case INSTR_LDBR9R0: REGISTER._9B = REGISTER._0B; continue;
case INSTR_LDBR9R1: REGISTER._9B = REGISTER._1B; continue;
case INSTR_LDBR9R2: REGISTER._9B = REGISTER._2B; continue;
case INSTR_LDBR9R3: REGISTER._9B = REGISTER._3B; continue;
case INSTR_LDBR9R4: REGISTER._9B = REGISTER._4B; continue;
case INSTR_LDBR9R5: REGISTER._9B = REGISTER._5B; continue;
case INSTR_LDBR9R6: REGISTER._9B = REGISTER._6B; continue;
case INSTR_LDBR9R7: REGISTER._9B = REGISTER._7B; continue;
case INSTR_LDBR9R8: REGISTER._9B = REGISTER._8B; continue;
case INSTR_LDBR9R9: REGISTER._9B = REGISTER._9B; continue;
case INSTR_LDBR9R10: REGISTER._9B = REGISTER._10B; continue;
case INSTR_LDBR9R11: REGISTER._9B = REGISTER._11B; continue;
case INSTR_LDBR9R12: REGISTER._9B = REGISTER._12B; continue;
case INSTR_LDBR9RIP: REGISTER._9B = REGISTER.IPB; continue;
case INSTR_LDBR9RSP: REGISTER._9B = REGISTER.SPB; continue;
case INSTR_LDBR9RBP: REGISTER._9B = REGISTER.BPB; continue;
case INSTR_LDBR10I: REGISTER._10B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR10RA: REGISTER._10B = REGISTER.AB; continue;
case INSTR_LDBR10RB: REGISTER._10B = REGISTER.BB; continue;
case INSTR_LDBR10RC: REGISTER._10B = REGISTER.CB; continue;
case INSTR_LDBR10RD: REGISTER._10B = REGISTER.DB; continue;
case INSTR_LDBR10R0: REGISTER._10B = REGISTER._0B; continue;
case INSTR_LDBR10R1: REGISTER._10B = REGISTER._1B; continue;
case INSTR_LDBR10R2: REGISTER._10B = REGISTER._2B; continue;
case INSTR_LDBR10R3: REGISTER._10B = REGISTER._3B; continue;
case INSTR_LDBR10R4: REGISTER._10B = REGISTER._4B; continue;
case INSTR_LDBR10R5: REGISTER._10B = REGISTER._5B; continue;
case INSTR_LDBR10R6: REGISTER._10B = REGISTER._6B; continue;
case INSTR_LDBR10R7: REGISTER._10B = REGISTER._7B; continue;
case INSTR_LDBR10R8: REGISTER._10B = REGISTER._8B; continue;
case INSTR_LDBR10R9: REGISTER._10B = REGISTER._9B; continue;
case INSTR_LDBR10R10: REGISTER._10B = REGISTER._10B; continue;
case INSTR_LDBR10R11: REGISTER._10B = REGISTER._11B; continue;
case INSTR_LDBR10R12: REGISTER._10B = REGISTER._12B; continue;
case INSTR_LDBR10RIP: REGISTER._10B = REGISTER.IPB; continue;
case INSTR_LDBR10RSP: REGISTER._10B = REGISTER.SPB; continue;
case INSTR_LDBR10RBP: REGISTER._10B = REGISTER.BPB; continue;
case INSTR_LDBR11I: REGISTER._11B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR11RA: REGISTER._11B = REGISTER.AB; continue;
case INSTR_LDBR11RB: REGISTER._11B = REGISTER.BB; continue;
case INSTR_LDBR11RC: REGISTER._11B = REGISTER.CB; continue;
case INSTR_LDBR11RD: REGISTER._11B = REGISTER.DB; continue;
case INSTR_LDBR11R0: REGISTER._11B = REGISTER._0B; continue;
case INSTR_LDBR11R1: REGISTER._11B = REGISTER._1B; continue;
case INSTR_LDBR11R2: REGISTER._11B = REGISTER._2B; continue;
case INSTR_LDBR11R3: REGISTER._11B = REGISTER._3B; continue;
case INSTR_LDBR11R4: REGISTER._11B = REGISTER._4B; continue;
case INSTR_LDBR11R5: REGISTER._11B = REGISTER._5B; continue;
case INSTR_LDBR11R6: REGISTER._11B = REGISTER._6B; continue;
case INSTR_LDBR11R7: REGISTER._11B = REGISTER._7B; continue;
case INSTR_LDBR11R8: REGISTER._11B = REGISTER._8B; continue;
case INSTR_LDBR11R9: REGISTER._11B = REGISTER._9B; continue;
case INSTR_LDBR11R10: REGISTER._11B = REGISTER._10B; continue;
case INSTR_LDBR11R11: REGISTER._11B = REGISTER._11B; continue;
case INSTR_LDBR11R12: REGISTER._11B = REGISTER._12B; continue;
case INSTR_LDBR11RIP: REGISTER._11B = REGISTER.IPB; continue;
case INSTR_LDBR11RSP: REGISTER._11B = REGISTER.SPB; continue;
case INSTR_LDBR11RBP: REGISTER._11B = REGISTER.BPB; continue;
case INSTR_LDBR12I: REGISTER._12B = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBR12RA: REGISTER._12B = REGISTER.AB; continue;
case INSTR_LDBR12RB: REGISTER._12B = REGISTER.BB; continue;
case INSTR_LDBR12RC: REGISTER._12B = REGISTER.CB; continue;
case INSTR_LDBR12RD: REGISTER._12B = REGISTER.DB; continue;
case INSTR_LDBR12R0: REGISTER._12B = REGISTER._0B; continue;
case INSTR_LDBR12R1: REGISTER._12B = REGISTER._1B; continue;
case INSTR_LDBR12R2: REGISTER._12B = REGISTER._2B; continue;
case INSTR_LDBR12R3: REGISTER._12B = REGISTER._3B; continue;
case INSTR_LDBR12R4: REGISTER._12B = REGISTER._4B; continue;
case INSTR_LDBR12R5: REGISTER._12B = REGISTER._5B; continue;
case INSTR_LDBR12R6: REGISTER._12B = REGISTER._6B; continue;
case INSTR_LDBR12R7: REGISTER._12B = REGISTER._7B; continue;
case INSTR_LDBR12R8: REGISTER._12B = REGISTER._8B; continue;
case INSTR_LDBR12R9: REGISTER._12B = REGISTER._9B; continue;
case INSTR_LDBR12R10: REGISTER._12B = REGISTER._10B; continue;
case INSTR_LDBR12R11: REGISTER._12B = REGISTER._11B; continue;
case INSTR_LDBR12R12: REGISTER._12B = REGISTER._12B; continue;
case INSTR_LDBR12RIP: REGISTER._12B = REGISTER.IPB; continue;
case INSTR_LDBR12RSP: REGISTER._12B = REGISTER.SPB; continue;
case INSTR_LDBR12RBP: REGISTER._12B = REGISTER.BPB; continue;
case INSTR_LDBRIPI: REGISTER.IPB = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBRIPRA: REGISTER.IPB = REGISTER.AB; continue;
case INSTR_LDBRIPRB: REGISTER.IPB = REGISTER.BB; continue;
case INSTR_LDBRIPRC: REGISTER.IPB = REGISTER.CB; continue;
case INSTR_LDBRIPRD: REGISTER.IPB = REGISTER.DB; continue;
case INSTR_LDBRIPR0: REGISTER.IPB = REGISTER._0B; continue;
case INSTR_LDBRIPR1: REGISTER.IPB = REGISTER._1B; continue;
case INSTR_LDBRIPR2: REGISTER.IPB = REGISTER._2B; continue;
case INSTR_LDBRIPR3: REGISTER.IPB = REGISTER._3B; continue;
case INSTR_LDBRIPR4: REGISTER.IPB = REGISTER._4B; continue;
case INSTR_LDBRIPR5: REGISTER.IPB = REGISTER._5B; continue;
case INSTR_LDBRIPR6: REGISTER.IPB = REGISTER._6B; continue;
case INSTR_LDBRIPR7: REGISTER.IPB = REGISTER._7B; continue;
case INSTR_LDBRIPR8: REGISTER.IPB = REGISTER._8B; continue;
case INSTR_LDBRIPR9: REGISTER.IPB = REGISTER._9B; continue;
case INSTR_LDBRIPR10: REGISTER.IPB = REGISTER._10B; continue;
case INSTR_LDBRIPR11: REGISTER.IPB = REGISTER._11B; continue;
case INSTR_LDBRIPR12: REGISTER.IPB = REGISTER._12B; continue;
case INSTR_LDBRIPRIP: REGISTER.IPB = REGISTER.IPB; continue;
case INSTR_LDBRIPRSP: REGISTER.IPB = REGISTER.SPB; continue;
case INSTR_LDBRIPRBP: REGISTER.IPB = REGISTER.BPB; continue;
case INSTR_LDBRSPI: REGISTER.SPB = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBRSPRA: REGISTER.SPB = REGISTER.AB; continue;
case INSTR_LDBRSPRB: REGISTER.SPB = REGISTER.BB; continue;
case INSTR_LDBRSPRC: REGISTER.SPB = REGISTER.CB; continue;
case INSTR_LDBRSPRD: REGISTER.SPB = REGISTER.DB; continue;
case INSTR_LDBRSPR0: REGISTER.SPB = REGISTER._0B; continue;
case INSTR_LDBRSPR1: REGISTER.SPB = REGISTER._1B; continue;
case INSTR_LDBRSPR2: REGISTER.SPB = REGISTER._2B; continue;
case INSTR_LDBRSPR3: REGISTER.SPB = REGISTER._3B; continue;
case INSTR_LDBRSPR4: REGISTER.SPB = REGISTER._4B; continue;
case INSTR_LDBRSPR5: REGISTER.SPB = REGISTER._5B; continue;
case INSTR_LDBRSPR6: REGISTER.SPB = REGISTER._6B; continue;
case INSTR_LDBRSPR7: REGISTER.SPB = REGISTER._7B; continue;
case INSTR_LDBRSPR8: REGISTER.SPB = REGISTER._8B; continue;
case INSTR_LDBRSPR9: REGISTER.SPB = REGISTER._9B; continue;
case INSTR_LDBRSPR10: REGISTER.SPB = REGISTER._10B; continue;
case INSTR_LDBRSPR11: REGISTER.SPB = REGISTER._11B; continue;
case INSTR_LDBRSPR12: REGISTER.SPB = REGISTER._12B; continue;
case INSTR_LDBRSPRIP: REGISTER.SPB = REGISTER.IPB; continue;
case INSTR_LDBRSPRSP: REGISTER.SPB = REGISTER.SPB; continue;
case INSTR_LDBRSPRBP: REGISTER.SPB = REGISTER.BPB; continue;
case INSTR_LDBRBPI: REGISTER.BPB = *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LDBRBPRA: REGISTER.BPB = REGISTER.AB; continue;
case INSTR_LDBRBPRB: REGISTER.BPB = REGISTER.BB; continue;
case INSTR_LDBRBPRC: REGISTER.BPB = REGISTER.CB; continue;
case INSTR_LDBRBPRD: REGISTER.BPB = REGISTER.DB; continue;
case INSTR_LDBRBPR0: REGISTER.BPB = REGISTER._0B; continue;
case INSTR_LDBRBPR1: REGISTER.BPB = REGISTER._1B; continue;
case INSTR_LDBRBPR2: REGISTER.BPB = REGISTER._2B; continue;
case INSTR_LDBRBPR3: REGISTER.BPB = REGISTER._3B; continue;
case INSTR_LDBRBPR4: REGISTER.BPB = REGISTER._4B; continue;
case INSTR_LDBRBPR5: REGISTER.BPB = REGISTER._5B; continue;
case INSTR_LDBRBPR6: REGISTER.BPB = REGISTER._6B; continue;
case INSTR_LDBRBPR7: REGISTER.BPB = REGISTER._7B; continue;
case INSTR_LDBRBPR8: REGISTER.BPB = REGISTER._8B; continue;
case INSTR_LDBRBPR9: REGISTER.BPB = REGISTER._9B; continue;
case INSTR_LDBRBPR10: REGISTER.BPB = REGISTER._10B; continue;
case INSTR_LDBRBPR11: REGISTER.BPB = REGISTER._11B; continue;
case INSTR_LDBRBPR12: REGISTER.BPB = REGISTER._12B; continue;
case INSTR_LDBRBPRIP: REGISTER.BPB = REGISTER.IPB; continue;
case INSTR_LDBRBPRSP: REGISTER.BPB = REGISTER.SPB; continue;
case INSTR_LDBRBPRBP: REGISTER.BPB = REGISTER.BPB; continue;
case INSTR_LDBRAAI: REGISTER.AB = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBRAARA: REGISTER.AB = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBRAARB: REGISTER.AB = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBRAARC: REGISTER.AB = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBRAARD: REGISTER.AB = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBRAAR0: REGISTER.AB = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBRAAR1: REGISTER.AB = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBRAAR2: REGISTER.AB = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBRAAR3: REGISTER.AB = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBRAAR4: REGISTER.AB = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBRAAR5: REGISTER.AB = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBRAAR6: REGISTER.AB = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBRAAR7: REGISTER.AB = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBRAAR8: REGISTER.AB = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBRAAR9: REGISTER.AB = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBRAAR10: REGISTER.AB = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBRAAR11: REGISTER.AB = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBRAAR12: REGISTER.AB = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBRAARIP: REGISTER.AB = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBRAARSP: REGISTER.AB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBRAARBP: REGISTER.AB = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBRBAI: REGISTER.BB = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBRBARA: REGISTER.BB = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBRBARB: REGISTER.BB = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBRBARC: REGISTER.BB = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBRBARD: REGISTER.BB = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBRBAR0: REGISTER.BB = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBRBAR1: REGISTER.BB = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBRBAR2: REGISTER.BB = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBRBAR3: REGISTER.BB = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBRBAR4: REGISTER.BB = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBRBAR5: REGISTER.BB = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBRBAR6: REGISTER.BB = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBRBAR7: REGISTER.BB = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBRBAR8: REGISTER.BB = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBRBAR9: REGISTER.BB = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBRBAR10: REGISTER.BB = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBRBAR11: REGISTER.BB = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBRBAR12: REGISTER.BB = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBRBARIP: REGISTER.BB = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBRBARSP: REGISTER.BB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBRBARBP: REGISTER.BB = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBRCAI: REGISTER.CB = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBRCARA: REGISTER.CB = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBRCARB: REGISTER.CB = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBRCARC: REGISTER.CB = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBRCARD: REGISTER.CB = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBRCAR0: REGISTER.CB = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBRCAR1: REGISTER.CB = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBRCAR2: REGISTER.CB = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBRCAR3: REGISTER.CB = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBRCAR4: REGISTER.CB = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBRCAR5: REGISTER.CB = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBRCAR6: REGISTER.CB = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBRCAR7: REGISTER.CB = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBRCAR8: REGISTER.CB = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBRCAR9: REGISTER.CB = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBRCAR10: REGISTER.CB = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBRCAR11: REGISTER.CB = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBRCAR12: REGISTER.CB = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBRCARIP: REGISTER.CB = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBRCARSP: REGISTER.CB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBRCARBP: REGISTER.CB = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBRDAI: REGISTER.DB = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBRDARA: REGISTER.DB = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBRDARB: REGISTER.DB = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBRDARC: REGISTER.DB = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBRDARD: REGISTER.DB = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBRDAR0: REGISTER.DB = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBRDAR1: REGISTER.DB = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBRDAR2: REGISTER.DB = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBRDAR3: REGISTER.DB = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBRDAR4: REGISTER.DB = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBRDAR5: REGISTER.DB = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBRDAR6: REGISTER.DB = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBRDAR7: REGISTER.DB = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBRDAR8: REGISTER.DB = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBRDAR9: REGISTER.DB = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBRDAR10: REGISTER.DB = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBRDAR11: REGISTER.DB = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBRDAR12: REGISTER.DB = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBRDARIP: REGISTER.DB = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBRDARSP: REGISTER.DB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBRDARBP: REGISTER.DB = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR0AI: REGISTER._0B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR0ARA: REGISTER._0B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR0ARB: REGISTER._0B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR0ARC: REGISTER._0B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR0ARD: REGISTER._0B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR0AR0: REGISTER._0B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR0AR1: REGISTER._0B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR0AR2: REGISTER._0B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR0AR3: REGISTER._0B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR0AR4: REGISTER._0B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR0AR5: REGISTER._0B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR0AR6: REGISTER._0B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR0AR7: REGISTER._0B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR0AR8: REGISTER._0B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR0AR9: REGISTER._0B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR0AR10: REGISTER._0B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR0AR11: REGISTER._0B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR0AR12: REGISTER._0B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR0ARIP: REGISTER._0B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR0ARSP: REGISTER._0B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR0ARBP: REGISTER._0B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR1AI: REGISTER._1B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR1ARA: REGISTER._1B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR1ARB: REGISTER._1B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR1ARC: REGISTER._1B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR1ARD: REGISTER._1B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR1AR0: REGISTER._1B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR1AR1: REGISTER._1B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR1AR2: REGISTER._1B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR1AR3: REGISTER._1B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR1AR4: REGISTER._1B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR1AR5: REGISTER._1B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR1AR6: REGISTER._1B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR1AR7: REGISTER._1B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR1AR8: REGISTER._1B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR1AR9: REGISTER._1B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR1AR10: REGISTER._1B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR1AR11: REGISTER._1B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR1AR12: REGISTER._1B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR1ARIP: REGISTER._1B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR1ARSP: REGISTER._1B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR1ARBP: REGISTER._1B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR2AI: REGISTER._2B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR2ARA: REGISTER._2B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR2ARB: REGISTER._2B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR2ARC: REGISTER._2B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR2ARD: REGISTER._2B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR2AR0: REGISTER._2B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR2AR1: REGISTER._2B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR2AR2: REGISTER._2B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR2AR3: REGISTER._2B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR2AR4: REGISTER._2B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR2AR5: REGISTER._2B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR2AR6: REGISTER._2B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR2AR7: REGISTER._2B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR2AR8: REGISTER._2B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR2AR9: REGISTER._2B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR2AR10: REGISTER._2B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR2AR11: REGISTER._2B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR2AR12: REGISTER._2B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR2ARIP: REGISTER._2B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR2ARSP: REGISTER._2B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR2ARBP: REGISTER._2B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR3AI: REGISTER._3B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR3ARA: REGISTER._3B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR3ARB: REGISTER._3B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR3ARC: REGISTER._3B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR3ARD: REGISTER._3B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR3AR0: REGISTER._3B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR3AR1: REGISTER._3B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR3AR2: REGISTER._3B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR3AR3: REGISTER._3B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR3AR4: REGISTER._3B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR3AR5: REGISTER._3B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR3AR6: REGISTER._3B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR3AR7: REGISTER._3B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR3AR8: REGISTER._3B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR3AR9: REGISTER._3B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR3AR10: REGISTER._3B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR3AR11: REGISTER._3B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR3AR12: REGISTER._3B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR3ARIP: REGISTER._3B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR3ARSP: REGISTER._3B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR3ARBP: REGISTER._3B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR4AI: REGISTER._4B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR4ARA: REGISTER._4B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR4ARB: REGISTER._4B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR4ARC: REGISTER._4B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR4ARD: REGISTER._4B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR4AR0: REGISTER._4B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR4AR1: REGISTER._4B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR4AR2: REGISTER._4B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR4AR3: REGISTER._4B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR4AR4: REGISTER._4B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR4AR5: REGISTER._4B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR4AR6: REGISTER._4B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR4AR7: REGISTER._4B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR4AR8: REGISTER._4B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR4AR9: REGISTER._4B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR4AR10: REGISTER._4B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR4AR11: REGISTER._4B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR4AR12: REGISTER._4B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR4ARIP: REGISTER._4B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR4ARSP: REGISTER._4B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR4ARBP: REGISTER._4B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR5AI: REGISTER._5B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR5ARA: REGISTER._5B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR5ARB: REGISTER._5B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR5ARC: REGISTER._5B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR5ARD: REGISTER._5B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR5AR0: REGISTER._5B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR5AR1: REGISTER._5B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR5AR2: REGISTER._5B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR5AR3: REGISTER._5B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR5AR4: REGISTER._5B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR5AR5: REGISTER._5B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR5AR6: REGISTER._5B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR5AR7: REGISTER._5B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR5AR8: REGISTER._5B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR5AR9: REGISTER._5B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR5AR10: REGISTER._5B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR5AR11: REGISTER._5B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR5AR12: REGISTER._5B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR5ARIP: REGISTER._5B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR5ARSP: REGISTER._5B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR5ARBP: REGISTER._5B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR6AI: REGISTER._6B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR6ARA: REGISTER._6B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR6ARB: REGISTER._6B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR6ARC: REGISTER._6B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR6ARD: REGISTER._6B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR6AR0: REGISTER._6B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR6AR1: REGISTER._6B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR6AR2: REGISTER._6B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR6AR3: REGISTER._6B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR6AR4: REGISTER._6B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR6AR5: REGISTER._6B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR6AR6: REGISTER._6B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR6AR7: REGISTER._6B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR6AR8: REGISTER._6B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR6AR9: REGISTER._6B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR6AR10: REGISTER._6B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR6AR11: REGISTER._6B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR6AR12: REGISTER._6B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR6ARIP: REGISTER._6B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR6ARSP: REGISTER._6B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR6ARBP: REGISTER._6B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR7AI: REGISTER._7B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR7ARA: REGISTER._7B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR7ARB: REGISTER._7B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR7ARC: REGISTER._7B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR7ARD: REGISTER._7B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR7AR0: REGISTER._7B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR7AR1: REGISTER._7B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR7AR2: REGISTER._7B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR7AR3: REGISTER._7B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR7AR4: REGISTER._7B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR7AR5: REGISTER._7B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR7AR6: REGISTER._7B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR7AR7: REGISTER._7B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR7AR8: REGISTER._7B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR7AR9: REGISTER._7B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR7AR10: REGISTER._7B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR7AR11: REGISTER._7B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR7AR12: REGISTER._7B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR7ARIP: REGISTER._7B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR7ARSP: REGISTER._7B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR7ARBP: REGISTER._7B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR8AI: REGISTER._8B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR8ARA: REGISTER._8B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR8ARB: REGISTER._8B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR8ARC: REGISTER._8B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR8ARD: REGISTER._8B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR8AR0: REGISTER._8B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR8AR1: REGISTER._8B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR8AR2: REGISTER._8B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR8AR3: REGISTER._8B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR8AR4: REGISTER._8B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR8AR5: REGISTER._8B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR8AR6: REGISTER._8B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR8AR7: REGISTER._8B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR8AR8: REGISTER._8B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR8AR9: REGISTER._8B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR8AR10: REGISTER._8B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR8AR11: REGISTER._8B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR8AR12: REGISTER._8B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR8ARIP: REGISTER._8B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR8ARSP: REGISTER._8B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR8ARBP: REGISTER._8B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR9AI: REGISTER._9B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR9ARA: REGISTER._9B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR9ARB: REGISTER._9B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR9ARC: REGISTER._9B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR9ARD: REGISTER._9B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR9AR0: REGISTER._9B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR9AR1: REGISTER._9B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR9AR2: REGISTER._9B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR9AR3: REGISTER._9B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR9AR4: REGISTER._9B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR9AR5: REGISTER._9B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR9AR6: REGISTER._9B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR9AR7: REGISTER._9B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR9AR8: REGISTER._9B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR9AR9: REGISTER._9B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR9AR10: REGISTER._9B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR9AR11: REGISTER._9B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR9AR12: REGISTER._9B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR9ARIP: REGISTER._9B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR9ARSP: REGISTER._9B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR9ARBP: REGISTER._9B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR10AI: REGISTER._10B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR10ARA: REGISTER._10B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR10ARB: REGISTER._10B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR10ARC: REGISTER._10B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR10ARD: REGISTER._10B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR10AR0: REGISTER._10B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR10AR1: REGISTER._10B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR10AR2: REGISTER._10B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR10AR3: REGISTER._10B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR10AR4: REGISTER._10B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR10AR5: REGISTER._10B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR10AR6: REGISTER._10B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR10AR7: REGISTER._10B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR10AR8: REGISTER._10B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR10AR9: REGISTER._10B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR10AR10: REGISTER._10B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR10AR11: REGISTER._10B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR10AR12: REGISTER._10B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR10ARIP: REGISTER._10B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR10ARSP: REGISTER._10B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR10ARBP: REGISTER._10B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR11AI: REGISTER._11B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR11ARA: REGISTER._11B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR11ARB: REGISTER._11B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR11ARC: REGISTER._11B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR11ARD: REGISTER._11B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR11AR0: REGISTER._11B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR11AR1: REGISTER._11B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR11AR2: REGISTER._11B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR11AR3: REGISTER._11B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR11AR4: REGISTER._11B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR11AR5: REGISTER._11B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR11AR6: REGISTER._11B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR11AR7: REGISTER._11B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR11AR8: REGISTER._11B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR11AR9: REGISTER._11B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR11AR10: REGISTER._11B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR11AR11: REGISTER._11B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR11AR12: REGISTER._11B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR11ARIP: REGISTER._11B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR11ARSP: REGISTER._11B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR11ARBP: REGISTER._11B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBR12AI: REGISTER._12B = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBR12ARA: REGISTER._12B = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBR12ARB: REGISTER._12B = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBR12ARC: REGISTER._12B = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBR12ARD: REGISTER._12B = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBR12AR0: REGISTER._12B = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBR12AR1: REGISTER._12B = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBR12AR2: REGISTER._12B = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBR12AR3: REGISTER._12B = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBR12AR4: REGISTER._12B = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBR12AR5: REGISTER._12B = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBR12AR6: REGISTER._12B = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBR12AR7: REGISTER._12B = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBR12AR8: REGISTER._12B = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBR12AR9: REGISTER._12B = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBR12AR10: REGISTER._12B = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBR12AR11: REGISTER._12B = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBR12AR12: REGISTER._12B = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBR12ARIP: REGISTER._12B = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBR12ARSP: REGISTER._12B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBR12ARBP: REGISTER._12B = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBRIPAI: REGISTER.IPB = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBRIPARA: REGISTER.IPB = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBRIPARB: REGISTER.IPB = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBRIPARC: REGISTER.IPB = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBRIPARD: REGISTER.IPB = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBRIPAR0: REGISTER.IPB = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBRIPAR1: REGISTER.IPB = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBRIPAR2: REGISTER.IPB = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBRIPAR3: REGISTER.IPB = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBRIPAR4: REGISTER.IPB = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBRIPAR5: REGISTER.IPB = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBRIPAR6: REGISTER.IPB = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBRIPAR7: REGISTER.IPB = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBRIPAR8: REGISTER.IPB = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBRIPAR9: REGISTER.IPB = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBRIPAR10: REGISTER.IPB = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBRIPAR11: REGISTER.IPB = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBRIPAR12: REGISTER.IPB = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBRIPARIP: REGISTER.IPB = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBRIPARSP: REGISTER.IPB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBRIPARBP: REGISTER.IPB = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBRSPAI: REGISTER.SPB = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBRSPARA: REGISTER.SPB = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBRSPARB: REGISTER.SPB = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBRSPARC: REGISTER.SPB = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBRSPARD: REGISTER.SPB = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBRSPAR0: REGISTER.SPB = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBRSPAR1: REGISTER.SPB = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBRSPAR2: REGISTER.SPB = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBRSPAR3: REGISTER.SPB = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBRSPAR4: REGISTER.SPB = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBRSPAR5: REGISTER.SPB = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBRSPAR6: REGISTER.SPB = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBRSPAR7: REGISTER.SPB = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBRSPAR8: REGISTER.SPB = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBRSPAR9: REGISTER.SPB = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBRSPAR10: REGISTER.SPB = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBRSPAR11: REGISTER.SPB = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBRSPAR12: REGISTER.SPB = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBRSPARIP: REGISTER.SPB = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBRSPARSP: REGISTER.SPB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBRSPARBP: REGISTER.SPB = *(char*) (RAM + REGISTER.BP); continue;
case INSTR_LDBRBPAI: REGISTER.BPB = *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)); REGISTER.IP += 4; continue;
case INSTR_LDBRBPARA: REGISTER.BPB = *(char*) (RAM + REGISTER.A); continue;
case INSTR_LDBRBPARB: REGISTER.BPB = *(char*) (RAM + REGISTER.B); continue;
case INSTR_LDBRBPARC: REGISTER.BPB = *(char*) (RAM + REGISTER.C); continue;
case INSTR_LDBRBPARD: REGISTER.BPB = *(char*) (RAM + REGISTER.D); continue;
case INSTR_LDBRBPAR0: REGISTER.BPB = *(char*) (RAM + REGISTER._0); continue;
case INSTR_LDBRBPAR1: REGISTER.BPB = *(char*) (RAM + REGISTER._1); continue;
case INSTR_LDBRBPAR2: REGISTER.BPB = *(char*) (RAM + REGISTER._2); continue;
case INSTR_LDBRBPAR3: REGISTER.BPB = *(char*) (RAM + REGISTER._3); continue;
case INSTR_LDBRBPAR4: REGISTER.BPB = *(char*) (RAM + REGISTER._4); continue;
case INSTR_LDBRBPAR5: REGISTER.BPB = *(char*) (RAM + REGISTER._5); continue;
case INSTR_LDBRBPAR6: REGISTER.BPB = *(char*) (RAM + REGISTER._6); continue;
case INSTR_LDBRBPAR7: REGISTER.BPB = *(char*) (RAM + REGISTER._7); continue;
case INSTR_LDBRBPAR8: REGISTER.BPB = *(char*) (RAM + REGISTER._8); continue;
case INSTR_LDBRBPAR9: REGISTER.BPB = *(char*) (RAM + REGISTER._9); continue;
case INSTR_LDBRBPAR10: REGISTER.BPB = *(char*) (RAM + REGISTER._10); continue;
case INSTR_LDBRBPAR11: REGISTER.BPB = *(char*) (RAM + REGISTER._11); continue;
case INSTR_LDBRBPAR12: REGISTER.BPB = *(char*) (RAM + REGISTER._12); continue;
case INSTR_LDBRBPARIP: REGISTER.BPB = *(char*) (RAM + REGISTER.IP); continue;
case INSTR_LDBRBPARSP: REGISTER.BPB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_LDBRBPARBP: REGISTER.BPB = *(char*) (RAM + REGISTER.BP); continue;
// store //
case INSTR_STRQRAAI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.AQ; REGISTER.IP += 4; continue;
case INSTR_STRQRAARA: *(int*) (RAM + REGISTER.AQ) = REGISTER.AQ; continue;
case INSTR_STRQRAARB: *(int*) (RAM + REGISTER.BQ) = REGISTER.AQ; continue;
case INSTR_STRQRAARC: *(int*) (RAM + REGISTER.CQ) = REGISTER.AQ; continue;
case INSTR_STRQRAARD: *(int*) (RAM + REGISTER.DQ) = REGISTER.AQ; continue;
case INSTR_STRQRAAR0: *(int*) (RAM + REGISTER._0Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR1: *(int*) (RAM + REGISTER._1Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR2: *(int*) (RAM + REGISTER._2Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR3: *(int*) (RAM + REGISTER._3Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR4: *(int*) (RAM + REGISTER._4Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR5: *(int*) (RAM + REGISTER._5Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR6: *(int*) (RAM + REGISTER._6Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR7: *(int*) (RAM + REGISTER._7Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR8: *(int*) (RAM + REGISTER._8Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR9: *(int*) (RAM + REGISTER._9Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR10: *(int*) (RAM + REGISTER._10Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR11: *(int*) (RAM + REGISTER._11Q) = REGISTER.AQ; continue;
case INSTR_STRQRAAR12: *(int*) (RAM + REGISTER._12Q) = REGISTER.AQ; continue;
case INSTR_STRQRAARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER.AQ; continue;
case INSTR_STRQRAARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER.AQ; continue;
case INSTR_STRQRAARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER.AQ; continue;
case INSTR_STRQRBAI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.BQ; REGISTER.IP += 4; continue;
case INSTR_STRQRBARA: *(int*) (RAM + REGISTER.AQ) = REGISTER.BQ; continue;
case INSTR_STRQRBARB: *(int*) (RAM + REGISTER.BQ) = REGISTER.BQ; continue;
case INSTR_STRQRBARC: *(int*) (RAM + REGISTER.CQ) = REGISTER.BQ; continue;
case INSTR_STRQRBARD: *(int*) (RAM + REGISTER.DQ) = REGISTER.BQ; continue;
case INSTR_STRQRBAR0: *(int*) (RAM + REGISTER._0Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR1: *(int*) (RAM + REGISTER._1Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR2: *(int*) (RAM + REGISTER._2Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR3: *(int*) (RAM + REGISTER._3Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR4: *(int*) (RAM + REGISTER._4Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR5: *(int*) (RAM + REGISTER._5Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR6: *(int*) (RAM + REGISTER._6Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR7: *(int*) (RAM + REGISTER._7Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR8: *(int*) (RAM + REGISTER._8Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR9: *(int*) (RAM + REGISTER._9Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR10: *(int*) (RAM + REGISTER._10Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR11: *(int*) (RAM + REGISTER._11Q) = REGISTER.BQ; continue;
case INSTR_STRQRBAR12: *(int*) (RAM + REGISTER._12Q) = REGISTER.BQ; continue;
case INSTR_STRQRBARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER.BQ; continue;
case INSTR_STRQRBARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER.BQ; continue;
case INSTR_STRQRBARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER.BQ; continue;
case INSTR_STRQRCAI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.CQ; REGISTER.IP += 4; continue;
case INSTR_STRQRCARA: *(int*) (RAM + REGISTER.AQ) = REGISTER.CQ; continue;
case INSTR_STRQRCARB: *(int*) (RAM + REGISTER.BQ) = REGISTER.CQ; continue;
case INSTR_STRQRCARC: *(int*) (RAM + REGISTER.CQ) = REGISTER.CQ; continue;
case INSTR_STRQRCARD: *(int*) (RAM + REGISTER.DQ) = REGISTER.CQ; continue;
case INSTR_STRQRCAR0: *(int*) (RAM + REGISTER._0Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR1: *(int*) (RAM + REGISTER._1Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR2: *(int*) (RAM + REGISTER._2Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR3: *(int*) (RAM + REGISTER._3Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR4: *(int*) (RAM + REGISTER._4Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR5: *(int*) (RAM + REGISTER._5Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR6: *(int*) (RAM + REGISTER._6Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR7: *(int*) (RAM + REGISTER._7Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR8: *(int*) (RAM + REGISTER._8Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR9: *(int*) (RAM + REGISTER._9Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR10: *(int*) (RAM + REGISTER._10Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR11: *(int*) (RAM + REGISTER._11Q) = REGISTER.CQ; continue;
case INSTR_STRQRCAR12: *(int*) (RAM + REGISTER._12Q) = REGISTER.CQ; continue;
case INSTR_STRQRCARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER.CQ; continue;
case INSTR_STRQRCARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER.CQ; continue;
case INSTR_STRQRCARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER.CQ; continue;
case INSTR_STRQRDAI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.DQ; REGISTER.IP += 4; continue;
case INSTR_STRQRDARA: *(int*) (RAM + REGISTER.AQ) = REGISTER.DQ; continue;
case INSTR_STRQRDARB: *(int*) (RAM + REGISTER.BQ) = REGISTER.DQ; continue;
case INSTR_STRQRDARC: *(int*) (RAM + REGISTER.CQ) = REGISTER.DQ; continue;
case INSTR_STRQRDARD: *(int*) (RAM + REGISTER.DQ) = REGISTER.DQ; continue;
case INSTR_STRQRDAR0: *(int*) (RAM + REGISTER._0Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR1: *(int*) (RAM + REGISTER._1Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR2: *(int*) (RAM + REGISTER._2Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR3: *(int*) (RAM + REGISTER._3Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR4: *(int*) (RAM + REGISTER._4Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR5: *(int*) (RAM + REGISTER._5Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR6: *(int*) (RAM + REGISTER._6Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR7: *(int*) (RAM + REGISTER._7Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR8: *(int*) (RAM + REGISTER._8Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR9: *(int*) (RAM + REGISTER._9Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR10: *(int*) (RAM + REGISTER._10Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR11: *(int*) (RAM + REGISTER._11Q) = REGISTER.DQ; continue;
case INSTR_STRQRDAR12: *(int*) (RAM + REGISTER._12Q) = REGISTER.DQ; continue;
case INSTR_STRQRDARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER.DQ; continue;
case INSTR_STRQRDARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER.DQ; continue;
case INSTR_STRQRDARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER.DQ; continue;
case INSTR_STRQR0AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._0Q; REGISTER.IP += 4; continue;
case INSTR_STRQR0ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._0Q; continue;
case INSTR_STRQR0ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._0Q; continue;
case INSTR_STRQR0ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._0Q; continue;
case INSTR_STRQR0ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._0Q; continue;
case INSTR_STRQR0AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._0Q; continue;
case INSTR_STRQR0AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._0Q; continue;
case INSTR_STRQR0ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._0Q; continue;
case INSTR_STRQR0ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._0Q; continue;
case INSTR_STRQR0ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._0Q; continue;
case INSTR_STRQR1AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._1Q; REGISTER.IP += 4; continue;
case INSTR_STRQR1ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._1Q; continue;
case INSTR_STRQR1ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._1Q; continue;
case INSTR_STRQR1ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._1Q; continue;
case INSTR_STRQR1ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._1Q; continue;
case INSTR_STRQR1AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._1Q; continue;
case INSTR_STRQR1AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._1Q; continue;
case INSTR_STRQR1ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._1Q; continue;
case INSTR_STRQR1ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._1Q; continue;
case INSTR_STRQR1ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._1Q; continue;
case INSTR_STRQR2AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._2Q; REGISTER.IP += 4; continue;
case INSTR_STRQR2ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._2Q; continue;
case INSTR_STRQR2ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._2Q; continue;
case INSTR_STRQR2ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._2Q; continue;
case INSTR_STRQR2ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._2Q; continue;
case INSTR_STRQR2AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._2Q; continue;
case INSTR_STRQR2AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._2Q; continue;
case INSTR_STRQR2ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._2Q; continue;
case INSTR_STRQR2ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._2Q; continue;
case INSTR_STRQR2ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._2Q; continue;
case INSTR_STRQR3AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._3Q; REGISTER.IP += 4; continue;
case INSTR_STRQR3ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._3Q; continue;
case INSTR_STRQR3ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._3Q; continue;
case INSTR_STRQR3ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._3Q; continue;
case INSTR_STRQR3ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._3Q; continue;
case INSTR_STRQR3AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._3Q; continue;
case INSTR_STRQR3AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._3Q; continue;
case INSTR_STRQR3ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._3Q; continue;
case INSTR_STRQR3ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._3Q; continue;
case INSTR_STRQR3ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._3Q; continue;
case INSTR_STRQR4AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._4Q; REGISTER.IP += 4; continue;
case INSTR_STRQR4ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._4Q; continue;
case INSTR_STRQR4ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._4Q; continue;
case INSTR_STRQR4ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._4Q; continue;
case INSTR_STRQR4ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._4Q; continue;
case INSTR_STRQR4AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._4Q; continue;
case INSTR_STRQR4AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._4Q; continue;
case INSTR_STRQR4ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._4Q; continue;
case INSTR_STRQR4ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._4Q; continue;
case INSTR_STRQR4ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._4Q; continue;
case INSTR_STRQR5AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._5Q; REGISTER.IP += 4; continue;
case INSTR_STRQR5ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._5Q; continue;
case INSTR_STRQR5ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._5Q; continue;
case INSTR_STRQR5ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._5Q; continue;
case INSTR_STRQR5ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._5Q; continue;
case INSTR_STRQR5AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._5Q; continue;
case INSTR_STRQR5AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._5Q; continue;
case INSTR_STRQR5ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._5Q; continue;
case INSTR_STRQR5ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._5Q; continue;
case INSTR_STRQR5ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._5Q; continue;
case INSTR_STRQR6AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._6Q; REGISTER.IP += 4; continue;
case INSTR_STRQR6ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._6Q; continue;
case INSTR_STRQR6ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._6Q; continue;
case INSTR_STRQR6ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._6Q; continue;
case INSTR_STRQR6ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._6Q; continue;
case INSTR_STRQR6AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._6Q; continue;
case INSTR_STRQR6AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._6Q; continue;
case INSTR_STRQR6ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._6Q; continue;
case INSTR_STRQR6ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._6Q; continue;
case INSTR_STRQR6ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._6Q; continue;
case INSTR_STRQR7AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._7Q; REGISTER.IP += 4; continue;
case INSTR_STRQR7ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._7Q; continue;
case INSTR_STRQR7ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._7Q; continue;
case INSTR_STRQR7ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._7Q; continue;
case INSTR_STRQR7ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._7Q; continue;
case INSTR_STRQR7AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._7Q; continue;
case INSTR_STRQR7AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._7Q; continue;
case INSTR_STRQR7ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._7Q; continue;
case INSTR_STRQR7ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._7Q; continue;
case INSTR_STRQR7ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._7Q; continue;
case INSTR_STRQR8AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._8Q; REGISTER.IP += 4; continue;
case INSTR_STRQR8ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._8Q; continue;
case INSTR_STRQR8ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._8Q; continue;
case INSTR_STRQR8ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._8Q; continue;
case INSTR_STRQR8ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._8Q; continue;
case INSTR_STRQR8AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._8Q; continue;
case INSTR_STRQR8AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._8Q; continue;
case INSTR_STRQR8ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._8Q; continue;
case INSTR_STRQR8ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._8Q; continue;
case INSTR_STRQR8ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._8Q; continue;
case INSTR_STRQR9AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._9Q; REGISTER.IP += 4; continue;
case INSTR_STRQR9ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._9Q; continue;
case INSTR_STRQR9ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._9Q; continue;
case INSTR_STRQR9ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._9Q; continue;
case INSTR_STRQR9ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._9Q; continue;
case INSTR_STRQR9AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._9Q; continue;
case INSTR_STRQR9AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._9Q; continue;
case INSTR_STRQR9ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._9Q; continue;
case INSTR_STRQR9ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._9Q; continue;
case INSTR_STRQR9ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._9Q; continue;
case INSTR_STRQR10AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._10Q; REGISTER.IP += 4; continue;
case INSTR_STRQR10ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._10Q; continue;
case INSTR_STRQR10ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._10Q; continue;
case INSTR_STRQR10ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._10Q; continue;
case INSTR_STRQR10ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._10Q; continue;
case INSTR_STRQR10AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._10Q; continue;
case INSTR_STRQR10AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._10Q; continue;
case INSTR_STRQR10ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._10Q; continue;
case INSTR_STRQR10ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._10Q; continue;
case INSTR_STRQR10ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._10Q; continue;
case INSTR_STRQR11AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._11Q; REGISTER.IP += 4; continue;
case INSTR_STRQR11ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._11Q; continue;
case INSTR_STRQR11ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._11Q; continue;
case INSTR_STRQR11ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._11Q; continue;
case INSTR_STRQR11ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._11Q; continue;
case INSTR_STRQR11AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._11Q; continue;
case INSTR_STRQR11AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._11Q; continue;
case INSTR_STRQR11ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._11Q; continue;
case INSTR_STRQR11ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._11Q; continue;
case INSTR_STRQR11ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._11Q; continue;
case INSTR_STRQR12AI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._12Q; REGISTER.IP += 4; continue;
case INSTR_STRQR12ARA: *(int*) (RAM + REGISTER.AQ) = REGISTER._12Q; continue;
case INSTR_STRQR12ARB: *(int*) (RAM + REGISTER.BQ) = REGISTER._12Q; continue;
case INSTR_STRQR12ARC: *(int*) (RAM + REGISTER.CQ) = REGISTER._12Q; continue;
case INSTR_STRQR12ARD: *(int*) (RAM + REGISTER.DQ) = REGISTER._12Q; continue;
case INSTR_STRQR12AR0: *(int*) (RAM + REGISTER._0Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR1: *(int*) (RAM + REGISTER._1Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR2: *(int*) (RAM + REGISTER._2Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR3: *(int*) (RAM + REGISTER._3Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR4: *(int*) (RAM + REGISTER._4Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR5: *(int*) (RAM + REGISTER._5Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR6: *(int*) (RAM + REGISTER._6Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR7: *(int*) (RAM + REGISTER._7Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR8: *(int*) (RAM + REGISTER._8Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR9: *(int*) (RAM + REGISTER._9Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR10: *(int*) (RAM + REGISTER._10Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR11: *(int*) (RAM + REGISTER._11Q) = REGISTER._12Q; continue;
case INSTR_STRQR12AR12: *(int*) (RAM + REGISTER._12Q) = REGISTER._12Q; continue;
case INSTR_STRQR12ARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER._12Q; continue;
case INSTR_STRQR12ARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER._12Q; continue;
case INSTR_STRQR12ARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER._12Q; continue;
case INSTR_STRQRIPAI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.IPQ; REGISTER.IP += 4; continue;
case INSTR_STRQRIPARA: *(int*) (RAM + REGISTER.AQ) = REGISTER.IPQ; continue;
case INSTR_STRQRIPARB: *(int*) (RAM + REGISTER.BQ) = REGISTER.IPQ; continue;
case INSTR_STRQRIPARC: *(int*) (RAM + REGISTER.CQ) = REGISTER.IPQ; continue;
case INSTR_STRQRIPARD: *(int*) (RAM + REGISTER.DQ) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR0: *(int*) (RAM + REGISTER._0Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR1: *(int*) (RAM + REGISTER._1Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR2: *(int*) (RAM + REGISTER._2Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR3: *(int*) (RAM + REGISTER._3Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR4: *(int*) (RAM + REGISTER._4Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR5: *(int*) (RAM + REGISTER._5Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR6: *(int*) (RAM + REGISTER._6Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR7: *(int*) (RAM + REGISTER._7Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR8: *(int*) (RAM + REGISTER._8Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR9: *(int*) (RAM + REGISTER._9Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR10: *(int*) (RAM + REGISTER._10Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR11: *(int*) (RAM + REGISTER._11Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPAR12: *(int*) (RAM + REGISTER._12Q) = REGISTER.IPQ; continue;
case INSTR_STRQRIPARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER.IPQ; continue;
case INSTR_STRQRIPARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER.IPQ; continue;
case INSTR_STRQRIPARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER.IPQ; continue;
case INSTR_STRQRSPAI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.SPQ; REGISTER.IP += 4; continue;
case INSTR_STRQRSPARA: *(int*) (RAM + REGISTER.AQ) = REGISTER.SPQ; continue;
case INSTR_STRQRSPARB: *(int*) (RAM + REGISTER.BQ) = REGISTER.SPQ; continue;
case INSTR_STRQRSPARC: *(int*) (RAM + REGISTER.CQ) = REGISTER.SPQ; continue;
case INSTR_STRQRSPARD: *(int*) (RAM + REGISTER.DQ) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR0: *(int*) (RAM + REGISTER._0Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR1: *(int*) (RAM + REGISTER._1Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR2: *(int*) (RAM + REGISTER._2Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR3: *(int*) (RAM + REGISTER._3Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR4: *(int*) (RAM + REGISTER._4Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR5: *(int*) (RAM + REGISTER._5Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR6: *(int*) (RAM + REGISTER._6Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR7: *(int*) (RAM + REGISTER._7Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR8: *(int*) (RAM + REGISTER._8Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR9: *(int*) (RAM + REGISTER._9Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR10: *(int*) (RAM + REGISTER._10Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR11: *(int*) (RAM + REGISTER._11Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPAR12: *(int*) (RAM + REGISTER._12Q) = REGISTER.SPQ; continue;
case INSTR_STRQRSPARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER.SPQ; continue;
case INSTR_STRQRSPARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER.SPQ; continue;
case INSTR_STRQRSPARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER.SPQ; continue;
case INSTR_STRQRBPAI: *(int*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.BPQ; REGISTER.IP += 4; continue;
case INSTR_STRQRBPARA: *(int*) (RAM + REGISTER.AQ) = REGISTER.BPQ; continue;
case INSTR_STRQRBPARB: *(int*) (RAM + REGISTER.BQ) = REGISTER.BPQ; continue;
case INSTR_STRQRBPARC: *(int*) (RAM + REGISTER.CQ) = REGISTER.BPQ; continue;
case INSTR_STRQRBPARD: *(int*) (RAM + REGISTER.DQ) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR0: *(int*) (RAM + REGISTER._0Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR1: *(int*) (RAM + REGISTER._1Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR2: *(int*) (RAM + REGISTER._2Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR3: *(int*) (RAM + REGISTER._3Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR4: *(int*) (RAM + REGISTER._4Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR5: *(int*) (RAM + REGISTER._5Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR6: *(int*) (RAM + REGISTER._6Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR7: *(int*) (RAM + REGISTER._7Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR8: *(int*) (RAM + REGISTER._8Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR9: *(int*) (RAM + REGISTER._9Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR10: *(int*) (RAM + REGISTER._10Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR11: *(int*) (RAM + REGISTER._11Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPAR12: *(int*) (RAM + REGISTER._12Q) = REGISTER.BPQ; continue;
case INSTR_STRQRBPARIP: *(int*) (RAM + REGISTER.IPQ) = REGISTER.BPQ; continue;
case INSTR_STRQRBPARSP: *(int*) (RAM + REGISTER.SPQ) = REGISTER.BPQ; continue;
case INSTR_STRQRBPARBP: *(int*) (RAM + REGISTER.BPQ) = REGISTER.BPQ; continue;
case INSTR_STRWRAAI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.AW; REGISTER.IP += 4; continue;
case INSTR_STRWRAARA: *(short*) (RAM + REGISTER.AQ) = REGISTER.AW; continue;
case INSTR_STRWRAARB: *(short*) (RAM + REGISTER.BQ) = REGISTER.AW; continue;
case INSTR_STRWRAARC: *(short*) (RAM + REGISTER.CQ) = REGISTER.AW; continue;
case INSTR_STRWRAARD: *(short*) (RAM + REGISTER.DQ) = REGISTER.AW; continue;
case INSTR_STRWRAAR0: *(short*) (RAM + REGISTER._0Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR1: *(short*) (RAM + REGISTER._1Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR2: *(short*) (RAM + REGISTER._2Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR3: *(short*) (RAM + REGISTER._3Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR4: *(short*) (RAM + REGISTER._4Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR5: *(short*) (RAM + REGISTER._5Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR6: *(short*) (RAM + REGISTER._6Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR7: *(short*) (RAM + REGISTER._7Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR8: *(short*) (RAM + REGISTER._8Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR9: *(short*) (RAM + REGISTER._9Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR10: *(short*) (RAM + REGISTER._10Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR11: *(short*) (RAM + REGISTER._11Q) = REGISTER.AW; continue;
case INSTR_STRWRAAR12: *(short*) (RAM + REGISTER._12Q) = REGISTER.AW; continue;
case INSTR_STRWRAARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER.AW; continue;
case INSTR_STRWRAARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER.AW; continue;
case INSTR_STRWRAARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER.AW; continue;
case INSTR_STRWRBAI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.BW; REGISTER.IP += 4; continue;
case INSTR_STRWRBARA: *(short*) (RAM + REGISTER.AQ) = REGISTER.BW; continue;
case INSTR_STRWRBARB: *(short*) (RAM + REGISTER.BQ) = REGISTER.BW; continue;
case INSTR_STRWRBARC: *(short*) (RAM + REGISTER.CQ) = REGISTER.BW; continue;
case INSTR_STRWRBARD: *(short*) (RAM + REGISTER.DQ) = REGISTER.BW; continue;
case INSTR_STRWRBAR0: *(short*) (RAM + REGISTER._0Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR1: *(short*) (RAM + REGISTER._1Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR2: *(short*) (RAM + REGISTER._2Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR3: *(short*) (RAM + REGISTER._3Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR4: *(short*) (RAM + REGISTER._4Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR5: *(short*) (RAM + REGISTER._5Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR6: *(short*) (RAM + REGISTER._6Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR7: *(short*) (RAM + REGISTER._7Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR8: *(short*) (RAM + REGISTER._8Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR9: *(short*) (RAM + REGISTER._9Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR10: *(short*) (RAM + REGISTER._10Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR11: *(short*) (RAM + REGISTER._11Q) = REGISTER.BW; continue;
case INSTR_STRWRBAR12: *(short*) (RAM + REGISTER._12Q) = REGISTER.BW; continue;
case INSTR_STRWRBARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER.BW; continue;
case INSTR_STRWRBARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER.BW; continue;
case INSTR_STRWRBARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER.BW; continue;
case INSTR_STRWRCAI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.CW; REGISTER.IP += 4; continue;
case INSTR_STRWRCARA: *(short*) (RAM + REGISTER.AQ) = REGISTER.CW; continue;
case INSTR_STRWRCARB: *(short*) (RAM + REGISTER.BQ) = REGISTER.CW; continue;
case INSTR_STRWRCARC: *(short*) (RAM + REGISTER.CQ) = REGISTER.CW; continue;
case INSTR_STRWRCARD: *(short*) (RAM + REGISTER.DQ) = REGISTER.CW; continue;
case INSTR_STRWRCAR0: *(short*) (RAM + REGISTER._0Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR1: *(short*) (RAM + REGISTER._1Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR2: *(short*) (RAM + REGISTER._2Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR3: *(short*) (RAM + REGISTER._3Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR4: *(short*) (RAM + REGISTER._4Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR5: *(short*) (RAM + REGISTER._5Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR6: *(short*) (RAM + REGISTER._6Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR7: *(short*) (RAM + REGISTER._7Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR8: *(short*) (RAM + REGISTER._8Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR9: *(short*) (RAM + REGISTER._9Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR10: *(short*) (RAM + REGISTER._10Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR11: *(short*) (RAM + REGISTER._11Q) = REGISTER.CW; continue;
case INSTR_STRWRCAR12: *(short*) (RAM + REGISTER._12Q) = REGISTER.CW; continue;
case INSTR_STRWRCARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER.CW; continue;
case INSTR_STRWRCARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER.CW; continue;
case INSTR_STRWRCARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER.CW; continue;
case INSTR_STRWRDAI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.DW; REGISTER.IP += 4; continue;
case INSTR_STRWRDARA: *(short*) (RAM + REGISTER.AQ) = REGISTER.DW; continue;
case INSTR_STRWRDARB: *(short*) (RAM + REGISTER.BQ) = REGISTER.DW; continue;
case INSTR_STRWRDARC: *(short*) (RAM + REGISTER.CQ) = REGISTER.DW; continue;
case INSTR_STRWRDARD: *(short*) (RAM + REGISTER.DQ) = REGISTER.DW; continue;
case INSTR_STRWRDAR0: *(short*) (RAM + REGISTER._0Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR1: *(short*) (RAM + REGISTER._1Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR2: *(short*) (RAM + REGISTER._2Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR3: *(short*) (RAM + REGISTER._3Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR4: *(short*) (RAM + REGISTER._4Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR5: *(short*) (RAM + REGISTER._5Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR6: *(short*) (RAM + REGISTER._6Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR7: *(short*) (RAM + REGISTER._7Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR8: *(short*) (RAM + REGISTER._8Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR9: *(short*) (RAM + REGISTER._9Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR10: *(short*) (RAM + REGISTER._10Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR11: *(short*) (RAM + REGISTER._11Q) = REGISTER.DW; continue;
case INSTR_STRWRDAR12: *(short*) (RAM + REGISTER._12Q) = REGISTER.DW; continue;
case INSTR_STRWRDARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER.DW; continue;
case INSTR_STRWRDARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER.DW; continue;
case INSTR_STRWRDARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER.DW; continue;
case INSTR_STRWR0AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._0W; REGISTER.IP += 4; continue;
case INSTR_STRWR0ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._0W; continue;
case INSTR_STRWR0ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._0W; continue;
case INSTR_STRWR0ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._0W; continue;
case INSTR_STRWR0ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._0W; continue;
case INSTR_STRWR0AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._0W; continue;
case INSTR_STRWR0AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._0W; continue;
case INSTR_STRWR0ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._0W; continue;
case INSTR_STRWR0ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._0W; continue;
case INSTR_STRWR0ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._0W; continue;
case INSTR_STRWR1AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._1W; REGISTER.IP += 4; continue;
case INSTR_STRWR1ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._1W; continue;
case INSTR_STRWR1ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._1W; continue;
case INSTR_STRWR1ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._1W; continue;
case INSTR_STRWR1ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._1W; continue;
case INSTR_STRWR1AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._1W; continue;
case INSTR_STRWR1AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._1W; continue;
case INSTR_STRWR1ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._1W; continue;
case INSTR_STRWR1ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._1W; continue;
case INSTR_STRWR1ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._1W; continue;
case INSTR_STRWR2AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._2W; REGISTER.IP += 4; continue;
case INSTR_STRWR2ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._2W; continue;
case INSTR_STRWR2ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._2W; continue;
case INSTR_STRWR2ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._2W; continue;
case INSTR_STRWR2ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._2W; continue;
case INSTR_STRWR2AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._2W; continue;
case INSTR_STRWR2AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._2W; continue;
case INSTR_STRWR2ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._2W; continue;
case INSTR_STRWR2ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._2W; continue;
case INSTR_STRWR2ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._2W; continue;
case INSTR_STRWR3AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._3W; REGISTER.IP += 4; continue;
case INSTR_STRWR3ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._3W; continue;
case INSTR_STRWR3ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._3W; continue;
case INSTR_STRWR3ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._3W; continue;
case INSTR_STRWR3ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._3W; continue;
case INSTR_STRWR3AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._3W; continue;
case INSTR_STRWR3AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._3W; continue;
case INSTR_STRWR3ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._3W; continue;
case INSTR_STRWR3ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._3W; continue;
case INSTR_STRWR3ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._3W; continue;
case INSTR_STRWR4AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._4W; REGISTER.IP += 4; continue;
case INSTR_STRWR4ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._4W; continue;
case INSTR_STRWR4ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._4W; continue;
case INSTR_STRWR4ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._4W; continue;
case INSTR_STRWR4ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._4W; continue;
case INSTR_STRWR4AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._4W; continue;
case INSTR_STRWR4AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._4W; continue;
case INSTR_STRWR4ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._4W; continue;
case INSTR_STRWR4ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._4W; continue;
case INSTR_STRWR4ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._4W; continue;
case INSTR_STRWR5AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._5W; REGISTER.IP += 4; continue;
case INSTR_STRWR5ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._5W; continue;
case INSTR_STRWR5ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._5W; continue;
case INSTR_STRWR5ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._5W; continue;
case INSTR_STRWR5ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._5W; continue;
case INSTR_STRWR5AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._5W; continue;
case INSTR_STRWR5AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._5W; continue;
case INSTR_STRWR5ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._5W; continue;
case INSTR_STRWR5ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._5W; continue;
case INSTR_STRWR5ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._5W; continue;
case INSTR_STRWR6AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._6W; REGISTER.IP += 4; continue;
case INSTR_STRWR6ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._6W; continue;
case INSTR_STRWR6ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._6W; continue;
case INSTR_STRWR6ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._6W; continue;
case INSTR_STRWR6ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._6W; continue;
case INSTR_STRWR6AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._6W; continue;
case INSTR_STRWR6AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._6W; continue;
case INSTR_STRWR6ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._6W; continue;
case INSTR_STRWR6ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._6W; continue;
case INSTR_STRWR6ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._6W; continue;
case INSTR_STRWR7AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._7W; REGISTER.IP += 4; continue;
case INSTR_STRWR7ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._7W; continue;
case INSTR_STRWR7ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._7W; continue;
case INSTR_STRWR7ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._7W; continue;
case INSTR_STRWR7ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._7W; continue;
case INSTR_STRWR7AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._7W; continue;
case INSTR_STRWR7AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._7W; continue;
case INSTR_STRWR7ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._7W; continue;
case INSTR_STRWR7ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._7W; continue;
case INSTR_STRWR7ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._7W; continue;
case INSTR_STRWR8AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._8W; REGISTER.IP += 4; continue;
case INSTR_STRWR8ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._8W; continue;
case INSTR_STRWR8ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._8W; continue;
case INSTR_STRWR8ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._8W; continue;
case INSTR_STRWR8ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._8W; continue;
case INSTR_STRWR8AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._8W; continue;
case INSTR_STRWR8AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._8W; continue;
case INSTR_STRWR8ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._8W; continue;
case INSTR_STRWR8ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._8W; continue;
case INSTR_STRWR8ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._8W; continue;
case INSTR_STRWR9AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._9W; REGISTER.IP += 4; continue;
case INSTR_STRWR9ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._9W; continue;
case INSTR_STRWR9ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._9W; continue;
case INSTR_STRWR9ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._9W; continue;
case INSTR_STRWR9ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._9W; continue;
case INSTR_STRWR9AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._9W; continue;
case INSTR_STRWR9AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._9W; continue;
case INSTR_STRWR9ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._9W; continue;
case INSTR_STRWR9ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._9W; continue;
case INSTR_STRWR9ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._9W; continue;
case INSTR_STRWR10AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._10W; REGISTER.IP += 4; continue;
case INSTR_STRWR10ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._10W; continue;
case INSTR_STRWR10ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._10W; continue;
case INSTR_STRWR10ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._10W; continue;
case INSTR_STRWR10ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._10W; continue;
case INSTR_STRWR10AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._10W; continue;
case INSTR_STRWR10AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._10W; continue;
case INSTR_STRWR10ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._10W; continue;
case INSTR_STRWR10ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._10W; continue;
case INSTR_STRWR10ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._10W; continue;
case INSTR_STRWR11AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._11W; REGISTER.IP += 4; continue;
case INSTR_STRWR11ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._11W; continue;
case INSTR_STRWR11ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._11W; continue;
case INSTR_STRWR11ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._11W; continue;
case INSTR_STRWR11ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._11W; continue;
case INSTR_STRWR11AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._11W; continue;
case INSTR_STRWR11AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._11W; continue;
case INSTR_STRWR11ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._11W; continue;
case INSTR_STRWR11ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._11W; continue;
case INSTR_STRWR11ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._11W; continue;
case INSTR_STRWR12AI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._12W; REGISTER.IP += 4; continue;
case INSTR_STRWR12ARA: *(short*) (RAM + REGISTER.AQ) = REGISTER._12W; continue;
case INSTR_STRWR12ARB: *(short*) (RAM + REGISTER.BQ) = REGISTER._12W; continue;
case INSTR_STRWR12ARC: *(short*) (RAM + REGISTER.CQ) = REGISTER._12W; continue;
case INSTR_STRWR12ARD: *(short*) (RAM + REGISTER.DQ) = REGISTER._12W; continue;
case INSTR_STRWR12AR0: *(short*) (RAM + REGISTER._0Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR1: *(short*) (RAM + REGISTER._1Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR2: *(short*) (RAM + REGISTER._2Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR3: *(short*) (RAM + REGISTER._3Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR4: *(short*) (RAM + REGISTER._4Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR5: *(short*) (RAM + REGISTER._5Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR6: *(short*) (RAM + REGISTER._6Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR7: *(short*) (RAM + REGISTER._7Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR8: *(short*) (RAM + REGISTER._8Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR9: *(short*) (RAM + REGISTER._9Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR10: *(short*) (RAM + REGISTER._10Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR11: *(short*) (RAM + REGISTER._11Q) = REGISTER._12W; continue;
case INSTR_STRWR12AR12: *(short*) (RAM + REGISTER._12Q) = REGISTER._12W; continue;
case INSTR_STRWR12ARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER._12W; continue;
case INSTR_STRWR12ARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER._12W; continue;
case INSTR_STRWR12ARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER._12W; continue;
case INSTR_STRWRIPAI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.IPW; REGISTER.IP += 4; continue;
case INSTR_STRWRIPARA: *(short*) (RAM + REGISTER.AQ) = REGISTER.IPW; continue;
case INSTR_STRWRIPARB: *(short*) (RAM + REGISTER.BQ) = REGISTER.IPW; continue;
case INSTR_STRWRIPARC: *(short*) (RAM + REGISTER.CQ) = REGISTER.IPW; continue;
case INSTR_STRWRIPARD: *(short*) (RAM + REGISTER.DQ) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR0: *(short*) (RAM + REGISTER._0Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR1: *(short*) (RAM + REGISTER._1Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR2: *(short*) (RAM + REGISTER._2Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR3: *(short*) (RAM + REGISTER._3Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR4: *(short*) (RAM + REGISTER._4Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR5: *(short*) (RAM + REGISTER._5Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR6: *(short*) (RAM + REGISTER._6Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR7: *(short*) (RAM + REGISTER._7Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR8: *(short*) (RAM + REGISTER._8Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR9: *(short*) (RAM + REGISTER._9Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR10: *(short*) (RAM + REGISTER._10Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR11: *(short*) (RAM + REGISTER._11Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPAR12: *(short*) (RAM + REGISTER._12Q) = REGISTER.IPW; continue;
case INSTR_STRWRIPARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER.IPW; continue;
case INSTR_STRWRIPARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER.IPW; continue;
case INSTR_STRWRIPARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER.IPW; continue;
case INSTR_STRWRSPAI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.SPW; REGISTER.IP += 4; continue;
case INSTR_STRWRSPARA: *(short*) (RAM + REGISTER.AQ) = REGISTER.SPW; continue;
case INSTR_STRWRSPARB: *(short*) (RAM + REGISTER.BQ) = REGISTER.SPW; continue;
case INSTR_STRWRSPARC: *(short*) (RAM + REGISTER.CQ) = REGISTER.SPW; continue;
case INSTR_STRWRSPARD: *(short*) (RAM + REGISTER.DQ) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR0: *(short*) (RAM + REGISTER._0Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR1: *(short*) (RAM + REGISTER._1Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR2: *(short*) (RAM + REGISTER._2Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR3: *(short*) (RAM + REGISTER._3Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR4: *(short*) (RAM + REGISTER._4Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR5: *(short*) (RAM + REGISTER._5Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR6: *(short*) (RAM + REGISTER._6Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR7: *(short*) (RAM + REGISTER._7Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR8: *(short*) (RAM + REGISTER._8Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR9: *(short*) (RAM + REGISTER._9Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR10: *(short*) (RAM + REGISTER._10Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR11: *(short*) (RAM + REGISTER._11Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPAR12: *(short*) (RAM + REGISTER._12Q) = REGISTER.SPW; continue;
case INSTR_STRWRSPARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER.SPW; continue;
case INSTR_STRWRSPARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER.SPW; continue;
case INSTR_STRWRSPARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER.SPW; continue;
case INSTR_STRWRBPAI: *(short*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.BPW; REGISTER.IP += 4; continue;
case INSTR_STRWRBPARA: *(short*) (RAM + REGISTER.AQ) = REGISTER.BPW; continue;
case INSTR_STRWRBPARB: *(short*) (RAM + REGISTER.BQ) = REGISTER.BPW; continue;
case INSTR_STRWRBPARC: *(short*) (RAM + REGISTER.CQ) = REGISTER.BPW; continue;
case INSTR_STRWRBPARD: *(short*) (RAM + REGISTER.DQ) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR0: *(short*) (RAM + REGISTER._0Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR1: *(short*) (RAM + REGISTER._1Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR2: *(short*) (RAM + REGISTER._2Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR3: *(short*) (RAM + REGISTER._3Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR4: *(short*) (RAM + REGISTER._4Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR5: *(short*) (RAM + REGISTER._5Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR6: *(short*) (RAM + REGISTER._6Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR7: *(short*) (RAM + REGISTER._7Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR8: *(short*) (RAM + REGISTER._8Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR9: *(short*) (RAM + REGISTER._9Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR10: *(short*) (RAM + REGISTER._10Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR11: *(short*) (RAM + REGISTER._11Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPAR12: *(short*) (RAM + REGISTER._12Q) = REGISTER.BPW; continue;
case INSTR_STRWRBPARIP: *(short*) (RAM + REGISTER.IPQ) = REGISTER.BPW; continue;
case INSTR_STRWRBPARSP: *(short*) (RAM + REGISTER.SPQ) = REGISTER.BPW; continue;
case INSTR_STRWRBPARBP: *(short*) (RAM + REGISTER.BPQ) = REGISTER.BPW; continue;
case INSTR_STRBRAAI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.AB; REGISTER.IP += 4; continue;
case INSTR_STRBRAARA: *(char*) (RAM + REGISTER.AQ) = REGISTER.AB; continue;
case INSTR_STRBRAARB: *(char*) (RAM + REGISTER.BQ) = REGISTER.AB; continue;
case INSTR_STRBRAARC: *(char*) (RAM + REGISTER.CQ) = REGISTER.AB; continue;
case INSTR_STRBRAARD: *(char*) (RAM + REGISTER.DQ) = REGISTER.AB; continue;
case INSTR_STRBRAAR0: *(char*) (RAM + REGISTER._0Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR1: *(char*) (RAM + REGISTER._1Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR2: *(char*) (RAM + REGISTER._2Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR3: *(char*) (RAM + REGISTER._3Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR4: *(char*) (RAM + REGISTER._4Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR5: *(char*) (RAM + REGISTER._5Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR6: *(char*) (RAM + REGISTER._6Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR7: *(char*) (RAM + REGISTER._7Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR8: *(char*) (RAM + REGISTER._8Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR9: *(char*) (RAM + REGISTER._9Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR10: *(char*) (RAM + REGISTER._10Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR11: *(char*) (RAM + REGISTER._11Q) = REGISTER.AB; continue;
case INSTR_STRBRAAR12: *(char*) (RAM + REGISTER._12Q) = REGISTER.AB; continue;
case INSTR_STRBRAARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER.AB; continue;
case INSTR_STRBRAARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER.AB; continue;
case INSTR_STRBRAARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER.AB; continue;
case INSTR_STRBRBAI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.BB; REGISTER.IP += 4; continue;
case INSTR_STRBRBARA: *(char*) (RAM + REGISTER.AQ) = REGISTER.BB; continue;
case INSTR_STRBRBARB: *(char*) (RAM + REGISTER.BQ) = REGISTER.BB; continue;
case INSTR_STRBRBARC: *(char*) (RAM + REGISTER.CQ) = REGISTER.BB; continue;
case INSTR_STRBRBARD: *(char*) (RAM + REGISTER.DQ) = REGISTER.BB; continue;
case INSTR_STRBRBAR0: *(char*) (RAM + REGISTER._0Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR1: *(char*) (RAM + REGISTER._1Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR2: *(char*) (RAM + REGISTER._2Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR3: *(char*) (RAM + REGISTER._3Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR4: *(char*) (RAM + REGISTER._4Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR5: *(char*) (RAM + REGISTER._5Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR6: *(char*) (RAM + REGISTER._6Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR7: *(char*) (RAM + REGISTER._7Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR8: *(char*) (RAM + REGISTER._8Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR9: *(char*) (RAM + REGISTER._9Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR10: *(char*) (RAM + REGISTER._10Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR11: *(char*) (RAM + REGISTER._11Q) = REGISTER.BB; continue;
case INSTR_STRBRBAR12: *(char*) (RAM + REGISTER._12Q) = REGISTER.BB; continue;
case INSTR_STRBRBARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER.BB; continue;
case INSTR_STRBRBARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER.BB; continue;
case INSTR_STRBRBARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER.BB; continue;
case INSTR_STRBRCAI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.CB; REGISTER.IP += 4; continue;
case INSTR_STRBRCARA: *(char*) (RAM + REGISTER.AQ) = REGISTER.CB; continue;
case INSTR_STRBRCARB: *(char*) (RAM + REGISTER.BQ) = REGISTER.CB; continue;
case INSTR_STRBRCARC: *(char*) (RAM + REGISTER.CQ) = REGISTER.CB; continue;
case INSTR_STRBRCARD: *(char*) (RAM + REGISTER.DQ) = REGISTER.CB; continue;
case INSTR_STRBRCAR0: *(char*) (RAM + REGISTER._0Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR1: *(char*) (RAM + REGISTER._1Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR2: *(char*) (RAM + REGISTER._2Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR3: *(char*) (RAM + REGISTER._3Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR4: *(char*) (RAM + REGISTER._4Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR5: *(char*) (RAM + REGISTER._5Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR6: *(char*) (RAM + REGISTER._6Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR7: *(char*) (RAM + REGISTER._7Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR8: *(char*) (RAM + REGISTER._8Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR9: *(char*) (RAM + REGISTER._9Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR10: *(char*) (RAM + REGISTER._10Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR11: *(char*) (RAM + REGISTER._11Q) = REGISTER.CB; continue;
case INSTR_STRBRCAR12: *(char*) (RAM + REGISTER._12Q) = REGISTER.CB; continue;
case INSTR_STRBRCARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER.CB; continue;
case INSTR_STRBRCARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER.CB; continue;
case INSTR_STRBRCARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER.CB; continue;
case INSTR_STRBRDAI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.DB; REGISTER.IP += 4; continue;
case INSTR_STRBRDARA: *(char*) (RAM + REGISTER.AQ) = REGISTER.DB; continue;
case INSTR_STRBRDARB: *(char*) (RAM + REGISTER.BQ) = REGISTER.DB; continue;
case INSTR_STRBRDARC: *(char*) (RAM + REGISTER.CQ) = REGISTER.DB; continue;
case INSTR_STRBRDARD: *(char*) (RAM + REGISTER.DQ) = REGISTER.DB; continue;
case INSTR_STRBRDAR0: *(char*) (RAM + REGISTER._0Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR1: *(char*) (RAM + REGISTER._1Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR2: *(char*) (RAM + REGISTER._2Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR3: *(char*) (RAM + REGISTER._3Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR4: *(char*) (RAM + REGISTER._4Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR5: *(char*) (RAM + REGISTER._5Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR6: *(char*) (RAM + REGISTER._6Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR7: *(char*) (RAM + REGISTER._7Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR8: *(char*) (RAM + REGISTER._8Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR9: *(char*) (RAM + REGISTER._9Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR10: *(char*) (RAM + REGISTER._10Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR11: *(char*) (RAM + REGISTER._11Q) = REGISTER.DB; continue;
case INSTR_STRBRDAR12: *(char*) (RAM + REGISTER._12Q) = REGISTER.DB; continue;
case INSTR_STRBRDARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER.DB; continue;
case INSTR_STRBRDARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER.DB; continue;
case INSTR_STRBRDARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER.DB; continue;
case INSTR_STRBR0AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._0B; REGISTER.IP += 4; continue;
case INSTR_STRBR0ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._0B; continue;
case INSTR_STRBR0ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._0B; continue;
case INSTR_STRBR0ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._0B; continue;
case INSTR_STRBR0ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._0B; continue;
case INSTR_STRBR0AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._0B; continue;
case INSTR_STRBR0AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._0B; continue;
case INSTR_STRBR0ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._0B; continue;
case INSTR_STRBR0ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._0B; continue;
case INSTR_STRBR0ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._0B; continue;
case INSTR_STRBR1AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._1B; REGISTER.IP += 4; continue;
case INSTR_STRBR1ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._1B; continue;
case INSTR_STRBR1ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._1B; continue;
case INSTR_STRBR1ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._1B; continue;
case INSTR_STRBR1ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._1B; continue;
case INSTR_STRBR1AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._1B; continue;
case INSTR_STRBR1AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._1B; continue;
case INSTR_STRBR1ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._1B; continue;
case INSTR_STRBR1ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._1B; continue;
case INSTR_STRBR1ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._1B; continue;
case INSTR_STRBR2AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._2B; REGISTER.IP += 4; continue;
case INSTR_STRBR2ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._2B; continue;
case INSTR_STRBR2ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._2B; continue;
case INSTR_STRBR2ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._2B; continue;
case INSTR_STRBR2ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._2B; continue;
case INSTR_STRBR2AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._2B; continue;
case INSTR_STRBR2AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._2B; continue;
case INSTR_STRBR2ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._2B; continue;
case INSTR_STRBR2ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._2B; continue;
case INSTR_STRBR2ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._2B; continue;
case INSTR_STRBR3AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._3B; REGISTER.IP += 4; continue;
case INSTR_STRBR3ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._3B; continue;
case INSTR_STRBR3ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._3B; continue;
case INSTR_STRBR3ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._3B; continue;
case INSTR_STRBR3ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._3B; continue;
case INSTR_STRBR3AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._3B; continue;
case INSTR_STRBR3AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._3B; continue;
case INSTR_STRBR3ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._3B; continue;
case INSTR_STRBR3ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._3B; continue;
case INSTR_STRBR3ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._3B; continue;
case INSTR_STRBR4AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._4B; REGISTER.IP += 4; continue;
case INSTR_STRBR4ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._4B; continue;
case INSTR_STRBR4ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._4B; continue;
case INSTR_STRBR4ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._4B; continue;
case INSTR_STRBR4ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._4B; continue;
case INSTR_STRBR4AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._4B; continue;
case INSTR_STRBR4AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._4B; continue;
case INSTR_STRBR4ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._4B; continue;
case INSTR_STRBR4ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._4B; continue;
case INSTR_STRBR4ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._4B; continue;
case INSTR_STRBR5AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._5B; REGISTER.IP += 4; continue;
case INSTR_STRBR5ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._5B; continue;
case INSTR_STRBR5ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._5B; continue;
case INSTR_STRBR5ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._5B; continue;
case INSTR_STRBR5ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._5B; continue;
case INSTR_STRBR5AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._5B; continue;
case INSTR_STRBR5AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._5B; continue;
case INSTR_STRBR5ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._5B; continue;
case INSTR_STRBR5ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._5B; continue;
case INSTR_STRBR5ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._5B; continue;
case INSTR_STRBR6AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._6B; REGISTER.IP += 4; continue;
case INSTR_STRBR6ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._6B; continue;
case INSTR_STRBR6ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._6B; continue;
case INSTR_STRBR6ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._6B; continue;
case INSTR_STRBR6ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._6B; continue;
case INSTR_STRBR6AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._6B; continue;
case INSTR_STRBR6AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._6B; continue;
case INSTR_STRBR6ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._6B; continue;
case INSTR_STRBR6ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._6B; continue;
case INSTR_STRBR6ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._6B; continue;
case INSTR_STRBR7AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._7B; REGISTER.IP += 4; continue;
case INSTR_STRBR7ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._7B; continue;
case INSTR_STRBR7ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._7B; continue;
case INSTR_STRBR7ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._7B; continue;
case INSTR_STRBR7ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._7B; continue;
case INSTR_STRBR7AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._7B; continue;
case INSTR_STRBR7AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._7B; continue;
case INSTR_STRBR7ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._7B; continue;
case INSTR_STRBR7ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._7B; continue;
case INSTR_STRBR7ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._7B; continue;
case INSTR_STRBR8AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._8B; REGISTER.IP += 4; continue;
case INSTR_STRBR8ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._8B; continue;
case INSTR_STRBR8ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._8B; continue;
case INSTR_STRBR8ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._8B; continue;
case INSTR_STRBR8ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._8B; continue;
case INSTR_STRBR8AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._8B; continue;
case INSTR_STRBR8AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._8B; continue;
case INSTR_STRBR8ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._8B; continue;
case INSTR_STRBR8ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._8B; continue;
case INSTR_STRBR8ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._8B; continue;
case INSTR_STRBR9AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._9B; REGISTER.IP += 4; continue;
case INSTR_STRBR9ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._9B; continue;
case INSTR_STRBR9ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._9B; continue;
case INSTR_STRBR9ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._9B; continue;
case INSTR_STRBR9ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._9B; continue;
case INSTR_STRBR9AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._9B; continue;
case INSTR_STRBR9AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._9B; continue;
case INSTR_STRBR9ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._9B; continue;
case INSTR_STRBR9ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._9B; continue;
case INSTR_STRBR9ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._9B; continue;
case INSTR_STRBR10AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._10B; REGISTER.IP += 4; continue;
case INSTR_STRBR10ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._10B; continue;
case INSTR_STRBR10ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._10B; continue;
case INSTR_STRBR10ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._10B; continue;
case INSTR_STRBR10ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._10B; continue;
case INSTR_STRBR10AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._10B; continue;
case INSTR_STRBR10AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._10B; continue;
case INSTR_STRBR10ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._10B; continue;
case INSTR_STRBR10ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._10B; continue;
case INSTR_STRBR10ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._10B; continue;
case INSTR_STRBR11AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._11B; REGISTER.IP += 4; continue;
case INSTR_STRBR11ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._11B; continue;
case INSTR_STRBR11ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._11B; continue;
case INSTR_STRBR11ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._11B; continue;
case INSTR_STRBR11ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._11B; continue;
case INSTR_STRBR11AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._11B; continue;
case INSTR_STRBR11AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._11B; continue;
case INSTR_STRBR11ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._11B; continue;
case INSTR_STRBR11ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._11B; continue;
case INSTR_STRBR11ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._11B; continue;
case INSTR_STRBR12AI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER._12B; REGISTER.IP += 4; continue;
case INSTR_STRBR12ARA: *(char*) (RAM + REGISTER.AQ) = REGISTER._12B; continue;
case INSTR_STRBR12ARB: *(char*) (RAM + REGISTER.BQ) = REGISTER._12B; continue;
case INSTR_STRBR12ARC: *(char*) (RAM + REGISTER.CQ) = REGISTER._12B; continue;
case INSTR_STRBR12ARD: *(char*) (RAM + REGISTER.DQ) = REGISTER._12B; continue;
case INSTR_STRBR12AR0: *(char*) (RAM + REGISTER._0Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR1: *(char*) (RAM + REGISTER._1Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR2: *(char*) (RAM + REGISTER._2Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR3: *(char*) (RAM + REGISTER._3Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR4: *(char*) (RAM + REGISTER._4Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR5: *(char*) (RAM + REGISTER._5Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR6: *(char*) (RAM + REGISTER._6Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR7: *(char*) (RAM + REGISTER._7Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR8: *(char*) (RAM + REGISTER._8Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR9: *(char*) (RAM + REGISTER._9Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR10: *(char*) (RAM + REGISTER._10Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR11: *(char*) (RAM + REGISTER._11Q) = REGISTER._12B; continue;
case INSTR_STRBR12AR12: *(char*) (RAM + REGISTER._12Q) = REGISTER._12B; continue;
case INSTR_STRBR12ARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER._12B; continue;
case INSTR_STRBR12ARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER._12B; continue;
case INSTR_STRBR12ARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER._12B; continue;
case INSTR_STRBRIPAI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.IPB; REGISTER.IP += 4; continue;
case INSTR_STRBRIPARA: *(char*) (RAM + REGISTER.AQ) = REGISTER.IPB; continue;
case INSTR_STRBRIPARB: *(char*) (RAM + REGISTER.BQ) = REGISTER.IPB; continue;
case INSTR_STRBRIPARC: *(char*) (RAM + REGISTER.CQ) = REGISTER.IPB; continue;
case INSTR_STRBRIPARD: *(char*) (RAM + REGISTER.DQ) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR0: *(char*) (RAM + REGISTER._0Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR1: *(char*) (RAM + REGISTER._1Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR2: *(char*) (RAM + REGISTER._2Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR3: *(char*) (RAM + REGISTER._3Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR4: *(char*) (RAM + REGISTER._4Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR5: *(char*) (RAM + REGISTER._5Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR6: *(char*) (RAM + REGISTER._6Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR7: *(char*) (RAM + REGISTER._7Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR8: *(char*) (RAM + REGISTER._8Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR9: *(char*) (RAM + REGISTER._9Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR10: *(char*) (RAM + REGISTER._10Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR11: *(char*) (RAM + REGISTER._11Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPAR12: *(char*) (RAM + REGISTER._12Q) = REGISTER.IPB; continue;
case INSTR_STRBRIPARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER.IPB; continue;
case INSTR_STRBRIPARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER.IPB; continue;
case INSTR_STRBRIPARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER.IPB; continue;
case INSTR_STRBRSPAI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.SPB; REGISTER.IP += 4; continue;
case INSTR_STRBRSPARA: *(char*) (RAM + REGISTER.AQ) = REGISTER.SPB; continue;
case INSTR_STRBRSPARB: *(char*) (RAM + REGISTER.BQ) = REGISTER.SPB; continue;
case INSTR_STRBRSPARC: *(char*) (RAM + REGISTER.CQ) = REGISTER.SPB; continue;
case INSTR_STRBRSPARD: *(char*) (RAM + REGISTER.DQ) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR0: *(char*) (RAM + REGISTER._0Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR1: *(char*) (RAM + REGISTER._1Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR2: *(char*) (RAM + REGISTER._2Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR3: *(char*) (RAM + REGISTER._3Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR4: *(char*) (RAM + REGISTER._4Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR5: *(char*) (RAM + REGISTER._5Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR6: *(char*) (RAM + REGISTER._6Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR7: *(char*) (RAM + REGISTER._7Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR8: *(char*) (RAM + REGISTER._8Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR9: *(char*) (RAM + REGISTER._9Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR10: *(char*) (RAM + REGISTER._10Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR11: *(char*) (RAM + REGISTER._11Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPAR12: *(char*) (RAM + REGISTER._12Q) = REGISTER.SPB; continue;
case INSTR_STRBRSPARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER.SPB; continue;
case INSTR_STRBRSPARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER.SPB; continue;
case INSTR_STRBRSPARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER.SPB; continue;
case INSTR_STRBRBPAI: *(char*) (RAM + *(unsigned int*) (RAM + REGISTER.IP)) = REGISTER.BPB; REGISTER.IP += 4; continue;
case INSTR_STRBRBPARA: *(char*) (RAM + REGISTER.AQ) = REGISTER.BPB; continue;
case INSTR_STRBRBPARB: *(char*) (RAM + REGISTER.BQ) = REGISTER.BPB; continue;
case INSTR_STRBRBPARC: *(char*) (RAM + REGISTER.CQ) = REGISTER.BPB; continue;
case INSTR_STRBRBPARD: *(char*) (RAM + REGISTER.DQ) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR0: *(char*) (RAM + REGISTER._0Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR1: *(char*) (RAM + REGISTER._1Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR2: *(char*) (RAM + REGISTER._2Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR3: *(char*) (RAM + REGISTER._3Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR4: *(char*) (RAM + REGISTER._4Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR5: *(char*) (RAM + REGISTER._5Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR6: *(char*) (RAM + REGISTER._6Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR7: *(char*) (RAM + REGISTER._7Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR8: *(char*) (RAM + REGISTER._8Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR9: *(char*) (RAM + REGISTER._9Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR10: *(char*) (RAM + REGISTER._10Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR11: *(char*) (RAM + REGISTER._11Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPAR12: *(char*) (RAM + REGISTER._12Q) = REGISTER.BPB; continue;
case INSTR_STRBRBPARIP: *(char*) (RAM + REGISTER.IPQ) = REGISTER.BPB; continue;
case INSTR_STRBRBPARSP: *(char*) (RAM + REGISTER.SPQ) = REGISTER.BPB; continue;
case INSTR_STRBRBPARBP: *(char*) (RAM + REGISTER.BPQ) = REGISTER.BPB; continue;
// push //
case INSTR_PUSHQI: *(int*) (RAM + REGISTER.SP) = *(int*) (RAM + REGISTER.IP); REGISTER.SP += 4; REGISTER.IP += 4; continue;
case INSTR_PUSHQRA: *(int*) (RAM + REGISTER.SP) = REGISTER.AQ; REGISTER.SP += 4; continue;
case INSTR_PUSHQRB: *(int*) (RAM + REGISTER.SP) = REGISTER.BQ; REGISTER.SP += 4; continue;
case INSTR_PUSHQRC: *(int*) (RAM + REGISTER.SP) = REGISTER.CQ; REGISTER.SP += 4; continue;
case INSTR_PUSHQRD: *(int*) (RAM + REGISTER.SP) = REGISTER.DQ; REGISTER.SP += 4; continue;
case INSTR_PUSHQR0: *(int*) (RAM + REGISTER.SP) = REGISTER._0Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR1: *(int*) (RAM + REGISTER.SP) = REGISTER._1Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR2: *(int*) (RAM + REGISTER.SP) = REGISTER._2Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR3: *(int*) (RAM + REGISTER.SP) = REGISTER._3Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR4: *(int*) (RAM + REGISTER.SP) = REGISTER._4Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR5: *(int*) (RAM + REGISTER.SP) = REGISTER._5Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR6: *(int*) (RAM + REGISTER.SP) = REGISTER._6Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR7: *(int*) (RAM + REGISTER.SP) = REGISTER._7Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR8: *(int*) (RAM + REGISTER.SP) = REGISTER._8Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR9: *(int*) (RAM + REGISTER.SP) = REGISTER._9Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR10: *(int*) (RAM + REGISTER.SP) = REGISTER._10Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR11: *(int*) (RAM + REGISTER.SP) = REGISTER._11Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQR12: *(int*) (RAM + REGISTER.SP) = REGISTER._12Q; REGISTER.SP += 4; continue;
case INSTR_PUSHQRIP: *(int*) (RAM + REGISTER.SP) = REGISTER.IPQ; REGISTER.SP += 4; continue;
case INSTR_PUSHQRSP: *(int*) (RAM + REGISTER.SP) = REGISTER.SPQ; REGISTER.SP += 4; continue;
case INSTR_PUSHQRBP: *(int*) (RAM + REGISTER.SP) = REGISTER.BPQ; REGISTER.SP += 4; continue;
case INSTR_PUSHWI: *(short*) (RAM + REGISTER.SP) = *(short*) (RAM + REGISTER.IP); REGISTER.SP += 2; REGISTER.IP += 2; continue;
case INSTR_PUSHWRA: *(short*) (RAM + REGISTER.SP) = REGISTER.AW; REGISTER.SP += 2; continue;
case INSTR_PUSHWRB: *(short*) (RAM + REGISTER.SP) = REGISTER.BW; REGISTER.SP += 2; continue;
case INSTR_PUSHWRC: *(short*) (RAM + REGISTER.SP) = REGISTER.CW; REGISTER.SP += 2; continue;
case INSTR_PUSHWRD: *(short*) (RAM + REGISTER.SP) = REGISTER.DW; REGISTER.SP += 2; continue;
case INSTR_PUSHWR0: *(short*) (RAM + REGISTER.SP) = REGISTER._0W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR1: *(short*) (RAM + REGISTER.SP) = REGISTER._1W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR2: *(short*) (RAM + REGISTER.SP) = REGISTER._2W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR3: *(short*) (RAM + REGISTER.SP) = REGISTER._3W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR4: *(short*) (RAM + REGISTER.SP) = REGISTER._4W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR5: *(short*) (RAM + REGISTER.SP) = REGISTER._5W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR6: *(short*) (RAM + REGISTER.SP) = REGISTER._6W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR7: *(short*) (RAM + REGISTER.SP) = REGISTER._7W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR8: *(short*) (RAM + REGISTER.SP) = REGISTER._8W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR9: *(short*) (RAM + REGISTER.SP) = REGISTER._9W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR10: *(short*) (RAM + REGISTER.SP) = REGISTER._10W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR11: *(short*) (RAM + REGISTER.SP) = REGISTER._11W; REGISTER.SP += 2; continue;
case INSTR_PUSHWR12: *(short*) (RAM + REGISTER.SP) = REGISTER._12W; REGISTER.SP += 2; continue;
case INSTR_PUSHWRIP: *(short*) (RAM + REGISTER.SP) = REGISTER.IPW; REGISTER.SP += 2; continue;
case INSTR_PUSHWRSP: *(short*) (RAM + REGISTER.SP) = REGISTER.SPW; REGISTER.SP += 2; continue;
case INSTR_PUSHWRBP: *(short*) (RAM + REGISTER.SP) = REGISTER.BPW; REGISTER.SP += 2; continue;
case INSTR_PUSHBI: *(char*) (RAM + REGISTER.SP) = *(char*) (RAM + REGISTER.IP); REGISTER.SP += 1; REGISTER.IP += 1; continue;
case INSTR_PUSHBRA: *(char*) (RAM + REGISTER.SP) = REGISTER.AB; REGISTER.SP += 1; continue;
case INSTR_PUSHBRB: *(char*) (RAM + REGISTER.SP) = REGISTER.BB; REGISTER.SP += 1; continue;
case INSTR_PUSHBRC: *(char*) (RAM + REGISTER.SP) = REGISTER.CB; REGISTER.SP += 1; continue;
case INSTR_PUSHBRD: *(char*) (RAM + REGISTER.SP) = REGISTER.DB; REGISTER.SP += 1; continue;
case INSTR_PUSHBR0: *(char*) (RAM + REGISTER.SP) = REGISTER._0B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR1: *(char*) (RAM + REGISTER.SP) = REGISTER._1B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR2: *(char*) (RAM + REGISTER.SP) = REGISTER._2B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR3: *(char*) (RAM + REGISTER.SP) = REGISTER._3B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR4: *(char*) (RAM + REGISTER.SP) = REGISTER._4B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR5: *(char*) (RAM + REGISTER.SP) = REGISTER._5B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR6: *(char*) (RAM + REGISTER.SP) = REGISTER._6B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR7: *(char*) (RAM + REGISTER.SP) = REGISTER._7B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR8: *(char*) (RAM + REGISTER.SP) = REGISTER._8B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR9: *(char*) (RAM + REGISTER.SP) = REGISTER._9B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR10: *(char*) (RAM + REGISTER.SP) = REGISTER._10B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR11: *(char*) (RAM + REGISTER.SP) = REGISTER._11B; REGISTER.SP += 1; continue;
case INSTR_PUSHBR12: *(char*) (RAM + REGISTER.SP) = REGISTER._12B; REGISTER.SP += 1; continue;
case INSTR_PUSHBRIP: *(char*) (RAM + REGISTER.SP) = REGISTER.IPB; REGISTER.SP += 1; continue;
case INSTR_PUSHBRSP: *(char*) (RAM + REGISTER.SP) = REGISTER.SPB; REGISTER.SP += 1; continue;
case INSTR_PUSHBRBP: *(char*) (RAM + REGISTER.SP) = REGISTER.BPB; REGISTER.SP += 1; continue;
case INSTR_PUSHNI: REGISTER.SP += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
// pop //
case INSTR_POPQRA: REGISTER.SP -= 4; REGISTER.AQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQRB: REGISTER.SP -= 4; REGISTER.BQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQRC: REGISTER.SP -= 4; REGISTER.CQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQRD: REGISTER.SP -= 4; REGISTER.DQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR0: REGISTER.SP -= 4; REGISTER._0Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR1: REGISTER.SP -= 4; REGISTER._1Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR2: REGISTER.SP -= 4; REGISTER._2Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR3: REGISTER.SP -= 4; REGISTER._3Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR4: REGISTER.SP -= 4; REGISTER._4Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR5: REGISTER.SP -= 4; REGISTER._5Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR6: REGISTER.SP -= 4; REGISTER._6Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR7: REGISTER.SP -= 4; REGISTER._7Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR8: REGISTER.SP -= 4; REGISTER._8Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR9: REGISTER.SP -= 4; REGISTER._9Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR10: REGISTER.SP -= 4; REGISTER._10Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR11: REGISTER.SP -= 4; REGISTER._11Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQR12: REGISTER.SP -= 4; REGISTER._12Q = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQRIP: REGISTER.SP -= 4; REGISTER.IPQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQRSP: REGISTER.SP -= 4; REGISTER.SPQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPQRBP: REGISTER.SP -= 4; REGISTER.BPQ = *(int*) (RAM + REGISTER.SP); continue;
case INSTR_POPWRA: REGISTER.SP -= 2; REGISTER.AW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWRB: REGISTER.SP -= 2; REGISTER.BW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWRC: REGISTER.SP -= 2; REGISTER.CW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWRD: REGISTER.SP -= 2; REGISTER.DW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR0: REGISTER.SP -= 2; REGISTER._0W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR1: REGISTER.SP -= 2; REGISTER._1W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR2: REGISTER.SP -= 2; REGISTER._2W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR3: REGISTER.SP -= 2; REGISTER._3W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR4: REGISTER.SP -= 2; REGISTER._4W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR5: REGISTER.SP -= 2; REGISTER._5W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR6: REGISTER.SP -= 2; REGISTER._6W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR7: REGISTER.SP -= 2; REGISTER._7W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR8: REGISTER.SP -= 2; REGISTER._8W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR9: REGISTER.SP -= 2; REGISTER._9W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR10: REGISTER.SP -= 2; REGISTER._10W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR11: REGISTER.SP -= 2; REGISTER._11W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWR12: REGISTER.SP -= 2; REGISTER._12W = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWRIP: REGISTER.SP -= 2; REGISTER.IPW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWRSP: REGISTER.SP -= 2; REGISTER.SPW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPWRBP: REGISTER.SP -= 2; REGISTER.BPW = *(short*) (RAM + REGISTER.SP); continue;
case INSTR_POPBRA: REGISTER.SP -= 1; REGISTER.AB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBRB: REGISTER.SP -= 1; REGISTER.BB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBRC: REGISTER.SP -= 1; REGISTER.CB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBRD: REGISTER.SP -= 1; REGISTER.DB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR0: REGISTER.SP -= 1; REGISTER._0B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR1: REGISTER.SP -= 1; REGISTER._1B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR2: REGISTER.SP -= 1; REGISTER._2B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR3: REGISTER.SP -= 1; REGISTER._3B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR4: REGISTER.SP -= 1; REGISTER._4B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR5: REGISTER.SP -= 1; REGISTER._5B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR6: REGISTER.SP -= 1; REGISTER._6B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR7: REGISTER.SP -= 1; REGISTER._7B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR8: REGISTER.SP -= 1; REGISTER._8B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR9: REGISTER.SP -= 1; REGISTER._9B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR10: REGISTER.SP -= 1; REGISTER._10B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR11: REGISTER.SP -= 1; REGISTER._11B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBR12: REGISTER.SP -= 1; REGISTER._12B = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBRIP: REGISTER.SP -= 1; REGISTER.IPB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBRSP: REGISTER.SP -= 1; REGISTER.SPB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPBRBP: REGISTER.SP -= 1; REGISTER.BPB = *(char*) (RAM + REGISTER.SP); continue;
case INSTR_POPNI: REGISTER.SP -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
// compare //
case INSTR_CMPQRAI: flag = REGISTER.AQ - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQRARA: flag = REGISTER.AQ - REGISTER.AQ; continue;
case INSTR_CMPQRARB: flag = REGISTER.AQ - REGISTER.BQ; continue;
case INSTR_CMPQRARC: flag = REGISTER.AQ - REGISTER.CQ; continue;
case INSTR_CMPQRARD: flag = REGISTER.AQ - REGISTER.DQ; continue;
case INSTR_CMPQRAR0: flag = REGISTER.AQ - REGISTER._0Q; continue;
case INSTR_CMPQRAR1: flag = REGISTER.AQ - REGISTER._1Q; continue;
case INSTR_CMPQRAR2: flag = REGISTER.AQ - REGISTER._2Q; continue;
case INSTR_CMPQRAR3: flag = REGISTER.AQ - REGISTER._3Q; continue;
case INSTR_CMPQRAR4: flag = REGISTER.AQ - REGISTER._4Q; continue;
case INSTR_CMPQRAR5: flag = REGISTER.AQ - REGISTER._5Q; continue;
case INSTR_CMPQRAR6: flag = REGISTER.AQ - REGISTER._6Q; continue;
case INSTR_CMPQRAR7: flag = REGISTER.AQ - REGISTER._7Q; continue;
case INSTR_CMPQRAR8: flag = REGISTER.AQ - REGISTER._8Q; continue;
case INSTR_CMPQRAR9: flag = REGISTER.AQ - REGISTER._9Q; continue;
case INSTR_CMPQRAR10: flag = REGISTER.AQ - REGISTER._10Q; continue;
case INSTR_CMPQRAR11: flag = REGISTER.AQ - REGISTER._11Q; continue;
case INSTR_CMPQRAR12: flag = REGISTER.AQ - REGISTER._12Q; continue;
case INSTR_CMPQRARIP: flag = REGISTER.AQ - REGISTER.IPQ; continue;
case INSTR_CMPQRARSP: flag = REGISTER.AQ - REGISTER.SPQ; continue;
case INSTR_CMPQRARBP: flag = REGISTER.AQ - REGISTER.BPQ; continue;
case INSTR_CMPQRBI: flag = REGISTER.BQ - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQRBRA: flag = REGISTER.BQ - REGISTER.AQ; continue;
case INSTR_CMPQRBRB: flag = REGISTER.BQ - REGISTER.BQ; continue;
case INSTR_CMPQRBRC: flag = REGISTER.BQ - REGISTER.CQ; continue;
case INSTR_CMPQRBRD: flag = REGISTER.BQ - REGISTER.DQ; continue;
case INSTR_CMPQRBR0: flag = REGISTER.BQ - REGISTER._0Q; continue;
case INSTR_CMPQRBR1: flag = REGISTER.BQ - REGISTER._1Q; continue;
case INSTR_CMPQRBR2: flag = REGISTER.BQ - REGISTER._2Q; continue;
case INSTR_CMPQRBR3: flag = REGISTER.BQ - REGISTER._3Q; continue;
case INSTR_CMPQRBR4: flag = REGISTER.BQ - REGISTER._4Q; continue;
case INSTR_CMPQRBR5: flag = REGISTER.BQ - REGISTER._5Q; continue;
case INSTR_CMPQRBR6: flag = REGISTER.BQ - REGISTER._6Q; continue;
case INSTR_CMPQRBR7: flag = REGISTER.BQ - REGISTER._7Q; continue;
case INSTR_CMPQRBR8: flag = REGISTER.BQ - REGISTER._8Q; continue;
case INSTR_CMPQRBR9: flag = REGISTER.BQ - REGISTER._9Q; continue;
case INSTR_CMPQRBR10: flag = REGISTER.BQ - REGISTER._10Q; continue;
case INSTR_CMPQRBR11: flag = REGISTER.BQ - REGISTER._11Q; continue;
case INSTR_CMPQRBR12: flag = REGISTER.BQ - REGISTER._12Q; continue;
case INSTR_CMPQRBRIP: flag = REGISTER.BQ - REGISTER.IPQ; continue;
case INSTR_CMPQRBRSP: flag = REGISTER.BQ - REGISTER.SPQ; continue;
case INSTR_CMPQRBRBP: flag = REGISTER.BQ - REGISTER.BPQ; continue;
case INSTR_CMPQRCI: flag = REGISTER.CQ - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQRCRA: flag = REGISTER.CQ - REGISTER.AQ; continue;
case INSTR_CMPQRCRB: flag = REGISTER.CQ - REGISTER.BQ; continue;
case INSTR_CMPQRCRC: flag = REGISTER.CQ - REGISTER.CQ; continue;
case INSTR_CMPQRCRD: flag = REGISTER.CQ - REGISTER.DQ; continue;
case INSTR_CMPQRCR0: flag = REGISTER.CQ - REGISTER._0Q; continue;
case INSTR_CMPQRCR1: flag = REGISTER.CQ - REGISTER._1Q; continue;
case INSTR_CMPQRCR2: flag = REGISTER.CQ - REGISTER._2Q; continue;
case INSTR_CMPQRCR3: flag = REGISTER.CQ - REGISTER._3Q; continue;
case INSTR_CMPQRCR4: flag = REGISTER.CQ - REGISTER._4Q; continue;
case INSTR_CMPQRCR5: flag = REGISTER.CQ - REGISTER._5Q; continue;
case INSTR_CMPQRCR6: flag = REGISTER.CQ - REGISTER._6Q; continue;
case INSTR_CMPQRCR7: flag = REGISTER.CQ - REGISTER._7Q; continue;
case INSTR_CMPQRCR8: flag = REGISTER.CQ - REGISTER._8Q; continue;
case INSTR_CMPQRCR9: flag = REGISTER.CQ - REGISTER._9Q; continue;
case INSTR_CMPQRCR10: flag = REGISTER.CQ - REGISTER._10Q; continue;
case INSTR_CMPQRCR11: flag = REGISTER.CQ - REGISTER._11Q; continue;
case INSTR_CMPQRCR12: flag = REGISTER.CQ - REGISTER._12Q; continue;
case INSTR_CMPQRCRIP: flag = REGISTER.CQ - REGISTER.IPQ; continue;
case INSTR_CMPQRCRSP: flag = REGISTER.CQ - REGISTER.SPQ; continue;
case INSTR_CMPQRCRBP: flag = REGISTER.CQ - REGISTER.BPQ; continue;
case INSTR_CMPQRDI: flag = REGISTER.DQ - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQRDRA: flag = REGISTER.DQ - REGISTER.AQ; continue;
case INSTR_CMPQRDRB: flag = REGISTER.DQ - REGISTER.BQ; continue;
case INSTR_CMPQRDRC: flag = REGISTER.DQ - REGISTER.CQ; continue;
case INSTR_CMPQRDRD: flag = REGISTER.DQ - REGISTER.DQ; continue;
case INSTR_CMPQRDR0: flag = REGISTER.DQ - REGISTER._0Q; continue;
case INSTR_CMPQRDR1: flag = REGISTER.DQ - REGISTER._1Q; continue;
case INSTR_CMPQRDR2: flag = REGISTER.DQ - REGISTER._2Q; continue;
case INSTR_CMPQRDR3: flag = REGISTER.DQ - REGISTER._3Q; continue;
case INSTR_CMPQRDR4: flag = REGISTER.DQ - REGISTER._4Q; continue;
case INSTR_CMPQRDR5: flag = REGISTER.DQ - REGISTER._5Q; continue;
case INSTR_CMPQRDR6: flag = REGISTER.DQ - REGISTER._6Q; continue;
case INSTR_CMPQRDR7: flag = REGISTER.DQ - REGISTER._7Q; continue;
case INSTR_CMPQRDR8: flag = REGISTER.DQ - REGISTER._8Q; continue;
case INSTR_CMPQRDR9: flag = REGISTER.DQ - REGISTER._9Q; continue;
case INSTR_CMPQRDR10: flag = REGISTER.DQ - REGISTER._10Q; continue;
case INSTR_CMPQRDR11: flag = REGISTER.DQ - REGISTER._11Q; continue;
case INSTR_CMPQRDR12: flag = REGISTER.DQ - REGISTER._12Q; continue;
case INSTR_CMPQRDRIP: flag = REGISTER.DQ - REGISTER.IPQ; continue;
case INSTR_CMPQRDRSP: flag = REGISTER.DQ - REGISTER.SPQ; continue;
case INSTR_CMPQRDRBP: flag = REGISTER.DQ - REGISTER.BPQ; continue;
case INSTR_CMPQR0I: flag = REGISTER._0Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR0RA: flag = REGISTER._0Q - REGISTER.AQ; continue;
case INSTR_CMPQR0RB: flag = REGISTER._0Q - REGISTER.BQ; continue;
case INSTR_CMPQR0RC: flag = REGISTER._0Q - REGISTER.CQ; continue;
case INSTR_CMPQR0RD: flag = REGISTER._0Q - REGISTER.DQ; continue;
case INSTR_CMPQR0R0: flag = REGISTER._0Q - REGISTER._0Q; continue;
case INSTR_CMPQR0R1: flag = REGISTER._0Q - REGISTER._1Q; continue;
case INSTR_CMPQR0R2: flag = REGISTER._0Q - REGISTER._2Q; continue;
case INSTR_CMPQR0R3: flag = REGISTER._0Q - REGISTER._3Q; continue;
case INSTR_CMPQR0R4: flag = REGISTER._0Q - REGISTER._4Q; continue;
case INSTR_CMPQR0R5: flag = REGISTER._0Q - REGISTER._5Q; continue;
case INSTR_CMPQR0R6: flag = REGISTER._0Q - REGISTER._6Q; continue;
case INSTR_CMPQR0R7: flag = REGISTER._0Q - REGISTER._7Q; continue;
case INSTR_CMPQR0R8: flag = REGISTER._0Q - REGISTER._8Q; continue;
case INSTR_CMPQR0R9: flag = REGISTER._0Q - REGISTER._9Q; continue;
case INSTR_CMPQR0R10: flag = REGISTER._0Q - REGISTER._10Q; continue;
case INSTR_CMPQR0R11: flag = REGISTER._0Q - REGISTER._11Q; continue;
case INSTR_CMPQR0R12: flag = REGISTER._0Q - REGISTER._12Q; continue;
case INSTR_CMPQR0RIP: flag = REGISTER._0Q - REGISTER.IPQ; continue;
case INSTR_CMPQR0RSP: flag = REGISTER._0Q - REGISTER.SPQ; continue;
case INSTR_CMPQR0RBP: flag = REGISTER._0Q - REGISTER.BPQ; continue;
case INSTR_CMPQR1I: flag = REGISTER._1Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR1RA: flag = REGISTER._1Q - REGISTER.AQ; continue;
case INSTR_CMPQR1RB: flag = REGISTER._1Q - REGISTER.BQ; continue;
case INSTR_CMPQR1RC: flag = REGISTER._1Q - REGISTER.CQ; continue;
case INSTR_CMPQR1RD: flag = REGISTER._1Q - REGISTER.DQ; continue;
case INSTR_CMPQR1R0: flag = REGISTER._1Q - REGISTER._0Q; continue;
case INSTR_CMPQR1R1: flag = REGISTER._1Q - REGISTER._1Q; continue;
case INSTR_CMPQR1R2: flag = REGISTER._1Q - REGISTER._2Q; continue;
case INSTR_CMPQR1R3: flag = REGISTER._1Q - REGISTER._3Q; continue;
case INSTR_CMPQR1R4: flag = REGISTER._1Q - REGISTER._4Q; continue;
case INSTR_CMPQR1R5: flag = REGISTER._1Q - REGISTER._5Q; continue;
case INSTR_CMPQR1R6: flag = REGISTER._1Q - REGISTER._6Q; continue;
case INSTR_CMPQR1R7: flag = REGISTER._1Q - REGISTER._7Q; continue;
case INSTR_CMPQR1R8: flag = REGISTER._1Q - REGISTER._8Q; continue;
case INSTR_CMPQR1R9: flag = REGISTER._1Q - REGISTER._9Q; continue;
case INSTR_CMPQR1R10: flag = REGISTER._1Q - REGISTER._10Q; continue;
case INSTR_CMPQR1R11: flag = REGISTER._1Q - REGISTER._11Q; continue;
case INSTR_CMPQR1R12: flag = REGISTER._1Q - REGISTER._12Q; continue;
case INSTR_CMPQR1RIP: flag = REGISTER._1Q - REGISTER.IPQ; continue;
case INSTR_CMPQR1RSP: flag = REGISTER._1Q - REGISTER.SPQ; continue;
case INSTR_CMPQR1RBP: flag = REGISTER._1Q - REGISTER.BPQ; continue;
case INSTR_CMPQR2I: flag = REGISTER._2Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR2RA: flag = REGISTER._2Q - REGISTER.AQ; continue;
case INSTR_CMPQR2RB: flag = REGISTER._2Q - REGISTER.BQ; continue;
case INSTR_CMPQR2RC: flag = REGISTER._2Q - REGISTER.CQ; continue;
case INSTR_CMPQR2RD: flag = REGISTER._2Q - REGISTER.DQ; continue;
case INSTR_CMPQR2R0: flag = REGISTER._2Q - REGISTER._0Q; continue;
case INSTR_CMPQR2R1: flag = REGISTER._2Q - REGISTER._1Q; continue;
case INSTR_CMPQR2R2: flag = REGISTER._2Q - REGISTER._2Q; continue;
case INSTR_CMPQR2R3: flag = REGISTER._2Q - REGISTER._3Q; continue;
case INSTR_CMPQR2R4: flag = REGISTER._2Q - REGISTER._4Q; continue;
case INSTR_CMPQR2R5: flag = REGISTER._2Q - REGISTER._5Q; continue;
case INSTR_CMPQR2R6: flag = REGISTER._2Q - REGISTER._6Q; continue;
case INSTR_CMPQR2R7: flag = REGISTER._2Q - REGISTER._7Q; continue;
case INSTR_CMPQR2R8: flag = REGISTER._2Q - REGISTER._8Q; continue;
case INSTR_CMPQR2R9: flag = REGISTER._2Q - REGISTER._9Q; continue;
case INSTR_CMPQR2R10: flag = REGISTER._2Q - REGISTER._10Q; continue;
case INSTR_CMPQR2R11: flag = REGISTER._2Q - REGISTER._11Q; continue;
case INSTR_CMPQR2R12: flag = REGISTER._2Q - REGISTER._12Q; continue;
case INSTR_CMPQR2RIP: flag = REGISTER._2Q - REGISTER.IPQ; continue;
case INSTR_CMPQR2RSP: flag = REGISTER._2Q - REGISTER.SPQ; continue;
case INSTR_CMPQR2RBP: flag = REGISTER._2Q - REGISTER.BPQ; continue;
case INSTR_CMPQR3I: flag = REGISTER._3Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR3RA: flag = REGISTER._3Q - REGISTER.AQ; continue;
case INSTR_CMPQR3RB: flag = REGISTER._3Q - REGISTER.BQ; continue;
case INSTR_CMPQR3RC: flag = REGISTER._3Q - REGISTER.CQ; continue;
case INSTR_CMPQR3RD: flag = REGISTER._3Q - REGISTER.DQ; continue;
case INSTR_CMPQR3R0: flag = REGISTER._3Q - REGISTER._0Q; continue;
case INSTR_CMPQR3R1: flag = REGISTER._3Q - REGISTER._1Q; continue;
case INSTR_CMPQR3R2: flag = REGISTER._3Q - REGISTER._2Q; continue;
case INSTR_CMPQR3R3: flag = REGISTER._3Q - REGISTER._3Q; continue;
case INSTR_CMPQR3R4: flag = REGISTER._3Q - REGISTER._4Q; continue;
case INSTR_CMPQR3R5: flag = REGISTER._3Q - REGISTER._5Q; continue;
case INSTR_CMPQR3R6: flag = REGISTER._3Q - REGISTER._6Q; continue;
case INSTR_CMPQR3R7: flag = REGISTER._3Q - REGISTER._7Q; continue;
case INSTR_CMPQR3R8: flag = REGISTER._3Q - REGISTER._8Q; continue;
case INSTR_CMPQR3R9: flag = REGISTER._3Q - REGISTER._9Q; continue;
case INSTR_CMPQR3R10: flag = REGISTER._3Q - REGISTER._10Q; continue;
case INSTR_CMPQR3R11: flag = REGISTER._3Q - REGISTER._11Q; continue;
case INSTR_CMPQR3R12: flag = REGISTER._3Q - REGISTER._12Q; continue;
case INSTR_CMPQR3RIP: flag = REGISTER._3Q - REGISTER.IPQ; continue;
case INSTR_CMPQR3RSP: flag = REGISTER._3Q - REGISTER.SPQ; continue;
case INSTR_CMPQR3RBP: flag = REGISTER._3Q - REGISTER.BPQ; continue;
case INSTR_CMPQR4I: flag = REGISTER._4Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR4RA: flag = REGISTER._4Q - REGISTER.AQ; continue;
case INSTR_CMPQR4RB: flag = REGISTER._4Q - REGISTER.BQ; continue;
case INSTR_CMPQR4RC: flag = REGISTER._4Q - REGISTER.CQ; continue;
case INSTR_CMPQR4RD: flag = REGISTER._4Q - REGISTER.DQ; continue;
case INSTR_CMPQR4R0: flag = REGISTER._4Q - REGISTER._0Q; continue;
case INSTR_CMPQR4R1: flag = REGISTER._4Q - REGISTER._1Q; continue;
case INSTR_CMPQR4R2: flag = REGISTER._4Q - REGISTER._2Q; continue;
case INSTR_CMPQR4R3: flag = REGISTER._4Q - REGISTER._3Q; continue;
case INSTR_CMPQR4R4: flag = REGISTER._4Q - REGISTER._4Q; continue;
case INSTR_CMPQR4R5: flag = REGISTER._4Q - REGISTER._5Q; continue;
case INSTR_CMPQR4R6: flag = REGISTER._4Q - REGISTER._6Q; continue;
case INSTR_CMPQR4R7: flag = REGISTER._4Q - REGISTER._7Q; continue;
case INSTR_CMPQR4R8: flag = REGISTER._4Q - REGISTER._8Q; continue;
case INSTR_CMPQR4R9: flag = REGISTER._4Q - REGISTER._9Q; continue;
case INSTR_CMPQR4R10: flag = REGISTER._4Q - REGISTER._10Q; continue;
case INSTR_CMPQR4R11: flag = REGISTER._4Q - REGISTER._11Q; continue;
case INSTR_CMPQR4R12: flag = REGISTER._4Q - REGISTER._12Q; continue;
case INSTR_CMPQR4RIP: flag = REGISTER._4Q - REGISTER.IPQ; continue;
case INSTR_CMPQR4RSP: flag = REGISTER._4Q - REGISTER.SPQ; continue;
case INSTR_CMPQR4RBP: flag = REGISTER._4Q - REGISTER.BPQ; continue;
case INSTR_CMPQR5I: flag = REGISTER._5Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR5RA: flag = REGISTER._5Q - REGISTER.AQ; continue;
case INSTR_CMPQR5RB: flag = REGISTER._5Q - REGISTER.BQ; continue;
case INSTR_CMPQR5RC: flag = REGISTER._5Q - REGISTER.CQ; continue;
case INSTR_CMPQR5RD: flag = REGISTER._5Q - REGISTER.DQ; continue;
case INSTR_CMPQR5R0: flag = REGISTER._5Q - REGISTER._0Q; continue;
case INSTR_CMPQR5R1: flag = REGISTER._5Q - REGISTER._1Q; continue;
case INSTR_CMPQR5R2: flag = REGISTER._5Q - REGISTER._2Q; continue;
case INSTR_CMPQR5R3: flag = REGISTER._5Q - REGISTER._3Q; continue;
case INSTR_CMPQR5R4: flag = REGISTER._5Q - REGISTER._4Q; continue;
case INSTR_CMPQR5R5: flag = REGISTER._5Q - REGISTER._5Q; continue;
case INSTR_CMPQR5R6: flag = REGISTER._5Q - REGISTER._6Q; continue;
case INSTR_CMPQR5R7: flag = REGISTER._5Q - REGISTER._7Q; continue;
case INSTR_CMPQR5R8: flag = REGISTER._5Q - REGISTER._8Q; continue;
case INSTR_CMPQR5R9: flag = REGISTER._5Q - REGISTER._9Q; continue;
case INSTR_CMPQR5R10: flag = REGISTER._5Q - REGISTER._10Q; continue;
case INSTR_CMPQR5R11: flag = REGISTER._5Q - REGISTER._11Q; continue;
case INSTR_CMPQR5R12: flag = REGISTER._5Q - REGISTER._12Q; continue;
case INSTR_CMPQR5RIP: flag = REGISTER._5Q - REGISTER.IPQ; continue;
case INSTR_CMPQR5RSP: flag = REGISTER._5Q - REGISTER.SPQ; continue;
case INSTR_CMPQR5RBP: flag = REGISTER._5Q - REGISTER.BPQ; continue;
case INSTR_CMPQR6I: flag = REGISTER._6Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR6RA: flag = REGISTER._6Q - REGISTER.AQ; continue;
case INSTR_CMPQR6RB: flag = REGISTER._6Q - REGISTER.BQ; continue;
case INSTR_CMPQR6RC: flag = REGISTER._6Q - REGISTER.CQ; continue;
case INSTR_CMPQR6RD: flag = REGISTER._6Q - REGISTER.DQ; continue;
case INSTR_CMPQR6R0: flag = REGISTER._6Q - REGISTER._0Q; continue;
case INSTR_CMPQR6R1: flag = REGISTER._6Q - REGISTER._1Q; continue;
case INSTR_CMPQR6R2: flag = REGISTER._6Q - REGISTER._2Q; continue;
case INSTR_CMPQR6R3: flag = REGISTER._6Q - REGISTER._3Q; continue;
case INSTR_CMPQR6R4: flag = REGISTER._6Q - REGISTER._4Q; continue;
case INSTR_CMPQR6R5: flag = REGISTER._6Q - REGISTER._5Q; continue;
case INSTR_CMPQR6R6: flag = REGISTER._6Q - REGISTER._6Q; continue;
case INSTR_CMPQR6R7: flag = REGISTER._6Q - REGISTER._7Q; continue;
case INSTR_CMPQR6R8: flag = REGISTER._6Q - REGISTER._8Q; continue;
case INSTR_CMPQR6R9: flag = REGISTER._6Q - REGISTER._9Q; continue;
case INSTR_CMPQR6R10: flag = REGISTER._6Q - REGISTER._10Q; continue;
case INSTR_CMPQR6R11: flag = REGISTER._6Q - REGISTER._11Q; continue;
case INSTR_CMPQR6R12: flag = REGISTER._6Q - REGISTER._12Q; continue;
case INSTR_CMPQR6RIP: flag = REGISTER._6Q - REGISTER.IPQ; continue;
case INSTR_CMPQR6RSP: flag = REGISTER._6Q - REGISTER.SPQ; continue;
case INSTR_CMPQR6RBP: flag = REGISTER._6Q - REGISTER.BPQ; continue;
case INSTR_CMPQR7I: flag = REGISTER._7Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR7RA: flag = REGISTER._7Q - REGISTER.AQ; continue;
case INSTR_CMPQR7RB: flag = REGISTER._7Q - REGISTER.BQ; continue;
case INSTR_CMPQR7RC: flag = REGISTER._7Q - REGISTER.CQ; continue;
case INSTR_CMPQR7RD: flag = REGISTER._7Q - REGISTER.DQ; continue;
case INSTR_CMPQR7R0: flag = REGISTER._7Q - REGISTER._0Q; continue;
case INSTR_CMPQR7R1: flag = REGISTER._7Q - REGISTER._1Q; continue;
case INSTR_CMPQR7R2: flag = REGISTER._7Q - REGISTER._2Q; continue;
case INSTR_CMPQR7R3: flag = REGISTER._7Q - REGISTER._3Q; continue;
case INSTR_CMPQR7R4: flag = REGISTER._7Q - REGISTER._4Q; continue;
case INSTR_CMPQR7R5: flag = REGISTER._7Q - REGISTER._5Q; continue;
case INSTR_CMPQR7R6: flag = REGISTER._7Q - REGISTER._6Q; continue;
case INSTR_CMPQR7R7: flag = REGISTER._7Q - REGISTER._7Q; continue;
case INSTR_CMPQR7R8: flag = REGISTER._7Q - REGISTER._8Q; continue;
case INSTR_CMPQR7R9: flag = REGISTER._7Q - REGISTER._9Q; continue;
case INSTR_CMPQR7R10: flag = REGISTER._7Q - REGISTER._10Q; continue;
case INSTR_CMPQR7R11: flag = REGISTER._7Q - REGISTER._11Q; continue;
case INSTR_CMPQR7R12: flag = REGISTER._7Q - REGISTER._12Q; continue;
case INSTR_CMPQR7RIP: flag = REGISTER._7Q - REGISTER.IPQ; continue;
case INSTR_CMPQR7RSP: flag = REGISTER._7Q - REGISTER.SPQ; continue;
case INSTR_CMPQR7RBP: flag = REGISTER._7Q - REGISTER.BPQ; continue;
case INSTR_CMPQR8I: flag = REGISTER._8Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR8RA: flag = REGISTER._8Q - REGISTER.AQ; continue;
case INSTR_CMPQR8RB: flag = REGISTER._8Q - REGISTER.BQ; continue;
case INSTR_CMPQR8RC: flag = REGISTER._8Q - REGISTER.CQ; continue;
case INSTR_CMPQR8RD: flag = REGISTER._8Q - REGISTER.DQ; continue;
case INSTR_CMPQR8R0: flag = REGISTER._8Q - REGISTER._0Q; continue;
case INSTR_CMPQR8R1: flag = REGISTER._8Q - REGISTER._1Q; continue;
case INSTR_CMPQR8R2: flag = REGISTER._8Q - REGISTER._2Q; continue;
case INSTR_CMPQR8R3: flag = REGISTER._8Q - REGISTER._3Q; continue;
case INSTR_CMPQR8R4: flag = REGISTER._8Q - REGISTER._4Q; continue;
case INSTR_CMPQR8R5: flag = REGISTER._8Q - REGISTER._5Q; continue;
case INSTR_CMPQR8R6: flag = REGISTER._8Q - REGISTER._6Q; continue;
case INSTR_CMPQR8R7: flag = REGISTER._8Q - REGISTER._7Q; continue;
case INSTR_CMPQR8R8: flag = REGISTER._8Q - REGISTER._8Q; continue;
case INSTR_CMPQR8R9: flag = REGISTER._8Q - REGISTER._9Q; continue;
case INSTR_CMPQR8R10: flag = REGISTER._8Q - REGISTER._10Q; continue;
case INSTR_CMPQR8R11: flag = REGISTER._8Q - REGISTER._11Q; continue;
case INSTR_CMPQR8R12: flag = REGISTER._8Q - REGISTER._12Q; continue;
case INSTR_CMPQR8RIP: flag = REGISTER._8Q - REGISTER.IPQ; continue;
case INSTR_CMPQR8RSP: flag = REGISTER._8Q - REGISTER.SPQ; continue;
case INSTR_CMPQR8RBP: flag = REGISTER._8Q - REGISTER.BPQ; continue;
case INSTR_CMPQR9I: flag = REGISTER._9Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR9RA: flag = REGISTER._9Q - REGISTER.AQ; continue;
case INSTR_CMPQR9RB: flag = REGISTER._9Q - REGISTER.BQ; continue;
case INSTR_CMPQR9RC: flag = REGISTER._9Q - REGISTER.CQ; continue;
case INSTR_CMPQR9RD: flag = REGISTER._9Q - REGISTER.DQ; continue;
case INSTR_CMPQR9R0: flag = REGISTER._9Q - REGISTER._0Q; continue;
case INSTR_CMPQR9R1: flag = REGISTER._9Q - REGISTER._1Q; continue;
case INSTR_CMPQR9R2: flag = REGISTER._9Q - REGISTER._2Q; continue;
case INSTR_CMPQR9R3: flag = REGISTER._9Q - REGISTER._3Q; continue;
case INSTR_CMPQR9R4: flag = REGISTER._9Q - REGISTER._4Q; continue;
case INSTR_CMPQR9R5: flag = REGISTER._9Q - REGISTER._5Q; continue;
case INSTR_CMPQR9R6: flag = REGISTER._9Q - REGISTER._6Q; continue;
case INSTR_CMPQR9R7: flag = REGISTER._9Q - REGISTER._7Q; continue;
case INSTR_CMPQR9R8: flag = REGISTER._9Q - REGISTER._8Q; continue;
case INSTR_CMPQR9R9: flag = REGISTER._9Q - REGISTER._9Q; continue;
case INSTR_CMPQR9R10: flag = REGISTER._9Q - REGISTER._10Q; continue;
case INSTR_CMPQR9R11: flag = REGISTER._9Q - REGISTER._11Q; continue;
case INSTR_CMPQR9R12: flag = REGISTER._9Q - REGISTER._12Q; continue;
case INSTR_CMPQR9RIP: flag = REGISTER._9Q - REGISTER.IPQ; continue;
case INSTR_CMPQR9RSP: flag = REGISTER._9Q - REGISTER.SPQ; continue;
case INSTR_CMPQR9RBP: flag = REGISTER._9Q - REGISTER.BPQ; continue;
case INSTR_CMPQR10I: flag = REGISTER._10Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR10RA: flag = REGISTER._10Q - REGISTER.AQ; continue;
case INSTR_CMPQR10RB: flag = REGISTER._10Q - REGISTER.BQ; continue;
case INSTR_CMPQR10RC: flag = REGISTER._10Q - REGISTER.CQ; continue;
case INSTR_CMPQR10RD: flag = REGISTER._10Q - REGISTER.DQ; continue;
case INSTR_CMPQR10R0: flag = REGISTER._10Q - REGISTER._0Q; continue;
case INSTR_CMPQR10R1: flag = REGISTER._10Q - REGISTER._1Q; continue;
case INSTR_CMPQR10R2: flag = REGISTER._10Q - REGISTER._2Q; continue;
case INSTR_CMPQR10R3: flag = REGISTER._10Q - REGISTER._3Q; continue;
case INSTR_CMPQR10R4: flag = REGISTER._10Q - REGISTER._4Q; continue;
case INSTR_CMPQR10R5: flag = REGISTER._10Q - REGISTER._5Q; continue;
case INSTR_CMPQR10R6: flag = REGISTER._10Q - REGISTER._6Q; continue;
case INSTR_CMPQR10R7: flag = REGISTER._10Q - REGISTER._7Q; continue;
case INSTR_CMPQR10R8: flag = REGISTER._10Q - REGISTER._8Q; continue;
case INSTR_CMPQR10R9: flag = REGISTER._10Q - REGISTER._9Q; continue;
case INSTR_CMPQR10R10: flag = REGISTER._10Q - REGISTER._10Q; continue;
case INSTR_CMPQR10R11: flag = REGISTER._10Q - REGISTER._11Q; continue;
case INSTR_CMPQR10R12: flag = REGISTER._10Q - REGISTER._12Q; continue;
case INSTR_CMPQR10RIP: flag = REGISTER._10Q - REGISTER.IPQ; continue;
case INSTR_CMPQR10RSP: flag = REGISTER._10Q - REGISTER.SPQ; continue;
case INSTR_CMPQR10RBP: flag = REGISTER._10Q - REGISTER.BPQ; continue;
case INSTR_CMPQR11I: flag = REGISTER._11Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR11RA: flag = REGISTER._11Q - REGISTER.AQ; continue;
case INSTR_CMPQR11RB: flag = REGISTER._11Q - REGISTER.BQ; continue;
case INSTR_CMPQR11RC: flag = REGISTER._11Q - REGISTER.CQ; continue;
case INSTR_CMPQR11RD: flag = REGISTER._11Q - REGISTER.DQ; continue;
case INSTR_CMPQR11R0: flag = REGISTER._11Q - REGISTER._0Q; continue;
case INSTR_CMPQR11R1: flag = REGISTER._11Q - REGISTER._1Q; continue;
case INSTR_CMPQR11R2: flag = REGISTER._11Q - REGISTER._2Q; continue;
case INSTR_CMPQR11R3: flag = REGISTER._11Q - REGISTER._3Q; continue;
case INSTR_CMPQR11R4: flag = REGISTER._11Q - REGISTER._4Q; continue;
case INSTR_CMPQR11R5: flag = REGISTER._11Q - REGISTER._5Q; continue;
case INSTR_CMPQR11R6: flag = REGISTER._11Q - REGISTER._6Q; continue;
case INSTR_CMPQR11R7: flag = REGISTER._11Q - REGISTER._7Q; continue;
case INSTR_CMPQR11R8: flag = REGISTER._11Q - REGISTER._8Q; continue;
case INSTR_CMPQR11R9: flag = REGISTER._11Q - REGISTER._9Q; continue;
case INSTR_CMPQR11R10: flag = REGISTER._11Q - REGISTER._10Q; continue;
case INSTR_CMPQR11R11: flag = REGISTER._11Q - REGISTER._11Q; continue;
case INSTR_CMPQR11R12: flag = REGISTER._11Q - REGISTER._12Q; continue;
case INSTR_CMPQR11RIP: flag = REGISTER._11Q - REGISTER.IPQ; continue;
case INSTR_CMPQR11RSP: flag = REGISTER._11Q - REGISTER.SPQ; continue;
case INSTR_CMPQR11RBP: flag = REGISTER._11Q - REGISTER.BPQ; continue;
case INSTR_CMPQR12I: flag = REGISTER._12Q - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQR12RA: flag = REGISTER._12Q - REGISTER.AQ; continue;
case INSTR_CMPQR12RB: flag = REGISTER._12Q - REGISTER.BQ; continue;
case INSTR_CMPQR12RC: flag = REGISTER._12Q - REGISTER.CQ; continue;
case INSTR_CMPQR12RD: flag = REGISTER._12Q - REGISTER.DQ; continue;
case INSTR_CMPQR12R0: flag = REGISTER._12Q - REGISTER._0Q; continue;
case INSTR_CMPQR12R1: flag = REGISTER._12Q - REGISTER._1Q; continue;
case INSTR_CMPQR12R2: flag = REGISTER._12Q - REGISTER._2Q; continue;
case INSTR_CMPQR12R3: flag = REGISTER._12Q - REGISTER._3Q; continue;
case INSTR_CMPQR12R4: flag = REGISTER._12Q - REGISTER._4Q; continue;
case INSTR_CMPQR12R5: flag = REGISTER._12Q - REGISTER._5Q; continue;
case INSTR_CMPQR12R6: flag = REGISTER._12Q - REGISTER._6Q; continue;
case INSTR_CMPQR12R7: flag = REGISTER._12Q - REGISTER._7Q; continue;
case INSTR_CMPQR12R8: flag = REGISTER._12Q - REGISTER._8Q; continue;
case INSTR_CMPQR12R9: flag = REGISTER._12Q - REGISTER._9Q; continue;
case INSTR_CMPQR12R10: flag = REGISTER._12Q - REGISTER._10Q; continue;
case INSTR_CMPQR12R11: flag = REGISTER._12Q - REGISTER._11Q; continue;
case INSTR_CMPQR12R12: flag = REGISTER._12Q - REGISTER._12Q; continue;
case INSTR_CMPQR12RIP: flag = REGISTER._12Q - REGISTER.IPQ; continue;
case INSTR_CMPQR12RSP: flag = REGISTER._12Q - REGISTER.SPQ; continue;
case INSTR_CMPQR12RBP: flag = REGISTER._12Q - REGISTER.BPQ; continue;
case INSTR_CMPQRIPI: flag = REGISTER.IPQ - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQRIPRA: flag = REGISTER.IPQ - REGISTER.AQ; continue;
case INSTR_CMPQRIPRB: flag = REGISTER.IPQ - REGISTER.BQ; continue;
case INSTR_CMPQRIPRC: flag = REGISTER.IPQ - REGISTER.CQ; continue;
case INSTR_CMPQRIPRD: flag = REGISTER.IPQ - REGISTER.DQ; continue;
case INSTR_CMPQRIPR0: flag = REGISTER.IPQ - REGISTER._0Q; continue;
case INSTR_CMPQRIPR1: flag = REGISTER.IPQ - REGISTER._1Q; continue;
case INSTR_CMPQRIPR2: flag = REGISTER.IPQ - REGISTER._2Q; continue;
case INSTR_CMPQRIPR3: flag = REGISTER.IPQ - REGISTER._3Q; continue;
case INSTR_CMPQRIPR4: flag = REGISTER.IPQ - REGISTER._4Q; continue;
case INSTR_CMPQRIPR5: flag = REGISTER.IPQ - REGISTER._5Q; continue;
case INSTR_CMPQRIPR6: flag = REGISTER.IPQ - REGISTER._6Q; continue;
case INSTR_CMPQRIPR7: flag = REGISTER.IPQ - REGISTER._7Q; continue;
case INSTR_CMPQRIPR8: flag = REGISTER.IPQ - REGISTER._8Q; continue;
case INSTR_CMPQRIPR9: flag = REGISTER.IPQ - REGISTER._9Q; continue;
case INSTR_CMPQRIPR10: flag = REGISTER.IPQ - REGISTER._10Q; continue;
case INSTR_CMPQRIPR11: flag = REGISTER.IPQ - REGISTER._11Q; continue;
case INSTR_CMPQRIPR12: flag = REGISTER.IPQ - REGISTER._12Q; continue;
case INSTR_CMPQRIPRIP: flag = REGISTER.IPQ - REGISTER.IPQ; continue;
case INSTR_CMPQRIPRSP: flag = REGISTER.IPQ - REGISTER.SPQ; continue;
case INSTR_CMPQRIPRBP: flag = REGISTER.IPQ - REGISTER.BPQ; continue;
case INSTR_CMPQRSPI: flag = REGISTER.SPQ - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQRSPRA: flag = REGISTER.SPQ - REGISTER.AQ; continue;
case INSTR_CMPQRSPRB: flag = REGISTER.SPQ - REGISTER.BQ; continue;
case INSTR_CMPQRSPRC: flag = REGISTER.SPQ - REGISTER.CQ; continue;
case INSTR_CMPQRSPRD: flag = REGISTER.SPQ - REGISTER.DQ; continue;
case INSTR_CMPQRSPR0: flag = REGISTER.SPQ - REGISTER._0Q; continue;
case INSTR_CMPQRSPR1: flag = REGISTER.SPQ - REGISTER._1Q; continue;
case INSTR_CMPQRSPR2: flag = REGISTER.SPQ - REGISTER._2Q; continue;
case INSTR_CMPQRSPR3: flag = REGISTER.SPQ - REGISTER._3Q; continue;
case INSTR_CMPQRSPR4: flag = REGISTER.SPQ - REGISTER._4Q; continue;
case INSTR_CMPQRSPR5: flag = REGISTER.SPQ - REGISTER._5Q; continue;
case INSTR_CMPQRSPR6: flag = REGISTER.SPQ - REGISTER._6Q; continue;
case INSTR_CMPQRSPR7: flag = REGISTER.SPQ - REGISTER._7Q; continue;
case INSTR_CMPQRSPR8: flag = REGISTER.SPQ - REGISTER._8Q; continue;
case INSTR_CMPQRSPR9: flag = REGISTER.SPQ - REGISTER._9Q; continue;
case INSTR_CMPQRSPR10: flag = REGISTER.SPQ - REGISTER._10Q; continue;
case INSTR_CMPQRSPR11: flag = REGISTER.SPQ - REGISTER._11Q; continue;
case INSTR_CMPQRSPR12: flag = REGISTER.SPQ - REGISTER._12Q; continue;
case INSTR_CMPQRSPRIP: flag = REGISTER.SPQ - REGISTER.IPQ; continue;
case INSTR_CMPQRSPRSP: flag = REGISTER.SPQ - REGISTER.SPQ; continue;
case INSTR_CMPQRSPRBP: flag = REGISTER.SPQ - REGISTER.BPQ; continue;
case INSTR_CMPQRBPI: flag = REGISTER.BPQ - *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_CMPQRBPRA: flag = REGISTER.BPQ - REGISTER.AQ; continue;
case INSTR_CMPQRBPRB: flag = REGISTER.BPQ - REGISTER.BQ; continue;
case INSTR_CMPQRBPRC: flag = REGISTER.BPQ - REGISTER.CQ; continue;
case INSTR_CMPQRBPRD: flag = REGISTER.BPQ - REGISTER.DQ; continue;
case INSTR_CMPQRBPR0: flag = REGISTER.BPQ - REGISTER._0Q; continue;
case INSTR_CMPQRBPR1: flag = REGISTER.BPQ - REGISTER._1Q; continue;
case INSTR_CMPQRBPR2: flag = REGISTER.BPQ - REGISTER._2Q; continue;
case INSTR_CMPQRBPR3: flag = REGISTER.BPQ - REGISTER._3Q; continue;
case INSTR_CMPQRBPR4: flag = REGISTER.BPQ - REGISTER._4Q; continue;
case INSTR_CMPQRBPR5: flag = REGISTER.BPQ - REGISTER._5Q; continue;
case INSTR_CMPQRBPR6: flag = REGISTER.BPQ - REGISTER._6Q; continue;
case INSTR_CMPQRBPR7: flag = REGISTER.BPQ - REGISTER._7Q; continue;
case INSTR_CMPQRBPR8: flag = REGISTER.BPQ - REGISTER._8Q; continue;
case INSTR_CMPQRBPR9: flag = REGISTER.BPQ - REGISTER._9Q; continue;
case INSTR_CMPQRBPR10: flag = REGISTER.BPQ - REGISTER._10Q; continue;
case INSTR_CMPQRBPR11: flag = REGISTER.BPQ - REGISTER._11Q; continue;
case INSTR_CMPQRBPR12: flag = REGISTER.BPQ - REGISTER._12Q; continue;
case INSTR_CMPQRBPRIP: flag = REGISTER.BPQ - REGISTER.IPQ; continue;
case INSTR_CMPQRBPRSP: flag = REGISTER.BPQ - REGISTER.SPQ; continue;
case INSTR_CMPQRBPRBP: flag = REGISTER.BPQ - REGISTER.BPQ; continue;
case INSTR_CMPWRAI: flag = REGISTER.AW - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWRARA: flag = REGISTER.AW - REGISTER.AW; continue;
case INSTR_CMPWRARB: flag = REGISTER.AW - REGISTER.BW; continue;
case INSTR_CMPWRARC: flag = REGISTER.AW - REGISTER.CW; continue;
case INSTR_CMPWRARD: flag = REGISTER.AW - REGISTER.DW; continue;
case INSTR_CMPWRAR0: flag = REGISTER.AW - REGISTER._0W; continue;
case INSTR_CMPWRAR1: flag = REGISTER.AW - REGISTER._1W; continue;
case INSTR_CMPWRAR2: flag = REGISTER.AW - REGISTER._2W; continue;
case INSTR_CMPWRAR3: flag = REGISTER.AW - REGISTER._3W; continue;
case INSTR_CMPWRAR4: flag = REGISTER.AW - REGISTER._4W; continue;
case INSTR_CMPWRAR5: flag = REGISTER.AW - REGISTER._5W; continue;
case INSTR_CMPWRAR6: flag = REGISTER.AW - REGISTER._6W; continue;
case INSTR_CMPWRAR7: flag = REGISTER.AW - REGISTER._7W; continue;
case INSTR_CMPWRAR8: flag = REGISTER.AW - REGISTER._8W; continue;
case INSTR_CMPWRAR9: flag = REGISTER.AW - REGISTER._9W; continue;
case INSTR_CMPWRAR10: flag = REGISTER.AW - REGISTER._10W; continue;
case INSTR_CMPWRAR11: flag = REGISTER.AW - REGISTER._11W; continue;
case INSTR_CMPWRAR12: flag = REGISTER.AW - REGISTER._12W; continue;
case INSTR_CMPWRARIP: flag = REGISTER.AW - REGISTER.IPW; continue;
case INSTR_CMPWRARSP: flag = REGISTER.AW - REGISTER.SPW; continue;
case INSTR_CMPWRARBP: flag = REGISTER.AW - REGISTER.BPW; continue;
case INSTR_CMPWRBI: flag = REGISTER.BW - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWRBRA: flag = REGISTER.BW - REGISTER.AW; continue;
case INSTR_CMPWRBRB: flag = REGISTER.BW - REGISTER.BW; continue;
case INSTR_CMPWRBRC: flag = REGISTER.BW - REGISTER.CW; continue;
case INSTR_CMPWRBRD: flag = REGISTER.BW - REGISTER.DW; continue;
case INSTR_CMPWRBR0: flag = REGISTER.BW - REGISTER._0W; continue;
case INSTR_CMPWRBR1: flag = REGISTER.BW - REGISTER._1W; continue;
case INSTR_CMPWRBR2: flag = REGISTER.BW - REGISTER._2W; continue;
case INSTR_CMPWRBR3: flag = REGISTER.BW - REGISTER._3W; continue;
case INSTR_CMPWRBR4: flag = REGISTER.BW - REGISTER._4W; continue;
case INSTR_CMPWRBR5: flag = REGISTER.BW - REGISTER._5W; continue;
case INSTR_CMPWRBR6: flag = REGISTER.BW - REGISTER._6W; continue;
case INSTR_CMPWRBR7: flag = REGISTER.BW - REGISTER._7W; continue;
case INSTR_CMPWRBR8: flag = REGISTER.BW - REGISTER._8W; continue;
case INSTR_CMPWRBR9: flag = REGISTER.BW - REGISTER._9W; continue;
case INSTR_CMPWRBR10: flag = REGISTER.BW - REGISTER._10W; continue;
case INSTR_CMPWRBR11: flag = REGISTER.BW - REGISTER._11W; continue;
case INSTR_CMPWRBR12: flag = REGISTER.BW - REGISTER._12W; continue;
case INSTR_CMPWRBRIP: flag = REGISTER.BW - REGISTER.IPW; continue;
case INSTR_CMPWRBRSP: flag = REGISTER.BW - REGISTER.SPW; continue;
case INSTR_CMPWRBRBP: flag = REGISTER.BW - REGISTER.BPW; continue;
case INSTR_CMPWRCI: flag = REGISTER.CW - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWRCRA: flag = REGISTER.CW - REGISTER.AW; continue;
case INSTR_CMPWRCRB: flag = REGISTER.CW - REGISTER.BW; continue;
case INSTR_CMPWRCRC: flag = REGISTER.CW - REGISTER.CW; continue;
case INSTR_CMPWRCRD: flag = REGISTER.CW - REGISTER.DW; continue;
case INSTR_CMPWRCR0: flag = REGISTER.CW - REGISTER._0W; continue;
case INSTR_CMPWRCR1: flag = REGISTER.CW - REGISTER._1W; continue;
case INSTR_CMPWRCR2: flag = REGISTER.CW - REGISTER._2W; continue;
case INSTR_CMPWRCR3: flag = REGISTER.CW - REGISTER._3W; continue;
case INSTR_CMPWRCR4: flag = REGISTER.CW - REGISTER._4W; continue;
case INSTR_CMPWRCR5: flag = REGISTER.CW - REGISTER._5W; continue;
case INSTR_CMPWRCR6: flag = REGISTER.CW - REGISTER._6W; continue;
case INSTR_CMPWRCR7: flag = REGISTER.CW - REGISTER._7W; continue;
case INSTR_CMPWRCR8: flag = REGISTER.CW - REGISTER._8W; continue;
case INSTR_CMPWRCR9: flag = REGISTER.CW - REGISTER._9W; continue;
case INSTR_CMPWRCR10: flag = REGISTER.CW - REGISTER._10W; continue;
case INSTR_CMPWRCR11: flag = REGISTER.CW - REGISTER._11W; continue;
case INSTR_CMPWRCR12: flag = REGISTER.CW - REGISTER._12W; continue;
case INSTR_CMPWRCRIP: flag = REGISTER.CW - REGISTER.IPW; continue;
case INSTR_CMPWRCRSP: flag = REGISTER.CW - REGISTER.SPW; continue;
case INSTR_CMPWRCRBP: flag = REGISTER.CW - REGISTER.BPW; continue;
case INSTR_CMPWRDI: flag = REGISTER.DW - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWRDRA: flag = REGISTER.DW - REGISTER.AW; continue;
case INSTR_CMPWRDRB: flag = REGISTER.DW - REGISTER.BW; continue;
case INSTR_CMPWRDRC: flag = REGISTER.DW - REGISTER.CW; continue;
case INSTR_CMPWRDRD: flag = REGISTER.DW - REGISTER.DW; continue;
case INSTR_CMPWRDR0: flag = REGISTER.DW - REGISTER._0W; continue;
case INSTR_CMPWRDR1: flag = REGISTER.DW - REGISTER._1W; continue;
case INSTR_CMPWRDR2: flag = REGISTER.DW - REGISTER._2W; continue;
case INSTR_CMPWRDR3: flag = REGISTER.DW - REGISTER._3W; continue;
case INSTR_CMPWRDR4: flag = REGISTER.DW - REGISTER._4W; continue;
case INSTR_CMPWRDR5: flag = REGISTER.DW - REGISTER._5W; continue;
case INSTR_CMPWRDR6: flag = REGISTER.DW - REGISTER._6W; continue;
case INSTR_CMPWRDR7: flag = REGISTER.DW - REGISTER._7W; continue;
case INSTR_CMPWRDR8: flag = REGISTER.DW - REGISTER._8W; continue;
case INSTR_CMPWRDR9: flag = REGISTER.DW - REGISTER._9W; continue;
case INSTR_CMPWRDR10: flag = REGISTER.DW - REGISTER._10W; continue;
case INSTR_CMPWRDR11: flag = REGISTER.DW - REGISTER._11W; continue;
case INSTR_CMPWRDR12: flag = REGISTER.DW - REGISTER._12W; continue;
case INSTR_CMPWRDRIP: flag = REGISTER.DW - REGISTER.IPW; continue;
case INSTR_CMPWRDRSP: flag = REGISTER.DW - REGISTER.SPW; continue;
case INSTR_CMPWRDRBP: flag = REGISTER.DW - REGISTER.BPW; continue;
case INSTR_CMPWR0I: flag = REGISTER._0W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR0RA: flag = REGISTER._0W - REGISTER.AW; continue;
case INSTR_CMPWR0RB: flag = REGISTER._0W - REGISTER.BW; continue;
case INSTR_CMPWR0RC: flag = REGISTER._0W - REGISTER.CW; continue;
case INSTR_CMPWR0RD: flag = REGISTER._0W - REGISTER.DW; continue;
case INSTR_CMPWR0R0: flag = REGISTER._0W - REGISTER._0W; continue;
case INSTR_CMPWR0R1: flag = REGISTER._0W - REGISTER._1W; continue;
case INSTR_CMPWR0R2: flag = REGISTER._0W - REGISTER._2W; continue;
case INSTR_CMPWR0R3: flag = REGISTER._0W - REGISTER._3W; continue;
case INSTR_CMPWR0R4: flag = REGISTER._0W - REGISTER._4W; continue;
case INSTR_CMPWR0R5: flag = REGISTER._0W - REGISTER._5W; continue;
case INSTR_CMPWR0R6: flag = REGISTER._0W - REGISTER._6W; continue;
case INSTR_CMPWR0R7: flag = REGISTER._0W - REGISTER._7W; continue;
case INSTR_CMPWR0R8: flag = REGISTER._0W - REGISTER._8W; continue;
case INSTR_CMPWR0R9: flag = REGISTER._0W - REGISTER._9W; continue;
case INSTR_CMPWR0R10: flag = REGISTER._0W - REGISTER._10W; continue;
case INSTR_CMPWR0R11: flag = REGISTER._0W - REGISTER._11W; continue;
case INSTR_CMPWR0R12: flag = REGISTER._0W - REGISTER._12W; continue;
case INSTR_CMPWR0RIP: flag = REGISTER._0W - REGISTER.IPW; continue;
case INSTR_CMPWR0RSP: flag = REGISTER._0W - REGISTER.SPW; continue;
case INSTR_CMPWR0RBP: flag = REGISTER._0W - REGISTER.BPW; continue;
case INSTR_CMPWR1I: flag = REGISTER._1W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR1RA: flag = REGISTER._1W - REGISTER.AW; continue;
case INSTR_CMPWR1RB: flag = REGISTER._1W - REGISTER.BW; continue;
case INSTR_CMPWR1RC: flag = REGISTER._1W - REGISTER.CW; continue;
case INSTR_CMPWR1RD: flag = REGISTER._1W - REGISTER.DW; continue;
case INSTR_CMPWR1R0: flag = REGISTER._1W - REGISTER._0W; continue;
case INSTR_CMPWR1R1: flag = REGISTER._1W - REGISTER._1W; continue;
case INSTR_CMPWR1R2: flag = REGISTER._1W - REGISTER._2W; continue;
case INSTR_CMPWR1R3: flag = REGISTER._1W - REGISTER._3W; continue;
case INSTR_CMPWR1R4: flag = REGISTER._1W - REGISTER._4W; continue;
case INSTR_CMPWR1R5: flag = REGISTER._1W - REGISTER._5W; continue;
case INSTR_CMPWR1R6: flag = REGISTER._1W - REGISTER._6W; continue;
case INSTR_CMPWR1R7: flag = REGISTER._1W - REGISTER._7W; continue;
case INSTR_CMPWR1R8: flag = REGISTER._1W - REGISTER._8W; continue;
case INSTR_CMPWR1R9: flag = REGISTER._1W - REGISTER._9W; continue;
case INSTR_CMPWR1R10: flag = REGISTER._1W - REGISTER._10W; continue;
case INSTR_CMPWR1R11: flag = REGISTER._1W - REGISTER._11W; continue;
case INSTR_CMPWR1R12: flag = REGISTER._1W - REGISTER._12W; continue;
case INSTR_CMPWR1RIP: flag = REGISTER._1W - REGISTER.IPW; continue;
case INSTR_CMPWR1RSP: flag = REGISTER._1W - REGISTER.SPW; continue;
case INSTR_CMPWR1RBP: flag = REGISTER._1W - REGISTER.BPW; continue;
case INSTR_CMPWR2I: flag = REGISTER._2W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR2RA: flag = REGISTER._2W - REGISTER.AW; continue;
case INSTR_CMPWR2RB: flag = REGISTER._2W - REGISTER.BW; continue;
case INSTR_CMPWR2RC: flag = REGISTER._2W - REGISTER.CW; continue;
case INSTR_CMPWR2RD: flag = REGISTER._2W - REGISTER.DW; continue;
case INSTR_CMPWR2R0: flag = REGISTER._2W - REGISTER._0W; continue;
case INSTR_CMPWR2R1: flag = REGISTER._2W - REGISTER._1W; continue;
case INSTR_CMPWR2R2: flag = REGISTER._2W - REGISTER._2W; continue;
case INSTR_CMPWR2R3: flag = REGISTER._2W - REGISTER._3W; continue;
case INSTR_CMPWR2R4: flag = REGISTER._2W - REGISTER._4W; continue;
case INSTR_CMPWR2R5: flag = REGISTER._2W - REGISTER._5W; continue;
case INSTR_CMPWR2R6: flag = REGISTER._2W - REGISTER._6W; continue;
case INSTR_CMPWR2R7: flag = REGISTER._2W - REGISTER._7W; continue;
case INSTR_CMPWR2R8: flag = REGISTER._2W - REGISTER._8W; continue;
case INSTR_CMPWR2R9: flag = REGISTER._2W - REGISTER._9W; continue;
case INSTR_CMPWR2R10: flag = REGISTER._2W - REGISTER._10W; continue;
case INSTR_CMPWR2R11: flag = REGISTER._2W - REGISTER._11W; continue;
case INSTR_CMPWR2R12: flag = REGISTER._2W - REGISTER._12W; continue;
case INSTR_CMPWR2RIP: flag = REGISTER._2W - REGISTER.IPW; continue;
case INSTR_CMPWR2RSP: flag = REGISTER._2W - REGISTER.SPW; continue;
case INSTR_CMPWR2RBP: flag = REGISTER._2W - REGISTER.BPW; continue;
case INSTR_CMPWR3I: flag = REGISTER._3W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR3RA: flag = REGISTER._3W - REGISTER.AW; continue;
case INSTR_CMPWR3RB: flag = REGISTER._3W - REGISTER.BW; continue;
case INSTR_CMPWR3RC: flag = REGISTER._3W - REGISTER.CW; continue;
case INSTR_CMPWR3RD: flag = REGISTER._3W - REGISTER.DW; continue;
case INSTR_CMPWR3R0: flag = REGISTER._3W - REGISTER._0W; continue;
case INSTR_CMPWR3R1: flag = REGISTER._3W - REGISTER._1W; continue;
case INSTR_CMPWR3R2: flag = REGISTER._3W - REGISTER._2W; continue;
case INSTR_CMPWR3R3: flag = REGISTER._3W - REGISTER._3W; continue;
case INSTR_CMPWR3R4: flag = REGISTER._3W - REGISTER._4W; continue;
case INSTR_CMPWR3R5: flag = REGISTER._3W - REGISTER._5W; continue;
case INSTR_CMPWR3R6: flag = REGISTER._3W - REGISTER._6W; continue;
case INSTR_CMPWR3R7: flag = REGISTER._3W - REGISTER._7W; continue;
case INSTR_CMPWR3R8: flag = REGISTER._3W - REGISTER._8W; continue;
case INSTR_CMPWR3R9: flag = REGISTER._3W - REGISTER._9W; continue;
case INSTR_CMPWR3R10: flag = REGISTER._3W - REGISTER._10W; continue;
case INSTR_CMPWR3R11: flag = REGISTER._3W - REGISTER._11W; continue;
case INSTR_CMPWR3R12: flag = REGISTER._3W - REGISTER._12W; continue;
case INSTR_CMPWR3RIP: flag = REGISTER._3W - REGISTER.IPW; continue;
case INSTR_CMPWR3RSP: flag = REGISTER._3W - REGISTER.SPW; continue;
case INSTR_CMPWR3RBP: flag = REGISTER._3W - REGISTER.BPW; continue;
case INSTR_CMPWR4I: flag = REGISTER._4W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR4RA: flag = REGISTER._4W - REGISTER.AW; continue;
case INSTR_CMPWR4RB: flag = REGISTER._4W - REGISTER.BW; continue;
case INSTR_CMPWR4RC: flag = REGISTER._4W - REGISTER.CW; continue;
case INSTR_CMPWR4RD: flag = REGISTER._4W - REGISTER.DW; continue;
case INSTR_CMPWR4R0: flag = REGISTER._4W - REGISTER._0W; continue;
case INSTR_CMPWR4R1: flag = REGISTER._4W - REGISTER._1W; continue;
case INSTR_CMPWR4R2: flag = REGISTER._4W - REGISTER._2W; continue;
case INSTR_CMPWR4R3: flag = REGISTER._4W - REGISTER._3W; continue;
case INSTR_CMPWR4R4: flag = REGISTER._4W - REGISTER._4W; continue;
case INSTR_CMPWR4R5: flag = REGISTER._4W - REGISTER._5W; continue;
case INSTR_CMPWR4R6: flag = REGISTER._4W - REGISTER._6W; continue;
case INSTR_CMPWR4R7: flag = REGISTER._4W - REGISTER._7W; continue;
case INSTR_CMPWR4R8: flag = REGISTER._4W - REGISTER._8W; continue;
case INSTR_CMPWR4R9: flag = REGISTER._4W - REGISTER._9W; continue;
case INSTR_CMPWR4R10: flag = REGISTER._4W - REGISTER._10W; continue;
case INSTR_CMPWR4R11: flag = REGISTER._4W - REGISTER._11W; continue;
case INSTR_CMPWR4R12: flag = REGISTER._4W - REGISTER._12W; continue;
case INSTR_CMPWR4RIP: flag = REGISTER._4W - REGISTER.IPW; continue;
case INSTR_CMPWR4RSP: flag = REGISTER._4W - REGISTER.SPW; continue;
case INSTR_CMPWR4RBP: flag = REGISTER._4W - REGISTER.BPW; continue;
case INSTR_CMPWR5I: flag = REGISTER._5W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR5RA: flag = REGISTER._5W - REGISTER.AW; continue;
case INSTR_CMPWR5RB: flag = REGISTER._5W - REGISTER.BW; continue;
case INSTR_CMPWR5RC: flag = REGISTER._5W - REGISTER.CW; continue;
case INSTR_CMPWR5RD: flag = REGISTER._5W - REGISTER.DW; continue;
case INSTR_CMPWR5R0: flag = REGISTER._5W - REGISTER._0W; continue;
case INSTR_CMPWR5R1: flag = REGISTER._5W - REGISTER._1W; continue;
case INSTR_CMPWR5R2: flag = REGISTER._5W - REGISTER._2W; continue;
case INSTR_CMPWR5R3: flag = REGISTER._5W - REGISTER._3W; continue;
case INSTR_CMPWR5R4: flag = REGISTER._5W - REGISTER._4W; continue;
case INSTR_CMPWR5R5: flag = REGISTER._5W - REGISTER._5W; continue;
case INSTR_CMPWR5R6: flag = REGISTER._5W - REGISTER._6W; continue;
case INSTR_CMPWR5R7: flag = REGISTER._5W - REGISTER._7W; continue;
case INSTR_CMPWR5R8: flag = REGISTER._5W - REGISTER._8W; continue;
case INSTR_CMPWR5R9: flag = REGISTER._5W - REGISTER._9W; continue;
case INSTR_CMPWR5R10: flag = REGISTER._5W - REGISTER._10W; continue;
case INSTR_CMPWR5R11: flag = REGISTER._5W - REGISTER._11W; continue;
case INSTR_CMPWR5R12: flag = REGISTER._5W - REGISTER._12W; continue;
case INSTR_CMPWR5RIP: flag = REGISTER._5W - REGISTER.IPW; continue;
case INSTR_CMPWR5RSP: flag = REGISTER._5W - REGISTER.SPW; continue;
case INSTR_CMPWR5RBP: flag = REGISTER._5W - REGISTER.BPW; continue;
case INSTR_CMPWR6I: flag = REGISTER._6W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR6RA: flag = REGISTER._6W - REGISTER.AW; continue;
case INSTR_CMPWR6RB: flag = REGISTER._6W - REGISTER.BW; continue;
case INSTR_CMPWR6RC: flag = REGISTER._6W - REGISTER.CW; continue;
case INSTR_CMPWR6RD: flag = REGISTER._6W - REGISTER.DW; continue;
case INSTR_CMPWR6R0: flag = REGISTER._6W - REGISTER._0W; continue;
case INSTR_CMPWR6R1: flag = REGISTER._6W - REGISTER._1W; continue;
case INSTR_CMPWR6R2: flag = REGISTER._6W - REGISTER._2W; continue;
case INSTR_CMPWR6R3: flag = REGISTER._6W - REGISTER._3W; continue;
case INSTR_CMPWR6R4: flag = REGISTER._6W - REGISTER._4W; continue;
case INSTR_CMPWR6R5: flag = REGISTER._6W - REGISTER._5W; continue;
case INSTR_CMPWR6R6: flag = REGISTER._6W - REGISTER._6W; continue;
case INSTR_CMPWR6R7: flag = REGISTER._6W - REGISTER._7W; continue;
case INSTR_CMPWR6R8: flag = REGISTER._6W - REGISTER._8W; continue;
case INSTR_CMPWR6R9: flag = REGISTER._6W - REGISTER._9W; continue;
case INSTR_CMPWR6R10: flag = REGISTER._6W - REGISTER._10W; continue;
case INSTR_CMPWR6R11: flag = REGISTER._6W - REGISTER._11W; continue;
case INSTR_CMPWR6R12: flag = REGISTER._6W - REGISTER._12W; continue;
case INSTR_CMPWR6RIP: flag = REGISTER._6W - REGISTER.IPW; continue;
case INSTR_CMPWR6RSP: flag = REGISTER._6W - REGISTER.SPW; continue;
case INSTR_CMPWR6RBP: flag = REGISTER._6W - REGISTER.BPW; continue;
case INSTR_CMPWR7I: flag = REGISTER._7W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR7RA: flag = REGISTER._7W - REGISTER.AW; continue;
case INSTR_CMPWR7RB: flag = REGISTER._7W - REGISTER.BW; continue;
case INSTR_CMPWR7RC: flag = REGISTER._7W - REGISTER.CW; continue;
case INSTR_CMPWR7RD: flag = REGISTER._7W - REGISTER.DW; continue;
case INSTR_CMPWR7R0: flag = REGISTER._7W - REGISTER._0W; continue;
case INSTR_CMPWR7R1: flag = REGISTER._7W - REGISTER._1W; continue;
case INSTR_CMPWR7R2: flag = REGISTER._7W - REGISTER._2W; continue;
case INSTR_CMPWR7R3: flag = REGISTER._7W - REGISTER._3W; continue;
case INSTR_CMPWR7R4: flag = REGISTER._7W - REGISTER._4W; continue;
case INSTR_CMPWR7R5: flag = REGISTER._7W - REGISTER._5W; continue;
case INSTR_CMPWR7R6: flag = REGISTER._7W - REGISTER._6W; continue;
case INSTR_CMPWR7R7: flag = REGISTER._7W - REGISTER._7W; continue;
case INSTR_CMPWR7R8: flag = REGISTER._7W - REGISTER._8W; continue;
case INSTR_CMPWR7R9: flag = REGISTER._7W - REGISTER._9W; continue;
case INSTR_CMPWR7R10: flag = REGISTER._7W - REGISTER._10W; continue;
case INSTR_CMPWR7R11: flag = REGISTER._7W - REGISTER._11W; continue;
case INSTR_CMPWR7R12: flag = REGISTER._7W - REGISTER._12W; continue;
case INSTR_CMPWR7RIP: flag = REGISTER._7W - REGISTER.IPW; continue;
case INSTR_CMPWR7RSP: flag = REGISTER._7W - REGISTER.SPW; continue;
case INSTR_CMPWR7RBP: flag = REGISTER._7W - REGISTER.BPW; continue;
case INSTR_CMPWR8I: flag = REGISTER._8W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR8RA: flag = REGISTER._8W - REGISTER.AW; continue;
case INSTR_CMPWR8RB: flag = REGISTER._8W - REGISTER.BW; continue;
case INSTR_CMPWR8RC: flag = REGISTER._8W - REGISTER.CW; continue;
case INSTR_CMPWR8RD: flag = REGISTER._8W - REGISTER.DW; continue;
case INSTR_CMPWR8R0: flag = REGISTER._8W - REGISTER._0W; continue;
case INSTR_CMPWR8R1: flag = REGISTER._8W - REGISTER._1W; continue;
case INSTR_CMPWR8R2: flag = REGISTER._8W - REGISTER._2W; continue;
case INSTR_CMPWR8R3: flag = REGISTER._8W - REGISTER._3W; continue;
case INSTR_CMPWR8R4: flag = REGISTER._8W - REGISTER._4W; continue;
case INSTR_CMPWR8R5: flag = REGISTER._8W - REGISTER._5W; continue;
case INSTR_CMPWR8R6: flag = REGISTER._8W - REGISTER._6W; continue;
case INSTR_CMPWR8R7: flag = REGISTER._8W - REGISTER._7W; continue;
case INSTR_CMPWR8R8: flag = REGISTER._8W - REGISTER._8W; continue;
case INSTR_CMPWR8R9: flag = REGISTER._8W - REGISTER._9W; continue;
case INSTR_CMPWR8R10: flag = REGISTER._8W - REGISTER._10W; continue;
case INSTR_CMPWR8R11: flag = REGISTER._8W - REGISTER._11W; continue;
case INSTR_CMPWR8R12: flag = REGISTER._8W - REGISTER._12W; continue;
case INSTR_CMPWR8RIP: flag = REGISTER._8W - REGISTER.IPW; continue;
case INSTR_CMPWR8RSP: flag = REGISTER._8W - REGISTER.SPW; continue;
case INSTR_CMPWR8RBP: flag = REGISTER._8W - REGISTER.BPW; continue;
case INSTR_CMPWR9I: flag = REGISTER._9W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR9RA: flag = REGISTER._9W - REGISTER.AW; continue;
case INSTR_CMPWR9RB: flag = REGISTER._9W - REGISTER.BW; continue;
case INSTR_CMPWR9RC: flag = REGISTER._9W - REGISTER.CW; continue;
case INSTR_CMPWR9RD: flag = REGISTER._9W - REGISTER.DW; continue;
case INSTR_CMPWR9R0: flag = REGISTER._9W - REGISTER._0W; continue;
case INSTR_CMPWR9R1: flag = REGISTER._9W - REGISTER._1W; continue;
case INSTR_CMPWR9R2: flag = REGISTER._9W - REGISTER._2W; continue;
case INSTR_CMPWR9R3: flag = REGISTER._9W - REGISTER._3W; continue;
case INSTR_CMPWR9R4: flag = REGISTER._9W - REGISTER._4W; continue;
case INSTR_CMPWR9R5: flag = REGISTER._9W - REGISTER._5W; continue;
case INSTR_CMPWR9R6: flag = REGISTER._9W - REGISTER._6W; continue;
case INSTR_CMPWR9R7: flag = REGISTER._9W - REGISTER._7W; continue;
case INSTR_CMPWR9R8: flag = REGISTER._9W - REGISTER._8W; continue;
case INSTR_CMPWR9R9: flag = REGISTER._9W - REGISTER._9W; continue;
case INSTR_CMPWR9R10: flag = REGISTER._9W - REGISTER._10W; continue;
case INSTR_CMPWR9R11: flag = REGISTER._9W - REGISTER._11W; continue;
case INSTR_CMPWR9R12: flag = REGISTER._9W - REGISTER._12W; continue;
case INSTR_CMPWR9RIP: flag = REGISTER._9W - REGISTER.IPW; continue;
case INSTR_CMPWR9RSP: flag = REGISTER._9W - REGISTER.SPW; continue;
case INSTR_CMPWR9RBP: flag = REGISTER._9W - REGISTER.BPW; continue;
case INSTR_CMPWR10I: flag = REGISTER._10W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR10RA: flag = REGISTER._10W - REGISTER.AW; continue;
case INSTR_CMPWR10RB: flag = REGISTER._10W - REGISTER.BW; continue;
case INSTR_CMPWR10RC: flag = REGISTER._10W - REGISTER.CW; continue;
case INSTR_CMPWR10RD: flag = REGISTER._10W - REGISTER.DW; continue;
case INSTR_CMPWR10R0: flag = REGISTER._10W - REGISTER._0W; continue;
case INSTR_CMPWR10R1: flag = REGISTER._10W - REGISTER._1W; continue;
case INSTR_CMPWR10R2: flag = REGISTER._10W - REGISTER._2W; continue;
case INSTR_CMPWR10R3: flag = REGISTER._10W - REGISTER._3W; continue;
case INSTR_CMPWR10R4: flag = REGISTER._10W - REGISTER._4W; continue;
case INSTR_CMPWR10R5: flag = REGISTER._10W - REGISTER._5W; continue;
case INSTR_CMPWR10R6: flag = REGISTER._10W - REGISTER._6W; continue;
case INSTR_CMPWR10R7: flag = REGISTER._10W - REGISTER._7W; continue;
case INSTR_CMPWR10R8: flag = REGISTER._10W - REGISTER._8W; continue;
case INSTR_CMPWR10R9: flag = REGISTER._10W - REGISTER._9W; continue;
case INSTR_CMPWR10R10: flag = REGISTER._10W - REGISTER._10W; continue;
case INSTR_CMPWR10R11: flag = REGISTER._10W - REGISTER._11W; continue;
case INSTR_CMPWR10R12: flag = REGISTER._10W - REGISTER._12W; continue;
case INSTR_CMPWR10RIP: flag = REGISTER._10W - REGISTER.IPW; continue;
case INSTR_CMPWR10RSP: flag = REGISTER._10W - REGISTER.SPW; continue;
case INSTR_CMPWR10RBP: flag = REGISTER._10W - REGISTER.BPW; continue;
case INSTR_CMPWR11I: flag = REGISTER._11W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR11RA: flag = REGISTER._11W - REGISTER.AW; continue;
case INSTR_CMPWR11RB: flag = REGISTER._11W - REGISTER.BW; continue;
case INSTR_CMPWR11RC: flag = REGISTER._11W - REGISTER.CW; continue;
case INSTR_CMPWR11RD: flag = REGISTER._11W - REGISTER.DW; continue;
case INSTR_CMPWR11R0: flag = REGISTER._11W - REGISTER._0W; continue;
case INSTR_CMPWR11R1: flag = REGISTER._11W - REGISTER._1W; continue;
case INSTR_CMPWR11R2: flag = REGISTER._11W - REGISTER._2W; continue;
case INSTR_CMPWR11R3: flag = REGISTER._11W - REGISTER._3W; continue;
case INSTR_CMPWR11R4: flag = REGISTER._11W - REGISTER._4W; continue;
case INSTR_CMPWR11R5: flag = REGISTER._11W - REGISTER._5W; continue;
case INSTR_CMPWR11R6: flag = REGISTER._11W - REGISTER._6W; continue;
case INSTR_CMPWR11R7: flag = REGISTER._11W - REGISTER._7W; continue;
case INSTR_CMPWR11R8: flag = REGISTER._11W - REGISTER._8W; continue;
case INSTR_CMPWR11R9: flag = REGISTER._11W - REGISTER._9W; continue;
case INSTR_CMPWR11R10: flag = REGISTER._11W - REGISTER._10W; continue;
case INSTR_CMPWR11R11: flag = REGISTER._11W - REGISTER._11W; continue;
case INSTR_CMPWR11R12: flag = REGISTER._11W - REGISTER._12W; continue;
case INSTR_CMPWR11RIP: flag = REGISTER._11W - REGISTER.IPW; continue;
case INSTR_CMPWR11RSP: flag = REGISTER._11W - REGISTER.SPW; continue;
case INSTR_CMPWR11RBP: flag = REGISTER._11W - REGISTER.BPW; continue;
case INSTR_CMPWR12I: flag = REGISTER._12W - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWR12RA: flag = REGISTER._12W - REGISTER.AW; continue;
case INSTR_CMPWR12RB: flag = REGISTER._12W - REGISTER.BW; continue;
case INSTR_CMPWR12RC: flag = REGISTER._12W - REGISTER.CW; continue;
case INSTR_CMPWR12RD: flag = REGISTER._12W - REGISTER.DW; continue;
case INSTR_CMPWR12R0: flag = REGISTER._12W - REGISTER._0W; continue;
case INSTR_CMPWR12R1: flag = REGISTER._12W - REGISTER._1W; continue;
case INSTR_CMPWR12R2: flag = REGISTER._12W - REGISTER._2W; continue;
case INSTR_CMPWR12R3: flag = REGISTER._12W - REGISTER._3W; continue;
case INSTR_CMPWR12R4: flag = REGISTER._12W - REGISTER._4W; continue;
case INSTR_CMPWR12R5: flag = REGISTER._12W - REGISTER._5W; continue;
case INSTR_CMPWR12R6: flag = REGISTER._12W - REGISTER._6W; continue;
case INSTR_CMPWR12R7: flag = REGISTER._12W - REGISTER._7W; continue;
case INSTR_CMPWR12R8: flag = REGISTER._12W - REGISTER._8W; continue;
case INSTR_CMPWR12R9: flag = REGISTER._12W - REGISTER._9W; continue;
case INSTR_CMPWR12R10: flag = REGISTER._12W - REGISTER._10W; continue;
case INSTR_CMPWR12R11: flag = REGISTER._12W - REGISTER._11W; continue;
case INSTR_CMPWR12R12: flag = REGISTER._12W - REGISTER._12W; continue;
case INSTR_CMPWR12RIP: flag = REGISTER._12W - REGISTER.IPW; continue;
case INSTR_CMPWR12RSP: flag = REGISTER._12W - REGISTER.SPW; continue;
case INSTR_CMPWR12RBP: flag = REGISTER._12W - REGISTER.BPW; continue;
case INSTR_CMPWRIPI: flag = REGISTER.IPW - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWRIPRA: flag = REGISTER.IPW - REGISTER.AW; continue;
case INSTR_CMPWRIPRB: flag = REGISTER.IPW - REGISTER.BW; continue;
case INSTR_CMPWRIPRC: flag = REGISTER.IPW - REGISTER.CW; continue;
case INSTR_CMPWRIPRD: flag = REGISTER.IPW - REGISTER.DW; continue;
case INSTR_CMPWRIPR0: flag = REGISTER.IPW - REGISTER._0W; continue;
case INSTR_CMPWRIPR1: flag = REGISTER.IPW - REGISTER._1W; continue;
case INSTR_CMPWRIPR2: flag = REGISTER.IPW - REGISTER._2W; continue;
case INSTR_CMPWRIPR3: flag = REGISTER.IPW - REGISTER._3W; continue;
case INSTR_CMPWRIPR4: flag = REGISTER.IPW - REGISTER._4W; continue;
case INSTR_CMPWRIPR5: flag = REGISTER.IPW - REGISTER._5W; continue;
case INSTR_CMPWRIPR6: flag = REGISTER.IPW - REGISTER._6W; continue;
case INSTR_CMPWRIPR7: flag = REGISTER.IPW - REGISTER._7W; continue;
case INSTR_CMPWRIPR8: flag = REGISTER.IPW - REGISTER._8W; continue;
case INSTR_CMPWRIPR9: flag = REGISTER.IPW - REGISTER._9W; continue;
case INSTR_CMPWRIPR10: flag = REGISTER.IPW - REGISTER._10W; continue;
case INSTR_CMPWRIPR11: flag = REGISTER.IPW - REGISTER._11W; continue;
case INSTR_CMPWRIPR12: flag = REGISTER.IPW - REGISTER._12W; continue;
case INSTR_CMPWRIPRIP: flag = REGISTER.IPW - REGISTER.IPW; continue;
case INSTR_CMPWRIPRSP: flag = REGISTER.IPW - REGISTER.SPW; continue;
case INSTR_CMPWRIPRBP: flag = REGISTER.IPW - REGISTER.BPW; continue;
case INSTR_CMPWRSPI: flag = REGISTER.SPW - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWRSPRA: flag = REGISTER.SPW - REGISTER.AW; continue;
case INSTR_CMPWRSPRB: flag = REGISTER.SPW - REGISTER.BW; continue;
case INSTR_CMPWRSPRC: flag = REGISTER.SPW - REGISTER.CW; continue;
case INSTR_CMPWRSPRD: flag = REGISTER.SPW - REGISTER.DW; continue;
case INSTR_CMPWRSPR0: flag = REGISTER.SPW - REGISTER._0W; continue;
case INSTR_CMPWRSPR1: flag = REGISTER.SPW - REGISTER._1W; continue;
case INSTR_CMPWRSPR2: flag = REGISTER.SPW - REGISTER._2W; continue;
case INSTR_CMPWRSPR3: flag = REGISTER.SPW - REGISTER._3W; continue;
case INSTR_CMPWRSPR4: flag = REGISTER.SPW - REGISTER._4W; continue;
case INSTR_CMPWRSPR5: flag = REGISTER.SPW - REGISTER._5W; continue;
case INSTR_CMPWRSPR6: flag = REGISTER.SPW - REGISTER._6W; continue;
case INSTR_CMPWRSPR7: flag = REGISTER.SPW - REGISTER._7W; continue;
case INSTR_CMPWRSPR8: flag = REGISTER.SPW - REGISTER._8W; continue;
case INSTR_CMPWRSPR9: flag = REGISTER.SPW - REGISTER._9W; continue;
case INSTR_CMPWRSPR10: flag = REGISTER.SPW - REGISTER._10W; continue;
case INSTR_CMPWRSPR11: flag = REGISTER.SPW - REGISTER._11W; continue;
case INSTR_CMPWRSPR12: flag = REGISTER.SPW - REGISTER._12W; continue;
case INSTR_CMPWRSPRIP: flag = REGISTER.SPW - REGISTER.IPW; continue;
case INSTR_CMPWRSPRSP: flag = REGISTER.SPW - REGISTER.SPW; continue;
case INSTR_CMPWRSPRBP: flag = REGISTER.SPW - REGISTER.BPW; continue;
case INSTR_CMPWRBPI: flag = REGISTER.BPW - *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_CMPWRBPRA: flag = REGISTER.BPW - REGISTER.AW; continue;
case INSTR_CMPWRBPRB: flag = REGISTER.BPW - REGISTER.BW; continue;
case INSTR_CMPWRBPRC: flag = REGISTER.BPW - REGISTER.CW; continue;
case INSTR_CMPWRBPRD: flag = REGISTER.BPW - REGISTER.DW; continue;
case INSTR_CMPWRBPR0: flag = REGISTER.BPW - REGISTER._0W; continue;
case INSTR_CMPWRBPR1: flag = REGISTER.BPW - REGISTER._1W; continue;
case INSTR_CMPWRBPR2: flag = REGISTER.BPW - REGISTER._2W; continue;
case INSTR_CMPWRBPR3: flag = REGISTER.BPW - REGISTER._3W; continue;
case INSTR_CMPWRBPR4: flag = REGISTER.BPW - REGISTER._4W; continue;
case INSTR_CMPWRBPR5: flag = REGISTER.BPW - REGISTER._5W; continue;
case INSTR_CMPWRBPR6: flag = REGISTER.BPW - REGISTER._6W; continue;
case INSTR_CMPWRBPR7: flag = REGISTER.BPW - REGISTER._7W; continue;
case INSTR_CMPWRBPR8: flag = REGISTER.BPW - REGISTER._8W; continue;
case INSTR_CMPWRBPR9: flag = REGISTER.BPW - REGISTER._9W; continue;
case INSTR_CMPWRBPR10: flag = REGISTER.BPW - REGISTER._10W; continue;
case INSTR_CMPWRBPR11: flag = REGISTER.BPW - REGISTER._11W; continue;
case INSTR_CMPWRBPR12: flag = REGISTER.BPW - REGISTER._12W; continue;
case INSTR_CMPWRBPRIP: flag = REGISTER.BPW - REGISTER.IPW; continue;
case INSTR_CMPWRBPRSP: flag = REGISTER.BPW - REGISTER.SPW; continue;
case INSTR_CMPWRBPRBP: flag = REGISTER.BPW - REGISTER.BPW; continue;
case INSTR_CMPBRAI: flag = REGISTER.AB - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBRARA: flag = REGISTER.AB - REGISTER.AB; continue;
case INSTR_CMPBRARB: flag = REGISTER.AB - REGISTER.BB; continue;
case INSTR_CMPBRARC: flag = REGISTER.AB - REGISTER.CB; continue;
case INSTR_CMPBRARD: flag = REGISTER.AB - REGISTER.DB; continue;
case INSTR_CMPBRAR0: flag = REGISTER.AB - REGISTER._0B; continue;
case INSTR_CMPBRAR1: flag = REGISTER.AB - REGISTER._1B; continue;
case INSTR_CMPBRAR2: flag = REGISTER.AB - REGISTER._2B; continue;
case INSTR_CMPBRAR3: flag = REGISTER.AB - REGISTER._3B; continue;
case INSTR_CMPBRAR4: flag = REGISTER.AB - REGISTER._4B; continue;
case INSTR_CMPBRAR5: flag = REGISTER.AB - REGISTER._5B; continue;
case INSTR_CMPBRAR6: flag = REGISTER.AB - REGISTER._6B; continue;
case INSTR_CMPBRAR7: flag = REGISTER.AB - REGISTER._7B; continue;
case INSTR_CMPBRAR8: flag = REGISTER.AB - REGISTER._8B; continue;
case INSTR_CMPBRAR9: flag = REGISTER.AB - REGISTER._9B; continue;
case INSTR_CMPBRAR10: flag = REGISTER.AB - REGISTER._10B; continue;
case INSTR_CMPBRAR11: flag = REGISTER.AB - REGISTER._11B; continue;
case INSTR_CMPBRAR12: flag = REGISTER.AB - REGISTER._12B; continue;
case INSTR_CMPBRARIP: flag = REGISTER.AB - REGISTER.IPB; continue;
case INSTR_CMPBRARSP: flag = REGISTER.AB - REGISTER.SPB; continue;
case INSTR_CMPBRARBP: flag = REGISTER.AB - REGISTER.BPB; continue;
case INSTR_CMPBRBI: flag = REGISTER.BB - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBRBRA: flag = REGISTER.BB - REGISTER.AB; continue;
case INSTR_CMPBRBRB: flag = REGISTER.BB - REGISTER.BB; continue;
case INSTR_CMPBRBRC: flag = REGISTER.BB - REGISTER.CB; continue;
case INSTR_CMPBRBRD: flag = REGISTER.BB - REGISTER.DB; continue;
case INSTR_CMPBRBR0: flag = REGISTER.BB - REGISTER._0B; continue;
case INSTR_CMPBRBR1: flag = REGISTER.BB - REGISTER._1B; continue;
case INSTR_CMPBRBR2: flag = REGISTER.BB - REGISTER._2B; continue;
case INSTR_CMPBRBR3: flag = REGISTER.BB - REGISTER._3B; continue;
case INSTR_CMPBRBR4: flag = REGISTER.BB - REGISTER._4B; continue;
case INSTR_CMPBRBR5: flag = REGISTER.BB - REGISTER._5B; continue;
case INSTR_CMPBRBR6: flag = REGISTER.BB - REGISTER._6B; continue;
case INSTR_CMPBRBR7: flag = REGISTER.BB - REGISTER._7B; continue;
case INSTR_CMPBRBR8: flag = REGISTER.BB - REGISTER._8B; continue;
case INSTR_CMPBRBR9: flag = REGISTER.BB - REGISTER._9B; continue;
case INSTR_CMPBRBR10: flag = REGISTER.BB - REGISTER._10B; continue;
case INSTR_CMPBRBR11: flag = REGISTER.BB - REGISTER._11B; continue;
case INSTR_CMPBRBR12: flag = REGISTER.BB - REGISTER._12B; continue;
case INSTR_CMPBRBRIP: flag = REGISTER.BB - REGISTER.IPB; continue;
case INSTR_CMPBRBRSP: flag = REGISTER.BB - REGISTER.SPB; continue;
case INSTR_CMPBRBRBP: flag = REGISTER.BB - REGISTER.BPB; continue;
case INSTR_CMPBRCI: flag = REGISTER.CB - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBRCRA: flag = REGISTER.CB - REGISTER.AB; continue;
case INSTR_CMPBRCRB: flag = REGISTER.CB - REGISTER.BB; continue;
case INSTR_CMPBRCRC: flag = REGISTER.CB - REGISTER.CB; continue;
case INSTR_CMPBRCRD: flag = REGISTER.CB - REGISTER.DB; continue;
case INSTR_CMPBRCR0: flag = REGISTER.CB - REGISTER._0B; continue;
case INSTR_CMPBRCR1: flag = REGISTER.CB - REGISTER._1B; continue;
case INSTR_CMPBRCR2: flag = REGISTER.CB - REGISTER._2B; continue;
case INSTR_CMPBRCR3: flag = REGISTER.CB - REGISTER._3B; continue;
case INSTR_CMPBRCR4: flag = REGISTER.CB - REGISTER._4B; continue;
case INSTR_CMPBRCR5: flag = REGISTER.CB - REGISTER._5B; continue;
case INSTR_CMPBRCR6: flag = REGISTER.CB - REGISTER._6B; continue;
case INSTR_CMPBRCR7: flag = REGISTER.CB - REGISTER._7B; continue;
case INSTR_CMPBRCR8: flag = REGISTER.CB - REGISTER._8B; continue;
case INSTR_CMPBRCR9: flag = REGISTER.CB - REGISTER._9B; continue;
case INSTR_CMPBRCR10: flag = REGISTER.CB - REGISTER._10B; continue;
case INSTR_CMPBRCR11: flag = REGISTER.CB - REGISTER._11B; continue;
case INSTR_CMPBRCR12: flag = REGISTER.CB - REGISTER._12B; continue;
case INSTR_CMPBRCRIP: flag = REGISTER.CB - REGISTER.IPB; continue;
case INSTR_CMPBRCRSP: flag = REGISTER.CB - REGISTER.SPB; continue;
case INSTR_CMPBRCRBP: flag = REGISTER.CB - REGISTER.BPB; continue;
case INSTR_CMPBRDI: flag = REGISTER.DB - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBRDRA: flag = REGISTER.DB - REGISTER.AB; continue;
case INSTR_CMPBRDRB: flag = REGISTER.DB - REGISTER.BB; continue;
case INSTR_CMPBRDRC: flag = REGISTER.DB - REGISTER.CB; continue;
case INSTR_CMPBRDRD: flag = REGISTER.DB - REGISTER.DB; continue;
case INSTR_CMPBRDR0: flag = REGISTER.DB - REGISTER._0B; continue;
case INSTR_CMPBRDR1: flag = REGISTER.DB - REGISTER._1B; continue;
case INSTR_CMPBRDR2: flag = REGISTER.DB - REGISTER._2B; continue;
case INSTR_CMPBRDR3: flag = REGISTER.DB - REGISTER._3B; continue;
case INSTR_CMPBRDR4: flag = REGISTER.DB - REGISTER._4B; continue;
case INSTR_CMPBRDR5: flag = REGISTER.DB - REGISTER._5B; continue;
case INSTR_CMPBRDR6: flag = REGISTER.DB - REGISTER._6B; continue;
case INSTR_CMPBRDR7: flag = REGISTER.DB - REGISTER._7B; continue;
case INSTR_CMPBRDR8: flag = REGISTER.DB - REGISTER._8B; continue;
case INSTR_CMPBRDR9: flag = REGISTER.DB - REGISTER._9B; continue;
case INSTR_CMPBRDR10: flag = REGISTER.DB - REGISTER._10B; continue;
case INSTR_CMPBRDR11: flag = REGISTER.DB - REGISTER._11B; continue;
case INSTR_CMPBRDR12: flag = REGISTER.DB - REGISTER._12B; continue;
case INSTR_CMPBRDRIP: flag = REGISTER.DB - REGISTER.IPB; continue;
case INSTR_CMPBRDRSP: flag = REGISTER.DB - REGISTER.SPB; continue;
case INSTR_CMPBRDRBP: flag = REGISTER.DB - REGISTER.BPB; continue;
case INSTR_CMPBR0I: flag = REGISTER._0B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR0RA: flag = REGISTER._0B - REGISTER.AB; continue;
case INSTR_CMPBR0RB: flag = REGISTER._0B - REGISTER.BB; continue;
case INSTR_CMPBR0RC: flag = REGISTER._0B - REGISTER.CB; continue;
case INSTR_CMPBR0RD: flag = REGISTER._0B - REGISTER.DB; continue;
case INSTR_CMPBR0R0: flag = REGISTER._0B - REGISTER._0B; continue;
case INSTR_CMPBR0R1: flag = REGISTER._0B - REGISTER._1B; continue;
case INSTR_CMPBR0R2: flag = REGISTER._0B - REGISTER._2B; continue;
case INSTR_CMPBR0R3: flag = REGISTER._0B - REGISTER._3B; continue;
case INSTR_CMPBR0R4: flag = REGISTER._0B - REGISTER._4B; continue;
case INSTR_CMPBR0R5: flag = REGISTER._0B - REGISTER._5B; continue;
case INSTR_CMPBR0R6: flag = REGISTER._0B - REGISTER._6B; continue;
case INSTR_CMPBR0R7: flag = REGISTER._0B - REGISTER._7B; continue;
case INSTR_CMPBR0R8: flag = REGISTER._0B - REGISTER._8B; continue;
case INSTR_CMPBR0R9: flag = REGISTER._0B - REGISTER._9B; continue;
case INSTR_CMPBR0R10: flag = REGISTER._0B - REGISTER._10B; continue;
case INSTR_CMPBR0R11: flag = REGISTER._0B - REGISTER._11B; continue;
case INSTR_CMPBR0R12: flag = REGISTER._0B - REGISTER._12B; continue;
case INSTR_CMPBR0RIP: flag = REGISTER._0B - REGISTER.IPB; continue;
case INSTR_CMPBR0RSP: flag = REGISTER._0B - REGISTER.SPB; continue;
case INSTR_CMPBR0RBP: flag = REGISTER._0B - REGISTER.BPB; continue;
case INSTR_CMPBR1I: flag = REGISTER._1B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR1RA: flag = REGISTER._1B - REGISTER.AB; continue;
case INSTR_CMPBR1RB: flag = REGISTER._1B - REGISTER.BB; continue;
case INSTR_CMPBR1RC: flag = REGISTER._1B - REGISTER.CB; continue;
case INSTR_CMPBR1RD: flag = REGISTER._1B - REGISTER.DB; continue;
case INSTR_CMPBR1R0: flag = REGISTER._1B - REGISTER._0B; continue;
case INSTR_CMPBR1R1: flag = REGISTER._1B - REGISTER._1B; continue;
case INSTR_CMPBR1R2: flag = REGISTER._1B - REGISTER._2B; continue;
case INSTR_CMPBR1R3: flag = REGISTER._1B - REGISTER._3B; continue;
case INSTR_CMPBR1R4: flag = REGISTER._1B - REGISTER._4B; continue;
case INSTR_CMPBR1R5: flag = REGISTER._1B - REGISTER._5B; continue;
case INSTR_CMPBR1R6: flag = REGISTER._1B - REGISTER._6B; continue;
case INSTR_CMPBR1R7: flag = REGISTER._1B - REGISTER._7B; continue;
case INSTR_CMPBR1R8: flag = REGISTER._1B - REGISTER._8B; continue;
case INSTR_CMPBR1R9: flag = REGISTER._1B - REGISTER._9B; continue;
case INSTR_CMPBR1R10: flag = REGISTER._1B - REGISTER._10B; continue;
case INSTR_CMPBR1R11: flag = REGISTER._1B - REGISTER._11B; continue;
case INSTR_CMPBR1R12: flag = REGISTER._1B - REGISTER._12B; continue;
case INSTR_CMPBR1RIP: flag = REGISTER._1B - REGISTER.IPB; continue;
case INSTR_CMPBR1RSP: flag = REGISTER._1B - REGISTER.SPB; continue;
case INSTR_CMPBR1RBP: flag = REGISTER._1B - REGISTER.BPB; continue;
case INSTR_CMPBR2I: flag = REGISTER._2B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR2RA: flag = REGISTER._2B - REGISTER.AB; continue;
case INSTR_CMPBR2RB: flag = REGISTER._2B - REGISTER.BB; continue;
case INSTR_CMPBR2RC: flag = REGISTER._2B - REGISTER.CB; continue;
case INSTR_CMPBR2RD: flag = REGISTER._2B - REGISTER.DB; continue;
case INSTR_CMPBR2R0: flag = REGISTER._2B - REGISTER._0B; continue;
case INSTR_CMPBR2R1: flag = REGISTER._2B - REGISTER._1B; continue;
case INSTR_CMPBR2R2: flag = REGISTER._2B - REGISTER._2B; continue;
case INSTR_CMPBR2R3: flag = REGISTER._2B - REGISTER._3B; continue;
case INSTR_CMPBR2R4: flag = REGISTER._2B - REGISTER._4B; continue;
case INSTR_CMPBR2R5: flag = REGISTER._2B - REGISTER._5B; continue;
case INSTR_CMPBR2R6: flag = REGISTER._2B - REGISTER._6B; continue;
case INSTR_CMPBR2R7: flag = REGISTER._2B - REGISTER._7B; continue;
case INSTR_CMPBR2R8: flag = REGISTER._2B - REGISTER._8B; continue;
case INSTR_CMPBR2R9: flag = REGISTER._2B - REGISTER._9B; continue;
case INSTR_CMPBR2R10: flag = REGISTER._2B - REGISTER._10B; continue;
case INSTR_CMPBR2R11: flag = REGISTER._2B - REGISTER._11B; continue;
case INSTR_CMPBR2R12: flag = REGISTER._2B - REGISTER._12B; continue;
case INSTR_CMPBR2RIP: flag = REGISTER._2B - REGISTER.IPB; continue;
case INSTR_CMPBR2RSP: flag = REGISTER._2B - REGISTER.SPB; continue;
case INSTR_CMPBR2RBP: flag = REGISTER._2B - REGISTER.BPB; continue;
case INSTR_CMPBR3I: flag = REGISTER._3B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR3RA: flag = REGISTER._3B - REGISTER.AB; continue;
case INSTR_CMPBR3RB: flag = REGISTER._3B - REGISTER.BB; continue;
case INSTR_CMPBR3RC: flag = REGISTER._3B - REGISTER.CB; continue;
case INSTR_CMPBR3RD: flag = REGISTER._3B - REGISTER.DB; continue;
case INSTR_CMPBR3R0: flag = REGISTER._3B - REGISTER._0B; continue;
case INSTR_CMPBR3R1: flag = REGISTER._3B - REGISTER._1B; continue;
case INSTR_CMPBR3R2: flag = REGISTER._3B - REGISTER._2B; continue;
case INSTR_CMPBR3R3: flag = REGISTER._3B - REGISTER._3B; continue;
case INSTR_CMPBR3R4: flag = REGISTER._3B - REGISTER._4B; continue;
case INSTR_CMPBR3R5: flag = REGISTER._3B - REGISTER._5B; continue;
case INSTR_CMPBR3R6: flag = REGISTER._3B - REGISTER._6B; continue;
case INSTR_CMPBR3R7: flag = REGISTER._3B - REGISTER._7B; continue;
case INSTR_CMPBR3R8: flag = REGISTER._3B - REGISTER._8B; continue;
case INSTR_CMPBR3R9: flag = REGISTER._3B - REGISTER._9B; continue;
case INSTR_CMPBR3R10: flag = REGISTER._3B - REGISTER._10B; continue;
case INSTR_CMPBR3R11: flag = REGISTER._3B - REGISTER._11B; continue;
case INSTR_CMPBR3R12: flag = REGISTER._3B - REGISTER._12B; continue;
case INSTR_CMPBR3RIP: flag = REGISTER._3B - REGISTER.IPB; continue;
case INSTR_CMPBR3RSP: flag = REGISTER._3B - REGISTER.SPB; continue;
case INSTR_CMPBR3RBP: flag = REGISTER._3B - REGISTER.BPB; continue;
case INSTR_CMPBR4I: flag = REGISTER._4B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR4RA: flag = REGISTER._4B - REGISTER.AB; continue;
case INSTR_CMPBR4RB: flag = REGISTER._4B - REGISTER.BB; continue;
case INSTR_CMPBR4RC: flag = REGISTER._4B - REGISTER.CB; continue;
case INSTR_CMPBR4RD: flag = REGISTER._4B - REGISTER.DB; continue;
case INSTR_CMPBR4R0: flag = REGISTER._4B - REGISTER._0B; continue;
case INSTR_CMPBR4R1: flag = REGISTER._4B - REGISTER._1B; continue;
case INSTR_CMPBR4R2: flag = REGISTER._4B - REGISTER._2B; continue;
case INSTR_CMPBR4R3: flag = REGISTER._4B - REGISTER._3B; continue;
case INSTR_CMPBR4R4: flag = REGISTER._4B - REGISTER._4B; continue;
case INSTR_CMPBR4R5: flag = REGISTER._4B - REGISTER._5B; continue;
case INSTR_CMPBR4R6: flag = REGISTER._4B - REGISTER._6B; continue;
case INSTR_CMPBR4R7: flag = REGISTER._4B - REGISTER._7B; continue;
case INSTR_CMPBR4R8: flag = REGISTER._4B - REGISTER._8B; continue;
case INSTR_CMPBR4R9: flag = REGISTER._4B - REGISTER._9B; continue;
case INSTR_CMPBR4R10: flag = REGISTER._4B - REGISTER._10B; continue;
case INSTR_CMPBR4R11: flag = REGISTER._4B - REGISTER._11B; continue;
case INSTR_CMPBR4R12: flag = REGISTER._4B - REGISTER._12B; continue;
case INSTR_CMPBR4RIP: flag = REGISTER._4B - REGISTER.IPB; continue;
case INSTR_CMPBR4RSP: flag = REGISTER._4B - REGISTER.SPB; continue;
case INSTR_CMPBR4RBP: flag = REGISTER._4B - REGISTER.BPB; continue;
case INSTR_CMPBR5I: flag = REGISTER._5B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR5RA: flag = REGISTER._5B - REGISTER.AB; continue;
case INSTR_CMPBR5RB: flag = REGISTER._5B - REGISTER.BB; continue;
case INSTR_CMPBR5RC: flag = REGISTER._5B - REGISTER.CB; continue;
case INSTR_CMPBR5RD: flag = REGISTER._5B - REGISTER.DB; continue;
case INSTR_CMPBR5R0: flag = REGISTER._5B - REGISTER._0B; continue;
case INSTR_CMPBR5R1: flag = REGISTER._5B - REGISTER._1B; continue;
case INSTR_CMPBR5R2: flag = REGISTER._5B - REGISTER._2B; continue;
case INSTR_CMPBR5R3: flag = REGISTER._5B - REGISTER._3B; continue;
case INSTR_CMPBR5R4: flag = REGISTER._5B - REGISTER._4B; continue;
case INSTR_CMPBR5R5: flag = REGISTER._5B - REGISTER._5B; continue;
case INSTR_CMPBR5R6: flag = REGISTER._5B - REGISTER._6B; continue;
case INSTR_CMPBR5R7: flag = REGISTER._5B - REGISTER._7B; continue;
case INSTR_CMPBR5R8: flag = REGISTER._5B - REGISTER._8B; continue;
case INSTR_CMPBR5R9: flag = REGISTER._5B - REGISTER._9B; continue;
case INSTR_CMPBR5R10: flag = REGISTER._5B - REGISTER._10B; continue;
case INSTR_CMPBR5R11: flag = REGISTER._5B - REGISTER._11B; continue;
case INSTR_CMPBR5R12: flag = REGISTER._5B - REGISTER._12B; continue;
case INSTR_CMPBR5RIP: flag = REGISTER._5B - REGISTER.IPB; continue;
case INSTR_CMPBR5RSP: flag = REGISTER._5B - REGISTER.SPB; continue;
case INSTR_CMPBR5RBP: flag = REGISTER._5B - REGISTER.BPB; continue;
case INSTR_CMPBR6I: flag = REGISTER._6B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR6RA: flag = REGISTER._6B - REGISTER.AB; continue;
case INSTR_CMPBR6RB: flag = REGISTER._6B - REGISTER.BB; continue;
case INSTR_CMPBR6RC: flag = REGISTER._6B - REGISTER.CB; continue;
case INSTR_CMPBR6RD: flag = REGISTER._6B - REGISTER.DB; continue;
case INSTR_CMPBR6R0: flag = REGISTER._6B - REGISTER._0B; continue;
case INSTR_CMPBR6R1: flag = REGISTER._6B - REGISTER._1B; continue;
case INSTR_CMPBR6R2: flag = REGISTER._6B - REGISTER._2B; continue;
case INSTR_CMPBR6R3: flag = REGISTER._6B - REGISTER._3B; continue;
case INSTR_CMPBR6R4: flag = REGISTER._6B - REGISTER._4B; continue;
case INSTR_CMPBR6R5: flag = REGISTER._6B - REGISTER._5B; continue;
case INSTR_CMPBR6R6: flag = REGISTER._6B - REGISTER._6B; continue;
case INSTR_CMPBR6R7: flag = REGISTER._6B - REGISTER._7B; continue;
case INSTR_CMPBR6R8: flag = REGISTER._6B - REGISTER._8B; continue;
case INSTR_CMPBR6R9: flag = REGISTER._6B - REGISTER._9B; continue;
case INSTR_CMPBR6R10: flag = REGISTER._6B - REGISTER._10B; continue;
case INSTR_CMPBR6R11: flag = REGISTER._6B - REGISTER._11B; continue;
case INSTR_CMPBR6R12: flag = REGISTER._6B - REGISTER._12B; continue;
case INSTR_CMPBR6RIP: flag = REGISTER._6B - REGISTER.IPB; continue;
case INSTR_CMPBR6RSP: flag = REGISTER._6B - REGISTER.SPB; continue;
case INSTR_CMPBR6RBP: flag = REGISTER._6B - REGISTER.BPB; continue;
case INSTR_CMPBR7I: flag = REGISTER._7B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR7RA: flag = REGISTER._7B - REGISTER.AB; continue;
case INSTR_CMPBR7RB: flag = REGISTER._7B - REGISTER.BB; continue;
case INSTR_CMPBR7RC: flag = REGISTER._7B - REGISTER.CB; continue;
case INSTR_CMPBR7RD: flag = REGISTER._7B - REGISTER.DB; continue;
case INSTR_CMPBR7R0: flag = REGISTER._7B - REGISTER._0B; continue;
case INSTR_CMPBR7R1: flag = REGISTER._7B - REGISTER._1B; continue;
case INSTR_CMPBR7R2: flag = REGISTER._7B - REGISTER._2B; continue;
case INSTR_CMPBR7R3: flag = REGISTER._7B - REGISTER._3B; continue;
case INSTR_CMPBR7R4: flag = REGISTER._7B - REGISTER._4B; continue;
case INSTR_CMPBR7R5: flag = REGISTER._7B - REGISTER._5B; continue;
case INSTR_CMPBR7R6: flag = REGISTER._7B - REGISTER._6B; continue;
case INSTR_CMPBR7R7: flag = REGISTER._7B - REGISTER._7B; continue;
case INSTR_CMPBR7R8: flag = REGISTER._7B - REGISTER._8B; continue;
case INSTR_CMPBR7R9: flag = REGISTER._7B - REGISTER._9B; continue;
case INSTR_CMPBR7R10: flag = REGISTER._7B - REGISTER._10B; continue;
case INSTR_CMPBR7R11: flag = REGISTER._7B - REGISTER._11B; continue;
case INSTR_CMPBR7R12: flag = REGISTER._7B - REGISTER._12B; continue;
case INSTR_CMPBR7RIP: flag = REGISTER._7B - REGISTER.IPB; continue;
case INSTR_CMPBR7RSP: flag = REGISTER._7B - REGISTER.SPB; continue;
case INSTR_CMPBR7RBP: flag = REGISTER._7B - REGISTER.BPB; continue;
case INSTR_CMPBR8I: flag = REGISTER._8B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR8RA: flag = REGISTER._8B - REGISTER.AB; continue;
case INSTR_CMPBR8RB: flag = REGISTER._8B - REGISTER.BB; continue;
case INSTR_CMPBR8RC: flag = REGISTER._8B - REGISTER.CB; continue;
case INSTR_CMPBR8RD: flag = REGISTER._8B - REGISTER.DB; continue;
case INSTR_CMPBR8R0: flag = REGISTER._8B - REGISTER._0B; continue;
case INSTR_CMPBR8R1: flag = REGISTER._8B - REGISTER._1B; continue;
case INSTR_CMPBR8R2: flag = REGISTER._8B - REGISTER._2B; continue;
case INSTR_CMPBR8R3: flag = REGISTER._8B - REGISTER._3B; continue;
case INSTR_CMPBR8R4: flag = REGISTER._8B - REGISTER._4B; continue;
case INSTR_CMPBR8R5: flag = REGISTER._8B - REGISTER._5B; continue;
case INSTR_CMPBR8R6: flag = REGISTER._8B - REGISTER._6B; continue;
case INSTR_CMPBR8R7: flag = REGISTER._8B - REGISTER._7B; continue;
case INSTR_CMPBR8R8: flag = REGISTER._8B - REGISTER._8B; continue;
case INSTR_CMPBR8R9: flag = REGISTER._8B - REGISTER._9B; continue;
case INSTR_CMPBR8R10: flag = REGISTER._8B - REGISTER._10B; continue;
case INSTR_CMPBR8R11: flag = REGISTER._8B - REGISTER._11B; continue;
case INSTR_CMPBR8R12: flag = REGISTER._8B - REGISTER._12B; continue;
case INSTR_CMPBR8RIP: flag = REGISTER._8B - REGISTER.IPB; continue;
case INSTR_CMPBR8RSP: flag = REGISTER._8B - REGISTER.SPB; continue;
case INSTR_CMPBR8RBP: flag = REGISTER._8B - REGISTER.BPB; continue;
case INSTR_CMPBR9I: flag = REGISTER._9B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR9RA: flag = REGISTER._9B - REGISTER.AB; continue;
case INSTR_CMPBR9RB: flag = REGISTER._9B - REGISTER.BB; continue;
case INSTR_CMPBR9RC: flag = REGISTER._9B - REGISTER.CB; continue;
case INSTR_CMPBR9RD: flag = REGISTER._9B - REGISTER.DB; continue;
case INSTR_CMPBR9R0: flag = REGISTER._9B - REGISTER._0B; continue;
case INSTR_CMPBR9R1: flag = REGISTER._9B - REGISTER._1B; continue;
case INSTR_CMPBR9R2: flag = REGISTER._9B - REGISTER._2B; continue;
case INSTR_CMPBR9R3: flag = REGISTER._9B - REGISTER._3B; continue;
case INSTR_CMPBR9R4: flag = REGISTER._9B - REGISTER._4B; continue;
case INSTR_CMPBR9R5: flag = REGISTER._9B - REGISTER._5B; continue;
case INSTR_CMPBR9R6: flag = REGISTER._9B - REGISTER._6B; continue;
case INSTR_CMPBR9R7: flag = REGISTER._9B - REGISTER._7B; continue;
case INSTR_CMPBR9R8: flag = REGISTER._9B - REGISTER._8B; continue;
case INSTR_CMPBR9R9: flag = REGISTER._9B - REGISTER._9B; continue;
case INSTR_CMPBR9R10: flag = REGISTER._9B - REGISTER._10B; continue;
case INSTR_CMPBR9R11: flag = REGISTER._9B - REGISTER._11B; continue;
case INSTR_CMPBR9R12: flag = REGISTER._9B - REGISTER._12B; continue;
case INSTR_CMPBR9RIP: flag = REGISTER._9B - REGISTER.IPB; continue;
case INSTR_CMPBR9RSP: flag = REGISTER._9B - REGISTER.SPB; continue;
case INSTR_CMPBR9RBP: flag = REGISTER._9B - REGISTER.BPB; continue;
case INSTR_CMPBR10I: flag = REGISTER._10B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR10RA: flag = REGISTER._10B - REGISTER.AB; continue;
case INSTR_CMPBR10RB: flag = REGISTER._10B - REGISTER.BB; continue;
case INSTR_CMPBR10RC: flag = REGISTER._10B - REGISTER.CB; continue;
case INSTR_CMPBR10RD: flag = REGISTER._10B - REGISTER.DB; continue;
case INSTR_CMPBR10R0: flag = REGISTER._10B - REGISTER._0B; continue;
case INSTR_CMPBR10R1: flag = REGISTER._10B - REGISTER._1B; continue;
case INSTR_CMPBR10R2: flag = REGISTER._10B - REGISTER._2B; continue;
case INSTR_CMPBR10R3: flag = REGISTER._10B - REGISTER._3B; continue;
case INSTR_CMPBR10R4: flag = REGISTER._10B - REGISTER._4B; continue;
case INSTR_CMPBR10R5: flag = REGISTER._10B - REGISTER._5B; continue;
case INSTR_CMPBR10R6: flag = REGISTER._10B - REGISTER._6B; continue;
case INSTR_CMPBR10R7: flag = REGISTER._10B - REGISTER._7B; continue;
case INSTR_CMPBR10R8: flag = REGISTER._10B - REGISTER._8B; continue;
case INSTR_CMPBR10R9: flag = REGISTER._10B - REGISTER._9B; continue;
case INSTR_CMPBR10R10: flag = REGISTER._10B - REGISTER._10B; continue;
case INSTR_CMPBR10R11: flag = REGISTER._10B - REGISTER._11B; continue;
case INSTR_CMPBR10R12: flag = REGISTER._10B - REGISTER._12B; continue;
case INSTR_CMPBR10RIP: flag = REGISTER._10B - REGISTER.IPB; continue;
case INSTR_CMPBR10RSP: flag = REGISTER._10B - REGISTER.SPB; continue;
case INSTR_CMPBR10RBP: flag = REGISTER._10B - REGISTER.BPB; continue;
case INSTR_CMPBR11I: flag = REGISTER._11B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR11RA: flag = REGISTER._11B - REGISTER.AB; continue;
case INSTR_CMPBR11RB: flag = REGISTER._11B - REGISTER.BB; continue;
case INSTR_CMPBR11RC: flag = REGISTER._11B - REGISTER.CB; continue;
case INSTR_CMPBR11RD: flag = REGISTER._11B - REGISTER.DB; continue;
case INSTR_CMPBR11R0: flag = REGISTER._11B - REGISTER._0B; continue;
case INSTR_CMPBR11R1: flag = REGISTER._11B - REGISTER._1B; continue;
case INSTR_CMPBR11R2: flag = REGISTER._11B - REGISTER._2B; continue;
case INSTR_CMPBR11R3: flag = REGISTER._11B - REGISTER._3B; continue;
case INSTR_CMPBR11R4: flag = REGISTER._11B - REGISTER._4B; continue;
case INSTR_CMPBR11R5: flag = REGISTER._11B - REGISTER._5B; continue;
case INSTR_CMPBR11R6: flag = REGISTER._11B - REGISTER._6B; continue;
case INSTR_CMPBR11R7: flag = REGISTER._11B - REGISTER._7B; continue;
case INSTR_CMPBR11R8: flag = REGISTER._11B - REGISTER._8B; continue;
case INSTR_CMPBR11R9: flag = REGISTER._11B - REGISTER._9B; continue;
case INSTR_CMPBR11R10: flag = REGISTER._11B - REGISTER._10B; continue;
case INSTR_CMPBR11R11: flag = REGISTER._11B - REGISTER._11B; continue;
case INSTR_CMPBR11R12: flag = REGISTER._11B - REGISTER._12B; continue;
case INSTR_CMPBR11RIP: flag = REGISTER._11B - REGISTER.IPB; continue;
case INSTR_CMPBR11RSP: flag = REGISTER._11B - REGISTER.SPB; continue;
case INSTR_CMPBR11RBP: flag = REGISTER._11B - REGISTER.BPB; continue;
case INSTR_CMPBR12I: flag = REGISTER._12B - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBR12RA: flag = REGISTER._12B - REGISTER.AB; continue;
case INSTR_CMPBR12RB: flag = REGISTER._12B - REGISTER.BB; continue;
case INSTR_CMPBR12RC: flag = REGISTER._12B - REGISTER.CB; continue;
case INSTR_CMPBR12RD: flag = REGISTER._12B - REGISTER.DB; continue;
case INSTR_CMPBR12R0: flag = REGISTER._12B - REGISTER._0B; continue;
case INSTR_CMPBR12R1: flag = REGISTER._12B - REGISTER._1B; continue;
case INSTR_CMPBR12R2: flag = REGISTER._12B - REGISTER._2B; continue;
case INSTR_CMPBR12R3: flag = REGISTER._12B - REGISTER._3B; continue;
case INSTR_CMPBR12R4: flag = REGISTER._12B - REGISTER._4B; continue;
case INSTR_CMPBR12R5: flag = REGISTER._12B - REGISTER._5B; continue;
case INSTR_CMPBR12R6: flag = REGISTER._12B - REGISTER._6B; continue;
case INSTR_CMPBR12R7: flag = REGISTER._12B - REGISTER._7B; continue;
case INSTR_CMPBR12R8: flag = REGISTER._12B - REGISTER._8B; continue;
case INSTR_CMPBR12R9: flag = REGISTER._12B - REGISTER._9B; continue;
case INSTR_CMPBR12R10: flag = REGISTER._12B - REGISTER._10B; continue;
case INSTR_CMPBR12R11: flag = REGISTER._12B - REGISTER._11B; continue;
case INSTR_CMPBR12R12: flag = REGISTER._12B - REGISTER._12B; continue;
case INSTR_CMPBR12RIP: flag = REGISTER._12B - REGISTER.IPB; continue;
case INSTR_CMPBR12RSP: flag = REGISTER._12B - REGISTER.SPB; continue;
case INSTR_CMPBR12RBP: flag = REGISTER._12B - REGISTER.BPB; continue;
case INSTR_CMPBRIPI: flag = REGISTER.IPB - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBRIPRA: flag = REGISTER.IPB - REGISTER.AB; continue;
case INSTR_CMPBRIPRB: flag = REGISTER.IPB - REGISTER.BB; continue;
case INSTR_CMPBRIPRC: flag = REGISTER.IPB - REGISTER.CB; continue;
case INSTR_CMPBRIPRD: flag = REGISTER.IPB - REGISTER.DB; continue;
case INSTR_CMPBRIPR0: flag = REGISTER.IPB - REGISTER._0B; continue;
case INSTR_CMPBRIPR1: flag = REGISTER.IPB - REGISTER._1B; continue;
case INSTR_CMPBRIPR2: flag = REGISTER.IPB - REGISTER._2B; continue;
case INSTR_CMPBRIPR3: flag = REGISTER.IPB - REGISTER._3B; continue;
case INSTR_CMPBRIPR4: flag = REGISTER.IPB - REGISTER._4B; continue;
case INSTR_CMPBRIPR5: flag = REGISTER.IPB - REGISTER._5B; continue;
case INSTR_CMPBRIPR6: flag = REGISTER.IPB - REGISTER._6B; continue;
case INSTR_CMPBRIPR7: flag = REGISTER.IPB - REGISTER._7B; continue;
case INSTR_CMPBRIPR8: flag = REGISTER.IPB - REGISTER._8B; continue;
case INSTR_CMPBRIPR9: flag = REGISTER.IPB - REGISTER._9B; continue;
case INSTR_CMPBRIPR10: flag = REGISTER.IPB - REGISTER._10B; continue;
case INSTR_CMPBRIPR11: flag = REGISTER.IPB - REGISTER._11B; continue;
case INSTR_CMPBRIPR12: flag = REGISTER.IPB - REGISTER._12B; continue;
case INSTR_CMPBRIPRIP: flag = REGISTER.IPB - REGISTER.IPB; continue;
case INSTR_CMPBRIPRSP: flag = REGISTER.IPB - REGISTER.SPB; continue;
case INSTR_CMPBRIPRBP: flag = REGISTER.IPB - REGISTER.BPB; continue;
case INSTR_CMPBRSPI: flag = REGISTER.SPB - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBRSPRA: flag = REGISTER.SPB - REGISTER.AB; continue;
case INSTR_CMPBRSPRB: flag = REGISTER.SPB - REGISTER.BB; continue;
case INSTR_CMPBRSPRC: flag = REGISTER.SPB - REGISTER.CB; continue;
case INSTR_CMPBRSPRD: flag = REGISTER.SPB - REGISTER.DB; continue;
case INSTR_CMPBRSPR0: flag = REGISTER.SPB - REGISTER._0B; continue;
case INSTR_CMPBRSPR1: flag = REGISTER.SPB - REGISTER._1B; continue;
case INSTR_CMPBRSPR2: flag = REGISTER.SPB - REGISTER._2B; continue;
case INSTR_CMPBRSPR3: flag = REGISTER.SPB - REGISTER._3B; continue;
case INSTR_CMPBRSPR4: flag = REGISTER.SPB - REGISTER._4B; continue;
case INSTR_CMPBRSPR5: flag = REGISTER.SPB - REGISTER._5B; continue;
case INSTR_CMPBRSPR6: flag = REGISTER.SPB - REGISTER._6B; continue;
case INSTR_CMPBRSPR7: flag = REGISTER.SPB - REGISTER._7B; continue;
case INSTR_CMPBRSPR8: flag = REGISTER.SPB - REGISTER._8B; continue;
case INSTR_CMPBRSPR9: flag = REGISTER.SPB - REGISTER._9B; continue;
case INSTR_CMPBRSPR10: flag = REGISTER.SPB - REGISTER._10B; continue;
case INSTR_CMPBRSPR11: flag = REGISTER.SPB - REGISTER._11B; continue;
case INSTR_CMPBRSPR12: flag = REGISTER.SPB - REGISTER._12B; continue;
case INSTR_CMPBRSPRIP: flag = REGISTER.SPB - REGISTER.IPB; continue;
case INSTR_CMPBRSPRSP: flag = REGISTER.SPB - REGISTER.SPB; continue;
case INSTR_CMPBRSPRBP: flag = REGISTER.SPB - REGISTER.BPB; continue;
case INSTR_CMPBRBPI: flag = REGISTER.BPB - *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_CMPBRBPRA: flag = REGISTER.BPB - REGISTER.AB; continue;
case INSTR_CMPBRBPRB: flag = REGISTER.BPB - REGISTER.BB; continue;
case INSTR_CMPBRBPRC: flag = REGISTER.BPB - REGISTER.CB; continue;
case INSTR_CMPBRBPRD: flag = REGISTER.BPB - REGISTER.DB; continue;
case INSTR_CMPBRBPR0: flag = REGISTER.BPB - REGISTER._0B; continue;
case INSTR_CMPBRBPR1: flag = REGISTER.BPB - REGISTER._1B; continue;
case INSTR_CMPBRBPR2: flag = REGISTER.BPB - REGISTER._2B; continue;
case INSTR_CMPBRBPR3: flag = REGISTER.BPB - REGISTER._3B; continue;
case INSTR_CMPBRBPR4: flag = REGISTER.BPB - REGISTER._4B; continue;
case INSTR_CMPBRBPR5: flag = REGISTER.BPB - REGISTER._5B; continue;
case INSTR_CMPBRBPR6: flag = REGISTER.BPB - REGISTER._6B; continue;
case INSTR_CMPBRBPR7: flag = REGISTER.BPB - REGISTER._7B; continue;
case INSTR_CMPBRBPR8: flag = REGISTER.BPB - REGISTER._8B; continue;
case INSTR_CMPBRBPR9: flag = REGISTER.BPB - REGISTER._9B; continue;
case INSTR_CMPBRBPR10: flag = REGISTER.BPB - REGISTER._10B; continue;
case INSTR_CMPBRBPR11: flag = REGISTER.BPB - REGISTER._11B; continue;
case INSTR_CMPBRBPR12: flag = REGISTER.BPB - REGISTER._12B; continue;
case INSTR_CMPBRBPRIP: flag = REGISTER.BPB - REGISTER.IPB; continue;
case INSTR_CMPBRBPRSP: flag = REGISTER.BPB - REGISTER.SPB; continue;
case INSTR_CMPBRBPRBP: flag = REGISTER.BPB - REGISTER.BPB; continue;
// math expressions
case INSTR_ADDQRAI: REGISTER.AQ += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQRARA: REGISTER.AQ += REGISTER.AQ; continue;
case INSTR_ADDQRARB: REGISTER.AQ += REGISTER.BQ; continue;
case INSTR_ADDQRARC: REGISTER.AQ += REGISTER.CQ; continue;
case INSTR_ADDQRARD: REGISTER.AQ += REGISTER.DQ; continue;
case INSTR_ADDQRAR0: REGISTER.AQ += REGISTER._0Q; continue;
case INSTR_ADDQRAR1: REGISTER.AQ += REGISTER._1Q; continue;
case INSTR_ADDQRAR2: REGISTER.AQ += REGISTER._2Q; continue;
case INSTR_ADDQRAR3: REGISTER.AQ += REGISTER._3Q; continue;
case INSTR_ADDQRAR4: REGISTER.AQ += REGISTER._4Q; continue;
case INSTR_ADDQRAR5: REGISTER.AQ += REGISTER._5Q; continue;
case INSTR_ADDQRAR6: REGISTER.AQ += REGISTER._6Q; continue;
case INSTR_ADDQRAR7: REGISTER.AQ += REGISTER._7Q; continue;
case INSTR_ADDQRAR8: REGISTER.AQ += REGISTER._8Q; continue;
case INSTR_ADDQRAR9: REGISTER.AQ += REGISTER._9Q; continue;
case INSTR_ADDQRAR10: REGISTER.AQ += REGISTER._10Q; continue;
case INSTR_ADDQRAR11: REGISTER.AQ += REGISTER._11Q; continue;
case INSTR_ADDQRAR12: REGISTER.AQ += REGISTER._12Q; continue;
case INSTR_ADDQRARIP: REGISTER.AQ += REGISTER.IPQ; continue;
case INSTR_ADDQRARSP: REGISTER.AQ += REGISTER.SPQ; continue;
case INSTR_ADDQRARBP: REGISTER.AQ += REGISTER.BPQ; continue;
case INSTR_ADDQRBI: REGISTER.BQ += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQRBRA: REGISTER.BQ += REGISTER.AQ; continue;
case INSTR_ADDQRBRB: REGISTER.BQ += REGISTER.BQ; continue;
case INSTR_ADDQRBRC: REGISTER.BQ += REGISTER.CQ; continue;
case INSTR_ADDQRBRD: REGISTER.BQ += REGISTER.DQ; continue;
case INSTR_ADDQRBR0: REGISTER.BQ += REGISTER._0Q; continue;
case INSTR_ADDQRBR1: REGISTER.BQ += REGISTER._1Q; continue;
case INSTR_ADDQRBR2: REGISTER.BQ += REGISTER._2Q; continue;
case INSTR_ADDQRBR3: REGISTER.BQ += REGISTER._3Q; continue;
case INSTR_ADDQRBR4: REGISTER.BQ += REGISTER._4Q; continue;
case INSTR_ADDQRBR5: REGISTER.BQ += REGISTER._5Q; continue;
case INSTR_ADDQRBR6: REGISTER.BQ += REGISTER._6Q; continue;
case INSTR_ADDQRBR7: REGISTER.BQ += REGISTER._7Q; continue;
case INSTR_ADDQRBR8: REGISTER.BQ += REGISTER._8Q; continue;
case INSTR_ADDQRBR9: REGISTER.BQ += REGISTER._9Q; continue;
case INSTR_ADDQRBR10: REGISTER.BQ += REGISTER._10Q; continue;
case INSTR_ADDQRBR11: REGISTER.BQ += REGISTER._11Q; continue;
case INSTR_ADDQRBR12: REGISTER.BQ += REGISTER._12Q; continue;
case INSTR_ADDQRBRIP: REGISTER.BQ += REGISTER.IPQ; continue;
case INSTR_ADDQRBRSP: REGISTER.BQ += REGISTER.SPQ; continue;
case INSTR_ADDQRBRBP: REGISTER.BQ += REGISTER.BPQ; continue;
case INSTR_ADDQRCI: REGISTER.CQ += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQRCRA: REGISTER.CQ += REGISTER.AQ; continue;
case INSTR_ADDQRCRB: REGISTER.CQ += REGISTER.BQ; continue;
case INSTR_ADDQRCRC: REGISTER.CQ += REGISTER.CQ; continue;
case INSTR_ADDQRCRD: REGISTER.CQ += REGISTER.DQ; continue;
case INSTR_ADDQRCR0: REGISTER.CQ += REGISTER._0Q; continue;
case INSTR_ADDQRCR1: REGISTER.CQ += REGISTER._1Q; continue;
case INSTR_ADDQRCR2: REGISTER.CQ += REGISTER._2Q; continue;
case INSTR_ADDQRCR3: REGISTER.CQ += REGISTER._3Q; continue;
case INSTR_ADDQRCR4: REGISTER.CQ += REGISTER._4Q; continue;
case INSTR_ADDQRCR5: REGISTER.CQ += REGISTER._5Q; continue;
case INSTR_ADDQRCR6: REGISTER.CQ += REGISTER._6Q; continue;
case INSTR_ADDQRCR7: REGISTER.CQ += REGISTER._7Q; continue;
case INSTR_ADDQRCR8: REGISTER.CQ += REGISTER._8Q; continue;
case INSTR_ADDQRCR9: REGISTER.CQ += REGISTER._9Q; continue;
case INSTR_ADDQRCR10: REGISTER.CQ += REGISTER._10Q; continue;
case INSTR_ADDQRCR11: REGISTER.CQ += REGISTER._11Q; continue;
case INSTR_ADDQRCR12: REGISTER.CQ += REGISTER._12Q; continue;
case INSTR_ADDQRCRIP: REGISTER.CQ += REGISTER.IPQ; continue;
case INSTR_ADDQRCRSP: REGISTER.CQ += REGISTER.SPQ; continue;
case INSTR_ADDQRCRBP: REGISTER.CQ += REGISTER.BPQ; continue;
case INSTR_ADDQRDI: REGISTER.DQ += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQRDRA: REGISTER.DQ += REGISTER.AQ; continue;
case INSTR_ADDQRDRB: REGISTER.DQ += REGISTER.BQ; continue;
case INSTR_ADDQRDRC: REGISTER.DQ += REGISTER.CQ; continue;
case INSTR_ADDQRDRD: REGISTER.DQ += REGISTER.DQ; continue;
case INSTR_ADDQRDR0: REGISTER.DQ += REGISTER._0Q; continue;
case INSTR_ADDQRDR1: REGISTER.DQ += REGISTER._1Q; continue;
case INSTR_ADDQRDR2: REGISTER.DQ += REGISTER._2Q; continue;
case INSTR_ADDQRDR3: REGISTER.DQ += REGISTER._3Q; continue;
case INSTR_ADDQRDR4: REGISTER.DQ += REGISTER._4Q; continue;
case INSTR_ADDQRDR5: REGISTER.DQ += REGISTER._5Q; continue;
case INSTR_ADDQRDR6: REGISTER.DQ += REGISTER._6Q; continue;
case INSTR_ADDQRDR7: REGISTER.DQ += REGISTER._7Q; continue;
case INSTR_ADDQRDR8: REGISTER.DQ += REGISTER._8Q; continue;
case INSTR_ADDQRDR9: REGISTER.DQ += REGISTER._9Q; continue;
case INSTR_ADDQRDR10: REGISTER.DQ += REGISTER._10Q; continue;
case INSTR_ADDQRDR11: REGISTER.DQ += REGISTER._11Q; continue;
case INSTR_ADDQRDR12: REGISTER.DQ += REGISTER._12Q; continue;
case INSTR_ADDQRDRIP: REGISTER.DQ += REGISTER.IPQ; continue;
case INSTR_ADDQRDRSP: REGISTER.DQ += REGISTER.SPQ; continue;
case INSTR_ADDQRDRBP: REGISTER.DQ += REGISTER.BPQ; continue;
case INSTR_ADDQR0I: REGISTER._0Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR0RA: REGISTER._0Q += REGISTER.AQ; continue;
case INSTR_ADDQR0RB: REGISTER._0Q += REGISTER.BQ; continue;
case INSTR_ADDQR0RC: REGISTER._0Q += REGISTER.CQ; continue;
case INSTR_ADDQR0RD: REGISTER._0Q += REGISTER.DQ; continue;
case INSTR_ADDQR0R0: REGISTER._0Q += REGISTER._0Q; continue;
case INSTR_ADDQR0R1: REGISTER._0Q += REGISTER._1Q; continue;
case INSTR_ADDQR0R2: REGISTER._0Q += REGISTER._2Q; continue;
case INSTR_ADDQR0R3: REGISTER._0Q += REGISTER._3Q; continue;
case INSTR_ADDQR0R4: REGISTER._0Q += REGISTER._4Q; continue;
case INSTR_ADDQR0R5: REGISTER._0Q += REGISTER._5Q; continue;
case INSTR_ADDQR0R6: REGISTER._0Q += REGISTER._6Q; continue;
case INSTR_ADDQR0R7: REGISTER._0Q += REGISTER._7Q; continue;
case INSTR_ADDQR0R8: REGISTER._0Q += REGISTER._8Q; continue;
case INSTR_ADDQR0R9: REGISTER._0Q += REGISTER._9Q; continue;
case INSTR_ADDQR0R10: REGISTER._0Q += REGISTER._10Q; continue;
case INSTR_ADDQR0R11: REGISTER._0Q += REGISTER._11Q; continue;
case INSTR_ADDQR0R12: REGISTER._0Q += REGISTER._12Q; continue;
case INSTR_ADDQR0RIP: REGISTER._0Q += REGISTER.IPQ; continue;
case INSTR_ADDQR0RSP: REGISTER._0Q += REGISTER.SPQ; continue;
case INSTR_ADDQR0RBP: REGISTER._0Q += REGISTER.BPQ; continue;
case INSTR_ADDQR1I: REGISTER._1Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR1RA: REGISTER._1Q += REGISTER.AQ; continue;
case INSTR_ADDQR1RB: REGISTER._1Q += REGISTER.BQ; continue;
case INSTR_ADDQR1RC: REGISTER._1Q += REGISTER.CQ; continue;
case INSTR_ADDQR1RD: REGISTER._1Q += REGISTER.DQ; continue;
case INSTR_ADDQR1R0: REGISTER._1Q += REGISTER._0Q; continue;
case INSTR_ADDQR1R1: REGISTER._1Q += REGISTER._1Q; continue;
case INSTR_ADDQR1R2: REGISTER._1Q += REGISTER._2Q; continue;
case INSTR_ADDQR1R3: REGISTER._1Q += REGISTER._3Q; continue;
case INSTR_ADDQR1R4: REGISTER._1Q += REGISTER._4Q; continue;
case INSTR_ADDQR1R5: REGISTER._1Q += REGISTER._5Q; continue;
case INSTR_ADDQR1R6: REGISTER._1Q += REGISTER._6Q; continue;
case INSTR_ADDQR1R7: REGISTER._1Q += REGISTER._7Q; continue;
case INSTR_ADDQR1R8: REGISTER._1Q += REGISTER._8Q; continue;
case INSTR_ADDQR1R9: REGISTER._1Q += REGISTER._9Q; continue;
case INSTR_ADDQR1R10: REGISTER._1Q += REGISTER._10Q; continue;
case INSTR_ADDQR1R11: REGISTER._1Q += REGISTER._11Q; continue;
case INSTR_ADDQR1R12: REGISTER._1Q += REGISTER._12Q; continue;
case INSTR_ADDQR1RIP: REGISTER._1Q += REGISTER.IPQ; continue;
case INSTR_ADDQR1RSP: REGISTER._1Q += REGISTER.SPQ; continue;
case INSTR_ADDQR1RBP: REGISTER._1Q += REGISTER.BPQ; continue;
case INSTR_ADDQR2I: REGISTER._2Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR2RA: REGISTER._2Q += REGISTER.AQ; continue;
case INSTR_ADDQR2RB: REGISTER._2Q += REGISTER.BQ; continue;
case INSTR_ADDQR2RC: REGISTER._2Q += REGISTER.CQ; continue;
case INSTR_ADDQR2RD: REGISTER._2Q += REGISTER.DQ; continue;
case INSTR_ADDQR2R0: REGISTER._2Q += REGISTER._0Q; continue;
case INSTR_ADDQR2R1: REGISTER._2Q += REGISTER._1Q; continue;
case INSTR_ADDQR2R2: REGISTER._2Q += REGISTER._2Q; continue;
case INSTR_ADDQR2R3: REGISTER._2Q += REGISTER._3Q; continue;
case INSTR_ADDQR2R4: REGISTER._2Q += REGISTER._4Q; continue;
case INSTR_ADDQR2R5: REGISTER._2Q += REGISTER._5Q; continue;
case INSTR_ADDQR2R6: REGISTER._2Q += REGISTER._6Q; continue;
case INSTR_ADDQR2R7: REGISTER._2Q += REGISTER._7Q; continue;
case INSTR_ADDQR2R8: REGISTER._2Q += REGISTER._8Q; continue;
case INSTR_ADDQR2R9: REGISTER._2Q += REGISTER._9Q; continue;
case INSTR_ADDQR2R10: REGISTER._2Q += REGISTER._10Q; continue;
case INSTR_ADDQR2R11: REGISTER._2Q += REGISTER._11Q; continue;
case INSTR_ADDQR2R12: REGISTER._2Q += REGISTER._12Q; continue;
case INSTR_ADDQR2RIP: REGISTER._2Q += REGISTER.IPQ; continue;
case INSTR_ADDQR2RSP: REGISTER._2Q += REGISTER.SPQ; continue;
case INSTR_ADDQR2RBP: REGISTER._2Q += REGISTER.BPQ; continue;
case INSTR_ADDQR3I: REGISTER._3Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR3RA: REGISTER._3Q += REGISTER.AQ; continue;
case INSTR_ADDQR3RB: REGISTER._3Q += REGISTER.BQ; continue;
case INSTR_ADDQR3RC: REGISTER._3Q += REGISTER.CQ; continue;
case INSTR_ADDQR3RD: REGISTER._3Q += REGISTER.DQ; continue;
case INSTR_ADDQR3R0: REGISTER._3Q += REGISTER._0Q; continue;
case INSTR_ADDQR3R1: REGISTER._3Q += REGISTER._1Q; continue;
case INSTR_ADDQR3R2: REGISTER._3Q += REGISTER._2Q; continue;
case INSTR_ADDQR3R3: REGISTER._3Q += REGISTER._3Q; continue;
case INSTR_ADDQR3R4: REGISTER._3Q += REGISTER._4Q; continue;
case INSTR_ADDQR3R5: REGISTER._3Q += REGISTER._5Q; continue;
case INSTR_ADDQR3R6: REGISTER._3Q += REGISTER._6Q; continue;
case INSTR_ADDQR3R7: REGISTER._3Q += REGISTER._7Q; continue;
case INSTR_ADDQR3R8: REGISTER._3Q += REGISTER._8Q; continue;
case INSTR_ADDQR3R9: REGISTER._3Q += REGISTER._9Q; continue;
case INSTR_ADDQR3R10: REGISTER._3Q += REGISTER._10Q; continue;
case INSTR_ADDQR3R11: REGISTER._3Q += REGISTER._11Q; continue;
case INSTR_ADDQR3R12: REGISTER._3Q += REGISTER._12Q; continue;
case INSTR_ADDQR3RIP: REGISTER._3Q += REGISTER.IPQ; continue;
case INSTR_ADDQR3RSP: REGISTER._3Q += REGISTER.SPQ; continue;
case INSTR_ADDQR3RBP: REGISTER._3Q += REGISTER.BPQ; continue;
case INSTR_ADDQR4I: REGISTER._4Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR4RA: REGISTER._4Q += REGISTER.AQ; continue;
case INSTR_ADDQR4RB: REGISTER._4Q += REGISTER.BQ; continue;
case INSTR_ADDQR4RC: REGISTER._4Q += REGISTER.CQ; continue;
case INSTR_ADDQR4RD: REGISTER._4Q += REGISTER.DQ; continue;
case INSTR_ADDQR4R0: REGISTER._4Q += REGISTER._0Q; continue;
case INSTR_ADDQR4R1: REGISTER._4Q += REGISTER._1Q; continue;
case INSTR_ADDQR4R2: REGISTER._4Q += REGISTER._2Q; continue;
case INSTR_ADDQR4R3: REGISTER._4Q += REGISTER._3Q; continue;
case INSTR_ADDQR4R4: REGISTER._4Q += REGISTER._4Q; continue;
case INSTR_ADDQR4R5: REGISTER._4Q += REGISTER._5Q; continue;
case INSTR_ADDQR4R6: REGISTER._4Q += REGISTER._6Q; continue;
case INSTR_ADDQR4R7: REGISTER._4Q += REGISTER._7Q; continue;
case INSTR_ADDQR4R8: REGISTER._4Q += REGISTER._8Q; continue;
case INSTR_ADDQR4R9: REGISTER._4Q += REGISTER._9Q; continue;
case INSTR_ADDQR4R10: REGISTER._4Q += REGISTER._10Q; continue;
case INSTR_ADDQR4R11: REGISTER._4Q += REGISTER._11Q; continue;
case INSTR_ADDQR4R12: REGISTER._4Q += REGISTER._12Q; continue;
case INSTR_ADDQR4RIP: REGISTER._4Q += REGISTER.IPQ; continue;
case INSTR_ADDQR4RSP: REGISTER._4Q += REGISTER.SPQ; continue;
case INSTR_ADDQR4RBP: REGISTER._4Q += REGISTER.BPQ; continue;
case INSTR_ADDQR5I: REGISTER._5Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR5RA: REGISTER._5Q += REGISTER.AQ; continue;
case INSTR_ADDQR5RB: REGISTER._5Q += REGISTER.BQ; continue;
case INSTR_ADDQR5RC: REGISTER._5Q += REGISTER.CQ; continue;
case INSTR_ADDQR5RD: REGISTER._5Q += REGISTER.DQ; continue;
case INSTR_ADDQR5R0: REGISTER._5Q += REGISTER._0Q; continue;
case INSTR_ADDQR5R1: REGISTER._5Q += REGISTER._1Q; continue;
case INSTR_ADDQR5R2: REGISTER._5Q += REGISTER._2Q; continue;
case INSTR_ADDQR5R3: REGISTER._5Q += REGISTER._3Q; continue;
case INSTR_ADDQR5R4: REGISTER._5Q += REGISTER._4Q; continue;
case INSTR_ADDQR5R5: REGISTER._5Q += REGISTER._5Q; continue;
case INSTR_ADDQR5R6: REGISTER._5Q += REGISTER._6Q; continue;
case INSTR_ADDQR5R7: REGISTER._5Q += REGISTER._7Q; continue;
case INSTR_ADDQR5R8: REGISTER._5Q += REGISTER._8Q; continue;
case INSTR_ADDQR5R9: REGISTER._5Q += REGISTER._9Q; continue;
case INSTR_ADDQR5R10: REGISTER._5Q += REGISTER._10Q; continue;
case INSTR_ADDQR5R11: REGISTER._5Q += REGISTER._11Q; continue;
case INSTR_ADDQR5R12: REGISTER._5Q += REGISTER._12Q; continue;
case INSTR_ADDQR5RIP: REGISTER._5Q += REGISTER.IPQ; continue;
case INSTR_ADDQR5RSP: REGISTER._5Q += REGISTER.SPQ; continue;
case INSTR_ADDQR5RBP: REGISTER._5Q += REGISTER.BPQ; continue;
case INSTR_ADDQR6I: REGISTER._6Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR6RA: REGISTER._6Q += REGISTER.AQ; continue;
case INSTR_ADDQR6RB: REGISTER._6Q += REGISTER.BQ; continue;
case INSTR_ADDQR6RC: REGISTER._6Q += REGISTER.CQ; continue;
case INSTR_ADDQR6RD: REGISTER._6Q += REGISTER.DQ; continue;
case INSTR_ADDQR6R0: REGISTER._6Q += REGISTER._0Q; continue;
case INSTR_ADDQR6R1: REGISTER._6Q += REGISTER._1Q; continue;
case INSTR_ADDQR6R2: REGISTER._6Q += REGISTER._2Q; continue;
case INSTR_ADDQR6R3: REGISTER._6Q += REGISTER._3Q; continue;
case INSTR_ADDQR6R4: REGISTER._6Q += REGISTER._4Q; continue;
case INSTR_ADDQR6R5: REGISTER._6Q += REGISTER._5Q; continue;
case INSTR_ADDQR6R6: REGISTER._6Q += REGISTER._6Q; continue;
case INSTR_ADDQR6R7: REGISTER._6Q += REGISTER._7Q; continue;
case INSTR_ADDQR6R8: REGISTER._6Q += REGISTER._8Q; continue;
case INSTR_ADDQR6R9: REGISTER._6Q += REGISTER._9Q; continue;
case INSTR_ADDQR6R10: REGISTER._6Q += REGISTER._10Q; continue;
case INSTR_ADDQR6R11: REGISTER._6Q += REGISTER._11Q; continue;
case INSTR_ADDQR6R12: REGISTER._6Q += REGISTER._12Q; continue;
case INSTR_ADDQR6RIP: REGISTER._6Q += REGISTER.IPQ; continue;
case INSTR_ADDQR6RSP: REGISTER._6Q += REGISTER.SPQ; continue;
case INSTR_ADDQR6RBP: REGISTER._6Q += REGISTER.BPQ; continue;
case INSTR_ADDQR7I: REGISTER._7Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR7RA: REGISTER._7Q += REGISTER.AQ; continue;
case INSTR_ADDQR7RB: REGISTER._7Q += REGISTER.BQ; continue;
case INSTR_ADDQR7RC: REGISTER._7Q += REGISTER.CQ; continue;
case INSTR_ADDQR7RD: REGISTER._7Q += REGISTER.DQ; continue;
case INSTR_ADDQR7R0: REGISTER._7Q += REGISTER._0Q; continue;
case INSTR_ADDQR7R1: REGISTER._7Q += REGISTER._1Q; continue;
case INSTR_ADDQR7R2: REGISTER._7Q += REGISTER._2Q; continue;
case INSTR_ADDQR7R3: REGISTER._7Q += REGISTER._3Q; continue;
case INSTR_ADDQR7R4: REGISTER._7Q += REGISTER._4Q; continue;
case INSTR_ADDQR7R5: REGISTER._7Q += REGISTER._5Q; continue;
case INSTR_ADDQR7R6: REGISTER._7Q += REGISTER._6Q; continue;
case INSTR_ADDQR7R7: REGISTER._7Q += REGISTER._7Q; continue;
case INSTR_ADDQR7R8: REGISTER._7Q += REGISTER._8Q; continue;
case INSTR_ADDQR7R9: REGISTER._7Q += REGISTER._9Q; continue;
case INSTR_ADDQR7R10: REGISTER._7Q += REGISTER._10Q; continue;
case INSTR_ADDQR7R11: REGISTER._7Q += REGISTER._11Q; continue;
case INSTR_ADDQR7R12: REGISTER._7Q += REGISTER._12Q; continue;
case INSTR_ADDQR7RIP: REGISTER._7Q += REGISTER.IPQ; continue;
case INSTR_ADDQR7RSP: REGISTER._7Q += REGISTER.SPQ; continue;
case INSTR_ADDQR7RBP: REGISTER._7Q += REGISTER.BPQ; continue;
case INSTR_ADDQR8I: REGISTER._8Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR8RA: REGISTER._8Q += REGISTER.AQ; continue;
case INSTR_ADDQR8RB: REGISTER._8Q += REGISTER.BQ; continue;
case INSTR_ADDQR8RC: REGISTER._8Q += REGISTER.CQ; continue;
case INSTR_ADDQR8RD: REGISTER._8Q += REGISTER.DQ; continue;
case INSTR_ADDQR8R0: REGISTER._8Q += REGISTER._0Q; continue;
case INSTR_ADDQR8R1: REGISTER._8Q += REGISTER._1Q; continue;
case INSTR_ADDQR8R2: REGISTER._8Q += REGISTER._2Q; continue;
case INSTR_ADDQR8R3: REGISTER._8Q += REGISTER._3Q; continue;
case INSTR_ADDQR8R4: REGISTER._8Q += REGISTER._4Q; continue;
case INSTR_ADDQR8R5: REGISTER._8Q += REGISTER._5Q; continue;
case INSTR_ADDQR8R6: REGISTER._8Q += REGISTER._6Q; continue;
case INSTR_ADDQR8R7: REGISTER._8Q += REGISTER._7Q; continue;
case INSTR_ADDQR8R8: REGISTER._8Q += REGISTER._8Q; continue;
case INSTR_ADDQR8R9: REGISTER._8Q += REGISTER._9Q; continue;
case INSTR_ADDQR8R10: REGISTER._8Q += REGISTER._10Q; continue;
case INSTR_ADDQR8R11: REGISTER._8Q += REGISTER._11Q; continue;
case INSTR_ADDQR8R12: REGISTER._8Q += REGISTER._12Q; continue;
case INSTR_ADDQR8RIP: REGISTER._8Q += REGISTER.IPQ; continue;
case INSTR_ADDQR8RSP: REGISTER._8Q += REGISTER.SPQ; continue;
case INSTR_ADDQR8RBP: REGISTER._8Q += REGISTER.BPQ; continue;
case INSTR_ADDQR9I: REGISTER._9Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR9RA: REGISTER._9Q += REGISTER.AQ; continue;
case INSTR_ADDQR9RB: REGISTER._9Q += REGISTER.BQ; continue;
case INSTR_ADDQR9RC: REGISTER._9Q += REGISTER.CQ; continue;
case INSTR_ADDQR9RD: REGISTER._9Q += REGISTER.DQ; continue;
case INSTR_ADDQR9R0: REGISTER._9Q += REGISTER._0Q; continue;
case INSTR_ADDQR9R1: REGISTER._9Q += REGISTER._1Q; continue;
case INSTR_ADDQR9R2: REGISTER._9Q += REGISTER._2Q; continue;
case INSTR_ADDQR9R3: REGISTER._9Q += REGISTER._3Q; continue;
case INSTR_ADDQR9R4: REGISTER._9Q += REGISTER._4Q; continue;
case INSTR_ADDQR9R5: REGISTER._9Q += REGISTER._5Q; continue;
case INSTR_ADDQR9R6: REGISTER._9Q += REGISTER._6Q; continue;
case INSTR_ADDQR9R7: REGISTER._9Q += REGISTER._7Q; continue;
case INSTR_ADDQR9R8: REGISTER._9Q += REGISTER._8Q; continue;
case INSTR_ADDQR9R9: REGISTER._9Q += REGISTER._9Q; continue;
case INSTR_ADDQR9R10: REGISTER._9Q += REGISTER._10Q; continue;
case INSTR_ADDQR9R11: REGISTER._9Q += REGISTER._11Q; continue;
case INSTR_ADDQR9R12: REGISTER._9Q += REGISTER._12Q; continue;
case INSTR_ADDQR9RIP: REGISTER._9Q += REGISTER.IPQ; continue;
case INSTR_ADDQR9RSP: REGISTER._9Q += REGISTER.SPQ; continue;
case INSTR_ADDQR9RBP: REGISTER._9Q += REGISTER.BPQ; continue;
case INSTR_ADDQR10I: REGISTER._10Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR10RA: REGISTER._10Q += REGISTER.AQ; continue;
case INSTR_ADDQR10RB: REGISTER._10Q += REGISTER.BQ; continue;
case INSTR_ADDQR10RC: REGISTER._10Q += REGISTER.CQ; continue;
case INSTR_ADDQR10RD: REGISTER._10Q += REGISTER.DQ; continue;
case INSTR_ADDQR10R0: REGISTER._10Q += REGISTER._0Q; continue;
case INSTR_ADDQR10R1: REGISTER._10Q += REGISTER._1Q; continue;
case INSTR_ADDQR10R2: REGISTER._10Q += REGISTER._2Q; continue;
case INSTR_ADDQR10R3: REGISTER._10Q += REGISTER._3Q; continue;
case INSTR_ADDQR10R4: REGISTER._10Q += REGISTER._4Q; continue;
case INSTR_ADDQR10R5: REGISTER._10Q += REGISTER._5Q; continue;
case INSTR_ADDQR10R6: REGISTER._10Q += REGISTER._6Q; continue;
case INSTR_ADDQR10R7: REGISTER._10Q += REGISTER._7Q; continue;
case INSTR_ADDQR10R8: REGISTER._10Q += REGISTER._8Q; continue;
case INSTR_ADDQR10R9: REGISTER._10Q += REGISTER._9Q; continue;
case INSTR_ADDQR10R10: REGISTER._10Q += REGISTER._10Q; continue;
case INSTR_ADDQR10R11: REGISTER._10Q += REGISTER._11Q; continue;
case INSTR_ADDQR10R12: REGISTER._10Q += REGISTER._12Q; continue;
case INSTR_ADDQR10RIP: REGISTER._10Q += REGISTER.IPQ; continue;
case INSTR_ADDQR10RSP: REGISTER._10Q += REGISTER.SPQ; continue;
case INSTR_ADDQR10RBP: REGISTER._10Q += REGISTER.BPQ; continue;
case INSTR_ADDQR11I: REGISTER._11Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR11RA: REGISTER._11Q += REGISTER.AQ; continue;
case INSTR_ADDQR11RB: REGISTER._11Q += REGISTER.BQ; continue;
case INSTR_ADDQR11RC: REGISTER._11Q += REGISTER.CQ; continue;
case INSTR_ADDQR11RD: REGISTER._11Q += REGISTER.DQ; continue;
case INSTR_ADDQR11R0: REGISTER._11Q += REGISTER._0Q; continue;
case INSTR_ADDQR11R1: REGISTER._11Q += REGISTER._1Q; continue;
case INSTR_ADDQR11R2: REGISTER._11Q += REGISTER._2Q; continue;
case INSTR_ADDQR11R3: REGISTER._11Q += REGISTER._3Q; continue;
case INSTR_ADDQR11R4: REGISTER._11Q += REGISTER._4Q; continue;
case INSTR_ADDQR11R5: REGISTER._11Q += REGISTER._5Q; continue;
case INSTR_ADDQR11R6: REGISTER._11Q += REGISTER._6Q; continue;
case INSTR_ADDQR11R7: REGISTER._11Q += REGISTER._7Q; continue;
case INSTR_ADDQR11R8: REGISTER._11Q += REGISTER._8Q; continue;
case INSTR_ADDQR11R9: REGISTER._11Q += REGISTER._9Q; continue;
case INSTR_ADDQR11R10: REGISTER._11Q += REGISTER._10Q; continue;
case INSTR_ADDQR11R11: REGISTER._11Q += REGISTER._11Q; continue;
case INSTR_ADDQR11R12: REGISTER._11Q += REGISTER._12Q; continue;
case INSTR_ADDQR11RIP: REGISTER._11Q += REGISTER.IPQ; continue;
case INSTR_ADDQR11RSP: REGISTER._11Q += REGISTER.SPQ; continue;
case INSTR_ADDQR11RBP: REGISTER._11Q += REGISTER.BPQ; continue;
case INSTR_ADDQR12I: REGISTER._12Q += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQR12RA: REGISTER._12Q += REGISTER.AQ; continue;
case INSTR_ADDQR12RB: REGISTER._12Q += REGISTER.BQ; continue;
case INSTR_ADDQR12RC: REGISTER._12Q += REGISTER.CQ; continue;
case INSTR_ADDQR12RD: REGISTER._12Q += REGISTER.DQ; continue;
case INSTR_ADDQR12R0: REGISTER._12Q += REGISTER._0Q; continue;
case INSTR_ADDQR12R1: REGISTER._12Q += REGISTER._1Q; continue;
case INSTR_ADDQR12R2: REGISTER._12Q += REGISTER._2Q; continue;
case INSTR_ADDQR12R3: REGISTER._12Q += REGISTER._3Q; continue;
case INSTR_ADDQR12R4: REGISTER._12Q += REGISTER._4Q; continue;
case INSTR_ADDQR12R5: REGISTER._12Q += REGISTER._5Q; continue;
case INSTR_ADDQR12R6: REGISTER._12Q += REGISTER._6Q; continue;
case INSTR_ADDQR12R7: REGISTER._12Q += REGISTER._7Q; continue;
case INSTR_ADDQR12R8: REGISTER._12Q += REGISTER._8Q; continue;
case INSTR_ADDQR12R9: REGISTER._12Q += REGISTER._9Q; continue;
case INSTR_ADDQR12R10: REGISTER._12Q += REGISTER._10Q; continue;
case INSTR_ADDQR12R11: REGISTER._12Q += REGISTER._11Q; continue;
case INSTR_ADDQR12R12: REGISTER._12Q += REGISTER._12Q; continue;
case INSTR_ADDQR12RIP: REGISTER._12Q += REGISTER.IPQ; continue;
case INSTR_ADDQR12RSP: REGISTER._12Q += REGISTER.SPQ; continue;
case INSTR_ADDQR12RBP: REGISTER._12Q += REGISTER.BPQ; continue;
case INSTR_ADDQRIPI: REGISTER.IPQ += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQRIPRA: REGISTER.IPQ += REGISTER.AQ; continue;
case INSTR_ADDQRIPRB: REGISTER.IPQ += REGISTER.BQ; continue;
case INSTR_ADDQRIPRC: REGISTER.IPQ += REGISTER.CQ; continue;
case INSTR_ADDQRIPRD: REGISTER.IPQ += REGISTER.DQ; continue;
case INSTR_ADDQRIPR0: REGISTER.IPQ += REGISTER._0Q; continue;
case INSTR_ADDQRIPR1: REGISTER.IPQ += REGISTER._1Q; continue;
case INSTR_ADDQRIPR2: REGISTER.IPQ += REGISTER._2Q; continue;
case INSTR_ADDQRIPR3: REGISTER.IPQ += REGISTER._3Q; continue;
case INSTR_ADDQRIPR4: REGISTER.IPQ += REGISTER._4Q; continue;
case INSTR_ADDQRIPR5: REGISTER.IPQ += REGISTER._5Q; continue;
case INSTR_ADDQRIPR6: REGISTER.IPQ += REGISTER._6Q; continue;
case INSTR_ADDQRIPR7: REGISTER.IPQ += REGISTER._7Q; continue;
case INSTR_ADDQRIPR8: REGISTER.IPQ += REGISTER._8Q; continue;
case INSTR_ADDQRIPR9: REGISTER.IPQ += REGISTER._9Q; continue;
case INSTR_ADDQRIPR10: REGISTER.IPQ += REGISTER._10Q; continue;
case INSTR_ADDQRIPR11: REGISTER.IPQ += REGISTER._11Q; continue;
case INSTR_ADDQRIPR12: REGISTER.IPQ += REGISTER._12Q; continue;
case INSTR_ADDQRIPRIP: REGISTER.IPQ += REGISTER.IPQ; continue;
case INSTR_ADDQRIPRSP: REGISTER.IPQ += REGISTER.SPQ; continue;
case INSTR_ADDQRIPRBP: REGISTER.IPQ += REGISTER.BPQ; continue;
case INSTR_ADDQRSPI: REGISTER.SPQ += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQRSPRA: REGISTER.SPQ += REGISTER.AQ; continue;
case INSTR_ADDQRSPRB: REGISTER.SPQ += REGISTER.BQ; continue;
case INSTR_ADDQRSPRC: REGISTER.SPQ += REGISTER.CQ; continue;
case INSTR_ADDQRSPRD: REGISTER.SPQ += REGISTER.DQ; continue;
case INSTR_ADDQRSPR0: REGISTER.SPQ += REGISTER._0Q; continue;
case INSTR_ADDQRSPR1: REGISTER.SPQ += REGISTER._1Q; continue;
case INSTR_ADDQRSPR2: REGISTER.SPQ += REGISTER._2Q; continue;
case INSTR_ADDQRSPR3: REGISTER.SPQ += REGISTER._3Q; continue;
case INSTR_ADDQRSPR4: REGISTER.SPQ += REGISTER._4Q; continue;
case INSTR_ADDQRSPR5: REGISTER.SPQ += REGISTER._5Q; continue;
case INSTR_ADDQRSPR6: REGISTER.SPQ += REGISTER._6Q; continue;
case INSTR_ADDQRSPR7: REGISTER.SPQ += REGISTER._7Q; continue;
case INSTR_ADDQRSPR8: REGISTER.SPQ += REGISTER._8Q; continue;
case INSTR_ADDQRSPR9: REGISTER.SPQ += REGISTER._9Q; continue;
case INSTR_ADDQRSPR10: REGISTER.SPQ += REGISTER._10Q; continue;
case INSTR_ADDQRSPR11: REGISTER.SPQ += REGISTER._11Q; continue;
case INSTR_ADDQRSPR12: REGISTER.SPQ += REGISTER._12Q; continue;
case INSTR_ADDQRSPRIP: REGISTER.SPQ += REGISTER.IPQ; continue;
case INSTR_ADDQRSPRSP: REGISTER.SPQ += REGISTER.SPQ; continue;
case INSTR_ADDQRSPRBP: REGISTER.SPQ += REGISTER.BPQ; continue;
case INSTR_ADDQRBPI: REGISTER.BPQ += *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ADDQRBPRA: REGISTER.BPQ += REGISTER.AQ; continue;
case INSTR_ADDQRBPRB: REGISTER.BPQ += REGISTER.BQ; continue;
case INSTR_ADDQRBPRC: REGISTER.BPQ += REGISTER.CQ; continue;
case INSTR_ADDQRBPRD: REGISTER.BPQ += REGISTER.DQ; continue;
case INSTR_ADDQRBPR0: REGISTER.BPQ += REGISTER._0Q; continue;
case INSTR_ADDQRBPR1: REGISTER.BPQ += REGISTER._1Q; continue;
case INSTR_ADDQRBPR2: REGISTER.BPQ += REGISTER._2Q; continue;
case INSTR_ADDQRBPR3: REGISTER.BPQ += REGISTER._3Q; continue;
case INSTR_ADDQRBPR4: REGISTER.BPQ += REGISTER._4Q; continue;
case INSTR_ADDQRBPR5: REGISTER.BPQ += REGISTER._5Q; continue;
case INSTR_ADDQRBPR6: REGISTER.BPQ += REGISTER._6Q; continue;
case INSTR_ADDQRBPR7: REGISTER.BPQ += REGISTER._7Q; continue;
case INSTR_ADDQRBPR8: REGISTER.BPQ += REGISTER._8Q; continue;
case INSTR_ADDQRBPR9: REGISTER.BPQ += REGISTER._9Q; continue;
case INSTR_ADDQRBPR10: REGISTER.BPQ += REGISTER._10Q; continue;
case INSTR_ADDQRBPR11: REGISTER.BPQ += REGISTER._11Q; continue;
case INSTR_ADDQRBPR12: REGISTER.BPQ += REGISTER._12Q; continue;
case INSTR_ADDQRBPRIP: REGISTER.BPQ += REGISTER.IPQ; continue;
case INSTR_ADDQRBPRSP: REGISTER.BPQ += REGISTER.SPQ; continue;
case INSTR_ADDQRBPRBP: REGISTER.BPQ += REGISTER.BPQ; continue;
case INSTR_ADDWRAI: REGISTER.AW += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWRARA: REGISTER.AW += REGISTER.AW; continue;
case INSTR_ADDWRARB: REGISTER.AW += REGISTER.BW; continue;
case INSTR_ADDWRARC: REGISTER.AW += REGISTER.CW; continue;
case INSTR_ADDWRARD: REGISTER.AW += REGISTER.DW; continue;
case INSTR_ADDWRAR0: REGISTER.AW += REGISTER._0W; continue;
case INSTR_ADDWRAR1: REGISTER.AW += REGISTER._1W; continue;
case INSTR_ADDWRAR2: REGISTER.AW += REGISTER._2W; continue;
case INSTR_ADDWRAR3: REGISTER.AW += REGISTER._3W; continue;
case INSTR_ADDWRAR4: REGISTER.AW += REGISTER._4W; continue;
case INSTR_ADDWRAR5: REGISTER.AW += REGISTER._5W; continue;
case INSTR_ADDWRAR6: REGISTER.AW += REGISTER._6W; continue;
case INSTR_ADDWRAR7: REGISTER.AW += REGISTER._7W; continue;
case INSTR_ADDWRAR8: REGISTER.AW += REGISTER._8W; continue;
case INSTR_ADDWRAR9: REGISTER.AW += REGISTER._9W; continue;
case INSTR_ADDWRAR10: REGISTER.AW += REGISTER._10W; continue;
case INSTR_ADDWRAR11: REGISTER.AW += REGISTER._11W; continue;
case INSTR_ADDWRAR12: REGISTER.AW += REGISTER._12W; continue;
case INSTR_ADDWRARIP: REGISTER.AW += REGISTER.IPW; continue;
case INSTR_ADDWRARSP: REGISTER.AW += REGISTER.SPW; continue;
case INSTR_ADDWRARBP: REGISTER.AW += REGISTER.BPW; continue;
case INSTR_ADDWRBI: REGISTER.BW += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWRBRA: REGISTER.BW += REGISTER.AW; continue;
case INSTR_ADDWRBRB: REGISTER.BW += REGISTER.BW; continue;
case INSTR_ADDWRBRC: REGISTER.BW += REGISTER.CW; continue;
case INSTR_ADDWRBRD: REGISTER.BW += REGISTER.DW; continue;
case INSTR_ADDWRBR0: REGISTER.BW += REGISTER._0W; continue;
case INSTR_ADDWRBR1: REGISTER.BW += REGISTER._1W; continue;
case INSTR_ADDWRBR2: REGISTER.BW += REGISTER._2W; continue;
case INSTR_ADDWRBR3: REGISTER.BW += REGISTER._3W; continue;
case INSTR_ADDWRBR4: REGISTER.BW += REGISTER._4W; continue;
case INSTR_ADDWRBR5: REGISTER.BW += REGISTER._5W; continue;
case INSTR_ADDWRBR6: REGISTER.BW += REGISTER._6W; continue;
case INSTR_ADDWRBR7: REGISTER.BW += REGISTER._7W; continue;
case INSTR_ADDWRBR8: REGISTER.BW += REGISTER._8W; continue;
case INSTR_ADDWRBR9: REGISTER.BW += REGISTER._9W; continue;
case INSTR_ADDWRBR10: REGISTER.BW += REGISTER._10W; continue;
case INSTR_ADDWRBR11: REGISTER.BW += REGISTER._11W; continue;
case INSTR_ADDWRBR12: REGISTER.BW += REGISTER._12W; continue;
case INSTR_ADDWRBRIP: REGISTER.BW += REGISTER.IPW; continue;
case INSTR_ADDWRBRSP: REGISTER.BW += REGISTER.SPW; continue;
case INSTR_ADDWRBRBP: REGISTER.BW += REGISTER.BPW; continue;
case INSTR_ADDWRCI: REGISTER.CW += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWRCRA: REGISTER.CW += REGISTER.AW; continue;
case INSTR_ADDWRCRB: REGISTER.CW += REGISTER.BW; continue;
case INSTR_ADDWRCRC: REGISTER.CW += REGISTER.CW; continue;
case INSTR_ADDWRCRD: REGISTER.CW += REGISTER.DW; continue;
case INSTR_ADDWRCR0: REGISTER.CW += REGISTER._0W; continue;
case INSTR_ADDWRCR1: REGISTER.CW += REGISTER._1W; continue;
case INSTR_ADDWRCR2: REGISTER.CW += REGISTER._2W; continue;
case INSTR_ADDWRCR3: REGISTER.CW += REGISTER._3W; continue;
case INSTR_ADDWRCR4: REGISTER.CW += REGISTER._4W; continue;
case INSTR_ADDWRCR5: REGISTER.CW += REGISTER._5W; continue;
case INSTR_ADDWRCR6: REGISTER.CW += REGISTER._6W; continue;
case INSTR_ADDWRCR7: REGISTER.CW += REGISTER._7W; continue;
case INSTR_ADDWRCR8: REGISTER.CW += REGISTER._8W; continue;
case INSTR_ADDWRCR9: REGISTER.CW += REGISTER._9W; continue;
case INSTR_ADDWRCR10: REGISTER.CW += REGISTER._10W; continue;
case INSTR_ADDWRCR11: REGISTER.CW += REGISTER._11W; continue;
case INSTR_ADDWRCR12: REGISTER.CW += REGISTER._12W; continue;
case INSTR_ADDWRCRIP: REGISTER.CW += REGISTER.IPW; continue;
case INSTR_ADDWRCRSP: REGISTER.CW += REGISTER.SPW; continue;
case INSTR_ADDWRCRBP: REGISTER.CW += REGISTER.BPW; continue;
case INSTR_ADDWRDI: REGISTER.DW += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWRDRA: REGISTER.DW += REGISTER.AW; continue;
case INSTR_ADDWRDRB: REGISTER.DW += REGISTER.BW; continue;
case INSTR_ADDWRDRC: REGISTER.DW += REGISTER.CW; continue;
case INSTR_ADDWRDRD: REGISTER.DW += REGISTER.DW; continue;
case INSTR_ADDWRDR0: REGISTER.DW += REGISTER._0W; continue;
case INSTR_ADDWRDR1: REGISTER.DW += REGISTER._1W; continue;
case INSTR_ADDWRDR2: REGISTER.DW += REGISTER._2W; continue;
case INSTR_ADDWRDR3: REGISTER.DW += REGISTER._3W; continue;
case INSTR_ADDWRDR4: REGISTER.DW += REGISTER._4W; continue;
case INSTR_ADDWRDR5: REGISTER.DW += REGISTER._5W; continue;
case INSTR_ADDWRDR6: REGISTER.DW += REGISTER._6W; continue;
case INSTR_ADDWRDR7: REGISTER.DW += REGISTER._7W; continue;
case INSTR_ADDWRDR8: REGISTER.DW += REGISTER._8W; continue;
case INSTR_ADDWRDR9: REGISTER.DW += REGISTER._9W; continue;
case INSTR_ADDWRDR10: REGISTER.DW += REGISTER._10W; continue;
case INSTR_ADDWRDR11: REGISTER.DW += REGISTER._11W; continue;
case INSTR_ADDWRDR12: REGISTER.DW += REGISTER._12W; continue;
case INSTR_ADDWRDRIP: REGISTER.DW += REGISTER.IPW; continue;
case INSTR_ADDWRDRSP: REGISTER.DW += REGISTER.SPW; continue;
case INSTR_ADDWRDRBP: REGISTER.DW += REGISTER.BPW; continue;
case INSTR_ADDWR0I: REGISTER._0W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR0RA: REGISTER._0W += REGISTER.AW; continue;
case INSTR_ADDWR0RB: REGISTER._0W += REGISTER.BW; continue;
case INSTR_ADDWR0RC: REGISTER._0W += REGISTER.CW; continue;
case INSTR_ADDWR0RD: REGISTER._0W += REGISTER.DW; continue;
case INSTR_ADDWR0R0: REGISTER._0W += REGISTER._0W; continue;
case INSTR_ADDWR0R1: REGISTER._0W += REGISTER._1W; continue;
case INSTR_ADDWR0R2: REGISTER._0W += REGISTER._2W; continue;
case INSTR_ADDWR0R3: REGISTER._0W += REGISTER._3W; continue;
case INSTR_ADDWR0R4: REGISTER._0W += REGISTER._4W; continue;
case INSTR_ADDWR0R5: REGISTER._0W += REGISTER._5W; continue;
case INSTR_ADDWR0R6: REGISTER._0W += REGISTER._6W; continue;
case INSTR_ADDWR0R7: REGISTER._0W += REGISTER._7W; continue;
case INSTR_ADDWR0R8: REGISTER._0W += REGISTER._8W; continue;
case INSTR_ADDWR0R9: REGISTER._0W += REGISTER._9W; continue;
case INSTR_ADDWR0R10: REGISTER._0W += REGISTER._10W; continue;
case INSTR_ADDWR0R11: REGISTER._0W += REGISTER._11W; continue;
case INSTR_ADDWR0R12: REGISTER._0W += REGISTER._12W; continue;
case INSTR_ADDWR0RIP: REGISTER._0W += REGISTER.IPW; continue;
case INSTR_ADDWR0RSP: REGISTER._0W += REGISTER.SPW; continue;
case INSTR_ADDWR0RBP: REGISTER._0W += REGISTER.BPW; continue;
case INSTR_ADDWR1I: REGISTER._1W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR1RA: REGISTER._1W += REGISTER.AW; continue;
case INSTR_ADDWR1RB: REGISTER._1W += REGISTER.BW; continue;
case INSTR_ADDWR1RC: REGISTER._1W += REGISTER.CW; continue;
case INSTR_ADDWR1RD: REGISTER._1W += REGISTER.DW; continue;
case INSTR_ADDWR1R0: REGISTER._1W += REGISTER._0W; continue;
case INSTR_ADDWR1R1: REGISTER._1W += REGISTER._1W; continue;
case INSTR_ADDWR1R2: REGISTER._1W += REGISTER._2W; continue;
case INSTR_ADDWR1R3: REGISTER._1W += REGISTER._3W; continue;
case INSTR_ADDWR1R4: REGISTER._1W += REGISTER._4W; continue;
case INSTR_ADDWR1R5: REGISTER._1W += REGISTER._5W; continue;
case INSTR_ADDWR1R6: REGISTER._1W += REGISTER._6W; continue;
case INSTR_ADDWR1R7: REGISTER._1W += REGISTER._7W; continue;
case INSTR_ADDWR1R8: REGISTER._1W += REGISTER._8W; continue;
case INSTR_ADDWR1R9: REGISTER._1W += REGISTER._9W; continue;
case INSTR_ADDWR1R10: REGISTER._1W += REGISTER._10W; continue;
case INSTR_ADDWR1R11: REGISTER._1W += REGISTER._11W; continue;
case INSTR_ADDWR1R12: REGISTER._1W += REGISTER._12W; continue;
case INSTR_ADDWR1RIP: REGISTER._1W += REGISTER.IPW; continue;
case INSTR_ADDWR1RSP: REGISTER._1W += REGISTER.SPW; continue;
case INSTR_ADDWR1RBP: REGISTER._1W += REGISTER.BPW; continue;
case INSTR_ADDWR2I: REGISTER._2W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR2RA: REGISTER._2W += REGISTER.AW; continue;
case INSTR_ADDWR2RB: REGISTER._2W += REGISTER.BW; continue;
case INSTR_ADDWR2RC: REGISTER._2W += REGISTER.CW; continue;
case INSTR_ADDWR2RD: REGISTER._2W += REGISTER.DW; continue;
case INSTR_ADDWR2R0: REGISTER._2W += REGISTER._0W; continue;
case INSTR_ADDWR2R1: REGISTER._2W += REGISTER._1W; continue;
case INSTR_ADDWR2R2: REGISTER._2W += REGISTER._2W; continue;
case INSTR_ADDWR2R3: REGISTER._2W += REGISTER._3W; continue;
case INSTR_ADDWR2R4: REGISTER._2W += REGISTER._4W; continue;
case INSTR_ADDWR2R5: REGISTER._2W += REGISTER._5W; continue;
case INSTR_ADDWR2R6: REGISTER._2W += REGISTER._6W; continue;
case INSTR_ADDWR2R7: REGISTER._2W += REGISTER._7W; continue;
case INSTR_ADDWR2R8: REGISTER._2W += REGISTER._8W; continue;
case INSTR_ADDWR2R9: REGISTER._2W += REGISTER._9W; continue;
case INSTR_ADDWR2R10: REGISTER._2W += REGISTER._10W; continue;
case INSTR_ADDWR2R11: REGISTER._2W += REGISTER._11W; continue;
case INSTR_ADDWR2R12: REGISTER._2W += REGISTER._12W; continue;
case INSTR_ADDWR2RIP: REGISTER._2W += REGISTER.IPW; continue;
case INSTR_ADDWR2RSP: REGISTER._2W += REGISTER.SPW; continue;
case INSTR_ADDWR2RBP: REGISTER._2W += REGISTER.BPW; continue;
case INSTR_ADDWR3I: REGISTER._3W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR3RA: REGISTER._3W += REGISTER.AW; continue;
case INSTR_ADDWR3RB: REGISTER._3W += REGISTER.BW; continue;
case INSTR_ADDWR3RC: REGISTER._3W += REGISTER.CW; continue;
case INSTR_ADDWR3RD: REGISTER._3W += REGISTER.DW; continue;
case INSTR_ADDWR3R0: REGISTER._3W += REGISTER._0W; continue;
case INSTR_ADDWR3R1: REGISTER._3W += REGISTER._1W; continue;
case INSTR_ADDWR3R2: REGISTER._3W += REGISTER._2W; continue;
case INSTR_ADDWR3R3: REGISTER._3W += REGISTER._3W; continue;
case INSTR_ADDWR3R4: REGISTER._3W += REGISTER._4W; continue;
case INSTR_ADDWR3R5: REGISTER._3W += REGISTER._5W; continue;
case INSTR_ADDWR3R6: REGISTER._3W += REGISTER._6W; continue;
case INSTR_ADDWR3R7: REGISTER._3W += REGISTER._7W; continue;
case INSTR_ADDWR3R8: REGISTER._3W += REGISTER._8W; continue;
case INSTR_ADDWR3R9: REGISTER._3W += REGISTER._9W; continue;
case INSTR_ADDWR3R10: REGISTER._3W += REGISTER._10W; continue;
case INSTR_ADDWR3R11: REGISTER._3W += REGISTER._11W; continue;
case INSTR_ADDWR3R12: REGISTER._3W += REGISTER._12W; continue;
case INSTR_ADDWR3RIP: REGISTER._3W += REGISTER.IPW; continue;
case INSTR_ADDWR3RSP: REGISTER._3W += REGISTER.SPW; continue;
case INSTR_ADDWR3RBP: REGISTER._3W += REGISTER.BPW; continue;
case INSTR_ADDWR4I: REGISTER._4W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR4RA: REGISTER._4W += REGISTER.AW; continue;
case INSTR_ADDWR4RB: REGISTER._4W += REGISTER.BW; continue;
case INSTR_ADDWR4RC: REGISTER._4W += REGISTER.CW; continue;
case INSTR_ADDWR4RD: REGISTER._4W += REGISTER.DW; continue;
case INSTR_ADDWR4R0: REGISTER._4W += REGISTER._0W; continue;
case INSTR_ADDWR4R1: REGISTER._4W += REGISTER._1W; continue;
case INSTR_ADDWR4R2: REGISTER._4W += REGISTER._2W; continue;
case INSTR_ADDWR4R3: REGISTER._4W += REGISTER._3W; continue;
case INSTR_ADDWR4R4: REGISTER._4W += REGISTER._4W; continue;
case INSTR_ADDWR4R5: REGISTER._4W += REGISTER._5W; continue;
case INSTR_ADDWR4R6: REGISTER._4W += REGISTER._6W; continue;
case INSTR_ADDWR4R7: REGISTER._4W += REGISTER._7W; continue;
case INSTR_ADDWR4R8: REGISTER._4W += REGISTER._8W; continue;
case INSTR_ADDWR4R9: REGISTER._4W += REGISTER._9W; continue;
case INSTR_ADDWR4R10: REGISTER._4W += REGISTER._10W; continue;
case INSTR_ADDWR4R11: REGISTER._4W += REGISTER._11W; continue;
case INSTR_ADDWR4R12: REGISTER._4W += REGISTER._12W; continue;
case INSTR_ADDWR4RIP: REGISTER._4W += REGISTER.IPW; continue;
case INSTR_ADDWR4RSP: REGISTER._4W += REGISTER.SPW; continue;
case INSTR_ADDWR4RBP: REGISTER._4W += REGISTER.BPW; continue;
case INSTR_ADDWR5I: REGISTER._5W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR5RA: REGISTER._5W += REGISTER.AW; continue;
case INSTR_ADDWR5RB: REGISTER._5W += REGISTER.BW; continue;
case INSTR_ADDWR5RC: REGISTER._5W += REGISTER.CW; continue;
case INSTR_ADDWR5RD: REGISTER._5W += REGISTER.DW; continue;
case INSTR_ADDWR5R0: REGISTER._5W += REGISTER._0W; continue;
case INSTR_ADDWR5R1: REGISTER._5W += REGISTER._1W; continue;
case INSTR_ADDWR5R2: REGISTER._5W += REGISTER._2W; continue;
case INSTR_ADDWR5R3: REGISTER._5W += REGISTER._3W; continue;
case INSTR_ADDWR5R4: REGISTER._5W += REGISTER._4W; continue;
case INSTR_ADDWR5R5: REGISTER._5W += REGISTER._5W; continue;
case INSTR_ADDWR5R6: REGISTER._5W += REGISTER._6W; continue;
case INSTR_ADDWR5R7: REGISTER._5W += REGISTER._7W; continue;
case INSTR_ADDWR5R8: REGISTER._5W += REGISTER._8W; continue;
case INSTR_ADDWR5R9: REGISTER._5W += REGISTER._9W; continue;
case INSTR_ADDWR5R10: REGISTER._5W += REGISTER._10W; continue;
case INSTR_ADDWR5R11: REGISTER._5W += REGISTER._11W; continue;
case INSTR_ADDWR5R12: REGISTER._5W += REGISTER._12W; continue;
case INSTR_ADDWR5RIP: REGISTER._5W += REGISTER.IPW; continue;
case INSTR_ADDWR5RSP: REGISTER._5W += REGISTER.SPW; continue;
case INSTR_ADDWR5RBP: REGISTER._5W += REGISTER.BPW; continue;
case INSTR_ADDWR6I: REGISTER._6W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR6RA: REGISTER._6W += REGISTER.AW; continue;
case INSTR_ADDWR6RB: REGISTER._6W += REGISTER.BW; continue;
case INSTR_ADDWR6RC: REGISTER._6W += REGISTER.CW; continue;
case INSTR_ADDWR6RD: REGISTER._6W += REGISTER.DW; continue;
case INSTR_ADDWR6R0: REGISTER._6W += REGISTER._0W; continue;
case INSTR_ADDWR6R1: REGISTER._6W += REGISTER._1W; continue;
case INSTR_ADDWR6R2: REGISTER._6W += REGISTER._2W; continue;
case INSTR_ADDWR6R3: REGISTER._6W += REGISTER._3W; continue;
case INSTR_ADDWR6R4: REGISTER._6W += REGISTER._4W; continue;
case INSTR_ADDWR6R5: REGISTER._6W += REGISTER._5W; continue;
case INSTR_ADDWR6R6: REGISTER._6W += REGISTER._6W; continue;
case INSTR_ADDWR6R7: REGISTER._6W += REGISTER._7W; continue;
case INSTR_ADDWR6R8: REGISTER._6W += REGISTER._8W; continue;
case INSTR_ADDWR6R9: REGISTER._6W += REGISTER._9W; continue;
case INSTR_ADDWR6R10: REGISTER._6W += REGISTER._10W; continue;
case INSTR_ADDWR6R11: REGISTER._6W += REGISTER._11W; continue;
case INSTR_ADDWR6R12: REGISTER._6W += REGISTER._12W; continue;
case INSTR_ADDWR6RIP: REGISTER._6W += REGISTER.IPW; continue;
case INSTR_ADDWR6RSP: REGISTER._6W += REGISTER.SPW; continue;
case INSTR_ADDWR6RBP: REGISTER._6W += REGISTER.BPW; continue;
case INSTR_ADDWR7I: REGISTER._7W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR7RA: REGISTER._7W += REGISTER.AW; continue;
case INSTR_ADDWR7RB: REGISTER._7W += REGISTER.BW; continue;
case INSTR_ADDWR7RC: REGISTER._7W += REGISTER.CW; continue;
case INSTR_ADDWR7RD: REGISTER._7W += REGISTER.DW; continue;
case INSTR_ADDWR7R0: REGISTER._7W += REGISTER._0W; continue;
case INSTR_ADDWR7R1: REGISTER._7W += REGISTER._1W; continue;
case INSTR_ADDWR7R2: REGISTER._7W += REGISTER._2W; continue;
case INSTR_ADDWR7R3: REGISTER._7W += REGISTER._3W; continue;
case INSTR_ADDWR7R4: REGISTER._7W += REGISTER._4W; continue;
case INSTR_ADDWR7R5: REGISTER._7W += REGISTER._5W; continue;
case INSTR_ADDWR7R6: REGISTER._7W += REGISTER._6W; continue;
case INSTR_ADDWR7R7: REGISTER._7W += REGISTER._7W; continue;
case INSTR_ADDWR7R8: REGISTER._7W += REGISTER._8W; continue;
case INSTR_ADDWR7R9: REGISTER._7W += REGISTER._9W; continue;
case INSTR_ADDWR7R10: REGISTER._7W += REGISTER._10W; continue;
case INSTR_ADDWR7R11: REGISTER._7W += REGISTER._11W; continue;
case INSTR_ADDWR7R12: REGISTER._7W += REGISTER._12W; continue;
case INSTR_ADDWR7RIP: REGISTER._7W += REGISTER.IPW; continue;
case INSTR_ADDWR7RSP: REGISTER._7W += REGISTER.SPW; continue;
case INSTR_ADDWR7RBP: REGISTER._7W += REGISTER.BPW; continue;
case INSTR_ADDWR8I: REGISTER._8W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR8RA: REGISTER._8W += REGISTER.AW; continue;
case INSTR_ADDWR8RB: REGISTER._8W += REGISTER.BW; continue;
case INSTR_ADDWR8RC: REGISTER._8W += REGISTER.CW; continue;
case INSTR_ADDWR8RD: REGISTER._8W += REGISTER.DW; continue;
case INSTR_ADDWR8R0: REGISTER._8W += REGISTER._0W; continue;
case INSTR_ADDWR8R1: REGISTER._8W += REGISTER._1W; continue;
case INSTR_ADDWR8R2: REGISTER._8W += REGISTER._2W; continue;
case INSTR_ADDWR8R3: REGISTER._8W += REGISTER._3W; continue;
case INSTR_ADDWR8R4: REGISTER._8W += REGISTER._4W; continue;
case INSTR_ADDWR8R5: REGISTER._8W += REGISTER._5W; continue;
case INSTR_ADDWR8R6: REGISTER._8W += REGISTER._6W; continue;
case INSTR_ADDWR8R7: REGISTER._8W += REGISTER._7W; continue;
case INSTR_ADDWR8R8: REGISTER._8W += REGISTER._8W; continue;
case INSTR_ADDWR8R9: REGISTER._8W += REGISTER._9W; continue;
case INSTR_ADDWR8R10: REGISTER._8W += REGISTER._10W; continue;
case INSTR_ADDWR8R11: REGISTER._8W += REGISTER._11W; continue;
case INSTR_ADDWR8R12: REGISTER._8W += REGISTER._12W; continue;
case INSTR_ADDWR8RIP: REGISTER._8W += REGISTER.IPW; continue;
case INSTR_ADDWR8RSP: REGISTER._8W += REGISTER.SPW; continue;
case INSTR_ADDWR8RBP: REGISTER._8W += REGISTER.BPW; continue;
case INSTR_ADDWR9I: REGISTER._9W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR9RA: REGISTER._9W += REGISTER.AW; continue;
case INSTR_ADDWR9RB: REGISTER._9W += REGISTER.BW; continue;
case INSTR_ADDWR9RC: REGISTER._9W += REGISTER.CW; continue;
case INSTR_ADDWR9RD: REGISTER._9W += REGISTER.DW; continue;
case INSTR_ADDWR9R0: REGISTER._9W += REGISTER._0W; continue;
case INSTR_ADDWR9R1: REGISTER._9W += REGISTER._1W; continue;
case INSTR_ADDWR9R2: REGISTER._9W += REGISTER._2W; continue;
case INSTR_ADDWR9R3: REGISTER._9W += REGISTER._3W; continue;
case INSTR_ADDWR9R4: REGISTER._9W += REGISTER._4W; continue;
case INSTR_ADDWR9R5: REGISTER._9W += REGISTER._5W; continue;
case INSTR_ADDWR9R6: REGISTER._9W += REGISTER._6W; continue;
case INSTR_ADDWR9R7: REGISTER._9W += REGISTER._7W; continue;
case INSTR_ADDWR9R8: REGISTER._9W += REGISTER._8W; continue;
case INSTR_ADDWR9R9: REGISTER._9W += REGISTER._9W; continue;
case INSTR_ADDWR9R10: REGISTER._9W += REGISTER._10W; continue;
case INSTR_ADDWR9R11: REGISTER._9W += REGISTER._11W; continue;
case INSTR_ADDWR9R12: REGISTER._9W += REGISTER._12W; continue;
case INSTR_ADDWR9RIP: REGISTER._9W += REGISTER.IPW; continue;
case INSTR_ADDWR9RSP: REGISTER._9W += REGISTER.SPW; continue;
case INSTR_ADDWR9RBP: REGISTER._9W += REGISTER.BPW; continue;
case INSTR_ADDWR10I: REGISTER._10W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR10RA: REGISTER._10W += REGISTER.AW; continue;
case INSTR_ADDWR10RB: REGISTER._10W += REGISTER.BW; continue;
case INSTR_ADDWR10RC: REGISTER._10W += REGISTER.CW; continue;
case INSTR_ADDWR10RD: REGISTER._10W += REGISTER.DW; continue;
case INSTR_ADDWR10R0: REGISTER._10W += REGISTER._0W; continue;
case INSTR_ADDWR10R1: REGISTER._10W += REGISTER._1W; continue;
case INSTR_ADDWR10R2: REGISTER._10W += REGISTER._2W; continue;
case INSTR_ADDWR10R3: REGISTER._10W += REGISTER._3W; continue;
case INSTR_ADDWR10R4: REGISTER._10W += REGISTER._4W; continue;
case INSTR_ADDWR10R5: REGISTER._10W += REGISTER._5W; continue;
case INSTR_ADDWR10R6: REGISTER._10W += REGISTER._6W; continue;
case INSTR_ADDWR10R7: REGISTER._10W += REGISTER._7W; continue;
case INSTR_ADDWR10R8: REGISTER._10W += REGISTER._8W; continue;
case INSTR_ADDWR10R9: REGISTER._10W += REGISTER._9W; continue;
case INSTR_ADDWR10R10: REGISTER._10W += REGISTER._10W; continue;
case INSTR_ADDWR10R11: REGISTER._10W += REGISTER._11W; continue;
case INSTR_ADDWR10R12: REGISTER._10W += REGISTER._12W; continue;
case INSTR_ADDWR10RIP: REGISTER._10W += REGISTER.IPW; continue;
case INSTR_ADDWR10RSP: REGISTER._10W += REGISTER.SPW; continue;
case INSTR_ADDWR10RBP: REGISTER._10W += REGISTER.BPW; continue;
case INSTR_ADDWR11I: REGISTER._11W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR11RA: REGISTER._11W += REGISTER.AW; continue;
case INSTR_ADDWR11RB: REGISTER._11W += REGISTER.BW; continue;
case INSTR_ADDWR11RC: REGISTER._11W += REGISTER.CW; continue;
case INSTR_ADDWR11RD: REGISTER._11W += REGISTER.DW; continue;
case INSTR_ADDWR11R0: REGISTER._11W += REGISTER._0W; continue;
case INSTR_ADDWR11R1: REGISTER._11W += REGISTER._1W; continue;
case INSTR_ADDWR11R2: REGISTER._11W += REGISTER._2W; continue;
case INSTR_ADDWR11R3: REGISTER._11W += REGISTER._3W; continue;
case INSTR_ADDWR11R4: REGISTER._11W += REGISTER._4W; continue;
case INSTR_ADDWR11R5: REGISTER._11W += REGISTER._5W; continue;
case INSTR_ADDWR11R6: REGISTER._11W += REGISTER._6W; continue;
case INSTR_ADDWR11R7: REGISTER._11W += REGISTER._7W; continue;
case INSTR_ADDWR11R8: REGISTER._11W += REGISTER._8W; continue;
case INSTR_ADDWR11R9: REGISTER._11W += REGISTER._9W; continue;
case INSTR_ADDWR11R10: REGISTER._11W += REGISTER._10W; continue;
case INSTR_ADDWR11R11: REGISTER._11W += REGISTER._11W; continue;
case INSTR_ADDWR11R12: REGISTER._11W += REGISTER._12W; continue;
case INSTR_ADDWR11RIP: REGISTER._11W += REGISTER.IPW; continue;
case INSTR_ADDWR11RSP: REGISTER._11W += REGISTER.SPW; continue;
case INSTR_ADDWR11RBP: REGISTER._11W += REGISTER.BPW; continue;
case INSTR_ADDWR12I: REGISTER._12W += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWR12RA: REGISTER._12W += REGISTER.AW; continue;
case INSTR_ADDWR12RB: REGISTER._12W += REGISTER.BW; continue;
case INSTR_ADDWR12RC: REGISTER._12W += REGISTER.CW; continue;
case INSTR_ADDWR12RD: REGISTER._12W += REGISTER.DW; continue;
case INSTR_ADDWR12R0: REGISTER._12W += REGISTER._0W; continue;
case INSTR_ADDWR12R1: REGISTER._12W += REGISTER._1W; continue;
case INSTR_ADDWR12R2: REGISTER._12W += REGISTER._2W; continue;
case INSTR_ADDWR12R3: REGISTER._12W += REGISTER._3W; continue;
case INSTR_ADDWR12R4: REGISTER._12W += REGISTER._4W; continue;
case INSTR_ADDWR12R5: REGISTER._12W += REGISTER._5W; continue;
case INSTR_ADDWR12R6: REGISTER._12W += REGISTER._6W; continue;
case INSTR_ADDWR12R7: REGISTER._12W += REGISTER._7W; continue;
case INSTR_ADDWR12R8: REGISTER._12W += REGISTER._8W; continue;
case INSTR_ADDWR12R9: REGISTER._12W += REGISTER._9W; continue;
case INSTR_ADDWR12R10: REGISTER._12W += REGISTER._10W; continue;
case INSTR_ADDWR12R11: REGISTER._12W += REGISTER._11W; continue;
case INSTR_ADDWR12R12: REGISTER._12W += REGISTER._12W; continue;
case INSTR_ADDWR12RIP: REGISTER._12W += REGISTER.IPW; continue;
case INSTR_ADDWR12RSP: REGISTER._12W += REGISTER.SPW; continue;
case INSTR_ADDWR12RBP: REGISTER._12W += REGISTER.BPW; continue;
case INSTR_ADDWRIPI: REGISTER.IPW += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWRIPRA: REGISTER.IPW += REGISTER.AW; continue;
case INSTR_ADDWRIPRB: REGISTER.IPW += REGISTER.BW; continue;
case INSTR_ADDWRIPRC: REGISTER.IPW += REGISTER.CW; continue;
case INSTR_ADDWRIPRD: REGISTER.IPW += REGISTER.DW; continue;
case INSTR_ADDWRIPR0: REGISTER.IPW += REGISTER._0W; continue;
case INSTR_ADDWRIPR1: REGISTER.IPW += REGISTER._1W; continue;
case INSTR_ADDWRIPR2: REGISTER.IPW += REGISTER._2W; continue;
case INSTR_ADDWRIPR3: REGISTER.IPW += REGISTER._3W; continue;
case INSTR_ADDWRIPR4: REGISTER.IPW += REGISTER._4W; continue;
case INSTR_ADDWRIPR5: REGISTER.IPW += REGISTER._5W; continue;
case INSTR_ADDWRIPR6: REGISTER.IPW += REGISTER._6W; continue;
case INSTR_ADDWRIPR7: REGISTER.IPW += REGISTER._7W; continue;
case INSTR_ADDWRIPR8: REGISTER.IPW += REGISTER._8W; continue;
case INSTR_ADDWRIPR9: REGISTER.IPW += REGISTER._9W; continue;
case INSTR_ADDWRIPR10: REGISTER.IPW += REGISTER._10W; continue;
case INSTR_ADDWRIPR11: REGISTER.IPW += REGISTER._11W; continue;
case INSTR_ADDWRIPR12: REGISTER.IPW += REGISTER._12W; continue;
case INSTR_ADDWRIPRIP: REGISTER.IPW += REGISTER.IPW; continue;
case INSTR_ADDWRIPRSP: REGISTER.IPW += REGISTER.SPW; continue;
case INSTR_ADDWRIPRBP: REGISTER.IPW += REGISTER.BPW; continue;
case INSTR_ADDWRSPI: REGISTER.SPW += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWRSPRA: REGISTER.SPW += REGISTER.AW; continue;
case INSTR_ADDWRSPRB: REGISTER.SPW += REGISTER.BW; continue;
case INSTR_ADDWRSPRC: REGISTER.SPW += REGISTER.CW; continue;
case INSTR_ADDWRSPRD: REGISTER.SPW += REGISTER.DW; continue;
case INSTR_ADDWRSPR0: REGISTER.SPW += REGISTER._0W; continue;
case INSTR_ADDWRSPR1: REGISTER.SPW += REGISTER._1W; continue;
case INSTR_ADDWRSPR2: REGISTER.SPW += REGISTER._2W; continue;
case INSTR_ADDWRSPR3: REGISTER.SPW += REGISTER._3W; continue;
case INSTR_ADDWRSPR4: REGISTER.SPW += REGISTER._4W; continue;
case INSTR_ADDWRSPR5: REGISTER.SPW += REGISTER._5W; continue;
case INSTR_ADDWRSPR6: REGISTER.SPW += REGISTER._6W; continue;
case INSTR_ADDWRSPR7: REGISTER.SPW += REGISTER._7W; continue;
case INSTR_ADDWRSPR8: REGISTER.SPW += REGISTER._8W; continue;
case INSTR_ADDWRSPR9: REGISTER.SPW += REGISTER._9W; continue;
case INSTR_ADDWRSPR10: REGISTER.SPW += REGISTER._10W; continue;
case INSTR_ADDWRSPR11: REGISTER.SPW += REGISTER._11W; continue;
case INSTR_ADDWRSPR12: REGISTER.SPW += REGISTER._12W; continue;
case INSTR_ADDWRSPRIP: REGISTER.SPW += REGISTER.IPW; continue;
case INSTR_ADDWRSPRSP: REGISTER.SPW += REGISTER.SPW; continue;
case INSTR_ADDWRSPRBP: REGISTER.SPW += REGISTER.BPW; continue;
case INSTR_ADDWRBPI: REGISTER.BPW += *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ADDWRBPRA: REGISTER.BPW += REGISTER.AW; continue;
case INSTR_ADDWRBPRB: REGISTER.BPW += REGISTER.BW; continue;
case INSTR_ADDWRBPRC: REGISTER.BPW += REGISTER.CW; continue;
case INSTR_ADDWRBPRD: REGISTER.BPW += REGISTER.DW; continue;
case INSTR_ADDWRBPR0: REGISTER.BPW += REGISTER._0W; continue;
case INSTR_ADDWRBPR1: REGISTER.BPW += REGISTER._1W; continue;
case INSTR_ADDWRBPR2: REGISTER.BPW += REGISTER._2W; continue;
case INSTR_ADDWRBPR3: REGISTER.BPW += REGISTER._3W; continue;
case INSTR_ADDWRBPR4: REGISTER.BPW += REGISTER._4W; continue;
case INSTR_ADDWRBPR5: REGISTER.BPW += REGISTER._5W; continue;
case INSTR_ADDWRBPR6: REGISTER.BPW += REGISTER._6W; continue;
case INSTR_ADDWRBPR7: REGISTER.BPW += REGISTER._7W; continue;
case INSTR_ADDWRBPR8: REGISTER.BPW += REGISTER._8W; continue;
case INSTR_ADDWRBPR9: REGISTER.BPW += REGISTER._9W; continue;
case INSTR_ADDWRBPR10: REGISTER.BPW += REGISTER._10W; continue;
case INSTR_ADDWRBPR11: REGISTER.BPW += REGISTER._11W; continue;
case INSTR_ADDWRBPR12: REGISTER.BPW += REGISTER._12W; continue;
case INSTR_ADDWRBPRIP: REGISTER.BPW += REGISTER.IPW; continue;
case INSTR_ADDWRBPRSP: REGISTER.BPW += REGISTER.SPW; continue;
case INSTR_ADDWRBPRBP: REGISTER.BPW += REGISTER.BPW; continue;
case INSTR_ADDBRAI: REGISTER.AB += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBRARA: REGISTER.AB += REGISTER.AB; continue;
case INSTR_ADDBRARB: REGISTER.AB += REGISTER.BB; continue;
case INSTR_ADDBRARC: REGISTER.AB += REGISTER.CB; continue;
case INSTR_ADDBRARD: REGISTER.AB += REGISTER.DB; continue;
case INSTR_ADDBRAR0: REGISTER.AB += REGISTER._0B; continue;
case INSTR_ADDBRAR1: REGISTER.AB += REGISTER._1B; continue;
case INSTR_ADDBRAR2: REGISTER.AB += REGISTER._2B; continue;
case INSTR_ADDBRAR3: REGISTER.AB += REGISTER._3B; continue;
case INSTR_ADDBRAR4: REGISTER.AB += REGISTER._4B; continue;
case INSTR_ADDBRAR5: REGISTER.AB += REGISTER._5B; continue;
case INSTR_ADDBRAR6: REGISTER.AB += REGISTER._6B; continue;
case INSTR_ADDBRAR7: REGISTER.AB += REGISTER._7B; continue;
case INSTR_ADDBRAR8: REGISTER.AB += REGISTER._8B; continue;
case INSTR_ADDBRAR9: REGISTER.AB += REGISTER._9B; continue;
case INSTR_ADDBRAR10: REGISTER.AB += REGISTER._10B; continue;
case INSTR_ADDBRAR11: REGISTER.AB += REGISTER._11B; continue;
case INSTR_ADDBRAR12: REGISTER.AB += REGISTER._12B; continue;
case INSTR_ADDBRARIP: REGISTER.AB += REGISTER.IPB; continue;
case INSTR_ADDBRARSP: REGISTER.AB += REGISTER.SPB; continue;
case INSTR_ADDBRARBP: REGISTER.AB += REGISTER.BPB; continue;
case INSTR_ADDBRBI: REGISTER.BB += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBRBRA: REGISTER.BB += REGISTER.AB; continue;
case INSTR_ADDBRBRB: REGISTER.BB += REGISTER.BB; continue;
case INSTR_ADDBRBRC: REGISTER.BB += REGISTER.CB; continue;
case INSTR_ADDBRBRD: REGISTER.BB += REGISTER.DB; continue;
case INSTR_ADDBRBR0: REGISTER.BB += REGISTER._0B; continue;
case INSTR_ADDBRBR1: REGISTER.BB += REGISTER._1B; continue;
case INSTR_ADDBRBR2: REGISTER.BB += REGISTER._2B; continue;
case INSTR_ADDBRBR3: REGISTER.BB += REGISTER._3B; continue;
case INSTR_ADDBRBR4: REGISTER.BB += REGISTER._4B; continue;
case INSTR_ADDBRBR5: REGISTER.BB += REGISTER._5B; continue;
case INSTR_ADDBRBR6: REGISTER.BB += REGISTER._6B; continue;
case INSTR_ADDBRBR7: REGISTER.BB += REGISTER._7B; continue;
case INSTR_ADDBRBR8: REGISTER.BB += REGISTER._8B; continue;
case INSTR_ADDBRBR9: REGISTER.BB += REGISTER._9B; continue;
case INSTR_ADDBRBR10: REGISTER.BB += REGISTER._10B; continue;
case INSTR_ADDBRBR11: REGISTER.BB += REGISTER._11B; continue;
case INSTR_ADDBRBR12: REGISTER.BB += REGISTER._12B; continue;
case INSTR_ADDBRBRIP: REGISTER.BB += REGISTER.IPB; continue;
case INSTR_ADDBRBRSP: REGISTER.BB += REGISTER.SPB; continue;
case INSTR_ADDBRBRBP: REGISTER.BB += REGISTER.BPB; continue;
case INSTR_ADDBRCI: REGISTER.CB += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBRCRA: REGISTER.CB += REGISTER.AB; continue;
case INSTR_ADDBRCRB: REGISTER.CB += REGISTER.BB; continue;
case INSTR_ADDBRCRC: REGISTER.CB += REGISTER.CB; continue;
case INSTR_ADDBRCRD: REGISTER.CB += REGISTER.DB; continue;
case INSTR_ADDBRCR0: REGISTER.CB += REGISTER._0B; continue;
case INSTR_ADDBRCR1: REGISTER.CB += REGISTER._1B; continue;
case INSTR_ADDBRCR2: REGISTER.CB += REGISTER._2B; continue;
case INSTR_ADDBRCR3: REGISTER.CB += REGISTER._3B; continue;
case INSTR_ADDBRCR4: REGISTER.CB += REGISTER._4B; continue;
case INSTR_ADDBRCR5: REGISTER.CB += REGISTER._5B; continue;
case INSTR_ADDBRCR6: REGISTER.CB += REGISTER._6B; continue;
case INSTR_ADDBRCR7: REGISTER.CB += REGISTER._7B; continue;
case INSTR_ADDBRCR8: REGISTER.CB += REGISTER._8B; continue;
case INSTR_ADDBRCR9: REGISTER.CB += REGISTER._9B; continue;
case INSTR_ADDBRCR10: REGISTER.CB += REGISTER._10B; continue;
case INSTR_ADDBRCR11: REGISTER.CB += REGISTER._11B; continue;
case INSTR_ADDBRCR12: REGISTER.CB += REGISTER._12B; continue;
case INSTR_ADDBRCRIP: REGISTER.CB += REGISTER.IPB; continue;
case INSTR_ADDBRCRSP: REGISTER.CB += REGISTER.SPB; continue;
case INSTR_ADDBRCRBP: REGISTER.CB += REGISTER.BPB; continue;
case INSTR_ADDBRDI: REGISTER.DB += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBRDRA: REGISTER.DB += REGISTER.AB; continue;
case INSTR_ADDBRDRB: REGISTER.DB += REGISTER.BB; continue;
case INSTR_ADDBRDRC: REGISTER.DB += REGISTER.CB; continue;
case INSTR_ADDBRDRD: REGISTER.DB += REGISTER.DB; continue;
case INSTR_ADDBRDR0: REGISTER.DB += REGISTER._0B; continue;
case INSTR_ADDBRDR1: REGISTER.DB += REGISTER._1B; continue;
case INSTR_ADDBRDR2: REGISTER.DB += REGISTER._2B; continue;
case INSTR_ADDBRDR3: REGISTER.DB += REGISTER._3B; continue;
case INSTR_ADDBRDR4: REGISTER.DB += REGISTER._4B; continue;
case INSTR_ADDBRDR5: REGISTER.DB += REGISTER._5B; continue;
case INSTR_ADDBRDR6: REGISTER.DB += REGISTER._6B; continue;
case INSTR_ADDBRDR7: REGISTER.DB += REGISTER._7B; continue;
case INSTR_ADDBRDR8: REGISTER.DB += REGISTER._8B; continue;
case INSTR_ADDBRDR9: REGISTER.DB += REGISTER._9B; continue;
case INSTR_ADDBRDR10: REGISTER.DB += REGISTER._10B; continue;
case INSTR_ADDBRDR11: REGISTER.DB += REGISTER._11B; continue;
case INSTR_ADDBRDR12: REGISTER.DB += REGISTER._12B; continue;
case INSTR_ADDBRDRIP: REGISTER.DB += REGISTER.IPB; continue;
case INSTR_ADDBRDRSP: REGISTER.DB += REGISTER.SPB; continue;
case INSTR_ADDBRDRBP: REGISTER.DB += REGISTER.BPB; continue;
case INSTR_ADDBR0I: REGISTER._0B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR0RA: REGISTER._0B += REGISTER.AB; continue;
case INSTR_ADDBR0RB: REGISTER._0B += REGISTER.BB; continue;
case INSTR_ADDBR0RC: REGISTER._0B += REGISTER.CB; continue;
case INSTR_ADDBR0RD: REGISTER._0B += REGISTER.DB; continue;
case INSTR_ADDBR0R0: REGISTER._0B += REGISTER._0B; continue;
case INSTR_ADDBR0R1: REGISTER._0B += REGISTER._1B; continue;
case INSTR_ADDBR0R2: REGISTER._0B += REGISTER._2B; continue;
case INSTR_ADDBR0R3: REGISTER._0B += REGISTER._3B; continue;
case INSTR_ADDBR0R4: REGISTER._0B += REGISTER._4B; continue;
case INSTR_ADDBR0R5: REGISTER._0B += REGISTER._5B; continue;
case INSTR_ADDBR0R6: REGISTER._0B += REGISTER._6B; continue;
case INSTR_ADDBR0R7: REGISTER._0B += REGISTER._7B; continue;
case INSTR_ADDBR0R8: REGISTER._0B += REGISTER._8B; continue;
case INSTR_ADDBR0R9: REGISTER._0B += REGISTER._9B; continue;
case INSTR_ADDBR0R10: REGISTER._0B += REGISTER._10B; continue;
case INSTR_ADDBR0R11: REGISTER._0B += REGISTER._11B; continue;
case INSTR_ADDBR0R12: REGISTER._0B += REGISTER._12B; continue;
case INSTR_ADDBR0RIP: REGISTER._0B += REGISTER.IPB; continue;
case INSTR_ADDBR0RSP: REGISTER._0B += REGISTER.SPB; continue;
case INSTR_ADDBR0RBP: REGISTER._0B += REGISTER.BPB; continue;
case INSTR_ADDBR1I: REGISTER._1B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR1RA: REGISTER._1B += REGISTER.AB; continue;
case INSTR_ADDBR1RB: REGISTER._1B += REGISTER.BB; continue;
case INSTR_ADDBR1RC: REGISTER._1B += REGISTER.CB; continue;
case INSTR_ADDBR1RD: REGISTER._1B += REGISTER.DB; continue;
case INSTR_ADDBR1R0: REGISTER._1B += REGISTER._0B; continue;
case INSTR_ADDBR1R1: REGISTER._1B += REGISTER._1B; continue;
case INSTR_ADDBR1R2: REGISTER._1B += REGISTER._2B; continue;
case INSTR_ADDBR1R3: REGISTER._1B += REGISTER._3B; continue;
case INSTR_ADDBR1R4: REGISTER._1B += REGISTER._4B; continue;
case INSTR_ADDBR1R5: REGISTER._1B += REGISTER._5B; continue;
case INSTR_ADDBR1R6: REGISTER._1B += REGISTER._6B; continue;
case INSTR_ADDBR1R7: REGISTER._1B += REGISTER._7B; continue;
case INSTR_ADDBR1R8: REGISTER._1B += REGISTER._8B; continue;
case INSTR_ADDBR1R9: REGISTER._1B += REGISTER._9B; continue;
case INSTR_ADDBR1R10: REGISTER._1B += REGISTER._10B; continue;
case INSTR_ADDBR1R11: REGISTER._1B += REGISTER._11B; continue;
case INSTR_ADDBR1R12: REGISTER._1B += REGISTER._12B; continue;
case INSTR_ADDBR1RIP: REGISTER._1B += REGISTER.IPB; continue;
case INSTR_ADDBR1RSP: REGISTER._1B += REGISTER.SPB; continue;
case INSTR_ADDBR1RBP: REGISTER._1B += REGISTER.BPB; continue;
case INSTR_ADDBR2I: REGISTER._2B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR2RA: REGISTER._2B += REGISTER.AB; continue;
case INSTR_ADDBR2RB: REGISTER._2B += REGISTER.BB; continue;
case INSTR_ADDBR2RC: REGISTER._2B += REGISTER.CB; continue;
case INSTR_ADDBR2RD: REGISTER._2B += REGISTER.DB; continue;
case INSTR_ADDBR2R0: REGISTER._2B += REGISTER._0B; continue;
case INSTR_ADDBR2R1: REGISTER._2B += REGISTER._1B; continue;
case INSTR_ADDBR2R2: REGISTER._2B += REGISTER._2B; continue;
case INSTR_ADDBR2R3: REGISTER._2B += REGISTER._3B; continue;
case INSTR_ADDBR2R4: REGISTER._2B += REGISTER._4B; continue;
case INSTR_ADDBR2R5: REGISTER._2B += REGISTER._5B; continue;
case INSTR_ADDBR2R6: REGISTER._2B += REGISTER._6B; continue;
case INSTR_ADDBR2R7: REGISTER._2B += REGISTER._7B; continue;
case INSTR_ADDBR2R8: REGISTER._2B += REGISTER._8B; continue;
case INSTR_ADDBR2R9: REGISTER._2B += REGISTER._9B; continue;
case INSTR_ADDBR2R10: REGISTER._2B += REGISTER._10B; continue;
case INSTR_ADDBR2R11: REGISTER._2B += REGISTER._11B; continue;
case INSTR_ADDBR2R12: REGISTER._2B += REGISTER._12B; continue;
case INSTR_ADDBR2RIP: REGISTER._2B += REGISTER.IPB; continue;
case INSTR_ADDBR2RSP: REGISTER._2B += REGISTER.SPB; continue;
case INSTR_ADDBR2RBP: REGISTER._2B += REGISTER.BPB; continue;
case INSTR_ADDBR3I: REGISTER._3B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR3RA: REGISTER._3B += REGISTER.AB; continue;
case INSTR_ADDBR3RB: REGISTER._3B += REGISTER.BB; continue;
case INSTR_ADDBR3RC: REGISTER._3B += REGISTER.CB; continue;
case INSTR_ADDBR3RD: REGISTER._3B += REGISTER.DB; continue;
case INSTR_ADDBR3R0: REGISTER._3B += REGISTER._0B; continue;
case INSTR_ADDBR3R1: REGISTER._3B += REGISTER._1B; continue;
case INSTR_ADDBR3R2: REGISTER._3B += REGISTER._2B; continue;
case INSTR_ADDBR3R3: REGISTER._3B += REGISTER._3B; continue;
case INSTR_ADDBR3R4: REGISTER._3B += REGISTER._4B; continue;
case INSTR_ADDBR3R5: REGISTER._3B += REGISTER._5B; continue;
case INSTR_ADDBR3R6: REGISTER._3B += REGISTER._6B; continue;
case INSTR_ADDBR3R7: REGISTER._3B += REGISTER._7B; continue;
case INSTR_ADDBR3R8: REGISTER._3B += REGISTER._8B; continue;
case INSTR_ADDBR3R9: REGISTER._3B += REGISTER._9B; continue;
case INSTR_ADDBR3R10: REGISTER._3B += REGISTER._10B; continue;
case INSTR_ADDBR3R11: REGISTER._3B += REGISTER._11B; continue;
case INSTR_ADDBR3R12: REGISTER._3B += REGISTER._12B; continue;
case INSTR_ADDBR3RIP: REGISTER._3B += REGISTER.IPB; continue;
case INSTR_ADDBR3RSP: REGISTER._3B += REGISTER.SPB; continue;
case INSTR_ADDBR3RBP: REGISTER._3B += REGISTER.BPB; continue;
case INSTR_ADDBR4I: REGISTER._4B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR4RA: REGISTER._4B += REGISTER.AB; continue;
case INSTR_ADDBR4RB: REGISTER._4B += REGISTER.BB; continue;
case INSTR_ADDBR4RC: REGISTER._4B += REGISTER.CB; continue;
case INSTR_ADDBR4RD: REGISTER._4B += REGISTER.DB; continue;
case INSTR_ADDBR4R0: REGISTER._4B += REGISTER._0B; continue;
case INSTR_ADDBR4R1: REGISTER._4B += REGISTER._1B; continue;
case INSTR_ADDBR4R2: REGISTER._4B += REGISTER._2B; continue;
case INSTR_ADDBR4R3: REGISTER._4B += REGISTER._3B; continue;
case INSTR_ADDBR4R4: REGISTER._4B += REGISTER._4B; continue;
case INSTR_ADDBR4R5: REGISTER._4B += REGISTER._5B; continue;
case INSTR_ADDBR4R6: REGISTER._4B += REGISTER._6B; continue;
case INSTR_ADDBR4R7: REGISTER._4B += REGISTER._7B; continue;
case INSTR_ADDBR4R8: REGISTER._4B += REGISTER._8B; continue;
case INSTR_ADDBR4R9: REGISTER._4B += REGISTER._9B; continue;
case INSTR_ADDBR4R10: REGISTER._4B += REGISTER._10B; continue;
case INSTR_ADDBR4R11: REGISTER._4B += REGISTER._11B; continue;
case INSTR_ADDBR4R12: REGISTER._4B += REGISTER._12B; continue;
case INSTR_ADDBR4RIP: REGISTER._4B += REGISTER.IPB; continue;
case INSTR_ADDBR4RSP: REGISTER._4B += REGISTER.SPB; continue;
case INSTR_ADDBR4RBP: REGISTER._4B += REGISTER.BPB; continue;
case INSTR_ADDBR5I: REGISTER._5B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR5RA: REGISTER._5B += REGISTER.AB; continue;
case INSTR_ADDBR5RB: REGISTER._5B += REGISTER.BB; continue;
case INSTR_ADDBR5RC: REGISTER._5B += REGISTER.CB; continue;
case INSTR_ADDBR5RD: REGISTER._5B += REGISTER.DB; continue;
case INSTR_ADDBR5R0: REGISTER._5B += REGISTER._0B; continue;
case INSTR_ADDBR5R1: REGISTER._5B += REGISTER._1B; continue;
case INSTR_ADDBR5R2: REGISTER._5B += REGISTER._2B; continue;
case INSTR_ADDBR5R3: REGISTER._5B += REGISTER._3B; continue;
case INSTR_ADDBR5R4: REGISTER._5B += REGISTER._4B; continue;
case INSTR_ADDBR5R5: REGISTER._5B += REGISTER._5B; continue;
case INSTR_ADDBR5R6: REGISTER._5B += REGISTER._6B; continue;
case INSTR_ADDBR5R7: REGISTER._5B += REGISTER._7B; continue;
case INSTR_ADDBR5R8: REGISTER._5B += REGISTER._8B; continue;
case INSTR_ADDBR5R9: REGISTER._5B += REGISTER._9B; continue;
case INSTR_ADDBR5R10: REGISTER._5B += REGISTER._10B; continue;
case INSTR_ADDBR5R11: REGISTER._5B += REGISTER._11B; continue;
case INSTR_ADDBR5R12: REGISTER._5B += REGISTER._12B; continue;
case INSTR_ADDBR5RIP: REGISTER._5B += REGISTER.IPB; continue;
case INSTR_ADDBR5RSP: REGISTER._5B += REGISTER.SPB; continue;
case INSTR_ADDBR5RBP: REGISTER._5B += REGISTER.BPB; continue;
case INSTR_ADDBR6I: REGISTER._6B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR6RA: REGISTER._6B += REGISTER.AB; continue;
case INSTR_ADDBR6RB: REGISTER._6B += REGISTER.BB; continue;
case INSTR_ADDBR6RC: REGISTER._6B += REGISTER.CB; continue;
case INSTR_ADDBR6RD: REGISTER._6B += REGISTER.DB; continue;
case INSTR_ADDBR6R0: REGISTER._6B += REGISTER._0B; continue;
case INSTR_ADDBR6R1: REGISTER._6B += REGISTER._1B; continue;
case INSTR_ADDBR6R2: REGISTER._6B += REGISTER._2B; continue;
case INSTR_ADDBR6R3: REGISTER._6B += REGISTER._3B; continue;
case INSTR_ADDBR6R4: REGISTER._6B += REGISTER._4B; continue;
case INSTR_ADDBR6R5: REGISTER._6B += REGISTER._5B; continue;
case INSTR_ADDBR6R6: REGISTER._6B += REGISTER._6B; continue;
case INSTR_ADDBR6R7: REGISTER._6B += REGISTER._7B; continue;
case INSTR_ADDBR6R8: REGISTER._6B += REGISTER._8B; continue;
case INSTR_ADDBR6R9: REGISTER._6B += REGISTER._9B; continue;
case INSTR_ADDBR6R10: REGISTER._6B += REGISTER._10B; continue;
case INSTR_ADDBR6R11: REGISTER._6B += REGISTER._11B; continue;
case INSTR_ADDBR6R12: REGISTER._6B += REGISTER._12B; continue;
case INSTR_ADDBR6RIP: REGISTER._6B += REGISTER.IPB; continue;
case INSTR_ADDBR6RSP: REGISTER._6B += REGISTER.SPB; continue;
case INSTR_ADDBR6RBP: REGISTER._6B += REGISTER.BPB; continue;
case INSTR_ADDBR7I: REGISTER._7B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR7RA: REGISTER._7B += REGISTER.AB; continue;
case INSTR_ADDBR7RB: REGISTER._7B += REGISTER.BB; continue;
case INSTR_ADDBR7RC: REGISTER._7B += REGISTER.CB; continue;
case INSTR_ADDBR7RD: REGISTER._7B += REGISTER.DB; continue;
case INSTR_ADDBR7R0: REGISTER._7B += REGISTER._0B; continue;
case INSTR_ADDBR7R1: REGISTER._7B += REGISTER._1B; continue;
case INSTR_ADDBR7R2: REGISTER._7B += REGISTER._2B; continue;
case INSTR_ADDBR7R3: REGISTER._7B += REGISTER._3B; continue;
case INSTR_ADDBR7R4: REGISTER._7B += REGISTER._4B; continue;
case INSTR_ADDBR7R5: REGISTER._7B += REGISTER._5B; continue;
case INSTR_ADDBR7R6: REGISTER._7B += REGISTER._6B; continue;
case INSTR_ADDBR7R7: REGISTER._7B += REGISTER._7B; continue;
case INSTR_ADDBR7R8: REGISTER._7B += REGISTER._8B; continue;
case INSTR_ADDBR7R9: REGISTER._7B += REGISTER._9B; continue;
case INSTR_ADDBR7R10: REGISTER._7B += REGISTER._10B; continue;
case INSTR_ADDBR7R11: REGISTER._7B += REGISTER._11B; continue;
case INSTR_ADDBR7R12: REGISTER._7B += REGISTER._12B; continue;
case INSTR_ADDBR7RIP: REGISTER._7B += REGISTER.IPB; continue;
case INSTR_ADDBR7RSP: REGISTER._7B += REGISTER.SPB; continue;
case INSTR_ADDBR7RBP: REGISTER._7B += REGISTER.BPB; continue;
case INSTR_ADDBR8I: REGISTER._8B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR8RA: REGISTER._8B += REGISTER.AB; continue;
case INSTR_ADDBR8RB: REGISTER._8B += REGISTER.BB; continue;
case INSTR_ADDBR8RC: REGISTER._8B += REGISTER.CB; continue;
case INSTR_ADDBR8RD: REGISTER._8B += REGISTER.DB; continue;
case INSTR_ADDBR8R0: REGISTER._8B += REGISTER._0B; continue;
case INSTR_ADDBR8R1: REGISTER._8B += REGISTER._1B; continue;
case INSTR_ADDBR8R2: REGISTER._8B += REGISTER._2B; continue;
case INSTR_ADDBR8R3: REGISTER._8B += REGISTER._3B; continue;
case INSTR_ADDBR8R4: REGISTER._8B += REGISTER._4B; continue;
case INSTR_ADDBR8R5: REGISTER._8B += REGISTER._5B; continue;
case INSTR_ADDBR8R6: REGISTER._8B += REGISTER._6B; continue;
case INSTR_ADDBR8R7: REGISTER._8B += REGISTER._7B; continue;
case INSTR_ADDBR8R8: REGISTER._8B += REGISTER._8B; continue;
case INSTR_ADDBR8R9: REGISTER._8B += REGISTER._9B; continue;
case INSTR_ADDBR8R10: REGISTER._8B += REGISTER._10B; continue;
case INSTR_ADDBR8R11: REGISTER._8B += REGISTER._11B; continue;
case INSTR_ADDBR8R12: REGISTER._8B += REGISTER._12B; continue;
case INSTR_ADDBR8RIP: REGISTER._8B += REGISTER.IPB; continue;
case INSTR_ADDBR8RSP: REGISTER._8B += REGISTER.SPB; continue;
case INSTR_ADDBR8RBP: REGISTER._8B += REGISTER.BPB; continue;
case INSTR_ADDBR9I: REGISTER._9B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR9RA: REGISTER._9B += REGISTER.AB; continue;
case INSTR_ADDBR9RB: REGISTER._9B += REGISTER.BB; continue;
case INSTR_ADDBR9RC: REGISTER._9B += REGISTER.CB; continue;
case INSTR_ADDBR9RD: REGISTER._9B += REGISTER.DB; continue;
case INSTR_ADDBR9R0: REGISTER._9B += REGISTER._0B; continue;
case INSTR_ADDBR9R1: REGISTER._9B += REGISTER._1B; continue;
case INSTR_ADDBR9R2: REGISTER._9B += REGISTER._2B; continue;
case INSTR_ADDBR9R3: REGISTER._9B += REGISTER._3B; continue;
case INSTR_ADDBR9R4: REGISTER._9B += REGISTER._4B; continue;
case INSTR_ADDBR9R5: REGISTER._9B += REGISTER._5B; continue;
case INSTR_ADDBR9R6: REGISTER._9B += REGISTER._6B; continue;
case INSTR_ADDBR9R7: REGISTER._9B += REGISTER._7B; continue;
case INSTR_ADDBR9R8: REGISTER._9B += REGISTER._8B; continue;
case INSTR_ADDBR9R9: REGISTER._9B += REGISTER._9B; continue;
case INSTR_ADDBR9R10: REGISTER._9B += REGISTER._10B; continue;
case INSTR_ADDBR9R11: REGISTER._9B += REGISTER._11B; continue;
case INSTR_ADDBR9R12: REGISTER._9B += REGISTER._12B; continue;
case INSTR_ADDBR9RIP: REGISTER._9B += REGISTER.IPB; continue;
case INSTR_ADDBR9RSP: REGISTER._9B += REGISTER.SPB; continue;
case INSTR_ADDBR9RBP: REGISTER._9B += REGISTER.BPB; continue;
case INSTR_ADDBR10I: REGISTER._10B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR10RA: REGISTER._10B += REGISTER.AB; continue;
case INSTR_ADDBR10RB: REGISTER._10B += REGISTER.BB; continue;
case INSTR_ADDBR10RC: REGISTER._10B += REGISTER.CB; continue;
case INSTR_ADDBR10RD: REGISTER._10B += REGISTER.DB; continue;
case INSTR_ADDBR10R0: REGISTER._10B += REGISTER._0B; continue;
case INSTR_ADDBR10R1: REGISTER._10B += REGISTER._1B; continue;
case INSTR_ADDBR10R2: REGISTER._10B += REGISTER._2B; continue;
case INSTR_ADDBR10R3: REGISTER._10B += REGISTER._3B; continue;
case INSTR_ADDBR10R4: REGISTER._10B += REGISTER._4B; continue;
case INSTR_ADDBR10R5: REGISTER._10B += REGISTER._5B; continue;
case INSTR_ADDBR10R6: REGISTER._10B += REGISTER._6B; continue;
case INSTR_ADDBR10R7: REGISTER._10B += REGISTER._7B; continue;
case INSTR_ADDBR10R8: REGISTER._10B += REGISTER._8B; continue;
case INSTR_ADDBR10R9: REGISTER._10B += REGISTER._9B; continue;
case INSTR_ADDBR10R10: REGISTER._10B += REGISTER._10B; continue;
case INSTR_ADDBR10R11: REGISTER._10B += REGISTER._11B; continue;
case INSTR_ADDBR10R12: REGISTER._10B += REGISTER._12B; continue;
case INSTR_ADDBR10RIP: REGISTER._10B += REGISTER.IPB; continue;
case INSTR_ADDBR10RSP: REGISTER._10B += REGISTER.SPB; continue;
case INSTR_ADDBR10RBP: REGISTER._10B += REGISTER.BPB; continue;
case INSTR_ADDBR11I: REGISTER._11B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR11RA: REGISTER._11B += REGISTER.AB; continue;
case INSTR_ADDBR11RB: REGISTER._11B += REGISTER.BB; continue;
case INSTR_ADDBR11RC: REGISTER._11B += REGISTER.CB; continue;
case INSTR_ADDBR11RD: REGISTER._11B += REGISTER.DB; continue;
case INSTR_ADDBR11R0: REGISTER._11B += REGISTER._0B; continue;
case INSTR_ADDBR11R1: REGISTER._11B += REGISTER._1B; continue;
case INSTR_ADDBR11R2: REGISTER._11B += REGISTER._2B; continue;
case INSTR_ADDBR11R3: REGISTER._11B += REGISTER._3B; continue;
case INSTR_ADDBR11R4: REGISTER._11B += REGISTER._4B; continue;
case INSTR_ADDBR11R5: REGISTER._11B += REGISTER._5B; continue;
case INSTR_ADDBR11R6: REGISTER._11B += REGISTER._6B; continue;
case INSTR_ADDBR11R7: REGISTER._11B += REGISTER._7B; continue;
case INSTR_ADDBR11R8: REGISTER._11B += REGISTER._8B; continue;
case INSTR_ADDBR11R9: REGISTER._11B += REGISTER._9B; continue;
case INSTR_ADDBR11R10: REGISTER._11B += REGISTER._10B; continue;
case INSTR_ADDBR11R11: REGISTER._11B += REGISTER._11B; continue;
case INSTR_ADDBR11R12: REGISTER._11B += REGISTER._12B; continue;
case INSTR_ADDBR11RIP: REGISTER._11B += REGISTER.IPB; continue;
case INSTR_ADDBR11RSP: REGISTER._11B += REGISTER.SPB; continue;
case INSTR_ADDBR11RBP: REGISTER._11B += REGISTER.BPB; continue;
case INSTR_ADDBR12I: REGISTER._12B += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBR12RA: REGISTER._12B += REGISTER.AB; continue;
case INSTR_ADDBR12RB: REGISTER._12B += REGISTER.BB; continue;
case INSTR_ADDBR12RC: REGISTER._12B += REGISTER.CB; continue;
case INSTR_ADDBR12RD: REGISTER._12B += REGISTER.DB; continue;
case INSTR_ADDBR12R0: REGISTER._12B += REGISTER._0B; continue;
case INSTR_ADDBR12R1: REGISTER._12B += REGISTER._1B; continue;
case INSTR_ADDBR12R2: REGISTER._12B += REGISTER._2B; continue;
case INSTR_ADDBR12R3: REGISTER._12B += REGISTER._3B; continue;
case INSTR_ADDBR12R4: REGISTER._12B += REGISTER._4B; continue;
case INSTR_ADDBR12R5: REGISTER._12B += REGISTER._5B; continue;
case INSTR_ADDBR12R6: REGISTER._12B += REGISTER._6B; continue;
case INSTR_ADDBR12R7: REGISTER._12B += REGISTER._7B; continue;
case INSTR_ADDBR12R8: REGISTER._12B += REGISTER._8B; continue;
case INSTR_ADDBR12R9: REGISTER._12B += REGISTER._9B; continue;
case INSTR_ADDBR12R10: REGISTER._12B += REGISTER._10B; continue;
case INSTR_ADDBR12R11: REGISTER._12B += REGISTER._11B; continue;
case INSTR_ADDBR12R12: REGISTER._12B += REGISTER._12B; continue;
case INSTR_ADDBR12RIP: REGISTER._12B += REGISTER.IPB; continue;
case INSTR_ADDBR12RSP: REGISTER._12B += REGISTER.SPB; continue;
case INSTR_ADDBR12RBP: REGISTER._12B += REGISTER.BPB; continue;
case INSTR_ADDBRIPI: REGISTER.IPB += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBRIPRA: REGISTER.IPB += REGISTER.AB; continue;
case INSTR_ADDBRIPRB: REGISTER.IPB += REGISTER.BB; continue;
case INSTR_ADDBRIPRC: REGISTER.IPB += REGISTER.CB; continue;
case INSTR_ADDBRIPRD: REGISTER.IPB += REGISTER.DB; continue;
case INSTR_ADDBRIPR0: REGISTER.IPB += REGISTER._0B; continue;
case INSTR_ADDBRIPR1: REGISTER.IPB += REGISTER._1B; continue;
case INSTR_ADDBRIPR2: REGISTER.IPB += REGISTER._2B; continue;
case INSTR_ADDBRIPR3: REGISTER.IPB += REGISTER._3B; continue;
case INSTR_ADDBRIPR4: REGISTER.IPB += REGISTER._4B; continue;
case INSTR_ADDBRIPR5: REGISTER.IPB += REGISTER._5B; continue;
case INSTR_ADDBRIPR6: REGISTER.IPB += REGISTER._6B; continue;
case INSTR_ADDBRIPR7: REGISTER.IPB += REGISTER._7B; continue;
case INSTR_ADDBRIPR8: REGISTER.IPB += REGISTER._8B; continue;
case INSTR_ADDBRIPR9: REGISTER.IPB += REGISTER._9B; continue;
case INSTR_ADDBRIPR10: REGISTER.IPB += REGISTER._10B; continue;
case INSTR_ADDBRIPR11: REGISTER.IPB += REGISTER._11B; continue;
case INSTR_ADDBRIPR12: REGISTER.IPB += REGISTER._12B; continue;
case INSTR_ADDBRIPRIP: REGISTER.IPB += REGISTER.IPB; continue;
case INSTR_ADDBRIPRSP: REGISTER.IPB += REGISTER.SPB; continue;
case INSTR_ADDBRIPRBP: REGISTER.IPB += REGISTER.BPB; continue;
case INSTR_ADDBRSPI: REGISTER.SPB += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBRSPRA: REGISTER.SPB += REGISTER.AB; continue;
case INSTR_ADDBRSPRB: REGISTER.SPB += REGISTER.BB; continue;
case INSTR_ADDBRSPRC: REGISTER.SPB += REGISTER.CB; continue;
case INSTR_ADDBRSPRD: REGISTER.SPB += REGISTER.DB; continue;
case INSTR_ADDBRSPR0: REGISTER.SPB += REGISTER._0B; continue;
case INSTR_ADDBRSPR1: REGISTER.SPB += REGISTER._1B; continue;
case INSTR_ADDBRSPR2: REGISTER.SPB += REGISTER._2B; continue;
case INSTR_ADDBRSPR3: REGISTER.SPB += REGISTER._3B; continue;
case INSTR_ADDBRSPR4: REGISTER.SPB += REGISTER._4B; continue;
case INSTR_ADDBRSPR5: REGISTER.SPB += REGISTER._5B; continue;
case INSTR_ADDBRSPR6: REGISTER.SPB += REGISTER._6B; continue;
case INSTR_ADDBRSPR7: REGISTER.SPB += REGISTER._7B; continue;
case INSTR_ADDBRSPR8: REGISTER.SPB += REGISTER._8B; continue;
case INSTR_ADDBRSPR9: REGISTER.SPB += REGISTER._9B; continue;
case INSTR_ADDBRSPR10: REGISTER.SPB += REGISTER._10B; continue;
case INSTR_ADDBRSPR11: REGISTER.SPB += REGISTER._11B; continue;
case INSTR_ADDBRSPR12: REGISTER.SPB += REGISTER._12B; continue;
case INSTR_ADDBRSPRIP: REGISTER.SPB += REGISTER.IPB; continue;
case INSTR_ADDBRSPRSP: REGISTER.SPB += REGISTER.SPB; continue;
case INSTR_ADDBRSPRBP: REGISTER.SPB += REGISTER.BPB; continue;
case INSTR_ADDBRBPI: REGISTER.BPB += *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ADDBRBPRA: REGISTER.BPB += REGISTER.AB; continue;
case INSTR_ADDBRBPRB: REGISTER.BPB += REGISTER.BB; continue;
case INSTR_ADDBRBPRC: REGISTER.BPB += REGISTER.CB; continue;
case INSTR_ADDBRBPRD: REGISTER.BPB += REGISTER.DB; continue;
case INSTR_ADDBRBPR0: REGISTER.BPB += REGISTER._0B; continue;
case INSTR_ADDBRBPR1: REGISTER.BPB += REGISTER._1B; continue;
case INSTR_ADDBRBPR2: REGISTER.BPB += REGISTER._2B; continue;
case INSTR_ADDBRBPR3: REGISTER.BPB += REGISTER._3B; continue;
case INSTR_ADDBRBPR4: REGISTER.BPB += REGISTER._4B; continue;
case INSTR_ADDBRBPR5: REGISTER.BPB += REGISTER._5B; continue;
case INSTR_ADDBRBPR6: REGISTER.BPB += REGISTER._6B; continue;
case INSTR_ADDBRBPR7: REGISTER.BPB += REGISTER._7B; continue;
case INSTR_ADDBRBPR8: REGISTER.BPB += REGISTER._8B; continue;
case INSTR_ADDBRBPR9: REGISTER.BPB += REGISTER._9B; continue;
case INSTR_ADDBRBPR10: REGISTER.BPB += REGISTER._10B; continue;
case INSTR_ADDBRBPR11: REGISTER.BPB += REGISTER._11B; continue;
case INSTR_ADDBRBPR12: REGISTER.BPB += REGISTER._12B; continue;
case INSTR_ADDBRBPRIP: REGISTER.BPB += REGISTER.IPB; continue;
case INSTR_ADDBRBPRSP: REGISTER.BPB += REGISTER.SPB; continue;
case INSTR_ADDBRBPRBP: REGISTER.BPB += REGISTER.BPB; continue;
case INSTR_SUBQRAI: REGISTER.AQ -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQRARA: REGISTER.AQ -= REGISTER.AQ; continue;
case INSTR_SUBQRARB: REGISTER.AQ -= REGISTER.BQ; continue;
case INSTR_SUBQRARC: REGISTER.AQ -= REGISTER.CQ; continue;
case INSTR_SUBQRARD: REGISTER.AQ -= REGISTER.DQ; continue;
case INSTR_SUBQRAR0: REGISTER.AQ -= REGISTER._0Q; continue;
case INSTR_SUBQRAR1: REGISTER.AQ -= REGISTER._1Q; continue;
case INSTR_SUBQRAR2: REGISTER.AQ -= REGISTER._2Q; continue;
case INSTR_SUBQRAR3: REGISTER.AQ -= REGISTER._3Q; continue;
case INSTR_SUBQRAR4: REGISTER.AQ -= REGISTER._4Q; continue;
case INSTR_SUBQRAR5: REGISTER.AQ -= REGISTER._5Q; continue;
case INSTR_SUBQRAR6: REGISTER.AQ -= REGISTER._6Q; continue;
case INSTR_SUBQRAR7: REGISTER.AQ -= REGISTER._7Q; continue;
case INSTR_SUBQRAR8: REGISTER.AQ -= REGISTER._8Q; continue;
case INSTR_SUBQRAR9: REGISTER.AQ -= REGISTER._9Q; continue;
case INSTR_SUBQRAR10: REGISTER.AQ -= REGISTER._10Q; continue;
case INSTR_SUBQRAR11: REGISTER.AQ -= REGISTER._11Q; continue;
case INSTR_SUBQRAR12: REGISTER.AQ -= REGISTER._12Q; continue;
case INSTR_SUBQRARIP: REGISTER.AQ -= REGISTER.IPQ; continue;
case INSTR_SUBQRARSP: REGISTER.AQ -= REGISTER.SPQ; continue;
case INSTR_SUBQRARBP: REGISTER.AQ -= REGISTER.BPQ; continue;
case INSTR_SUBQRBI: REGISTER.BQ -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQRBRA: REGISTER.BQ -= REGISTER.AQ; continue;
case INSTR_SUBQRBRB: REGISTER.BQ -= REGISTER.BQ; continue;
case INSTR_SUBQRBRC: REGISTER.BQ -= REGISTER.CQ; continue;
case INSTR_SUBQRBRD: REGISTER.BQ -= REGISTER.DQ; continue;
case INSTR_SUBQRBR0: REGISTER.BQ -= REGISTER._0Q; continue;
case INSTR_SUBQRBR1: REGISTER.BQ -= REGISTER._1Q; continue;
case INSTR_SUBQRBR2: REGISTER.BQ -= REGISTER._2Q; continue;
case INSTR_SUBQRBR3: REGISTER.BQ -= REGISTER._3Q; continue;
case INSTR_SUBQRBR4: REGISTER.BQ -= REGISTER._4Q; continue;
case INSTR_SUBQRBR5: REGISTER.BQ -= REGISTER._5Q; continue;
case INSTR_SUBQRBR6: REGISTER.BQ -= REGISTER._6Q; continue;
case INSTR_SUBQRBR7: REGISTER.BQ -= REGISTER._7Q; continue;
case INSTR_SUBQRBR8: REGISTER.BQ -= REGISTER._8Q; continue;
case INSTR_SUBQRBR9: REGISTER.BQ -= REGISTER._9Q; continue;
case INSTR_SUBQRBR10: REGISTER.BQ -= REGISTER._10Q; continue;
case INSTR_SUBQRBR11: REGISTER.BQ -= REGISTER._11Q; continue;
case INSTR_SUBQRBR12: REGISTER.BQ -= REGISTER._12Q; continue;
case INSTR_SUBQRBRIP: REGISTER.BQ -= REGISTER.IPQ; continue;
case INSTR_SUBQRBRSP: REGISTER.BQ -= REGISTER.SPQ; continue;
case INSTR_SUBQRBRBP: REGISTER.BQ -= REGISTER.BPQ; continue;
case INSTR_SUBQRCI: REGISTER.CQ -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQRCRA: REGISTER.CQ -= REGISTER.AQ; continue;
case INSTR_SUBQRCRB: REGISTER.CQ -= REGISTER.BQ; continue;
case INSTR_SUBQRCRC: REGISTER.CQ -= REGISTER.CQ; continue;
case INSTR_SUBQRCRD: REGISTER.CQ -= REGISTER.DQ; continue;
case INSTR_SUBQRCR0: REGISTER.CQ -= REGISTER._0Q; continue;
case INSTR_SUBQRCR1: REGISTER.CQ -= REGISTER._1Q; continue;
case INSTR_SUBQRCR2: REGISTER.CQ -= REGISTER._2Q; continue;
case INSTR_SUBQRCR3: REGISTER.CQ -= REGISTER._3Q; continue;
case INSTR_SUBQRCR4: REGISTER.CQ -= REGISTER._4Q; continue;
case INSTR_SUBQRCR5: REGISTER.CQ -= REGISTER._5Q; continue;
case INSTR_SUBQRCR6: REGISTER.CQ -= REGISTER._6Q; continue;
case INSTR_SUBQRCR7: REGISTER.CQ -= REGISTER._7Q; continue;
case INSTR_SUBQRCR8: REGISTER.CQ -= REGISTER._8Q; continue;
case INSTR_SUBQRCR9: REGISTER.CQ -= REGISTER._9Q; continue;
case INSTR_SUBQRCR10: REGISTER.CQ -= REGISTER._10Q; continue;
case INSTR_SUBQRCR11: REGISTER.CQ -= REGISTER._11Q; continue;
case INSTR_SUBQRCR12: REGISTER.CQ -= REGISTER._12Q; continue;
case INSTR_SUBQRCRIP: REGISTER.CQ -= REGISTER.IPQ; continue;
case INSTR_SUBQRCRSP: REGISTER.CQ -= REGISTER.SPQ; continue;
case INSTR_SUBQRCRBP: REGISTER.CQ -= REGISTER.BPQ; continue;
case INSTR_SUBQRDI: REGISTER.DQ -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQRDRA: REGISTER.DQ -= REGISTER.AQ; continue;
case INSTR_SUBQRDRB: REGISTER.DQ -= REGISTER.BQ; continue;
case INSTR_SUBQRDRC: REGISTER.DQ -= REGISTER.CQ; continue;
case INSTR_SUBQRDRD: REGISTER.DQ -= REGISTER.DQ; continue;
case INSTR_SUBQRDR0: REGISTER.DQ -= REGISTER._0Q; continue;
case INSTR_SUBQRDR1: REGISTER.DQ -= REGISTER._1Q; continue;
case INSTR_SUBQRDR2: REGISTER.DQ -= REGISTER._2Q; continue;
case INSTR_SUBQRDR3: REGISTER.DQ -= REGISTER._3Q; continue;
case INSTR_SUBQRDR4: REGISTER.DQ -= REGISTER._4Q; continue;
case INSTR_SUBQRDR5: REGISTER.DQ -= REGISTER._5Q; continue;
case INSTR_SUBQRDR6: REGISTER.DQ -= REGISTER._6Q; continue;
case INSTR_SUBQRDR7: REGISTER.DQ -= REGISTER._7Q; continue;
case INSTR_SUBQRDR8: REGISTER.DQ -= REGISTER._8Q; continue;
case INSTR_SUBQRDR9: REGISTER.DQ -= REGISTER._9Q; continue;
case INSTR_SUBQRDR10: REGISTER.DQ -= REGISTER._10Q; continue;
case INSTR_SUBQRDR11: REGISTER.DQ -= REGISTER._11Q; continue;
case INSTR_SUBQRDR12: REGISTER.DQ -= REGISTER._12Q; continue;
case INSTR_SUBQRDRIP: REGISTER.DQ -= REGISTER.IPQ; continue;
case INSTR_SUBQRDRSP: REGISTER.DQ -= REGISTER.SPQ; continue;
case INSTR_SUBQRDRBP: REGISTER.DQ -= REGISTER.BPQ; continue;
case INSTR_SUBQR0I: REGISTER._0Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR0RA: REGISTER._0Q -= REGISTER.AQ; continue;
case INSTR_SUBQR0RB: REGISTER._0Q -= REGISTER.BQ; continue;
case INSTR_SUBQR0RC: REGISTER._0Q -= REGISTER.CQ; continue;
case INSTR_SUBQR0RD: REGISTER._0Q -= REGISTER.DQ; continue;
case INSTR_SUBQR0R0: REGISTER._0Q -= REGISTER._0Q; continue;
case INSTR_SUBQR0R1: REGISTER._0Q -= REGISTER._1Q; continue;
case INSTR_SUBQR0R2: REGISTER._0Q -= REGISTER._2Q; continue;
case INSTR_SUBQR0R3: REGISTER._0Q -= REGISTER._3Q; continue;
case INSTR_SUBQR0R4: REGISTER._0Q -= REGISTER._4Q; continue;
case INSTR_SUBQR0R5: REGISTER._0Q -= REGISTER._5Q; continue;
case INSTR_SUBQR0R6: REGISTER._0Q -= REGISTER._6Q; continue;
case INSTR_SUBQR0R7: REGISTER._0Q -= REGISTER._7Q; continue;
case INSTR_SUBQR0R8: REGISTER._0Q -= REGISTER._8Q; continue;
case INSTR_SUBQR0R9: REGISTER._0Q -= REGISTER._9Q; continue;
case INSTR_SUBQR0R10: REGISTER._0Q -= REGISTER._10Q; continue;
case INSTR_SUBQR0R11: REGISTER._0Q -= REGISTER._11Q; continue;
case INSTR_SUBQR0R12: REGISTER._0Q -= REGISTER._12Q; continue;
case INSTR_SUBQR0RIP: REGISTER._0Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR0RSP: REGISTER._0Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR0RBP: REGISTER._0Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR1I: REGISTER._1Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR1RA: REGISTER._1Q -= REGISTER.AQ; continue;
case INSTR_SUBQR1RB: REGISTER._1Q -= REGISTER.BQ; continue;
case INSTR_SUBQR1RC: REGISTER._1Q -= REGISTER.CQ; continue;
case INSTR_SUBQR1RD: REGISTER._1Q -= REGISTER.DQ; continue;
case INSTR_SUBQR1R0: REGISTER._1Q -= REGISTER._0Q; continue;
case INSTR_SUBQR1R1: REGISTER._1Q -= REGISTER._1Q; continue;
case INSTR_SUBQR1R2: REGISTER._1Q -= REGISTER._2Q; continue;
case INSTR_SUBQR1R3: REGISTER._1Q -= REGISTER._3Q; continue;
case INSTR_SUBQR1R4: REGISTER._1Q -= REGISTER._4Q; continue;
case INSTR_SUBQR1R5: REGISTER._1Q -= REGISTER._5Q; continue;
case INSTR_SUBQR1R6: REGISTER._1Q -= REGISTER._6Q; continue;
case INSTR_SUBQR1R7: REGISTER._1Q -= REGISTER._7Q; continue;
case INSTR_SUBQR1R8: REGISTER._1Q -= REGISTER._8Q; continue;
case INSTR_SUBQR1R9: REGISTER._1Q -= REGISTER._9Q; continue;
case INSTR_SUBQR1R10: REGISTER._1Q -= REGISTER._10Q; continue;
case INSTR_SUBQR1R11: REGISTER._1Q -= REGISTER._11Q; continue;
case INSTR_SUBQR1R12: REGISTER._1Q -= REGISTER._12Q; continue;
case INSTR_SUBQR1RIP: REGISTER._1Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR1RSP: REGISTER._1Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR1RBP: REGISTER._1Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR2I: REGISTER._2Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR2RA: REGISTER._2Q -= REGISTER.AQ; continue;
case INSTR_SUBQR2RB: REGISTER._2Q -= REGISTER.BQ; continue;
case INSTR_SUBQR2RC: REGISTER._2Q -= REGISTER.CQ; continue;
case INSTR_SUBQR2RD: REGISTER._2Q -= REGISTER.DQ; continue;
case INSTR_SUBQR2R0: REGISTER._2Q -= REGISTER._0Q; continue;
case INSTR_SUBQR2R1: REGISTER._2Q -= REGISTER._1Q; continue;
case INSTR_SUBQR2R2: REGISTER._2Q -= REGISTER._2Q; continue;
case INSTR_SUBQR2R3: REGISTER._2Q -= REGISTER._3Q; continue;
case INSTR_SUBQR2R4: REGISTER._2Q -= REGISTER._4Q; continue;
case INSTR_SUBQR2R5: REGISTER._2Q -= REGISTER._5Q; continue;
case INSTR_SUBQR2R6: REGISTER._2Q -= REGISTER._6Q; continue;
case INSTR_SUBQR2R7: REGISTER._2Q -= REGISTER._7Q; continue;
case INSTR_SUBQR2R8: REGISTER._2Q -= REGISTER._8Q; continue;
case INSTR_SUBQR2R9: REGISTER._2Q -= REGISTER._9Q; continue;
case INSTR_SUBQR2R10: REGISTER._2Q -= REGISTER._10Q; continue;
case INSTR_SUBQR2R11: REGISTER._2Q -= REGISTER._11Q; continue;
case INSTR_SUBQR2R12: REGISTER._2Q -= REGISTER._12Q; continue;
case INSTR_SUBQR2RIP: REGISTER._2Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR2RSP: REGISTER._2Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR2RBP: REGISTER._2Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR3I: REGISTER._3Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR3RA: REGISTER._3Q -= REGISTER.AQ; continue;
case INSTR_SUBQR3RB: REGISTER._3Q -= REGISTER.BQ; continue;
case INSTR_SUBQR3RC: REGISTER._3Q -= REGISTER.CQ; continue;
case INSTR_SUBQR3RD: REGISTER._3Q -= REGISTER.DQ; continue;
case INSTR_SUBQR3R0: REGISTER._3Q -= REGISTER._0Q; continue;
case INSTR_SUBQR3R1: REGISTER._3Q -= REGISTER._1Q; continue;
case INSTR_SUBQR3R2: REGISTER._3Q -= REGISTER._2Q; continue;
case INSTR_SUBQR3R3: REGISTER._3Q -= REGISTER._3Q; continue;
case INSTR_SUBQR3R4: REGISTER._3Q -= REGISTER._4Q; continue;
case INSTR_SUBQR3R5: REGISTER._3Q -= REGISTER._5Q; continue;
case INSTR_SUBQR3R6: REGISTER._3Q -= REGISTER._6Q; continue;
case INSTR_SUBQR3R7: REGISTER._3Q -= REGISTER._7Q; continue;
case INSTR_SUBQR3R8: REGISTER._3Q -= REGISTER._8Q; continue;
case INSTR_SUBQR3R9: REGISTER._3Q -= REGISTER._9Q; continue;
case INSTR_SUBQR3R10: REGISTER._3Q -= REGISTER._10Q; continue;
case INSTR_SUBQR3R11: REGISTER._3Q -= REGISTER._11Q; continue;
case INSTR_SUBQR3R12: REGISTER._3Q -= REGISTER._12Q; continue;
case INSTR_SUBQR3RIP: REGISTER._3Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR3RSP: REGISTER._3Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR3RBP: REGISTER._3Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR4I: REGISTER._4Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR4RA: REGISTER._4Q -= REGISTER.AQ; continue;
case INSTR_SUBQR4RB: REGISTER._4Q -= REGISTER.BQ; continue;
case INSTR_SUBQR4RC: REGISTER._4Q -= REGISTER.CQ; continue;
case INSTR_SUBQR4RD: REGISTER._4Q -= REGISTER.DQ; continue;
case INSTR_SUBQR4R0: REGISTER._4Q -= REGISTER._0Q; continue;
case INSTR_SUBQR4R1: REGISTER._4Q -= REGISTER._1Q; continue;
case INSTR_SUBQR4R2: REGISTER._4Q -= REGISTER._2Q; continue;
case INSTR_SUBQR4R3: REGISTER._4Q -= REGISTER._3Q; continue;
case INSTR_SUBQR4R4: REGISTER._4Q -= REGISTER._4Q; continue;
case INSTR_SUBQR4R5: REGISTER._4Q -= REGISTER._5Q; continue;
case INSTR_SUBQR4R6: REGISTER._4Q -= REGISTER._6Q; continue;
case INSTR_SUBQR4R7: REGISTER._4Q -= REGISTER._7Q; continue;
case INSTR_SUBQR4R8: REGISTER._4Q -= REGISTER._8Q; continue;
case INSTR_SUBQR4R9: REGISTER._4Q -= REGISTER._9Q; continue;
case INSTR_SUBQR4R10: REGISTER._4Q -= REGISTER._10Q; continue;
case INSTR_SUBQR4R11: REGISTER._4Q -= REGISTER._11Q; continue;
case INSTR_SUBQR4R12: REGISTER._4Q -= REGISTER._12Q; continue;
case INSTR_SUBQR4RIP: REGISTER._4Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR4RSP: REGISTER._4Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR4RBP: REGISTER._4Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR5I: REGISTER._5Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR5RA: REGISTER._5Q -= REGISTER.AQ; continue;
case INSTR_SUBQR5RB: REGISTER._5Q -= REGISTER.BQ; continue;
case INSTR_SUBQR5RC: REGISTER._5Q -= REGISTER.CQ; continue;
case INSTR_SUBQR5RD: REGISTER._5Q -= REGISTER.DQ; continue;
case INSTR_SUBQR5R0: REGISTER._5Q -= REGISTER._0Q; continue;
case INSTR_SUBQR5R1: REGISTER._5Q -= REGISTER._1Q; continue;
case INSTR_SUBQR5R2: REGISTER._5Q -= REGISTER._2Q; continue;
case INSTR_SUBQR5R3: REGISTER._5Q -= REGISTER._3Q; continue;
case INSTR_SUBQR5R4: REGISTER._5Q -= REGISTER._4Q; continue;
case INSTR_SUBQR5R5: REGISTER._5Q -= REGISTER._5Q; continue;
case INSTR_SUBQR5R6: REGISTER._5Q -= REGISTER._6Q; continue;
case INSTR_SUBQR5R7: REGISTER._5Q -= REGISTER._7Q; continue;
case INSTR_SUBQR5R8: REGISTER._5Q -= REGISTER._8Q; continue;
case INSTR_SUBQR5R9: REGISTER._5Q -= REGISTER._9Q; continue;
case INSTR_SUBQR5R10: REGISTER._5Q -= REGISTER._10Q; continue;
case INSTR_SUBQR5R11: REGISTER._5Q -= REGISTER._11Q; continue;
case INSTR_SUBQR5R12: REGISTER._5Q -= REGISTER._12Q; continue;
case INSTR_SUBQR5RIP: REGISTER._5Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR5RSP: REGISTER._5Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR5RBP: REGISTER._5Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR6I: REGISTER._6Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR6RA: REGISTER._6Q -= REGISTER.AQ; continue;
case INSTR_SUBQR6RB: REGISTER._6Q -= REGISTER.BQ; continue;
case INSTR_SUBQR6RC: REGISTER._6Q -= REGISTER.CQ; continue;
case INSTR_SUBQR6RD: REGISTER._6Q -= REGISTER.DQ; continue;
case INSTR_SUBQR6R0: REGISTER._6Q -= REGISTER._0Q; continue;
case INSTR_SUBQR6R1: REGISTER._6Q -= REGISTER._1Q; continue;
case INSTR_SUBQR6R2: REGISTER._6Q -= REGISTER._2Q; continue;
case INSTR_SUBQR6R3: REGISTER._6Q -= REGISTER._3Q; continue;
case INSTR_SUBQR6R4: REGISTER._6Q -= REGISTER._4Q; continue;
case INSTR_SUBQR6R5: REGISTER._6Q -= REGISTER._5Q; continue;
case INSTR_SUBQR6R6: REGISTER._6Q -= REGISTER._6Q; continue;
case INSTR_SUBQR6R7: REGISTER._6Q -= REGISTER._7Q; continue;
case INSTR_SUBQR6R8: REGISTER._6Q -= REGISTER._8Q; continue;
case INSTR_SUBQR6R9: REGISTER._6Q -= REGISTER._9Q; continue;
case INSTR_SUBQR6R10: REGISTER._6Q -= REGISTER._10Q; continue;
case INSTR_SUBQR6R11: REGISTER._6Q -= REGISTER._11Q; continue;
case INSTR_SUBQR6R12: REGISTER._6Q -= REGISTER._12Q; continue;
case INSTR_SUBQR6RIP: REGISTER._6Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR6RSP: REGISTER._6Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR6RBP: REGISTER._6Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR7I: REGISTER._7Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR7RA: REGISTER._7Q -= REGISTER.AQ; continue;
case INSTR_SUBQR7RB: REGISTER._7Q -= REGISTER.BQ; continue;
case INSTR_SUBQR7RC: REGISTER._7Q -= REGISTER.CQ; continue;
case INSTR_SUBQR7RD: REGISTER._7Q -= REGISTER.DQ; continue;
case INSTR_SUBQR7R0: REGISTER._7Q -= REGISTER._0Q; continue;
case INSTR_SUBQR7R1: REGISTER._7Q -= REGISTER._1Q; continue;
case INSTR_SUBQR7R2: REGISTER._7Q -= REGISTER._2Q; continue;
case INSTR_SUBQR7R3: REGISTER._7Q -= REGISTER._3Q; continue;
case INSTR_SUBQR7R4: REGISTER._7Q -= REGISTER._4Q; continue;
case INSTR_SUBQR7R5: REGISTER._7Q -= REGISTER._5Q; continue;
case INSTR_SUBQR7R6: REGISTER._7Q -= REGISTER._6Q; continue;
case INSTR_SUBQR7R7: REGISTER._7Q -= REGISTER._7Q; continue;
case INSTR_SUBQR7R8: REGISTER._7Q -= REGISTER._8Q; continue;
case INSTR_SUBQR7R9: REGISTER._7Q -= REGISTER._9Q; continue;
case INSTR_SUBQR7R10: REGISTER._7Q -= REGISTER._10Q; continue;
case INSTR_SUBQR7R11: REGISTER._7Q -= REGISTER._11Q; continue;
case INSTR_SUBQR7R12: REGISTER._7Q -= REGISTER._12Q; continue;
case INSTR_SUBQR7RIP: REGISTER._7Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR7RSP: REGISTER._7Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR7RBP: REGISTER._7Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR8I: REGISTER._8Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR8RA: REGISTER._8Q -= REGISTER.AQ; continue;
case INSTR_SUBQR8RB: REGISTER._8Q -= REGISTER.BQ; continue;
case INSTR_SUBQR8RC: REGISTER._8Q -= REGISTER.CQ; continue;
case INSTR_SUBQR8RD: REGISTER._8Q -= REGISTER.DQ; continue;
case INSTR_SUBQR8R0: REGISTER._8Q -= REGISTER._0Q; continue;
case INSTR_SUBQR8R1: REGISTER._8Q -= REGISTER._1Q; continue;
case INSTR_SUBQR8R2: REGISTER._8Q -= REGISTER._2Q; continue;
case INSTR_SUBQR8R3: REGISTER._8Q -= REGISTER._3Q; continue;
case INSTR_SUBQR8R4: REGISTER._8Q -= REGISTER._4Q; continue;
case INSTR_SUBQR8R5: REGISTER._8Q -= REGISTER._5Q; continue;
case INSTR_SUBQR8R6: REGISTER._8Q -= REGISTER._6Q; continue;
case INSTR_SUBQR8R7: REGISTER._8Q -= REGISTER._7Q; continue;
case INSTR_SUBQR8R8: REGISTER._8Q -= REGISTER._8Q; continue;
case INSTR_SUBQR8R9: REGISTER._8Q -= REGISTER._9Q; continue;
case INSTR_SUBQR8R10: REGISTER._8Q -= REGISTER._10Q; continue;
case INSTR_SUBQR8R11: REGISTER._8Q -= REGISTER._11Q; continue;
case INSTR_SUBQR8R12: REGISTER._8Q -= REGISTER._12Q; continue;
case INSTR_SUBQR8RIP: REGISTER._8Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR8RSP: REGISTER._8Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR8RBP: REGISTER._8Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR9I: REGISTER._9Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR9RA: REGISTER._9Q -= REGISTER.AQ; continue;
case INSTR_SUBQR9RB: REGISTER._9Q -= REGISTER.BQ; continue;
case INSTR_SUBQR9RC: REGISTER._9Q -= REGISTER.CQ; continue;
case INSTR_SUBQR9RD: REGISTER._9Q -= REGISTER.DQ; continue;
case INSTR_SUBQR9R0: REGISTER._9Q -= REGISTER._0Q; continue;
case INSTR_SUBQR9R1: REGISTER._9Q -= REGISTER._1Q; continue;
case INSTR_SUBQR9R2: REGISTER._9Q -= REGISTER._2Q; continue;
case INSTR_SUBQR9R3: REGISTER._9Q -= REGISTER._3Q; continue;
case INSTR_SUBQR9R4: REGISTER._9Q -= REGISTER._4Q; continue;
case INSTR_SUBQR9R5: REGISTER._9Q -= REGISTER._5Q; continue;
case INSTR_SUBQR9R6: REGISTER._9Q -= REGISTER._6Q; continue;
case INSTR_SUBQR9R7: REGISTER._9Q -= REGISTER._7Q; continue;
case INSTR_SUBQR9R8: REGISTER._9Q -= REGISTER._8Q; continue;
case INSTR_SUBQR9R9: REGISTER._9Q -= REGISTER._9Q; continue;
case INSTR_SUBQR9R10: REGISTER._9Q -= REGISTER._10Q; continue;
case INSTR_SUBQR9R11: REGISTER._9Q -= REGISTER._11Q; continue;
case INSTR_SUBQR9R12: REGISTER._9Q -= REGISTER._12Q; continue;
case INSTR_SUBQR9RIP: REGISTER._9Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR9RSP: REGISTER._9Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR9RBP: REGISTER._9Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR10I: REGISTER._10Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR10RA: REGISTER._10Q -= REGISTER.AQ; continue;
case INSTR_SUBQR10RB: REGISTER._10Q -= REGISTER.BQ; continue;
case INSTR_SUBQR10RC: REGISTER._10Q -= REGISTER.CQ; continue;
case INSTR_SUBQR10RD: REGISTER._10Q -= REGISTER.DQ; continue;
case INSTR_SUBQR10R0: REGISTER._10Q -= REGISTER._0Q; continue;
case INSTR_SUBQR10R1: REGISTER._10Q -= REGISTER._1Q; continue;
case INSTR_SUBQR10R2: REGISTER._10Q -= REGISTER._2Q; continue;
case INSTR_SUBQR10R3: REGISTER._10Q -= REGISTER._3Q; continue;
case INSTR_SUBQR10R4: REGISTER._10Q -= REGISTER._4Q; continue;
case INSTR_SUBQR10R5: REGISTER._10Q -= REGISTER._5Q; continue;
case INSTR_SUBQR10R6: REGISTER._10Q -= REGISTER._6Q; continue;
case INSTR_SUBQR10R7: REGISTER._10Q -= REGISTER._7Q; continue;
case INSTR_SUBQR10R8: REGISTER._10Q -= REGISTER._8Q; continue;
case INSTR_SUBQR10R9: REGISTER._10Q -= REGISTER._9Q; continue;
case INSTR_SUBQR10R10: REGISTER._10Q -= REGISTER._10Q; continue;
case INSTR_SUBQR10R11: REGISTER._10Q -= REGISTER._11Q; continue;
case INSTR_SUBQR10R12: REGISTER._10Q -= REGISTER._12Q; continue;
case INSTR_SUBQR10RIP: REGISTER._10Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR10RSP: REGISTER._10Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR10RBP: REGISTER._10Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR11I: REGISTER._11Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR11RA: REGISTER._11Q -= REGISTER.AQ; continue;
case INSTR_SUBQR11RB: REGISTER._11Q -= REGISTER.BQ; continue;
case INSTR_SUBQR11RC: REGISTER._11Q -= REGISTER.CQ; continue;
case INSTR_SUBQR11RD: REGISTER._11Q -= REGISTER.DQ; continue;
case INSTR_SUBQR11R0: REGISTER._11Q -= REGISTER._0Q; continue;
case INSTR_SUBQR11R1: REGISTER._11Q -= REGISTER._1Q; continue;
case INSTR_SUBQR11R2: REGISTER._11Q -= REGISTER._2Q; continue;
case INSTR_SUBQR11R3: REGISTER._11Q -= REGISTER._3Q; continue;
case INSTR_SUBQR11R4: REGISTER._11Q -= REGISTER._4Q; continue;
case INSTR_SUBQR11R5: REGISTER._11Q -= REGISTER._5Q; continue;
case INSTR_SUBQR11R6: REGISTER._11Q -= REGISTER._6Q; continue;
case INSTR_SUBQR11R7: REGISTER._11Q -= REGISTER._7Q; continue;
case INSTR_SUBQR11R8: REGISTER._11Q -= REGISTER._8Q; continue;
case INSTR_SUBQR11R9: REGISTER._11Q -= REGISTER._9Q; continue;
case INSTR_SUBQR11R10: REGISTER._11Q -= REGISTER._10Q; continue;
case INSTR_SUBQR11R11: REGISTER._11Q -= REGISTER._11Q; continue;
case INSTR_SUBQR11R12: REGISTER._11Q -= REGISTER._12Q; continue;
case INSTR_SUBQR11RIP: REGISTER._11Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR11RSP: REGISTER._11Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR11RBP: REGISTER._11Q -= REGISTER.BPQ; continue;
case INSTR_SUBQR12I: REGISTER._12Q -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQR12RA: REGISTER._12Q -= REGISTER.AQ; continue;
case INSTR_SUBQR12RB: REGISTER._12Q -= REGISTER.BQ; continue;
case INSTR_SUBQR12RC: REGISTER._12Q -= REGISTER.CQ; continue;
case INSTR_SUBQR12RD: REGISTER._12Q -= REGISTER.DQ; continue;
case INSTR_SUBQR12R0: REGISTER._12Q -= REGISTER._0Q; continue;
case INSTR_SUBQR12R1: REGISTER._12Q -= REGISTER._1Q; continue;
case INSTR_SUBQR12R2: REGISTER._12Q -= REGISTER._2Q; continue;
case INSTR_SUBQR12R3: REGISTER._12Q -= REGISTER._3Q; continue;
case INSTR_SUBQR12R4: REGISTER._12Q -= REGISTER._4Q; continue;
case INSTR_SUBQR12R5: REGISTER._12Q -= REGISTER._5Q; continue;
case INSTR_SUBQR12R6: REGISTER._12Q -= REGISTER._6Q; continue;
case INSTR_SUBQR12R7: REGISTER._12Q -= REGISTER._7Q; continue;
case INSTR_SUBQR12R8: REGISTER._12Q -= REGISTER._8Q; continue;
case INSTR_SUBQR12R9: REGISTER._12Q -= REGISTER._9Q; continue;
case INSTR_SUBQR12R10: REGISTER._12Q -= REGISTER._10Q; continue;
case INSTR_SUBQR12R11: REGISTER._12Q -= REGISTER._11Q; continue;
case INSTR_SUBQR12R12: REGISTER._12Q -= REGISTER._12Q; continue;
case INSTR_SUBQR12RIP: REGISTER._12Q -= REGISTER.IPQ; continue;
case INSTR_SUBQR12RSP: REGISTER._12Q -= REGISTER.SPQ; continue;
case INSTR_SUBQR12RBP: REGISTER._12Q -= REGISTER.BPQ; continue;
case INSTR_SUBQRIPI: REGISTER.IPQ -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQRIPRA: REGISTER.IPQ -= REGISTER.AQ; continue;
case INSTR_SUBQRIPRB: REGISTER.IPQ -= REGISTER.BQ; continue;
case INSTR_SUBQRIPRC: REGISTER.IPQ -= REGISTER.CQ; continue;
case INSTR_SUBQRIPRD: REGISTER.IPQ -= REGISTER.DQ; continue;
case INSTR_SUBQRIPR0: REGISTER.IPQ -= REGISTER._0Q; continue;
case INSTR_SUBQRIPR1: REGISTER.IPQ -= REGISTER._1Q; continue;
case INSTR_SUBQRIPR2: REGISTER.IPQ -= REGISTER._2Q; continue;
case INSTR_SUBQRIPR3: REGISTER.IPQ -= REGISTER._3Q; continue;
case INSTR_SUBQRIPR4: REGISTER.IPQ -= REGISTER._4Q; continue;
case INSTR_SUBQRIPR5: REGISTER.IPQ -= REGISTER._5Q; continue;
case INSTR_SUBQRIPR6: REGISTER.IPQ -= REGISTER._6Q; continue;
case INSTR_SUBQRIPR7: REGISTER.IPQ -= REGISTER._7Q; continue;
case INSTR_SUBQRIPR8: REGISTER.IPQ -= REGISTER._8Q; continue;
case INSTR_SUBQRIPR9: REGISTER.IPQ -= REGISTER._9Q; continue;
case INSTR_SUBQRIPR10: REGISTER.IPQ -= REGISTER._10Q; continue;
case INSTR_SUBQRIPR11: REGISTER.IPQ -= REGISTER._11Q; continue;
case INSTR_SUBQRIPR12: REGISTER.IPQ -= REGISTER._12Q; continue;
case INSTR_SUBQRIPRIP: REGISTER.IPQ -= REGISTER.IPQ; continue;
case INSTR_SUBQRIPRSP: REGISTER.IPQ -= REGISTER.SPQ; continue;
case INSTR_SUBQRIPRBP: REGISTER.IPQ -= REGISTER.BPQ; continue;
case INSTR_SUBQRSPI: REGISTER.SPQ -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQRSPRA: REGISTER.SPQ -= REGISTER.AQ; continue;
case INSTR_SUBQRSPRB: REGISTER.SPQ -= REGISTER.BQ; continue;
case INSTR_SUBQRSPRC: REGISTER.SPQ -= REGISTER.CQ; continue;
case INSTR_SUBQRSPRD: REGISTER.SPQ -= REGISTER.DQ; continue;
case INSTR_SUBQRSPR0: REGISTER.SPQ -= REGISTER._0Q; continue;
case INSTR_SUBQRSPR1: REGISTER.SPQ -= REGISTER._1Q; continue;
case INSTR_SUBQRSPR2: REGISTER.SPQ -= REGISTER._2Q; continue;
case INSTR_SUBQRSPR3: REGISTER.SPQ -= REGISTER._3Q; continue;
case INSTR_SUBQRSPR4: REGISTER.SPQ -= REGISTER._4Q; continue;
case INSTR_SUBQRSPR5: REGISTER.SPQ -= REGISTER._5Q; continue;
case INSTR_SUBQRSPR6: REGISTER.SPQ -= REGISTER._6Q; continue;
case INSTR_SUBQRSPR7: REGISTER.SPQ -= REGISTER._7Q; continue;
case INSTR_SUBQRSPR8: REGISTER.SPQ -= REGISTER._8Q; continue;
case INSTR_SUBQRSPR9: REGISTER.SPQ -= REGISTER._9Q; continue;
case INSTR_SUBQRSPR10: REGISTER.SPQ -= REGISTER._10Q; continue;
case INSTR_SUBQRSPR11: REGISTER.SPQ -= REGISTER._11Q; continue;
case INSTR_SUBQRSPR12: REGISTER.SPQ -= REGISTER._12Q; continue;
case INSTR_SUBQRSPRIP: REGISTER.SPQ -= REGISTER.IPQ; continue;
case INSTR_SUBQRSPRSP: REGISTER.SPQ -= REGISTER.SPQ; continue;
case INSTR_SUBQRSPRBP: REGISTER.SPQ -= REGISTER.BPQ; continue;
case INSTR_SUBQRBPI: REGISTER.BPQ -= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_SUBQRBPRA: REGISTER.BPQ -= REGISTER.AQ; continue;
case INSTR_SUBQRBPRB: REGISTER.BPQ -= REGISTER.BQ; continue;
case INSTR_SUBQRBPRC: REGISTER.BPQ -= REGISTER.CQ; continue;
case INSTR_SUBQRBPRD: REGISTER.BPQ -= REGISTER.DQ; continue;
case INSTR_SUBQRBPR0: REGISTER.BPQ -= REGISTER._0Q; continue;
case INSTR_SUBQRBPR1: REGISTER.BPQ -= REGISTER._1Q; continue;
case INSTR_SUBQRBPR2: REGISTER.BPQ -= REGISTER._2Q; continue;
case INSTR_SUBQRBPR3: REGISTER.BPQ -= REGISTER._3Q; continue;
case INSTR_SUBQRBPR4: REGISTER.BPQ -= REGISTER._4Q; continue;
case INSTR_SUBQRBPR5: REGISTER.BPQ -= REGISTER._5Q; continue;
case INSTR_SUBQRBPR6: REGISTER.BPQ -= REGISTER._6Q; continue;
case INSTR_SUBQRBPR7: REGISTER.BPQ -= REGISTER._7Q; continue;
case INSTR_SUBQRBPR8: REGISTER.BPQ -= REGISTER._8Q; continue;
case INSTR_SUBQRBPR9: REGISTER.BPQ -= REGISTER._9Q; continue;
case INSTR_SUBQRBPR10: REGISTER.BPQ -= REGISTER._10Q; continue;
case INSTR_SUBQRBPR11: REGISTER.BPQ -= REGISTER._11Q; continue;
case INSTR_SUBQRBPR12: REGISTER.BPQ -= REGISTER._12Q; continue;
case INSTR_SUBQRBPRIP: REGISTER.BPQ -= REGISTER.IPQ; continue;
case INSTR_SUBQRBPRSP: REGISTER.BPQ -= REGISTER.SPQ; continue;
case INSTR_SUBQRBPRBP: REGISTER.BPQ -= REGISTER.BPQ; continue;
case INSTR_SUBWRAI: REGISTER.AW -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWRARA: REGISTER.AW -= REGISTER.AW; continue;
case INSTR_SUBWRARB: REGISTER.AW -= REGISTER.BW; continue;
case INSTR_SUBWRARC: REGISTER.AW -= REGISTER.CW; continue;
case INSTR_SUBWRARD: REGISTER.AW -= REGISTER.DW; continue;
case INSTR_SUBWRAR0: REGISTER.AW -= REGISTER._0W; continue;
case INSTR_SUBWRAR1: REGISTER.AW -= REGISTER._1W; continue;
case INSTR_SUBWRAR2: REGISTER.AW -= REGISTER._2W; continue;
case INSTR_SUBWRAR3: REGISTER.AW -= REGISTER._3W; continue;
case INSTR_SUBWRAR4: REGISTER.AW -= REGISTER._4W; continue;
case INSTR_SUBWRAR5: REGISTER.AW -= REGISTER._5W; continue;
case INSTR_SUBWRAR6: REGISTER.AW -= REGISTER._6W; continue;
case INSTR_SUBWRAR7: REGISTER.AW -= REGISTER._7W; continue;
case INSTR_SUBWRAR8: REGISTER.AW -= REGISTER._8W; continue;
case INSTR_SUBWRAR9: REGISTER.AW -= REGISTER._9W; continue;
case INSTR_SUBWRAR10: REGISTER.AW -= REGISTER._10W; continue;
case INSTR_SUBWRAR11: REGISTER.AW -= REGISTER._11W; continue;
case INSTR_SUBWRAR12: REGISTER.AW -= REGISTER._12W; continue;
case INSTR_SUBWRARIP: REGISTER.AW -= REGISTER.IPW; continue;
case INSTR_SUBWRARSP: REGISTER.AW -= REGISTER.SPW; continue;
case INSTR_SUBWRARBP: REGISTER.AW -= REGISTER.BPW; continue;
case INSTR_SUBWRBI: REGISTER.BW -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWRBRA: REGISTER.BW -= REGISTER.AW; continue;
case INSTR_SUBWRBRB: REGISTER.BW -= REGISTER.BW; continue;
case INSTR_SUBWRBRC: REGISTER.BW -= REGISTER.CW; continue;
case INSTR_SUBWRBRD: REGISTER.BW -= REGISTER.DW; continue;
case INSTR_SUBWRBR0: REGISTER.BW -= REGISTER._0W; continue;
case INSTR_SUBWRBR1: REGISTER.BW -= REGISTER._1W; continue;
case INSTR_SUBWRBR2: REGISTER.BW -= REGISTER._2W; continue;
case INSTR_SUBWRBR3: REGISTER.BW -= REGISTER._3W; continue;
case INSTR_SUBWRBR4: REGISTER.BW -= REGISTER._4W; continue;
case INSTR_SUBWRBR5: REGISTER.BW -= REGISTER._5W; continue;
case INSTR_SUBWRBR6: REGISTER.BW -= REGISTER._6W; continue;
case INSTR_SUBWRBR7: REGISTER.BW -= REGISTER._7W; continue;
case INSTR_SUBWRBR8: REGISTER.BW -= REGISTER._8W; continue;
case INSTR_SUBWRBR9: REGISTER.BW -= REGISTER._9W; continue;
case INSTR_SUBWRBR10: REGISTER.BW -= REGISTER._10W; continue;
case INSTR_SUBWRBR11: REGISTER.BW -= REGISTER._11W; continue;
case INSTR_SUBWRBR12: REGISTER.BW -= REGISTER._12W; continue;
case INSTR_SUBWRBRIP: REGISTER.BW -= REGISTER.IPW; continue;
case INSTR_SUBWRBRSP: REGISTER.BW -= REGISTER.SPW; continue;
case INSTR_SUBWRBRBP: REGISTER.BW -= REGISTER.BPW; continue;
case INSTR_SUBWRCI: REGISTER.CW -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWRCRA: REGISTER.CW -= REGISTER.AW; continue;
case INSTR_SUBWRCRB: REGISTER.CW -= REGISTER.BW; continue;
case INSTR_SUBWRCRC: REGISTER.CW -= REGISTER.CW; continue;
case INSTR_SUBWRCRD: REGISTER.CW -= REGISTER.DW; continue;
case INSTR_SUBWRCR0: REGISTER.CW -= REGISTER._0W; continue;
case INSTR_SUBWRCR1: REGISTER.CW -= REGISTER._1W; continue;
case INSTR_SUBWRCR2: REGISTER.CW -= REGISTER._2W; continue;
case INSTR_SUBWRCR3: REGISTER.CW -= REGISTER._3W; continue;
case INSTR_SUBWRCR4: REGISTER.CW -= REGISTER._4W; continue;
case INSTR_SUBWRCR5: REGISTER.CW -= REGISTER._5W; continue;
case INSTR_SUBWRCR6: REGISTER.CW -= REGISTER._6W; continue;
case INSTR_SUBWRCR7: REGISTER.CW -= REGISTER._7W; continue;
case INSTR_SUBWRCR8: REGISTER.CW -= REGISTER._8W; continue;
case INSTR_SUBWRCR9: REGISTER.CW -= REGISTER._9W; continue;
case INSTR_SUBWRCR10: REGISTER.CW -= REGISTER._10W; continue;
case INSTR_SUBWRCR11: REGISTER.CW -= REGISTER._11W; continue;
case INSTR_SUBWRCR12: REGISTER.CW -= REGISTER._12W; continue;
case INSTR_SUBWRCRIP: REGISTER.CW -= REGISTER.IPW; continue;
case INSTR_SUBWRCRSP: REGISTER.CW -= REGISTER.SPW; continue;
case INSTR_SUBWRCRBP: REGISTER.CW -= REGISTER.BPW; continue;
case INSTR_SUBWRDI: REGISTER.DW -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWRDRA: REGISTER.DW -= REGISTER.AW; continue;
case INSTR_SUBWRDRB: REGISTER.DW -= REGISTER.BW; continue;
case INSTR_SUBWRDRC: REGISTER.DW -= REGISTER.CW; continue;
case INSTR_SUBWRDRD: REGISTER.DW -= REGISTER.DW; continue;
case INSTR_SUBWRDR0: REGISTER.DW -= REGISTER._0W; continue;
case INSTR_SUBWRDR1: REGISTER.DW -= REGISTER._1W; continue;
case INSTR_SUBWRDR2: REGISTER.DW -= REGISTER._2W; continue;
case INSTR_SUBWRDR3: REGISTER.DW -= REGISTER._3W; continue;
case INSTR_SUBWRDR4: REGISTER.DW -= REGISTER._4W; continue;
case INSTR_SUBWRDR5: REGISTER.DW -= REGISTER._5W; continue;
case INSTR_SUBWRDR6: REGISTER.DW -= REGISTER._6W; continue;
case INSTR_SUBWRDR7: REGISTER.DW -= REGISTER._7W; continue;
case INSTR_SUBWRDR8: REGISTER.DW -= REGISTER._8W; continue;
case INSTR_SUBWRDR9: REGISTER.DW -= REGISTER._9W; continue;
case INSTR_SUBWRDR10: REGISTER.DW -= REGISTER._10W; continue;
case INSTR_SUBWRDR11: REGISTER.DW -= REGISTER._11W; continue;
case INSTR_SUBWRDR12: REGISTER.DW -= REGISTER._12W; continue;
case INSTR_SUBWRDRIP: REGISTER.DW -= REGISTER.IPW; continue;
case INSTR_SUBWRDRSP: REGISTER.DW -= REGISTER.SPW; continue;
case INSTR_SUBWRDRBP: REGISTER.DW -= REGISTER.BPW; continue;
case INSTR_SUBWR0I: REGISTER._0W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR0RA: REGISTER._0W -= REGISTER.AW; continue;
case INSTR_SUBWR0RB: REGISTER._0W -= REGISTER.BW; continue;
case INSTR_SUBWR0RC: REGISTER._0W -= REGISTER.CW; continue;
case INSTR_SUBWR0RD: REGISTER._0W -= REGISTER.DW; continue;
case INSTR_SUBWR0R0: REGISTER._0W -= REGISTER._0W; continue;
case INSTR_SUBWR0R1: REGISTER._0W -= REGISTER._1W; continue;
case INSTR_SUBWR0R2: REGISTER._0W -= REGISTER._2W; continue;
case INSTR_SUBWR0R3: REGISTER._0W -= REGISTER._3W; continue;
case INSTR_SUBWR0R4: REGISTER._0W -= REGISTER._4W; continue;
case INSTR_SUBWR0R5: REGISTER._0W -= REGISTER._5W; continue;
case INSTR_SUBWR0R6: REGISTER._0W -= REGISTER._6W; continue;
case INSTR_SUBWR0R7: REGISTER._0W -= REGISTER._7W; continue;
case INSTR_SUBWR0R8: REGISTER._0W -= REGISTER._8W; continue;
case INSTR_SUBWR0R9: REGISTER._0W -= REGISTER._9W; continue;
case INSTR_SUBWR0R10: REGISTER._0W -= REGISTER._10W; continue;
case INSTR_SUBWR0R11: REGISTER._0W -= REGISTER._11W; continue;
case INSTR_SUBWR0R12: REGISTER._0W -= REGISTER._12W; continue;
case INSTR_SUBWR0RIP: REGISTER._0W -= REGISTER.IPW; continue;
case INSTR_SUBWR0RSP: REGISTER._0W -= REGISTER.SPW; continue;
case INSTR_SUBWR0RBP: REGISTER._0W -= REGISTER.BPW; continue;
case INSTR_SUBWR1I: REGISTER._1W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR1RA: REGISTER._1W -= REGISTER.AW; continue;
case INSTR_SUBWR1RB: REGISTER._1W -= REGISTER.BW; continue;
case INSTR_SUBWR1RC: REGISTER._1W -= REGISTER.CW; continue;
case INSTR_SUBWR1RD: REGISTER._1W -= REGISTER.DW; continue;
case INSTR_SUBWR1R0: REGISTER._1W -= REGISTER._0W; continue;
case INSTR_SUBWR1R1: REGISTER._1W -= REGISTER._1W; continue;
case INSTR_SUBWR1R2: REGISTER._1W -= REGISTER._2W; continue;
case INSTR_SUBWR1R3: REGISTER._1W -= REGISTER._3W; continue;
case INSTR_SUBWR1R4: REGISTER._1W -= REGISTER._4W; continue;
case INSTR_SUBWR1R5: REGISTER._1W -= REGISTER._5W; continue;
case INSTR_SUBWR1R6: REGISTER._1W -= REGISTER._6W; continue;
case INSTR_SUBWR1R7: REGISTER._1W -= REGISTER._7W; continue;
case INSTR_SUBWR1R8: REGISTER._1W -= REGISTER._8W; continue;
case INSTR_SUBWR1R9: REGISTER._1W -= REGISTER._9W; continue;
case INSTR_SUBWR1R10: REGISTER._1W -= REGISTER._10W; continue;
case INSTR_SUBWR1R11: REGISTER._1W -= REGISTER._11W; continue;
case INSTR_SUBWR1R12: REGISTER._1W -= REGISTER._12W; continue;
case INSTR_SUBWR1RIP: REGISTER._1W -= REGISTER.IPW; continue;
case INSTR_SUBWR1RSP: REGISTER._1W -= REGISTER.SPW; continue;
case INSTR_SUBWR1RBP: REGISTER._1W -= REGISTER.BPW; continue;
case INSTR_SUBWR2I: REGISTER._2W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR2RA: REGISTER._2W -= REGISTER.AW; continue;
case INSTR_SUBWR2RB: REGISTER._2W -= REGISTER.BW; continue;
case INSTR_SUBWR2RC: REGISTER._2W -= REGISTER.CW; continue;
case INSTR_SUBWR2RD: REGISTER._2W -= REGISTER.DW; continue;
case INSTR_SUBWR2R0: REGISTER._2W -= REGISTER._0W; continue;
case INSTR_SUBWR2R1: REGISTER._2W -= REGISTER._1W; continue;
case INSTR_SUBWR2R2: REGISTER._2W -= REGISTER._2W; continue;
case INSTR_SUBWR2R3: REGISTER._2W -= REGISTER._3W; continue;
case INSTR_SUBWR2R4: REGISTER._2W -= REGISTER._4W; continue;
case INSTR_SUBWR2R5: REGISTER._2W -= REGISTER._5W; continue;
case INSTR_SUBWR2R6: REGISTER._2W -= REGISTER._6W; continue;
case INSTR_SUBWR2R7: REGISTER._2W -= REGISTER._7W; continue;
case INSTR_SUBWR2R8: REGISTER._2W -= REGISTER._8W; continue;
case INSTR_SUBWR2R9: REGISTER._2W -= REGISTER._9W; continue;
case INSTR_SUBWR2R10: REGISTER._2W -= REGISTER._10W; continue;
case INSTR_SUBWR2R11: REGISTER._2W -= REGISTER._11W; continue;
case INSTR_SUBWR2R12: REGISTER._2W -= REGISTER._12W; continue;
case INSTR_SUBWR2RIP: REGISTER._2W -= REGISTER.IPW; continue;
case INSTR_SUBWR2RSP: REGISTER._2W -= REGISTER.SPW; continue;
case INSTR_SUBWR2RBP: REGISTER._2W -= REGISTER.BPW; continue;
case INSTR_SUBWR3I: REGISTER._3W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR3RA: REGISTER._3W -= REGISTER.AW; continue;
case INSTR_SUBWR3RB: REGISTER._3W -= REGISTER.BW; continue;
case INSTR_SUBWR3RC: REGISTER._3W -= REGISTER.CW; continue;
case INSTR_SUBWR3RD: REGISTER._3W -= REGISTER.DW; continue;
case INSTR_SUBWR3R0: REGISTER._3W -= REGISTER._0W; continue;
case INSTR_SUBWR3R1: REGISTER._3W -= REGISTER._1W; continue;
case INSTR_SUBWR3R2: REGISTER._3W -= REGISTER._2W; continue;
case INSTR_SUBWR3R3: REGISTER._3W -= REGISTER._3W; continue;
case INSTR_SUBWR3R4: REGISTER._3W -= REGISTER._4W; continue;
case INSTR_SUBWR3R5: REGISTER._3W -= REGISTER._5W; continue;
case INSTR_SUBWR3R6: REGISTER._3W -= REGISTER._6W; continue;
case INSTR_SUBWR3R7: REGISTER._3W -= REGISTER._7W; continue;
case INSTR_SUBWR3R8: REGISTER._3W -= REGISTER._8W; continue;
case INSTR_SUBWR3R9: REGISTER._3W -= REGISTER._9W; continue;
case INSTR_SUBWR3R10: REGISTER._3W -= REGISTER._10W; continue;
case INSTR_SUBWR3R11: REGISTER._3W -= REGISTER._11W; continue;
case INSTR_SUBWR3R12: REGISTER._3W -= REGISTER._12W; continue;
case INSTR_SUBWR3RIP: REGISTER._3W -= REGISTER.IPW; continue;
case INSTR_SUBWR3RSP: REGISTER._3W -= REGISTER.SPW; continue;
case INSTR_SUBWR3RBP: REGISTER._3W -= REGISTER.BPW; continue;
case INSTR_SUBWR4I: REGISTER._4W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR4RA: REGISTER._4W -= REGISTER.AW; continue;
case INSTR_SUBWR4RB: REGISTER._4W -= REGISTER.BW; continue;
case INSTR_SUBWR4RC: REGISTER._4W -= REGISTER.CW; continue;
case INSTR_SUBWR4RD: REGISTER._4W -= REGISTER.DW; continue;
case INSTR_SUBWR4R0: REGISTER._4W -= REGISTER._0W; continue;
case INSTR_SUBWR4R1: REGISTER._4W -= REGISTER._1W; continue;
case INSTR_SUBWR4R2: REGISTER._4W -= REGISTER._2W; continue;
case INSTR_SUBWR4R3: REGISTER._4W -= REGISTER._3W; continue;
case INSTR_SUBWR4R4: REGISTER._4W -= REGISTER._4W; continue;
case INSTR_SUBWR4R5: REGISTER._4W -= REGISTER._5W; continue;
case INSTR_SUBWR4R6: REGISTER._4W -= REGISTER._6W; continue;
case INSTR_SUBWR4R7: REGISTER._4W -= REGISTER._7W; continue;
case INSTR_SUBWR4R8: REGISTER._4W -= REGISTER._8W; continue;
case INSTR_SUBWR4R9: REGISTER._4W -= REGISTER._9W; continue;
case INSTR_SUBWR4R10: REGISTER._4W -= REGISTER._10W; continue;
case INSTR_SUBWR4R11: REGISTER._4W -= REGISTER._11W; continue;
case INSTR_SUBWR4R12: REGISTER._4W -= REGISTER._12W; continue;
case INSTR_SUBWR4RIP: REGISTER._4W -= REGISTER.IPW; continue;
case INSTR_SUBWR4RSP: REGISTER._4W -= REGISTER.SPW; continue;
case INSTR_SUBWR4RBP: REGISTER._4W -= REGISTER.BPW; continue;
case INSTR_SUBWR5I: REGISTER._5W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR5RA: REGISTER._5W -= REGISTER.AW; continue;
case INSTR_SUBWR5RB: REGISTER._5W -= REGISTER.BW; continue;
case INSTR_SUBWR5RC: REGISTER._5W -= REGISTER.CW; continue;
case INSTR_SUBWR5RD: REGISTER._5W -= REGISTER.DW; continue;
case INSTR_SUBWR5R0: REGISTER._5W -= REGISTER._0W; continue;
case INSTR_SUBWR5R1: REGISTER._5W -= REGISTER._1W; continue;
case INSTR_SUBWR5R2: REGISTER._5W -= REGISTER._2W; continue;
case INSTR_SUBWR5R3: REGISTER._5W -= REGISTER._3W; continue;
case INSTR_SUBWR5R4: REGISTER._5W -= REGISTER._4W; continue;
case INSTR_SUBWR5R5: REGISTER._5W -= REGISTER._5W; continue;
case INSTR_SUBWR5R6: REGISTER._5W -= REGISTER._6W; continue;
case INSTR_SUBWR5R7: REGISTER._5W -= REGISTER._7W; continue;
case INSTR_SUBWR5R8: REGISTER._5W -= REGISTER._8W; continue;
case INSTR_SUBWR5R9: REGISTER._5W -= REGISTER._9W; continue;
case INSTR_SUBWR5R10: REGISTER._5W -= REGISTER._10W; continue;
case INSTR_SUBWR5R11: REGISTER._5W -= REGISTER._11W; continue;
case INSTR_SUBWR5R12: REGISTER._5W -= REGISTER._12W; continue;
case INSTR_SUBWR5RIP: REGISTER._5W -= REGISTER.IPW; continue;
case INSTR_SUBWR5RSP: REGISTER._5W -= REGISTER.SPW; continue;
case INSTR_SUBWR5RBP: REGISTER._5W -= REGISTER.BPW; continue;
case INSTR_SUBWR6I: REGISTER._6W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR6RA: REGISTER._6W -= REGISTER.AW; continue;
case INSTR_SUBWR6RB: REGISTER._6W -= REGISTER.BW; continue;
case INSTR_SUBWR6RC: REGISTER._6W -= REGISTER.CW; continue;
case INSTR_SUBWR6RD: REGISTER._6W -= REGISTER.DW; continue;
case INSTR_SUBWR6R0: REGISTER._6W -= REGISTER._0W; continue;
case INSTR_SUBWR6R1: REGISTER._6W -= REGISTER._1W; continue;
case INSTR_SUBWR6R2: REGISTER._6W -= REGISTER._2W; continue;
case INSTR_SUBWR6R3: REGISTER._6W -= REGISTER._3W; continue;
case INSTR_SUBWR6R4: REGISTER._6W -= REGISTER._4W; continue;
case INSTR_SUBWR6R5: REGISTER._6W -= REGISTER._5W; continue;
case INSTR_SUBWR6R6: REGISTER._6W -= REGISTER._6W; continue;
case INSTR_SUBWR6R7: REGISTER._6W -= REGISTER._7W; continue;
case INSTR_SUBWR6R8: REGISTER._6W -= REGISTER._8W; continue;
case INSTR_SUBWR6R9: REGISTER._6W -= REGISTER._9W; continue;
case INSTR_SUBWR6R10: REGISTER._6W -= REGISTER._10W; continue;
case INSTR_SUBWR6R11: REGISTER._6W -= REGISTER._11W; continue;
case INSTR_SUBWR6R12: REGISTER._6W -= REGISTER._12W; continue;
case INSTR_SUBWR6RIP: REGISTER._6W -= REGISTER.IPW; continue;
case INSTR_SUBWR6RSP: REGISTER._6W -= REGISTER.SPW; continue;
case INSTR_SUBWR6RBP: REGISTER._6W -= REGISTER.BPW; continue;
case INSTR_SUBWR7I: REGISTER._7W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR7RA: REGISTER._7W -= REGISTER.AW; continue;
case INSTR_SUBWR7RB: REGISTER._7W -= REGISTER.BW; continue;
case INSTR_SUBWR7RC: REGISTER._7W -= REGISTER.CW; continue;
case INSTR_SUBWR7RD: REGISTER._7W -= REGISTER.DW; continue;
case INSTR_SUBWR7R0: REGISTER._7W -= REGISTER._0W; continue;
case INSTR_SUBWR7R1: REGISTER._7W -= REGISTER._1W; continue;
case INSTR_SUBWR7R2: REGISTER._7W -= REGISTER._2W; continue;
case INSTR_SUBWR7R3: REGISTER._7W -= REGISTER._3W; continue;
case INSTR_SUBWR7R4: REGISTER._7W -= REGISTER._4W; continue;
case INSTR_SUBWR7R5: REGISTER._7W -= REGISTER._5W; continue;
case INSTR_SUBWR7R6: REGISTER._7W -= REGISTER._6W; continue;
case INSTR_SUBWR7R7: REGISTER._7W -= REGISTER._7W; continue;
case INSTR_SUBWR7R8: REGISTER._7W -= REGISTER._8W; continue;
case INSTR_SUBWR7R9: REGISTER._7W -= REGISTER._9W; continue;
case INSTR_SUBWR7R10: REGISTER._7W -= REGISTER._10W; continue;
case INSTR_SUBWR7R11: REGISTER._7W -= REGISTER._11W; continue;
case INSTR_SUBWR7R12: REGISTER._7W -= REGISTER._12W; continue;
case INSTR_SUBWR7RIP: REGISTER._7W -= REGISTER.IPW; continue;
case INSTR_SUBWR7RSP: REGISTER._7W -= REGISTER.SPW; continue;
case INSTR_SUBWR7RBP: REGISTER._7W -= REGISTER.BPW; continue;
case INSTR_SUBWR8I: REGISTER._8W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR8RA: REGISTER._8W -= REGISTER.AW; continue;
case INSTR_SUBWR8RB: REGISTER._8W -= REGISTER.BW; continue;
case INSTR_SUBWR8RC: REGISTER._8W -= REGISTER.CW; continue;
case INSTR_SUBWR8RD: REGISTER._8W -= REGISTER.DW; continue;
case INSTR_SUBWR8R0: REGISTER._8W -= REGISTER._0W; continue;
case INSTR_SUBWR8R1: REGISTER._8W -= REGISTER._1W; continue;
case INSTR_SUBWR8R2: REGISTER._8W -= REGISTER._2W; continue;
case INSTR_SUBWR8R3: REGISTER._8W -= REGISTER._3W; continue;
case INSTR_SUBWR8R4: REGISTER._8W -= REGISTER._4W; continue;
case INSTR_SUBWR8R5: REGISTER._8W -= REGISTER._5W; continue;
case INSTR_SUBWR8R6: REGISTER._8W -= REGISTER._6W; continue;
case INSTR_SUBWR8R7: REGISTER._8W -= REGISTER._7W; continue;
case INSTR_SUBWR8R8: REGISTER._8W -= REGISTER._8W; continue;
case INSTR_SUBWR8R9: REGISTER._8W -= REGISTER._9W; continue;
case INSTR_SUBWR8R10: REGISTER._8W -= REGISTER._10W; continue;
case INSTR_SUBWR8R11: REGISTER._8W -= REGISTER._11W; continue;
case INSTR_SUBWR8R12: REGISTER._8W -= REGISTER._12W; continue;
case INSTR_SUBWR8RIP: REGISTER._8W -= REGISTER.IPW; continue;
case INSTR_SUBWR8RSP: REGISTER._8W -= REGISTER.SPW; continue;
case INSTR_SUBWR8RBP: REGISTER._8W -= REGISTER.BPW; continue;
case INSTR_SUBWR9I: REGISTER._9W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR9RA: REGISTER._9W -= REGISTER.AW; continue;
case INSTR_SUBWR9RB: REGISTER._9W -= REGISTER.BW; continue;
case INSTR_SUBWR9RC: REGISTER._9W -= REGISTER.CW; continue;
case INSTR_SUBWR9RD: REGISTER._9W -= REGISTER.DW; continue;
case INSTR_SUBWR9R0: REGISTER._9W -= REGISTER._0W; continue;
case INSTR_SUBWR9R1: REGISTER._9W -= REGISTER._1W; continue;
case INSTR_SUBWR9R2: REGISTER._9W -= REGISTER._2W; continue;
case INSTR_SUBWR9R3: REGISTER._9W -= REGISTER._3W; continue;
case INSTR_SUBWR9R4: REGISTER._9W -= REGISTER._4W; continue;
case INSTR_SUBWR9R5: REGISTER._9W -= REGISTER._5W; continue;
case INSTR_SUBWR9R6: REGISTER._9W -= REGISTER._6W; continue;
case INSTR_SUBWR9R7: REGISTER._9W -= REGISTER._7W; continue;
case INSTR_SUBWR9R8: REGISTER._9W -= REGISTER._8W; continue;
case INSTR_SUBWR9R9: REGISTER._9W -= REGISTER._9W; continue;
case INSTR_SUBWR9R10: REGISTER._9W -= REGISTER._10W; continue;
case INSTR_SUBWR9R11: REGISTER._9W -= REGISTER._11W; continue;
case INSTR_SUBWR9R12: REGISTER._9W -= REGISTER._12W; continue;
case INSTR_SUBWR9RIP: REGISTER._9W -= REGISTER.IPW; continue;
case INSTR_SUBWR9RSP: REGISTER._9W -= REGISTER.SPW; continue;
case INSTR_SUBWR9RBP: REGISTER._9W -= REGISTER.BPW; continue;
case INSTR_SUBWR10I: REGISTER._10W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR10RA: REGISTER._10W -= REGISTER.AW; continue;
case INSTR_SUBWR10RB: REGISTER._10W -= REGISTER.BW; continue;
case INSTR_SUBWR10RC: REGISTER._10W -= REGISTER.CW; continue;
case INSTR_SUBWR10RD: REGISTER._10W -= REGISTER.DW; continue;
case INSTR_SUBWR10R0: REGISTER._10W -= REGISTER._0W; continue;
case INSTR_SUBWR10R1: REGISTER._10W -= REGISTER._1W; continue;
case INSTR_SUBWR10R2: REGISTER._10W -= REGISTER._2W; continue;
case INSTR_SUBWR10R3: REGISTER._10W -= REGISTER._3W; continue;
case INSTR_SUBWR10R4: REGISTER._10W -= REGISTER._4W; continue;
case INSTR_SUBWR10R5: REGISTER._10W -= REGISTER._5W; continue;
case INSTR_SUBWR10R6: REGISTER._10W -= REGISTER._6W; continue;
case INSTR_SUBWR10R7: REGISTER._10W -= REGISTER._7W; continue;
case INSTR_SUBWR10R8: REGISTER._10W -= REGISTER._8W; continue;
case INSTR_SUBWR10R9: REGISTER._10W -= REGISTER._9W; continue;
case INSTR_SUBWR10R10: REGISTER._10W -= REGISTER._10W; continue;
case INSTR_SUBWR10R11: REGISTER._10W -= REGISTER._11W; continue;
case INSTR_SUBWR10R12: REGISTER._10W -= REGISTER._12W; continue;
case INSTR_SUBWR10RIP: REGISTER._10W -= REGISTER.IPW; continue;
case INSTR_SUBWR10RSP: REGISTER._10W -= REGISTER.SPW; continue;
case INSTR_SUBWR10RBP: REGISTER._10W -= REGISTER.BPW; continue;
case INSTR_SUBWR11I: REGISTER._11W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR11RA: REGISTER._11W -= REGISTER.AW; continue;
case INSTR_SUBWR11RB: REGISTER._11W -= REGISTER.BW; continue;
case INSTR_SUBWR11RC: REGISTER._11W -= REGISTER.CW; continue;
case INSTR_SUBWR11RD: REGISTER._11W -= REGISTER.DW; continue;
case INSTR_SUBWR11R0: REGISTER._11W -= REGISTER._0W; continue;
case INSTR_SUBWR11R1: REGISTER._11W -= REGISTER._1W; continue;
case INSTR_SUBWR11R2: REGISTER._11W -= REGISTER._2W; continue;
case INSTR_SUBWR11R3: REGISTER._11W -= REGISTER._3W; continue;
case INSTR_SUBWR11R4: REGISTER._11W -= REGISTER._4W; continue;
case INSTR_SUBWR11R5: REGISTER._11W -= REGISTER._5W; continue;
case INSTR_SUBWR11R6: REGISTER._11W -= REGISTER._6W; continue;
case INSTR_SUBWR11R7: REGISTER._11W -= REGISTER._7W; continue;
case INSTR_SUBWR11R8: REGISTER._11W -= REGISTER._8W; continue;
case INSTR_SUBWR11R9: REGISTER._11W -= REGISTER._9W; continue;
case INSTR_SUBWR11R10: REGISTER._11W -= REGISTER._10W; continue;
case INSTR_SUBWR11R11: REGISTER._11W -= REGISTER._11W; continue;
case INSTR_SUBWR11R12: REGISTER._11W -= REGISTER._12W; continue;
case INSTR_SUBWR11RIP: REGISTER._11W -= REGISTER.IPW; continue;
case INSTR_SUBWR11RSP: REGISTER._11W -= REGISTER.SPW; continue;
case INSTR_SUBWR11RBP: REGISTER._11W -= REGISTER.BPW; continue;
case INSTR_SUBWR12I: REGISTER._12W -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWR12RA: REGISTER._12W -= REGISTER.AW; continue;
case INSTR_SUBWR12RB: REGISTER._12W -= REGISTER.BW; continue;
case INSTR_SUBWR12RC: REGISTER._12W -= REGISTER.CW; continue;
case INSTR_SUBWR12RD: REGISTER._12W -= REGISTER.DW; continue;
case INSTR_SUBWR12R0: REGISTER._12W -= REGISTER._0W; continue;
case INSTR_SUBWR12R1: REGISTER._12W -= REGISTER._1W; continue;
case INSTR_SUBWR12R2: REGISTER._12W -= REGISTER._2W; continue;
case INSTR_SUBWR12R3: REGISTER._12W -= REGISTER._3W; continue;
case INSTR_SUBWR12R4: REGISTER._12W -= REGISTER._4W; continue;
case INSTR_SUBWR12R5: REGISTER._12W -= REGISTER._5W; continue;
case INSTR_SUBWR12R6: REGISTER._12W -= REGISTER._6W; continue;
case INSTR_SUBWR12R7: REGISTER._12W -= REGISTER._7W; continue;
case INSTR_SUBWR12R8: REGISTER._12W -= REGISTER._8W; continue;
case INSTR_SUBWR12R9: REGISTER._12W -= REGISTER._9W; continue;
case INSTR_SUBWR12R10: REGISTER._12W -= REGISTER._10W; continue;
case INSTR_SUBWR12R11: REGISTER._12W -= REGISTER._11W; continue;
case INSTR_SUBWR12R12: REGISTER._12W -= REGISTER._12W; continue;
case INSTR_SUBWR12RIP: REGISTER._12W -= REGISTER.IPW; continue;
case INSTR_SUBWR12RSP: REGISTER._12W -= REGISTER.SPW; continue;
case INSTR_SUBWR12RBP: REGISTER._12W -= REGISTER.BPW; continue;
case INSTR_SUBWRIPI: REGISTER.IPW -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWRIPRA: REGISTER.IPW -= REGISTER.AW; continue;
case INSTR_SUBWRIPRB: REGISTER.IPW -= REGISTER.BW; continue;
case INSTR_SUBWRIPRC: REGISTER.IPW -= REGISTER.CW; continue;
case INSTR_SUBWRIPRD: REGISTER.IPW -= REGISTER.DW; continue;
case INSTR_SUBWRIPR0: REGISTER.IPW -= REGISTER._0W; continue;
case INSTR_SUBWRIPR1: REGISTER.IPW -= REGISTER._1W; continue;
case INSTR_SUBWRIPR2: REGISTER.IPW -= REGISTER._2W; continue;
case INSTR_SUBWRIPR3: REGISTER.IPW -= REGISTER._3W; continue;
case INSTR_SUBWRIPR4: REGISTER.IPW -= REGISTER._4W; continue;
case INSTR_SUBWRIPR5: REGISTER.IPW -= REGISTER._5W; continue;
case INSTR_SUBWRIPR6: REGISTER.IPW -= REGISTER._6W; continue;
case INSTR_SUBWRIPR7: REGISTER.IPW -= REGISTER._7W; continue;
case INSTR_SUBWRIPR8: REGISTER.IPW -= REGISTER._8W; continue;
case INSTR_SUBWRIPR9: REGISTER.IPW -= REGISTER._9W; continue;
case INSTR_SUBWRIPR10: REGISTER.IPW -= REGISTER._10W; continue;
case INSTR_SUBWRIPR11: REGISTER.IPW -= REGISTER._11W; continue;
case INSTR_SUBWRIPR12: REGISTER.IPW -= REGISTER._12W; continue;
case INSTR_SUBWRIPRIP: REGISTER.IPW -= REGISTER.IPW; continue;
case INSTR_SUBWRIPRSP: REGISTER.IPW -= REGISTER.SPW; continue;
case INSTR_SUBWRIPRBP: REGISTER.IPW -= REGISTER.BPW; continue;
case INSTR_SUBWRSPI: REGISTER.SPW -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWRSPRA: REGISTER.SPW -= REGISTER.AW; continue;
case INSTR_SUBWRSPRB: REGISTER.SPW -= REGISTER.BW; continue;
case INSTR_SUBWRSPRC: REGISTER.SPW -= REGISTER.CW; continue;
case INSTR_SUBWRSPRD: REGISTER.SPW -= REGISTER.DW; continue;
case INSTR_SUBWRSPR0: REGISTER.SPW -= REGISTER._0W; continue;
case INSTR_SUBWRSPR1: REGISTER.SPW -= REGISTER._1W; continue;
case INSTR_SUBWRSPR2: REGISTER.SPW -= REGISTER._2W; continue;
case INSTR_SUBWRSPR3: REGISTER.SPW -= REGISTER._3W; continue;
case INSTR_SUBWRSPR4: REGISTER.SPW -= REGISTER._4W; continue;
case INSTR_SUBWRSPR5: REGISTER.SPW -= REGISTER._5W; continue;
case INSTR_SUBWRSPR6: REGISTER.SPW -= REGISTER._6W; continue;
case INSTR_SUBWRSPR7: REGISTER.SPW -= REGISTER._7W; continue;
case INSTR_SUBWRSPR8: REGISTER.SPW -= REGISTER._8W; continue;
case INSTR_SUBWRSPR9: REGISTER.SPW -= REGISTER._9W; continue;
case INSTR_SUBWRSPR10: REGISTER.SPW -= REGISTER._10W; continue;
case INSTR_SUBWRSPR11: REGISTER.SPW -= REGISTER._11W; continue;
case INSTR_SUBWRSPR12: REGISTER.SPW -= REGISTER._12W; continue;
case INSTR_SUBWRSPRIP: REGISTER.SPW -= REGISTER.IPW; continue;
case INSTR_SUBWRSPRSP: REGISTER.SPW -= REGISTER.SPW; continue;
case INSTR_SUBWRSPRBP: REGISTER.SPW -= REGISTER.BPW; continue;
case INSTR_SUBWRBPI: REGISTER.BPW -= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_SUBWRBPRA: REGISTER.BPW -= REGISTER.AW; continue;
case INSTR_SUBWRBPRB: REGISTER.BPW -= REGISTER.BW; continue;
case INSTR_SUBWRBPRC: REGISTER.BPW -= REGISTER.CW; continue;
case INSTR_SUBWRBPRD: REGISTER.BPW -= REGISTER.DW; continue;
case INSTR_SUBWRBPR0: REGISTER.BPW -= REGISTER._0W; continue;
case INSTR_SUBWRBPR1: REGISTER.BPW -= REGISTER._1W; continue;
case INSTR_SUBWRBPR2: REGISTER.BPW -= REGISTER._2W; continue;
case INSTR_SUBWRBPR3: REGISTER.BPW -= REGISTER._3W; continue;
case INSTR_SUBWRBPR4: REGISTER.BPW -= REGISTER._4W; continue;
case INSTR_SUBWRBPR5: REGISTER.BPW -= REGISTER._5W; continue;
case INSTR_SUBWRBPR6: REGISTER.BPW -= REGISTER._6W; continue;
case INSTR_SUBWRBPR7: REGISTER.BPW -= REGISTER._7W; continue;
case INSTR_SUBWRBPR8: REGISTER.BPW -= REGISTER._8W; continue;
case INSTR_SUBWRBPR9: REGISTER.BPW -= REGISTER._9W; continue;
case INSTR_SUBWRBPR10: REGISTER.BPW -= REGISTER._10W; continue;
case INSTR_SUBWRBPR11: REGISTER.BPW -= REGISTER._11W; continue;
case INSTR_SUBWRBPR12: REGISTER.BPW -= REGISTER._12W; continue;
case INSTR_SUBWRBPRIP: REGISTER.BPW -= REGISTER.IPW; continue;
case INSTR_SUBWRBPRSP: REGISTER.BPW -= REGISTER.SPW; continue;
case INSTR_SUBWRBPRBP: REGISTER.BPW -= REGISTER.BPW; continue;
case INSTR_SUBBRAI: REGISTER.AB -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBRARA: REGISTER.AB -= REGISTER.AB; continue;
case INSTR_SUBBRARB: REGISTER.AB -= REGISTER.BB; continue;
case INSTR_SUBBRARC: REGISTER.AB -= REGISTER.CB; continue;
case INSTR_SUBBRARD: REGISTER.AB -= REGISTER.DB; continue;
case INSTR_SUBBRAR0: REGISTER.AB -= REGISTER._0B; continue;
case INSTR_SUBBRAR1: REGISTER.AB -= REGISTER._1B; continue;
case INSTR_SUBBRAR2: REGISTER.AB -= REGISTER._2B; continue;
case INSTR_SUBBRAR3: REGISTER.AB -= REGISTER._3B; continue;
case INSTR_SUBBRAR4: REGISTER.AB -= REGISTER._4B; continue;
case INSTR_SUBBRAR5: REGISTER.AB -= REGISTER._5B; continue;
case INSTR_SUBBRAR6: REGISTER.AB -= REGISTER._6B; continue;
case INSTR_SUBBRAR7: REGISTER.AB -= REGISTER._7B; continue;
case INSTR_SUBBRAR8: REGISTER.AB -= REGISTER._8B; continue;
case INSTR_SUBBRAR9: REGISTER.AB -= REGISTER._9B; continue;
case INSTR_SUBBRAR10: REGISTER.AB -= REGISTER._10B; continue;
case INSTR_SUBBRAR11: REGISTER.AB -= REGISTER._11B; continue;
case INSTR_SUBBRAR12: REGISTER.AB -= REGISTER._12B; continue;
case INSTR_SUBBRARIP: REGISTER.AB -= REGISTER.IPB; continue;
case INSTR_SUBBRARSP: REGISTER.AB -= REGISTER.SPB; continue;
case INSTR_SUBBRARBP: REGISTER.AB -= REGISTER.BPB; continue;
case INSTR_SUBBRBI: REGISTER.BB -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBRBRA: REGISTER.BB -= REGISTER.AB; continue;
case INSTR_SUBBRBRB: REGISTER.BB -= REGISTER.BB; continue;
case INSTR_SUBBRBRC: REGISTER.BB -= REGISTER.CB; continue;
case INSTR_SUBBRBRD: REGISTER.BB -= REGISTER.DB; continue;
case INSTR_SUBBRBR0: REGISTER.BB -= REGISTER._0B; continue;
case INSTR_SUBBRBR1: REGISTER.BB -= REGISTER._1B; continue;
case INSTR_SUBBRBR2: REGISTER.BB -= REGISTER._2B; continue;
case INSTR_SUBBRBR3: REGISTER.BB -= REGISTER._3B; continue;
case INSTR_SUBBRBR4: REGISTER.BB -= REGISTER._4B; continue;
case INSTR_SUBBRBR5: REGISTER.BB -= REGISTER._5B; continue;
case INSTR_SUBBRBR6: REGISTER.BB -= REGISTER._6B; continue;
case INSTR_SUBBRBR7: REGISTER.BB -= REGISTER._7B; continue;
case INSTR_SUBBRBR8: REGISTER.BB -= REGISTER._8B; continue;
case INSTR_SUBBRBR9: REGISTER.BB -= REGISTER._9B; continue;
case INSTR_SUBBRBR10: REGISTER.BB -= REGISTER._10B; continue;
case INSTR_SUBBRBR11: REGISTER.BB -= REGISTER._11B; continue;
case INSTR_SUBBRBR12: REGISTER.BB -= REGISTER._12B; continue;
case INSTR_SUBBRBRIP: REGISTER.BB -= REGISTER.IPB; continue;
case INSTR_SUBBRBRSP: REGISTER.BB -= REGISTER.SPB; continue;
case INSTR_SUBBRBRBP: REGISTER.BB -= REGISTER.BPB; continue;
case INSTR_SUBBRCI: REGISTER.CB -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBRCRA: REGISTER.CB -= REGISTER.AB; continue;
case INSTR_SUBBRCRB: REGISTER.CB -= REGISTER.BB; continue;
case INSTR_SUBBRCRC: REGISTER.CB -= REGISTER.CB; continue;
case INSTR_SUBBRCRD: REGISTER.CB -= REGISTER.DB; continue;
case INSTR_SUBBRCR0: REGISTER.CB -= REGISTER._0B; continue;
case INSTR_SUBBRCR1: REGISTER.CB -= REGISTER._1B; continue;
case INSTR_SUBBRCR2: REGISTER.CB -= REGISTER._2B; continue;
case INSTR_SUBBRCR3: REGISTER.CB -= REGISTER._3B; continue;
case INSTR_SUBBRCR4: REGISTER.CB -= REGISTER._4B; continue;
case INSTR_SUBBRCR5: REGISTER.CB -= REGISTER._5B; continue;
case INSTR_SUBBRCR6: REGISTER.CB -= REGISTER._6B; continue;
case INSTR_SUBBRCR7: REGISTER.CB -= REGISTER._7B; continue;
case INSTR_SUBBRCR8: REGISTER.CB -= REGISTER._8B; continue;
case INSTR_SUBBRCR9: REGISTER.CB -= REGISTER._9B; continue;
case INSTR_SUBBRCR10: REGISTER.CB -= REGISTER._10B; continue;
case INSTR_SUBBRCR11: REGISTER.CB -= REGISTER._11B; continue;
case INSTR_SUBBRCR12: REGISTER.CB -= REGISTER._12B; continue;
case INSTR_SUBBRCRIP: REGISTER.CB -= REGISTER.IPB; continue;
case INSTR_SUBBRCRSP: REGISTER.CB -= REGISTER.SPB; continue;
case INSTR_SUBBRCRBP: REGISTER.CB -= REGISTER.BPB; continue;
case INSTR_SUBBRDI: REGISTER.DB -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBRDRA: REGISTER.DB -= REGISTER.AB; continue;
case INSTR_SUBBRDRB: REGISTER.DB -= REGISTER.BB; continue;
case INSTR_SUBBRDRC: REGISTER.DB -= REGISTER.CB; continue;
case INSTR_SUBBRDRD: REGISTER.DB -= REGISTER.DB; continue;
case INSTR_SUBBRDR0: REGISTER.DB -= REGISTER._0B; continue;
case INSTR_SUBBRDR1: REGISTER.DB -= REGISTER._1B; continue;
case INSTR_SUBBRDR2: REGISTER.DB -= REGISTER._2B; continue;
case INSTR_SUBBRDR3: REGISTER.DB -= REGISTER._3B; continue;
case INSTR_SUBBRDR4: REGISTER.DB -= REGISTER._4B; continue;
case INSTR_SUBBRDR5: REGISTER.DB -= REGISTER._5B; continue;
case INSTR_SUBBRDR6: REGISTER.DB -= REGISTER._6B; continue;
case INSTR_SUBBRDR7: REGISTER.DB -= REGISTER._7B; continue;
case INSTR_SUBBRDR8: REGISTER.DB -= REGISTER._8B; continue;
case INSTR_SUBBRDR9: REGISTER.DB -= REGISTER._9B; continue;
case INSTR_SUBBRDR10: REGISTER.DB -= REGISTER._10B; continue;
case INSTR_SUBBRDR11: REGISTER.DB -= REGISTER._11B; continue;
case INSTR_SUBBRDR12: REGISTER.DB -= REGISTER._12B; continue;
case INSTR_SUBBRDRIP: REGISTER.DB -= REGISTER.IPB; continue;
case INSTR_SUBBRDRSP: REGISTER.DB -= REGISTER.SPB; continue;
case INSTR_SUBBRDRBP: REGISTER.DB -= REGISTER.BPB; continue;
case INSTR_SUBBR0I: REGISTER._0B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR0RA: REGISTER._0B -= REGISTER.AB; continue;
case INSTR_SUBBR0RB: REGISTER._0B -= REGISTER.BB; continue;
case INSTR_SUBBR0RC: REGISTER._0B -= REGISTER.CB; continue;
case INSTR_SUBBR0RD: REGISTER._0B -= REGISTER.DB; continue;
case INSTR_SUBBR0R0: REGISTER._0B -= REGISTER._0B; continue;
case INSTR_SUBBR0R1: REGISTER._0B -= REGISTER._1B; continue;
case INSTR_SUBBR0R2: REGISTER._0B -= REGISTER._2B; continue;
case INSTR_SUBBR0R3: REGISTER._0B -= REGISTER._3B; continue;
case INSTR_SUBBR0R4: REGISTER._0B -= REGISTER._4B; continue;
case INSTR_SUBBR0R5: REGISTER._0B -= REGISTER._5B; continue;
case INSTR_SUBBR0R6: REGISTER._0B -= REGISTER._6B; continue;
case INSTR_SUBBR0R7: REGISTER._0B -= REGISTER._7B; continue;
case INSTR_SUBBR0R8: REGISTER._0B -= REGISTER._8B; continue;
case INSTR_SUBBR0R9: REGISTER._0B -= REGISTER._9B; continue;
case INSTR_SUBBR0R10: REGISTER._0B -= REGISTER._10B; continue;
case INSTR_SUBBR0R11: REGISTER._0B -= REGISTER._11B; continue;
case INSTR_SUBBR0R12: REGISTER._0B -= REGISTER._12B; continue;
case INSTR_SUBBR0RIP: REGISTER._0B -= REGISTER.IPB; continue;
case INSTR_SUBBR0RSP: REGISTER._0B -= REGISTER.SPB; continue;
case INSTR_SUBBR0RBP: REGISTER._0B -= REGISTER.BPB; continue;
case INSTR_SUBBR1I: REGISTER._1B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR1RA: REGISTER._1B -= REGISTER.AB; continue;
case INSTR_SUBBR1RB: REGISTER._1B -= REGISTER.BB; continue;
case INSTR_SUBBR1RC: REGISTER._1B -= REGISTER.CB; continue;
case INSTR_SUBBR1RD: REGISTER._1B -= REGISTER.DB; continue;
case INSTR_SUBBR1R0: REGISTER._1B -= REGISTER._0B; continue;
case INSTR_SUBBR1R1: REGISTER._1B -= REGISTER._1B; continue;
case INSTR_SUBBR1R2: REGISTER._1B -= REGISTER._2B; continue;
case INSTR_SUBBR1R3: REGISTER._1B -= REGISTER._3B; continue;
case INSTR_SUBBR1R4: REGISTER._1B -= REGISTER._4B; continue;
case INSTR_SUBBR1R5: REGISTER._1B -= REGISTER._5B; continue;
case INSTR_SUBBR1R6: REGISTER._1B -= REGISTER._6B; continue;
case INSTR_SUBBR1R7: REGISTER._1B -= REGISTER._7B; continue;
case INSTR_SUBBR1R8: REGISTER._1B -= REGISTER._8B; continue;
case INSTR_SUBBR1R9: REGISTER._1B -= REGISTER._9B; continue;
case INSTR_SUBBR1R10: REGISTER._1B -= REGISTER._10B; continue;
case INSTR_SUBBR1R11: REGISTER._1B -= REGISTER._11B; continue;
case INSTR_SUBBR1R12: REGISTER._1B -= REGISTER._12B; continue;
case INSTR_SUBBR1RIP: REGISTER._1B -= REGISTER.IPB; continue;
case INSTR_SUBBR1RSP: REGISTER._1B -= REGISTER.SPB; continue;
case INSTR_SUBBR1RBP: REGISTER._1B -= REGISTER.BPB; continue;
case INSTR_SUBBR2I: REGISTER._2B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR2RA: REGISTER._2B -= REGISTER.AB; continue;
case INSTR_SUBBR2RB: REGISTER._2B -= REGISTER.BB; continue;
case INSTR_SUBBR2RC: REGISTER._2B -= REGISTER.CB; continue;
case INSTR_SUBBR2RD: REGISTER._2B -= REGISTER.DB; continue;
case INSTR_SUBBR2R0: REGISTER._2B -= REGISTER._0B; continue;
case INSTR_SUBBR2R1: REGISTER._2B -= REGISTER._1B; continue;
case INSTR_SUBBR2R2: REGISTER._2B -= REGISTER._2B; continue;
case INSTR_SUBBR2R3: REGISTER._2B -= REGISTER._3B; continue;
case INSTR_SUBBR2R4: REGISTER._2B -= REGISTER._4B; continue;
case INSTR_SUBBR2R5: REGISTER._2B -= REGISTER._5B; continue;
case INSTR_SUBBR2R6: REGISTER._2B -= REGISTER._6B; continue;
case INSTR_SUBBR2R7: REGISTER._2B -= REGISTER._7B; continue;
case INSTR_SUBBR2R8: REGISTER._2B -= REGISTER._8B; continue;
case INSTR_SUBBR2R9: REGISTER._2B -= REGISTER._9B; continue;
case INSTR_SUBBR2R10: REGISTER._2B -= REGISTER._10B; continue;
case INSTR_SUBBR2R11: REGISTER._2B -= REGISTER._11B; continue;
case INSTR_SUBBR2R12: REGISTER._2B -= REGISTER._12B; continue;
case INSTR_SUBBR2RIP: REGISTER._2B -= REGISTER.IPB; continue;
case INSTR_SUBBR2RSP: REGISTER._2B -= REGISTER.SPB; continue;
case INSTR_SUBBR2RBP: REGISTER._2B -= REGISTER.BPB; continue;
case INSTR_SUBBR3I: REGISTER._3B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR3RA: REGISTER._3B -= REGISTER.AB; continue;
case INSTR_SUBBR3RB: REGISTER._3B -= REGISTER.BB; continue;
case INSTR_SUBBR3RC: REGISTER._3B -= REGISTER.CB; continue;
case INSTR_SUBBR3RD: REGISTER._3B -= REGISTER.DB; continue;
case INSTR_SUBBR3R0: REGISTER._3B -= REGISTER._0B; continue;
case INSTR_SUBBR3R1: REGISTER._3B -= REGISTER._1B; continue;
case INSTR_SUBBR3R2: REGISTER._3B -= REGISTER._2B; continue;
case INSTR_SUBBR3R3: REGISTER._3B -= REGISTER._3B; continue;
case INSTR_SUBBR3R4: REGISTER._3B -= REGISTER._4B; continue;
case INSTR_SUBBR3R5: REGISTER._3B -= REGISTER._5B; continue;
case INSTR_SUBBR3R6: REGISTER._3B -= REGISTER._6B; continue;
case INSTR_SUBBR3R7: REGISTER._3B -= REGISTER._7B; continue;
case INSTR_SUBBR3R8: REGISTER._3B -= REGISTER._8B; continue;
case INSTR_SUBBR3R9: REGISTER._3B -= REGISTER._9B; continue;
case INSTR_SUBBR3R10: REGISTER._3B -= REGISTER._10B; continue;
case INSTR_SUBBR3R11: REGISTER._3B -= REGISTER._11B; continue;
case INSTR_SUBBR3R12: REGISTER._3B -= REGISTER._12B; continue;
case INSTR_SUBBR3RIP: REGISTER._3B -= REGISTER.IPB; continue;
case INSTR_SUBBR3RSP: REGISTER._3B -= REGISTER.SPB; continue;
case INSTR_SUBBR3RBP: REGISTER._3B -= REGISTER.BPB; continue;
case INSTR_SUBBR4I: REGISTER._4B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR4RA: REGISTER._4B -= REGISTER.AB; continue;
case INSTR_SUBBR4RB: REGISTER._4B -= REGISTER.BB; continue;
case INSTR_SUBBR4RC: REGISTER._4B -= REGISTER.CB; continue;
case INSTR_SUBBR4RD: REGISTER._4B -= REGISTER.DB; continue;
case INSTR_SUBBR4R0: REGISTER._4B -= REGISTER._0B; continue;
case INSTR_SUBBR4R1: REGISTER._4B -= REGISTER._1B; continue;
case INSTR_SUBBR4R2: REGISTER._4B -= REGISTER._2B; continue;
case INSTR_SUBBR4R3: REGISTER._4B -= REGISTER._3B; continue;
case INSTR_SUBBR4R4: REGISTER._4B -= REGISTER._4B; continue;
case INSTR_SUBBR4R5: REGISTER._4B -= REGISTER._5B; continue;
case INSTR_SUBBR4R6: REGISTER._4B -= REGISTER._6B; continue;
case INSTR_SUBBR4R7: REGISTER._4B -= REGISTER._7B; continue;
case INSTR_SUBBR4R8: REGISTER._4B -= REGISTER._8B; continue;
case INSTR_SUBBR4R9: REGISTER._4B -= REGISTER._9B; continue;
case INSTR_SUBBR4R10: REGISTER._4B -= REGISTER._10B; continue;
case INSTR_SUBBR4R11: REGISTER._4B -= REGISTER._11B; continue;
case INSTR_SUBBR4R12: REGISTER._4B -= REGISTER._12B; continue;
case INSTR_SUBBR4RIP: REGISTER._4B -= REGISTER.IPB; continue;
case INSTR_SUBBR4RSP: REGISTER._4B -= REGISTER.SPB; continue;
case INSTR_SUBBR4RBP: REGISTER._4B -= REGISTER.BPB; continue;
case INSTR_SUBBR5I: REGISTER._5B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR5RA: REGISTER._5B -= REGISTER.AB; continue;
case INSTR_SUBBR5RB: REGISTER._5B -= REGISTER.BB; continue;
case INSTR_SUBBR5RC: REGISTER._5B -= REGISTER.CB; continue;
case INSTR_SUBBR5RD: REGISTER._5B -= REGISTER.DB; continue;
case INSTR_SUBBR5R0: REGISTER._5B -= REGISTER._0B; continue;
case INSTR_SUBBR5R1: REGISTER._5B -= REGISTER._1B; continue;
case INSTR_SUBBR5R2: REGISTER._5B -= REGISTER._2B; continue;
case INSTR_SUBBR5R3: REGISTER._5B -= REGISTER._3B; continue;
case INSTR_SUBBR5R4: REGISTER._5B -= REGISTER._4B; continue;
case INSTR_SUBBR5R5: REGISTER._5B -= REGISTER._5B; continue;
case INSTR_SUBBR5R6: REGISTER._5B -= REGISTER._6B; continue;
case INSTR_SUBBR5R7: REGISTER._5B -= REGISTER._7B; continue;
case INSTR_SUBBR5R8: REGISTER._5B -= REGISTER._8B; continue;
case INSTR_SUBBR5R9: REGISTER._5B -= REGISTER._9B; continue;
case INSTR_SUBBR5R10: REGISTER._5B -= REGISTER._10B; continue;
case INSTR_SUBBR5R11: REGISTER._5B -= REGISTER._11B; continue;
case INSTR_SUBBR5R12: REGISTER._5B -= REGISTER._12B; continue;
case INSTR_SUBBR5RIP: REGISTER._5B -= REGISTER.IPB; continue;
case INSTR_SUBBR5RSP: REGISTER._5B -= REGISTER.SPB; continue;
case INSTR_SUBBR5RBP: REGISTER._5B -= REGISTER.BPB; continue;
case INSTR_SUBBR6I: REGISTER._6B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR6RA: REGISTER._6B -= REGISTER.AB; continue;
case INSTR_SUBBR6RB: REGISTER._6B -= REGISTER.BB; continue;
case INSTR_SUBBR6RC: REGISTER._6B -= REGISTER.CB; continue;
case INSTR_SUBBR6RD: REGISTER._6B -= REGISTER.DB; continue;
case INSTR_SUBBR6R0: REGISTER._6B -= REGISTER._0B; continue;
case INSTR_SUBBR6R1: REGISTER._6B -= REGISTER._1B; continue;
case INSTR_SUBBR6R2: REGISTER._6B -= REGISTER._2B; continue;
case INSTR_SUBBR6R3: REGISTER._6B -= REGISTER._3B; continue;
case INSTR_SUBBR6R4: REGISTER._6B -= REGISTER._4B; continue;
case INSTR_SUBBR6R5: REGISTER._6B -= REGISTER._5B; continue;
case INSTR_SUBBR6R6: REGISTER._6B -= REGISTER._6B; continue;
case INSTR_SUBBR6R7: REGISTER._6B -= REGISTER._7B; continue;
case INSTR_SUBBR6R8: REGISTER._6B -= REGISTER._8B; continue;
case INSTR_SUBBR6R9: REGISTER._6B -= REGISTER._9B; continue;
case INSTR_SUBBR6R10: REGISTER._6B -= REGISTER._10B; continue;
case INSTR_SUBBR6R11: REGISTER._6B -= REGISTER._11B; continue;
case INSTR_SUBBR6R12: REGISTER._6B -= REGISTER._12B; continue;
case INSTR_SUBBR6RIP: REGISTER._6B -= REGISTER.IPB; continue;
case INSTR_SUBBR6RSP: REGISTER._6B -= REGISTER.SPB; continue;
case INSTR_SUBBR6RBP: REGISTER._6B -= REGISTER.BPB; continue;
case INSTR_SUBBR7I: REGISTER._7B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR7RA: REGISTER._7B -= REGISTER.AB; continue;
case INSTR_SUBBR7RB: REGISTER._7B -= REGISTER.BB; continue;
case INSTR_SUBBR7RC: REGISTER._7B -= REGISTER.CB; continue;
case INSTR_SUBBR7RD: REGISTER._7B -= REGISTER.DB; continue;
case INSTR_SUBBR7R0: REGISTER._7B -= REGISTER._0B; continue;
case INSTR_SUBBR7R1: REGISTER._7B -= REGISTER._1B; continue;
case INSTR_SUBBR7R2: REGISTER._7B -= REGISTER._2B; continue;
case INSTR_SUBBR7R3: REGISTER._7B -= REGISTER._3B; continue;
case INSTR_SUBBR7R4: REGISTER._7B -= REGISTER._4B; continue;
case INSTR_SUBBR7R5: REGISTER._7B -= REGISTER._5B; continue;
case INSTR_SUBBR7R6: REGISTER._7B -= REGISTER._6B; continue;
case INSTR_SUBBR7R7: REGISTER._7B -= REGISTER._7B; continue;
case INSTR_SUBBR7R8: REGISTER._7B -= REGISTER._8B; continue;
case INSTR_SUBBR7R9: REGISTER._7B -= REGISTER._9B; continue;
case INSTR_SUBBR7R10: REGISTER._7B -= REGISTER._10B; continue;
case INSTR_SUBBR7R11: REGISTER._7B -= REGISTER._11B; continue;
case INSTR_SUBBR7R12: REGISTER._7B -= REGISTER._12B; continue;
case INSTR_SUBBR7RIP: REGISTER._7B -= REGISTER.IPB; continue;
case INSTR_SUBBR7RSP: REGISTER._7B -= REGISTER.SPB; continue;
case INSTR_SUBBR7RBP: REGISTER._7B -= REGISTER.BPB; continue;
case INSTR_SUBBR8I: REGISTER._8B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR8RA: REGISTER._8B -= REGISTER.AB; continue;
case INSTR_SUBBR8RB: REGISTER._8B -= REGISTER.BB; continue;
case INSTR_SUBBR8RC: REGISTER._8B -= REGISTER.CB; continue;
case INSTR_SUBBR8RD: REGISTER._8B -= REGISTER.DB; continue;
case INSTR_SUBBR8R0: REGISTER._8B -= REGISTER._0B; continue;
case INSTR_SUBBR8R1: REGISTER._8B -= REGISTER._1B; continue;
case INSTR_SUBBR8R2: REGISTER._8B -= REGISTER._2B; continue;
case INSTR_SUBBR8R3: REGISTER._8B -= REGISTER._3B; continue;
case INSTR_SUBBR8R4: REGISTER._8B -= REGISTER._4B; continue;
case INSTR_SUBBR8R5: REGISTER._8B -= REGISTER._5B; continue;
case INSTR_SUBBR8R6: REGISTER._8B -= REGISTER._6B; continue;
case INSTR_SUBBR8R7: REGISTER._8B -= REGISTER._7B; continue;
case INSTR_SUBBR8R8: REGISTER._8B -= REGISTER._8B; continue;
case INSTR_SUBBR8R9: REGISTER._8B -= REGISTER._9B; continue;
case INSTR_SUBBR8R10: REGISTER._8B -= REGISTER._10B; continue;
case INSTR_SUBBR8R11: REGISTER._8B -= REGISTER._11B; continue;
case INSTR_SUBBR8R12: REGISTER._8B -= REGISTER._12B; continue;
case INSTR_SUBBR8RIP: REGISTER._8B -= REGISTER.IPB; continue;
case INSTR_SUBBR8RSP: REGISTER._8B -= REGISTER.SPB; continue;
case INSTR_SUBBR8RBP: REGISTER._8B -= REGISTER.BPB; continue;
case INSTR_SUBBR9I: REGISTER._9B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR9RA: REGISTER._9B -= REGISTER.AB; continue;
case INSTR_SUBBR9RB: REGISTER._9B -= REGISTER.BB; continue;
case INSTR_SUBBR9RC: REGISTER._9B -= REGISTER.CB; continue;
case INSTR_SUBBR9RD: REGISTER._9B -= REGISTER.DB; continue;
case INSTR_SUBBR9R0: REGISTER._9B -= REGISTER._0B; continue;
case INSTR_SUBBR9R1: REGISTER._9B -= REGISTER._1B; continue;
case INSTR_SUBBR9R2: REGISTER._9B -= REGISTER._2B; continue;
case INSTR_SUBBR9R3: REGISTER._9B -= REGISTER._3B; continue;
case INSTR_SUBBR9R4: REGISTER._9B -= REGISTER._4B; continue;
case INSTR_SUBBR9R5: REGISTER._9B -= REGISTER._5B; continue;
case INSTR_SUBBR9R6: REGISTER._9B -= REGISTER._6B; continue;
case INSTR_SUBBR9R7: REGISTER._9B -= REGISTER._7B; continue;
case INSTR_SUBBR9R8: REGISTER._9B -= REGISTER._8B; continue;
case INSTR_SUBBR9R9: REGISTER._9B -= REGISTER._9B; continue;
case INSTR_SUBBR9R10: REGISTER._9B -= REGISTER._10B; continue;
case INSTR_SUBBR9R11: REGISTER._9B -= REGISTER._11B; continue;
case INSTR_SUBBR9R12: REGISTER._9B -= REGISTER._12B; continue;
case INSTR_SUBBR9RIP: REGISTER._9B -= REGISTER.IPB; continue;
case INSTR_SUBBR9RSP: REGISTER._9B -= REGISTER.SPB; continue;
case INSTR_SUBBR9RBP: REGISTER._9B -= REGISTER.BPB; continue;
case INSTR_SUBBR10I: REGISTER._10B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR10RA: REGISTER._10B -= REGISTER.AB; continue;
case INSTR_SUBBR10RB: REGISTER._10B -= REGISTER.BB; continue;
case INSTR_SUBBR10RC: REGISTER._10B -= REGISTER.CB; continue;
case INSTR_SUBBR10RD: REGISTER._10B -= REGISTER.DB; continue;
case INSTR_SUBBR10R0: REGISTER._10B -= REGISTER._0B; continue;
case INSTR_SUBBR10R1: REGISTER._10B -= REGISTER._1B; continue;
case INSTR_SUBBR10R2: REGISTER._10B -= REGISTER._2B; continue;
case INSTR_SUBBR10R3: REGISTER._10B -= REGISTER._3B; continue;
case INSTR_SUBBR10R4: REGISTER._10B -= REGISTER._4B; continue;
case INSTR_SUBBR10R5: REGISTER._10B -= REGISTER._5B; continue;
case INSTR_SUBBR10R6: REGISTER._10B -= REGISTER._6B; continue;
case INSTR_SUBBR10R7: REGISTER._10B -= REGISTER._7B; continue;
case INSTR_SUBBR10R8: REGISTER._10B -= REGISTER._8B; continue;
case INSTR_SUBBR10R9: REGISTER._10B -= REGISTER._9B; continue;
case INSTR_SUBBR10R10: REGISTER._10B -= REGISTER._10B; continue;
case INSTR_SUBBR10R11: REGISTER._10B -= REGISTER._11B; continue;
case INSTR_SUBBR10R12: REGISTER._10B -= REGISTER._12B; continue;
case INSTR_SUBBR10RIP: REGISTER._10B -= REGISTER.IPB; continue;
case INSTR_SUBBR10RSP: REGISTER._10B -= REGISTER.SPB; continue;
case INSTR_SUBBR10RBP: REGISTER._10B -= REGISTER.BPB; continue;
case INSTR_SUBBR11I: REGISTER._11B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR11RA: REGISTER._11B -= REGISTER.AB; continue;
case INSTR_SUBBR11RB: REGISTER._11B -= REGISTER.BB; continue;
case INSTR_SUBBR11RC: REGISTER._11B -= REGISTER.CB; continue;
case INSTR_SUBBR11RD: REGISTER._11B -= REGISTER.DB; continue;
case INSTR_SUBBR11R0: REGISTER._11B -= REGISTER._0B; continue;
case INSTR_SUBBR11R1: REGISTER._11B -= REGISTER._1B; continue;
case INSTR_SUBBR11R2: REGISTER._11B -= REGISTER._2B; continue;
case INSTR_SUBBR11R3: REGISTER._11B -= REGISTER._3B; continue;
case INSTR_SUBBR11R4: REGISTER._11B -= REGISTER._4B; continue;
case INSTR_SUBBR11R5: REGISTER._11B -= REGISTER._5B; continue;
case INSTR_SUBBR11R6: REGISTER._11B -= REGISTER._6B; continue;
case INSTR_SUBBR11R7: REGISTER._11B -= REGISTER._7B; continue;
case INSTR_SUBBR11R8: REGISTER._11B -= REGISTER._8B; continue;
case INSTR_SUBBR11R9: REGISTER._11B -= REGISTER._9B; continue;
case INSTR_SUBBR11R10: REGISTER._11B -= REGISTER._10B; continue;
case INSTR_SUBBR11R11: REGISTER._11B -= REGISTER._11B; continue;
case INSTR_SUBBR11R12: REGISTER._11B -= REGISTER._12B; continue;
case INSTR_SUBBR11RIP: REGISTER._11B -= REGISTER.IPB; continue;
case INSTR_SUBBR11RSP: REGISTER._11B -= REGISTER.SPB; continue;
case INSTR_SUBBR11RBP: REGISTER._11B -= REGISTER.BPB; continue;
case INSTR_SUBBR12I: REGISTER._12B -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBR12RA: REGISTER._12B -= REGISTER.AB; continue;
case INSTR_SUBBR12RB: REGISTER._12B -= REGISTER.BB; continue;
case INSTR_SUBBR12RC: REGISTER._12B -= REGISTER.CB; continue;
case INSTR_SUBBR12RD: REGISTER._12B -= REGISTER.DB; continue;
case INSTR_SUBBR12R0: REGISTER._12B -= REGISTER._0B; continue;
case INSTR_SUBBR12R1: REGISTER._12B -= REGISTER._1B; continue;
case INSTR_SUBBR12R2: REGISTER._12B -= REGISTER._2B; continue;
case INSTR_SUBBR12R3: REGISTER._12B -= REGISTER._3B; continue;
case INSTR_SUBBR12R4: REGISTER._12B -= REGISTER._4B; continue;
case INSTR_SUBBR12R5: REGISTER._12B -= REGISTER._5B; continue;
case INSTR_SUBBR12R6: REGISTER._12B -= REGISTER._6B; continue;
case INSTR_SUBBR12R7: REGISTER._12B -= REGISTER._7B; continue;
case INSTR_SUBBR12R8: REGISTER._12B -= REGISTER._8B; continue;
case INSTR_SUBBR12R9: REGISTER._12B -= REGISTER._9B; continue;
case INSTR_SUBBR12R10: REGISTER._12B -= REGISTER._10B; continue;
case INSTR_SUBBR12R11: REGISTER._12B -= REGISTER._11B; continue;
case INSTR_SUBBR12R12: REGISTER._12B -= REGISTER._12B; continue;
case INSTR_SUBBR12RIP: REGISTER._12B -= REGISTER.IPB; continue;
case INSTR_SUBBR12RSP: REGISTER._12B -= REGISTER.SPB; continue;
case INSTR_SUBBR12RBP: REGISTER._12B -= REGISTER.BPB; continue;
case INSTR_SUBBRIPI: REGISTER.IPB -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBRIPRA: REGISTER.IPB -= REGISTER.AB; continue;
case INSTR_SUBBRIPRB: REGISTER.IPB -= REGISTER.BB; continue;
case INSTR_SUBBRIPRC: REGISTER.IPB -= REGISTER.CB; continue;
case INSTR_SUBBRIPRD: REGISTER.IPB -= REGISTER.DB; continue;
case INSTR_SUBBRIPR0: REGISTER.IPB -= REGISTER._0B; continue;
case INSTR_SUBBRIPR1: REGISTER.IPB -= REGISTER._1B; continue;
case INSTR_SUBBRIPR2: REGISTER.IPB -= REGISTER._2B; continue;
case INSTR_SUBBRIPR3: REGISTER.IPB -= REGISTER._3B; continue;
case INSTR_SUBBRIPR4: REGISTER.IPB -= REGISTER._4B; continue;
case INSTR_SUBBRIPR5: REGISTER.IPB -= REGISTER._5B; continue;
case INSTR_SUBBRIPR6: REGISTER.IPB -= REGISTER._6B; continue;
case INSTR_SUBBRIPR7: REGISTER.IPB -= REGISTER._7B; continue;
case INSTR_SUBBRIPR8: REGISTER.IPB -= REGISTER._8B; continue;
case INSTR_SUBBRIPR9: REGISTER.IPB -= REGISTER._9B; continue;
case INSTR_SUBBRIPR10: REGISTER.IPB -= REGISTER._10B; continue;
case INSTR_SUBBRIPR11: REGISTER.IPB -= REGISTER._11B; continue;
case INSTR_SUBBRIPR12: REGISTER.IPB -= REGISTER._12B; continue;
case INSTR_SUBBRIPRIP: REGISTER.IPB -= REGISTER.IPB; continue;
case INSTR_SUBBRIPRSP: REGISTER.IPB -= REGISTER.SPB; continue;
case INSTR_SUBBRIPRBP: REGISTER.IPB -= REGISTER.BPB; continue;
case INSTR_SUBBRSPI: REGISTER.SPB -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBRSPRA: REGISTER.SPB -= REGISTER.AB; continue;
case INSTR_SUBBRSPRB: REGISTER.SPB -= REGISTER.BB; continue;
case INSTR_SUBBRSPRC: REGISTER.SPB -= REGISTER.CB; continue;
case INSTR_SUBBRSPRD: REGISTER.SPB -= REGISTER.DB; continue;
case INSTR_SUBBRSPR0: REGISTER.SPB -= REGISTER._0B; continue;
case INSTR_SUBBRSPR1: REGISTER.SPB -= REGISTER._1B; continue;
case INSTR_SUBBRSPR2: REGISTER.SPB -= REGISTER._2B; continue;
case INSTR_SUBBRSPR3: REGISTER.SPB -= REGISTER._3B; continue;
case INSTR_SUBBRSPR4: REGISTER.SPB -= REGISTER._4B; continue;
case INSTR_SUBBRSPR5: REGISTER.SPB -= REGISTER._5B; continue;
case INSTR_SUBBRSPR6: REGISTER.SPB -= REGISTER._6B; continue;
case INSTR_SUBBRSPR7: REGISTER.SPB -= REGISTER._7B; continue;
case INSTR_SUBBRSPR8: REGISTER.SPB -= REGISTER._8B; continue;
case INSTR_SUBBRSPR9: REGISTER.SPB -= REGISTER._9B; continue;
case INSTR_SUBBRSPR10: REGISTER.SPB -= REGISTER._10B; continue;
case INSTR_SUBBRSPR11: REGISTER.SPB -= REGISTER._11B; continue;
case INSTR_SUBBRSPR12: REGISTER.SPB -= REGISTER._12B; continue;
case INSTR_SUBBRSPRIP: REGISTER.SPB -= REGISTER.IPB; continue;
case INSTR_SUBBRSPRSP: REGISTER.SPB -= REGISTER.SPB; continue;
case INSTR_SUBBRSPRBP: REGISTER.SPB -= REGISTER.BPB; continue;
case INSTR_SUBBRBPI: REGISTER.BPB -= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_SUBBRBPRA: REGISTER.BPB -= REGISTER.AB; continue;
case INSTR_SUBBRBPRB: REGISTER.BPB -= REGISTER.BB; continue;
case INSTR_SUBBRBPRC: REGISTER.BPB -= REGISTER.CB; continue;
case INSTR_SUBBRBPRD: REGISTER.BPB -= REGISTER.DB; continue;
case INSTR_SUBBRBPR0: REGISTER.BPB -= REGISTER._0B; continue;
case INSTR_SUBBRBPR1: REGISTER.BPB -= REGISTER._1B; continue;
case INSTR_SUBBRBPR2: REGISTER.BPB -= REGISTER._2B; continue;
case INSTR_SUBBRBPR3: REGISTER.BPB -= REGISTER._3B; continue;
case INSTR_SUBBRBPR4: REGISTER.BPB -= REGISTER._4B; continue;
case INSTR_SUBBRBPR5: REGISTER.BPB -= REGISTER._5B; continue;
case INSTR_SUBBRBPR6: REGISTER.BPB -= REGISTER._6B; continue;
case INSTR_SUBBRBPR7: REGISTER.BPB -= REGISTER._7B; continue;
case INSTR_SUBBRBPR8: REGISTER.BPB -= REGISTER._8B; continue;
case INSTR_SUBBRBPR9: REGISTER.BPB -= REGISTER._9B; continue;
case INSTR_SUBBRBPR10: REGISTER.BPB -= REGISTER._10B; continue;
case INSTR_SUBBRBPR11: REGISTER.BPB -= REGISTER._11B; continue;
case INSTR_SUBBRBPR12: REGISTER.BPB -= REGISTER._12B; continue;
case INSTR_SUBBRBPRIP: REGISTER.BPB -= REGISTER.IPB; continue;
case INSTR_SUBBRBPRSP: REGISTER.BPB -= REGISTER.SPB; continue;
case INSTR_SUBBRBPRBP: REGISTER.BPB -= REGISTER.BPB; continue;
case INSTR_MULQRAI: REGISTER.AQ *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQRARA: REGISTER.AQ *= REGISTER.AQ; continue;
case INSTR_MULQRARB: REGISTER.AQ *= REGISTER.BQ; continue;
case INSTR_MULQRARC: REGISTER.AQ *= REGISTER.CQ; continue;
case INSTR_MULQRARD: REGISTER.AQ *= REGISTER.DQ; continue;
case INSTR_MULQRAR0: REGISTER.AQ *= REGISTER._0Q; continue;
case INSTR_MULQRAR1: REGISTER.AQ *= REGISTER._1Q; continue;
case INSTR_MULQRAR2: REGISTER.AQ *= REGISTER._2Q; continue;
case INSTR_MULQRAR3: REGISTER.AQ *= REGISTER._3Q; continue;
case INSTR_MULQRAR4: REGISTER.AQ *= REGISTER._4Q; continue;
case INSTR_MULQRAR5: REGISTER.AQ *= REGISTER._5Q; continue;
case INSTR_MULQRAR6: REGISTER.AQ *= REGISTER._6Q; continue;
case INSTR_MULQRAR7: REGISTER.AQ *= REGISTER._7Q; continue;
case INSTR_MULQRAR8: REGISTER.AQ *= REGISTER._8Q; continue;
case INSTR_MULQRAR9: REGISTER.AQ *= REGISTER._9Q; continue;
case INSTR_MULQRAR10: REGISTER.AQ *= REGISTER._10Q; continue;
case INSTR_MULQRAR11: REGISTER.AQ *= REGISTER._11Q; continue;
case INSTR_MULQRAR12: REGISTER.AQ *= REGISTER._12Q; continue;
case INSTR_MULQRARIP: REGISTER.AQ *= REGISTER.IPQ; continue;
case INSTR_MULQRARSP: REGISTER.AQ *= REGISTER.SPQ; continue;
case INSTR_MULQRARBP: REGISTER.AQ *= REGISTER.BPQ; continue;
case INSTR_MULQRBI: REGISTER.BQ *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQRBRA: REGISTER.BQ *= REGISTER.AQ; continue;
case INSTR_MULQRBRB: REGISTER.BQ *= REGISTER.BQ; continue;
case INSTR_MULQRBRC: REGISTER.BQ *= REGISTER.CQ; continue;
case INSTR_MULQRBRD: REGISTER.BQ *= REGISTER.DQ; continue;
case INSTR_MULQRBR0: REGISTER.BQ *= REGISTER._0Q; continue;
case INSTR_MULQRBR1: REGISTER.BQ *= REGISTER._1Q; continue;
case INSTR_MULQRBR2: REGISTER.BQ *= REGISTER._2Q; continue;
case INSTR_MULQRBR3: REGISTER.BQ *= REGISTER._3Q; continue;
case INSTR_MULQRBR4: REGISTER.BQ *= REGISTER._4Q; continue;
case INSTR_MULQRBR5: REGISTER.BQ *= REGISTER._5Q; continue;
case INSTR_MULQRBR6: REGISTER.BQ *= REGISTER._6Q; continue;
case INSTR_MULQRBR7: REGISTER.BQ *= REGISTER._7Q; continue;
case INSTR_MULQRBR8: REGISTER.BQ *= REGISTER._8Q; continue;
case INSTR_MULQRBR9: REGISTER.BQ *= REGISTER._9Q; continue;
case INSTR_MULQRBR10: REGISTER.BQ *= REGISTER._10Q; continue;
case INSTR_MULQRBR11: REGISTER.BQ *= REGISTER._11Q; continue;
case INSTR_MULQRBR12: REGISTER.BQ *= REGISTER._12Q; continue;
case INSTR_MULQRBRIP: REGISTER.BQ *= REGISTER.IPQ; continue;
case INSTR_MULQRBRSP: REGISTER.BQ *= REGISTER.SPQ; continue;
case INSTR_MULQRBRBP: REGISTER.BQ *= REGISTER.BPQ; continue;
case INSTR_MULQRCI: REGISTER.CQ *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQRCRA: REGISTER.CQ *= REGISTER.AQ; continue;
case INSTR_MULQRCRB: REGISTER.CQ *= REGISTER.BQ; continue;
case INSTR_MULQRCRC: REGISTER.CQ *= REGISTER.CQ; continue;
case INSTR_MULQRCRD: REGISTER.CQ *= REGISTER.DQ; continue;
case INSTR_MULQRCR0: REGISTER.CQ *= REGISTER._0Q; continue;
case INSTR_MULQRCR1: REGISTER.CQ *= REGISTER._1Q; continue;
case INSTR_MULQRCR2: REGISTER.CQ *= REGISTER._2Q; continue;
case INSTR_MULQRCR3: REGISTER.CQ *= REGISTER._3Q; continue;
case INSTR_MULQRCR4: REGISTER.CQ *= REGISTER._4Q; continue;
case INSTR_MULQRCR5: REGISTER.CQ *= REGISTER._5Q; continue;
case INSTR_MULQRCR6: REGISTER.CQ *= REGISTER._6Q; continue;
case INSTR_MULQRCR7: REGISTER.CQ *= REGISTER._7Q; continue;
case INSTR_MULQRCR8: REGISTER.CQ *= REGISTER._8Q; continue;
case INSTR_MULQRCR9: REGISTER.CQ *= REGISTER._9Q; continue;
case INSTR_MULQRCR10: REGISTER.CQ *= REGISTER._10Q; continue;
case INSTR_MULQRCR11: REGISTER.CQ *= REGISTER._11Q; continue;
case INSTR_MULQRCR12: REGISTER.CQ *= REGISTER._12Q; continue;
case INSTR_MULQRCRIP: REGISTER.CQ *= REGISTER.IPQ; continue;
case INSTR_MULQRCRSP: REGISTER.CQ *= REGISTER.SPQ; continue;
case INSTR_MULQRCRBP: REGISTER.CQ *= REGISTER.BPQ; continue;
case INSTR_MULQRDI: REGISTER.DQ *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQRDRA: REGISTER.DQ *= REGISTER.AQ; continue;
case INSTR_MULQRDRB: REGISTER.DQ *= REGISTER.BQ; continue;
case INSTR_MULQRDRC: REGISTER.DQ *= REGISTER.CQ; continue;
case INSTR_MULQRDRD: REGISTER.DQ *= REGISTER.DQ; continue;
case INSTR_MULQRDR0: REGISTER.DQ *= REGISTER._0Q; continue;
case INSTR_MULQRDR1: REGISTER.DQ *= REGISTER._1Q; continue;
case INSTR_MULQRDR2: REGISTER.DQ *= REGISTER._2Q; continue;
case INSTR_MULQRDR3: REGISTER.DQ *= REGISTER._3Q; continue;
case INSTR_MULQRDR4: REGISTER.DQ *= REGISTER._4Q; continue;
case INSTR_MULQRDR5: REGISTER.DQ *= REGISTER._5Q; continue;
case INSTR_MULQRDR6: REGISTER.DQ *= REGISTER._6Q; continue;
case INSTR_MULQRDR7: REGISTER.DQ *= REGISTER._7Q; continue;
case INSTR_MULQRDR8: REGISTER.DQ *= REGISTER._8Q; continue;
case INSTR_MULQRDR9: REGISTER.DQ *= REGISTER._9Q; continue;
case INSTR_MULQRDR10: REGISTER.DQ *= REGISTER._10Q; continue;
case INSTR_MULQRDR11: REGISTER.DQ *= REGISTER._11Q; continue;
case INSTR_MULQRDR12: REGISTER.DQ *= REGISTER._12Q; continue;
case INSTR_MULQRDRIP: REGISTER.DQ *= REGISTER.IPQ; continue;
case INSTR_MULQRDRSP: REGISTER.DQ *= REGISTER.SPQ; continue;
case INSTR_MULQRDRBP: REGISTER.DQ *= REGISTER.BPQ; continue;
case INSTR_MULQR0I: REGISTER._0Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR0RA: REGISTER._0Q *= REGISTER.AQ; continue;
case INSTR_MULQR0RB: REGISTER._0Q *= REGISTER.BQ; continue;
case INSTR_MULQR0RC: REGISTER._0Q *= REGISTER.CQ; continue;
case INSTR_MULQR0RD: REGISTER._0Q *= REGISTER.DQ; continue;
case INSTR_MULQR0R0: REGISTER._0Q *= REGISTER._0Q; continue;
case INSTR_MULQR0R1: REGISTER._0Q *= REGISTER._1Q; continue;
case INSTR_MULQR0R2: REGISTER._0Q *= REGISTER._2Q; continue;
case INSTR_MULQR0R3: REGISTER._0Q *= REGISTER._3Q; continue;
case INSTR_MULQR0R4: REGISTER._0Q *= REGISTER._4Q; continue;
case INSTR_MULQR0R5: REGISTER._0Q *= REGISTER._5Q; continue;
case INSTR_MULQR0R6: REGISTER._0Q *= REGISTER._6Q; continue;
case INSTR_MULQR0R7: REGISTER._0Q *= REGISTER._7Q; continue;
case INSTR_MULQR0R8: REGISTER._0Q *= REGISTER._8Q; continue;
case INSTR_MULQR0R9: REGISTER._0Q *= REGISTER._9Q; continue;
case INSTR_MULQR0R10: REGISTER._0Q *= REGISTER._10Q; continue;
case INSTR_MULQR0R11: REGISTER._0Q *= REGISTER._11Q; continue;
case INSTR_MULQR0R12: REGISTER._0Q *= REGISTER._12Q; continue;
case INSTR_MULQR0RIP: REGISTER._0Q *= REGISTER.IPQ; continue;
case INSTR_MULQR0RSP: REGISTER._0Q *= REGISTER.SPQ; continue;
case INSTR_MULQR0RBP: REGISTER._0Q *= REGISTER.BPQ; continue;
case INSTR_MULQR1I: REGISTER._1Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR1RA: REGISTER._1Q *= REGISTER.AQ; continue;
case INSTR_MULQR1RB: REGISTER._1Q *= REGISTER.BQ; continue;
case INSTR_MULQR1RC: REGISTER._1Q *= REGISTER.CQ; continue;
case INSTR_MULQR1RD: REGISTER._1Q *= REGISTER.DQ; continue;
case INSTR_MULQR1R0: REGISTER._1Q *= REGISTER._0Q; continue;
case INSTR_MULQR1R1: REGISTER._1Q *= REGISTER._1Q; continue;
case INSTR_MULQR1R2: REGISTER._1Q *= REGISTER._2Q; continue;
case INSTR_MULQR1R3: REGISTER._1Q *= REGISTER._3Q; continue;
case INSTR_MULQR1R4: REGISTER._1Q *= REGISTER._4Q; continue;
case INSTR_MULQR1R5: REGISTER._1Q *= REGISTER._5Q; continue;
case INSTR_MULQR1R6: REGISTER._1Q *= REGISTER._6Q; continue;
case INSTR_MULQR1R7: REGISTER._1Q *= REGISTER._7Q; continue;
case INSTR_MULQR1R8: REGISTER._1Q *= REGISTER._8Q; continue;
case INSTR_MULQR1R9: REGISTER._1Q *= REGISTER._9Q; continue;
case INSTR_MULQR1R10: REGISTER._1Q *= REGISTER._10Q; continue;
case INSTR_MULQR1R11: REGISTER._1Q *= REGISTER._11Q; continue;
case INSTR_MULQR1R12: REGISTER._1Q *= REGISTER._12Q; continue;
case INSTR_MULQR1RIP: REGISTER._1Q *= REGISTER.IPQ; continue;
case INSTR_MULQR1RSP: REGISTER._1Q *= REGISTER.SPQ; continue;
case INSTR_MULQR1RBP: REGISTER._1Q *= REGISTER.BPQ; continue;
case INSTR_MULQR2I: REGISTER._2Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR2RA: REGISTER._2Q *= REGISTER.AQ; continue;
case INSTR_MULQR2RB: REGISTER._2Q *= REGISTER.BQ; continue;
case INSTR_MULQR2RC: REGISTER._2Q *= REGISTER.CQ; continue;
case INSTR_MULQR2RD: REGISTER._2Q *= REGISTER.DQ; continue;
case INSTR_MULQR2R0: REGISTER._2Q *= REGISTER._0Q; continue;
case INSTR_MULQR2R1: REGISTER._2Q *= REGISTER._1Q; continue;
case INSTR_MULQR2R2: REGISTER._2Q *= REGISTER._2Q; continue;
case INSTR_MULQR2R3: REGISTER._2Q *= REGISTER._3Q; continue;
case INSTR_MULQR2R4: REGISTER._2Q *= REGISTER._4Q; continue;
case INSTR_MULQR2R5: REGISTER._2Q *= REGISTER._5Q; continue;
case INSTR_MULQR2R6: REGISTER._2Q *= REGISTER._6Q; continue;
case INSTR_MULQR2R7: REGISTER._2Q *= REGISTER._7Q; continue;
case INSTR_MULQR2R8: REGISTER._2Q *= REGISTER._8Q; continue;
case INSTR_MULQR2R9: REGISTER._2Q *= REGISTER._9Q; continue;
case INSTR_MULQR2R10: REGISTER._2Q *= REGISTER._10Q; continue;
case INSTR_MULQR2R11: REGISTER._2Q *= REGISTER._11Q; continue;
case INSTR_MULQR2R12: REGISTER._2Q *= REGISTER._12Q; continue;
case INSTR_MULQR2RIP: REGISTER._2Q *= REGISTER.IPQ; continue;
case INSTR_MULQR2RSP: REGISTER._2Q *= REGISTER.SPQ; continue;
case INSTR_MULQR2RBP: REGISTER._2Q *= REGISTER.BPQ; continue;
case INSTR_MULQR3I: REGISTER._3Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR3RA: REGISTER._3Q *= REGISTER.AQ; continue;
case INSTR_MULQR3RB: REGISTER._3Q *= REGISTER.BQ; continue;
case INSTR_MULQR3RC: REGISTER._3Q *= REGISTER.CQ; continue;
case INSTR_MULQR3RD: REGISTER._3Q *= REGISTER.DQ; continue;
case INSTR_MULQR3R0: REGISTER._3Q *= REGISTER._0Q; continue;
case INSTR_MULQR3R1: REGISTER._3Q *= REGISTER._1Q; continue;
case INSTR_MULQR3R2: REGISTER._3Q *= REGISTER._2Q; continue;
case INSTR_MULQR3R3: REGISTER._3Q *= REGISTER._3Q; continue;
case INSTR_MULQR3R4: REGISTER._3Q *= REGISTER._4Q; continue;
case INSTR_MULQR3R5: REGISTER._3Q *= REGISTER._5Q; continue;
case INSTR_MULQR3R6: REGISTER._3Q *= REGISTER._6Q; continue;
case INSTR_MULQR3R7: REGISTER._3Q *= REGISTER._7Q; continue;
case INSTR_MULQR3R8: REGISTER._3Q *= REGISTER._8Q; continue;
case INSTR_MULQR3R9: REGISTER._3Q *= REGISTER._9Q; continue;
case INSTR_MULQR3R10: REGISTER._3Q *= REGISTER._10Q; continue;
case INSTR_MULQR3R11: REGISTER._3Q *= REGISTER._11Q; continue;
case INSTR_MULQR3R12: REGISTER._3Q *= REGISTER._12Q; continue;
case INSTR_MULQR3RIP: REGISTER._3Q *= REGISTER.IPQ; continue;
case INSTR_MULQR3RSP: REGISTER._3Q *= REGISTER.SPQ; continue;
case INSTR_MULQR3RBP: REGISTER._3Q *= REGISTER.BPQ; continue;
case INSTR_MULQR4I: REGISTER._4Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR4RA: REGISTER._4Q *= REGISTER.AQ; continue;
case INSTR_MULQR4RB: REGISTER._4Q *= REGISTER.BQ; continue;
case INSTR_MULQR4RC: REGISTER._4Q *= REGISTER.CQ; continue;
case INSTR_MULQR4RD: REGISTER._4Q *= REGISTER.DQ; continue;
case INSTR_MULQR4R0: REGISTER._4Q *= REGISTER._0Q; continue;
case INSTR_MULQR4R1: REGISTER._4Q *= REGISTER._1Q; continue;
case INSTR_MULQR4R2: REGISTER._4Q *= REGISTER._2Q; continue;
case INSTR_MULQR4R3: REGISTER._4Q *= REGISTER._3Q; continue;
case INSTR_MULQR4R4: REGISTER._4Q *= REGISTER._4Q; continue;
case INSTR_MULQR4R5: REGISTER._4Q *= REGISTER._5Q; continue;
case INSTR_MULQR4R6: REGISTER._4Q *= REGISTER._6Q; continue;
case INSTR_MULQR4R7: REGISTER._4Q *= REGISTER._7Q; continue;
case INSTR_MULQR4R8: REGISTER._4Q *= REGISTER._8Q; continue;
case INSTR_MULQR4R9: REGISTER._4Q *= REGISTER._9Q; continue;
case INSTR_MULQR4R10: REGISTER._4Q *= REGISTER._10Q; continue;
case INSTR_MULQR4R11: REGISTER._4Q *= REGISTER._11Q; continue;
case INSTR_MULQR4R12: REGISTER._4Q *= REGISTER._12Q; continue;
case INSTR_MULQR4RIP: REGISTER._4Q *= REGISTER.IPQ; continue;
case INSTR_MULQR4RSP: REGISTER._4Q *= REGISTER.SPQ; continue;
case INSTR_MULQR4RBP: REGISTER._4Q *= REGISTER.BPQ; continue;
case INSTR_MULQR5I: REGISTER._5Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR5RA: REGISTER._5Q *= REGISTER.AQ; continue;
case INSTR_MULQR5RB: REGISTER._5Q *= REGISTER.BQ; continue;
case INSTR_MULQR5RC: REGISTER._5Q *= REGISTER.CQ; continue;
case INSTR_MULQR5RD: REGISTER._5Q *= REGISTER.DQ; continue;
case INSTR_MULQR5R0: REGISTER._5Q *= REGISTER._0Q; continue;
case INSTR_MULQR5R1: REGISTER._5Q *= REGISTER._1Q; continue;
case INSTR_MULQR5R2: REGISTER._5Q *= REGISTER._2Q; continue;
case INSTR_MULQR5R3: REGISTER._5Q *= REGISTER._3Q; continue;
case INSTR_MULQR5R4: REGISTER._5Q *= REGISTER._4Q; continue;
case INSTR_MULQR5R5: REGISTER._5Q *= REGISTER._5Q; continue;
case INSTR_MULQR5R6: REGISTER._5Q *= REGISTER._6Q; continue;
case INSTR_MULQR5R7: REGISTER._5Q *= REGISTER._7Q; continue;
case INSTR_MULQR5R8: REGISTER._5Q *= REGISTER._8Q; continue;
case INSTR_MULQR5R9: REGISTER._5Q *= REGISTER._9Q; continue;
case INSTR_MULQR5R10: REGISTER._5Q *= REGISTER._10Q; continue;
case INSTR_MULQR5R11: REGISTER._5Q *= REGISTER._11Q; continue;
case INSTR_MULQR5R12: REGISTER._5Q *= REGISTER._12Q; continue;
case INSTR_MULQR5RIP: REGISTER._5Q *= REGISTER.IPQ; continue;
case INSTR_MULQR5RSP: REGISTER._5Q *= REGISTER.SPQ; continue;
case INSTR_MULQR5RBP: REGISTER._5Q *= REGISTER.BPQ; continue;
case INSTR_MULQR6I: REGISTER._6Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR6RA: REGISTER._6Q *= REGISTER.AQ; continue;
case INSTR_MULQR6RB: REGISTER._6Q *= REGISTER.BQ; continue;
case INSTR_MULQR6RC: REGISTER._6Q *= REGISTER.CQ; continue;
case INSTR_MULQR6RD: REGISTER._6Q *= REGISTER.DQ; continue;
case INSTR_MULQR6R0: REGISTER._6Q *= REGISTER._0Q; continue;
case INSTR_MULQR6R1: REGISTER._6Q *= REGISTER._1Q; continue;
case INSTR_MULQR6R2: REGISTER._6Q *= REGISTER._2Q; continue;
case INSTR_MULQR6R3: REGISTER._6Q *= REGISTER._3Q; continue;
case INSTR_MULQR6R4: REGISTER._6Q *= REGISTER._4Q; continue;
case INSTR_MULQR6R5: REGISTER._6Q *= REGISTER._5Q; continue;
case INSTR_MULQR6R6: REGISTER._6Q *= REGISTER._6Q; continue;
case INSTR_MULQR6R7: REGISTER._6Q *= REGISTER._7Q; continue;
case INSTR_MULQR6R8: REGISTER._6Q *= REGISTER._8Q; continue;
case INSTR_MULQR6R9: REGISTER._6Q *= REGISTER._9Q; continue;
case INSTR_MULQR6R10: REGISTER._6Q *= REGISTER._10Q; continue;
case INSTR_MULQR6R11: REGISTER._6Q *= REGISTER._11Q; continue;
case INSTR_MULQR6R12: REGISTER._6Q *= REGISTER._12Q; continue;
case INSTR_MULQR6RIP: REGISTER._6Q *= REGISTER.IPQ; continue;
case INSTR_MULQR6RSP: REGISTER._6Q *= REGISTER.SPQ; continue;
case INSTR_MULQR6RBP: REGISTER._6Q *= REGISTER.BPQ; continue;
case INSTR_MULQR7I: REGISTER._7Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR7RA: REGISTER._7Q *= REGISTER.AQ; continue;
case INSTR_MULQR7RB: REGISTER._7Q *= REGISTER.BQ; continue;
case INSTR_MULQR7RC: REGISTER._7Q *= REGISTER.CQ; continue;
case INSTR_MULQR7RD: REGISTER._7Q *= REGISTER.DQ; continue;
case INSTR_MULQR7R0: REGISTER._7Q *= REGISTER._0Q; continue;
case INSTR_MULQR7R1: REGISTER._7Q *= REGISTER._1Q; continue;
case INSTR_MULQR7R2: REGISTER._7Q *= REGISTER._2Q; continue;
case INSTR_MULQR7R3: REGISTER._7Q *= REGISTER._3Q; continue;
case INSTR_MULQR7R4: REGISTER._7Q *= REGISTER._4Q; continue;
case INSTR_MULQR7R5: REGISTER._7Q *= REGISTER._5Q; continue;
case INSTR_MULQR7R6: REGISTER._7Q *= REGISTER._6Q; continue;
case INSTR_MULQR7R7: REGISTER._7Q *= REGISTER._7Q; continue;
case INSTR_MULQR7R8: REGISTER._7Q *= REGISTER._8Q; continue;
case INSTR_MULQR7R9: REGISTER._7Q *= REGISTER._9Q; continue;
case INSTR_MULQR7R10: REGISTER._7Q *= REGISTER._10Q; continue;
case INSTR_MULQR7R11: REGISTER._7Q *= REGISTER._11Q; continue;
case INSTR_MULQR7R12: REGISTER._7Q *= REGISTER._12Q; continue;
case INSTR_MULQR7RIP: REGISTER._7Q *= REGISTER.IPQ; continue;
case INSTR_MULQR7RSP: REGISTER._7Q *= REGISTER.SPQ; continue;
case INSTR_MULQR7RBP: REGISTER._7Q *= REGISTER.BPQ; continue;
case INSTR_MULQR8I: REGISTER._8Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR8RA: REGISTER._8Q *= REGISTER.AQ; continue;
case INSTR_MULQR8RB: REGISTER._8Q *= REGISTER.BQ; continue;
case INSTR_MULQR8RC: REGISTER._8Q *= REGISTER.CQ; continue;
case INSTR_MULQR8RD: REGISTER._8Q *= REGISTER.DQ; continue;
case INSTR_MULQR8R0: REGISTER._8Q *= REGISTER._0Q; continue;
case INSTR_MULQR8R1: REGISTER._8Q *= REGISTER._1Q; continue;
case INSTR_MULQR8R2: REGISTER._8Q *= REGISTER._2Q; continue;
case INSTR_MULQR8R3: REGISTER._8Q *= REGISTER._3Q; continue;
case INSTR_MULQR8R4: REGISTER._8Q *= REGISTER._4Q; continue;
case INSTR_MULQR8R5: REGISTER._8Q *= REGISTER._5Q; continue;
case INSTR_MULQR8R6: REGISTER._8Q *= REGISTER._6Q; continue;
case INSTR_MULQR8R7: REGISTER._8Q *= REGISTER._7Q; continue;
case INSTR_MULQR8R8: REGISTER._8Q *= REGISTER._8Q; continue;
case INSTR_MULQR8R9: REGISTER._8Q *= REGISTER._9Q; continue;
case INSTR_MULQR8R10: REGISTER._8Q *= REGISTER._10Q; continue;
case INSTR_MULQR8R11: REGISTER._8Q *= REGISTER._11Q; continue;
case INSTR_MULQR8R12: REGISTER._8Q *= REGISTER._12Q; continue;
case INSTR_MULQR8RIP: REGISTER._8Q *= REGISTER.IPQ; continue;
case INSTR_MULQR8RSP: REGISTER._8Q *= REGISTER.SPQ; continue;
case INSTR_MULQR8RBP: REGISTER._8Q *= REGISTER.BPQ; continue;
case INSTR_MULQR9I: REGISTER._9Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR9RA: REGISTER._9Q *= REGISTER.AQ; continue;
case INSTR_MULQR9RB: REGISTER._9Q *= REGISTER.BQ; continue;
case INSTR_MULQR9RC: REGISTER._9Q *= REGISTER.CQ; continue;
case INSTR_MULQR9RD: REGISTER._9Q *= REGISTER.DQ; continue;
case INSTR_MULQR9R0: REGISTER._9Q *= REGISTER._0Q; continue;
case INSTR_MULQR9R1: REGISTER._9Q *= REGISTER._1Q; continue;
case INSTR_MULQR9R2: REGISTER._9Q *= REGISTER._2Q; continue;
case INSTR_MULQR9R3: REGISTER._9Q *= REGISTER._3Q; continue;
case INSTR_MULQR9R4: REGISTER._9Q *= REGISTER._4Q; continue;
case INSTR_MULQR9R5: REGISTER._9Q *= REGISTER._5Q; continue;
case INSTR_MULQR9R6: REGISTER._9Q *= REGISTER._6Q; continue;
case INSTR_MULQR9R7: REGISTER._9Q *= REGISTER._7Q; continue;
case INSTR_MULQR9R8: REGISTER._9Q *= REGISTER._8Q; continue;
case INSTR_MULQR9R9: REGISTER._9Q *= REGISTER._9Q; continue;
case INSTR_MULQR9R10: REGISTER._9Q *= REGISTER._10Q; continue;
case INSTR_MULQR9R11: REGISTER._9Q *= REGISTER._11Q; continue;
case INSTR_MULQR9R12: REGISTER._9Q *= REGISTER._12Q; continue;
case INSTR_MULQR9RIP: REGISTER._9Q *= REGISTER.IPQ; continue;
case INSTR_MULQR9RSP: REGISTER._9Q *= REGISTER.SPQ; continue;
case INSTR_MULQR9RBP: REGISTER._9Q *= REGISTER.BPQ; continue;
case INSTR_MULQR10I: REGISTER._10Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR10RA: REGISTER._10Q *= REGISTER.AQ; continue;
case INSTR_MULQR10RB: REGISTER._10Q *= REGISTER.BQ; continue;
case INSTR_MULQR10RC: REGISTER._10Q *= REGISTER.CQ; continue;
case INSTR_MULQR10RD: REGISTER._10Q *= REGISTER.DQ; continue;
case INSTR_MULQR10R0: REGISTER._10Q *= REGISTER._0Q; continue;
case INSTR_MULQR10R1: REGISTER._10Q *= REGISTER._1Q; continue;
case INSTR_MULQR10R2: REGISTER._10Q *= REGISTER._2Q; continue;
case INSTR_MULQR10R3: REGISTER._10Q *= REGISTER._3Q; continue;
case INSTR_MULQR10R4: REGISTER._10Q *= REGISTER._4Q; continue;
case INSTR_MULQR10R5: REGISTER._10Q *= REGISTER._5Q; continue;
case INSTR_MULQR10R6: REGISTER._10Q *= REGISTER._6Q; continue;
case INSTR_MULQR10R7: REGISTER._10Q *= REGISTER._7Q; continue;
case INSTR_MULQR10R8: REGISTER._10Q *= REGISTER._8Q; continue;
case INSTR_MULQR10R9: REGISTER._10Q *= REGISTER._9Q; continue;
case INSTR_MULQR10R10: REGISTER._10Q *= REGISTER._10Q; continue;
case INSTR_MULQR10R11: REGISTER._10Q *= REGISTER._11Q; continue;
case INSTR_MULQR10R12: REGISTER._10Q *= REGISTER._12Q; continue;
case INSTR_MULQR10RIP: REGISTER._10Q *= REGISTER.IPQ; continue;
case INSTR_MULQR10RSP: REGISTER._10Q *= REGISTER.SPQ; continue;
case INSTR_MULQR10RBP: REGISTER._10Q *= REGISTER.BPQ; continue;
case INSTR_MULQR11I: REGISTER._11Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR11RA: REGISTER._11Q *= REGISTER.AQ; continue;
case INSTR_MULQR11RB: REGISTER._11Q *= REGISTER.BQ; continue;
case INSTR_MULQR11RC: REGISTER._11Q *= REGISTER.CQ; continue;
case INSTR_MULQR11RD: REGISTER._11Q *= REGISTER.DQ; continue;
case INSTR_MULQR11R0: REGISTER._11Q *= REGISTER._0Q; continue;
case INSTR_MULQR11R1: REGISTER._11Q *= REGISTER._1Q; continue;
case INSTR_MULQR11R2: REGISTER._11Q *= REGISTER._2Q; continue;
case INSTR_MULQR11R3: REGISTER._11Q *= REGISTER._3Q; continue;
case INSTR_MULQR11R4: REGISTER._11Q *= REGISTER._4Q; continue;
case INSTR_MULQR11R5: REGISTER._11Q *= REGISTER._5Q; continue;
case INSTR_MULQR11R6: REGISTER._11Q *= REGISTER._6Q; continue;
case INSTR_MULQR11R7: REGISTER._11Q *= REGISTER._7Q; continue;
case INSTR_MULQR11R8: REGISTER._11Q *= REGISTER._8Q; continue;
case INSTR_MULQR11R9: REGISTER._11Q *= REGISTER._9Q; continue;
case INSTR_MULQR11R10: REGISTER._11Q *= REGISTER._10Q; continue;
case INSTR_MULQR11R11: REGISTER._11Q *= REGISTER._11Q; continue;
case INSTR_MULQR11R12: REGISTER._11Q *= REGISTER._12Q; continue;
case INSTR_MULQR11RIP: REGISTER._11Q *= REGISTER.IPQ; continue;
case INSTR_MULQR11RSP: REGISTER._11Q *= REGISTER.SPQ; continue;
case INSTR_MULQR11RBP: REGISTER._11Q *= REGISTER.BPQ; continue;
case INSTR_MULQR12I: REGISTER._12Q *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQR12RA: REGISTER._12Q *= REGISTER.AQ; continue;
case INSTR_MULQR12RB: REGISTER._12Q *= REGISTER.BQ; continue;
case INSTR_MULQR12RC: REGISTER._12Q *= REGISTER.CQ; continue;
case INSTR_MULQR12RD: REGISTER._12Q *= REGISTER.DQ; continue;
case INSTR_MULQR12R0: REGISTER._12Q *= REGISTER._0Q; continue;
case INSTR_MULQR12R1: REGISTER._12Q *= REGISTER._1Q; continue;
case INSTR_MULQR12R2: REGISTER._12Q *= REGISTER._2Q; continue;
case INSTR_MULQR12R3: REGISTER._12Q *= REGISTER._3Q; continue;
case INSTR_MULQR12R4: REGISTER._12Q *= REGISTER._4Q; continue;
case INSTR_MULQR12R5: REGISTER._12Q *= REGISTER._5Q; continue;
case INSTR_MULQR12R6: REGISTER._12Q *= REGISTER._6Q; continue;
case INSTR_MULQR12R7: REGISTER._12Q *= REGISTER._7Q; continue;
case INSTR_MULQR12R8: REGISTER._12Q *= REGISTER._8Q; continue;
case INSTR_MULQR12R9: REGISTER._12Q *= REGISTER._9Q; continue;
case INSTR_MULQR12R10: REGISTER._12Q *= REGISTER._10Q; continue;
case INSTR_MULQR12R11: REGISTER._12Q *= REGISTER._11Q; continue;
case INSTR_MULQR12R12: REGISTER._12Q *= REGISTER._12Q; continue;
case INSTR_MULQR12RIP: REGISTER._12Q *= REGISTER.IPQ; continue;
case INSTR_MULQR12RSP: REGISTER._12Q *= REGISTER.SPQ; continue;
case INSTR_MULQR12RBP: REGISTER._12Q *= REGISTER.BPQ; continue;
case INSTR_MULQRIPI: REGISTER.IPQ *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQRIPRA: REGISTER.IPQ *= REGISTER.AQ; continue;
case INSTR_MULQRIPRB: REGISTER.IPQ *= REGISTER.BQ; continue;
case INSTR_MULQRIPRC: REGISTER.IPQ *= REGISTER.CQ; continue;
case INSTR_MULQRIPRD: REGISTER.IPQ *= REGISTER.DQ; continue;
case INSTR_MULQRIPR0: REGISTER.IPQ *= REGISTER._0Q; continue;
case INSTR_MULQRIPR1: REGISTER.IPQ *= REGISTER._1Q; continue;
case INSTR_MULQRIPR2: REGISTER.IPQ *= REGISTER._2Q; continue;
case INSTR_MULQRIPR3: REGISTER.IPQ *= REGISTER._3Q; continue;
case INSTR_MULQRIPR4: REGISTER.IPQ *= REGISTER._4Q; continue;
case INSTR_MULQRIPR5: REGISTER.IPQ *= REGISTER._5Q; continue;
case INSTR_MULQRIPR6: REGISTER.IPQ *= REGISTER._6Q; continue;
case INSTR_MULQRIPR7: REGISTER.IPQ *= REGISTER._7Q; continue;
case INSTR_MULQRIPR8: REGISTER.IPQ *= REGISTER._8Q; continue;
case INSTR_MULQRIPR9: REGISTER.IPQ *= REGISTER._9Q; continue;
case INSTR_MULQRIPR10: REGISTER.IPQ *= REGISTER._10Q; continue;
case INSTR_MULQRIPR11: REGISTER.IPQ *= REGISTER._11Q; continue;
case INSTR_MULQRIPR12: REGISTER.IPQ *= REGISTER._12Q; continue;
case INSTR_MULQRIPRIP: REGISTER.IPQ *= REGISTER.IPQ; continue;
case INSTR_MULQRIPRSP: REGISTER.IPQ *= REGISTER.SPQ; continue;
case INSTR_MULQRIPRBP: REGISTER.IPQ *= REGISTER.BPQ; continue;
case INSTR_MULQRSPI: REGISTER.SPQ *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQRSPRA: REGISTER.SPQ *= REGISTER.AQ; continue;
case INSTR_MULQRSPRB: REGISTER.SPQ *= REGISTER.BQ; continue;
case INSTR_MULQRSPRC: REGISTER.SPQ *= REGISTER.CQ; continue;
case INSTR_MULQRSPRD: REGISTER.SPQ *= REGISTER.DQ; continue;
case INSTR_MULQRSPR0: REGISTER.SPQ *= REGISTER._0Q; continue;
case INSTR_MULQRSPR1: REGISTER.SPQ *= REGISTER._1Q; continue;
case INSTR_MULQRSPR2: REGISTER.SPQ *= REGISTER._2Q; continue;
case INSTR_MULQRSPR3: REGISTER.SPQ *= REGISTER._3Q; continue;
case INSTR_MULQRSPR4: REGISTER.SPQ *= REGISTER._4Q; continue;
case INSTR_MULQRSPR5: REGISTER.SPQ *= REGISTER._5Q; continue;
case INSTR_MULQRSPR6: REGISTER.SPQ *= REGISTER._6Q; continue;
case INSTR_MULQRSPR7: REGISTER.SPQ *= REGISTER._7Q; continue;
case INSTR_MULQRSPR8: REGISTER.SPQ *= REGISTER._8Q; continue;
case INSTR_MULQRSPR9: REGISTER.SPQ *= REGISTER._9Q; continue;
case INSTR_MULQRSPR10: REGISTER.SPQ *= REGISTER._10Q; continue;
case INSTR_MULQRSPR11: REGISTER.SPQ *= REGISTER._11Q; continue;
case INSTR_MULQRSPR12: REGISTER.SPQ *= REGISTER._12Q; continue;
case INSTR_MULQRSPRIP: REGISTER.SPQ *= REGISTER.IPQ; continue;
case INSTR_MULQRSPRSP: REGISTER.SPQ *= REGISTER.SPQ; continue;
case INSTR_MULQRSPRBP: REGISTER.SPQ *= REGISTER.BPQ; continue;
case INSTR_MULQRBPI: REGISTER.BPQ *= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MULQRBPRA: REGISTER.BPQ *= REGISTER.AQ; continue;
case INSTR_MULQRBPRB: REGISTER.BPQ *= REGISTER.BQ; continue;
case INSTR_MULQRBPRC: REGISTER.BPQ *= REGISTER.CQ; continue;
case INSTR_MULQRBPRD: REGISTER.BPQ *= REGISTER.DQ; continue;
case INSTR_MULQRBPR0: REGISTER.BPQ *= REGISTER._0Q; continue;
case INSTR_MULQRBPR1: REGISTER.BPQ *= REGISTER._1Q; continue;
case INSTR_MULQRBPR2: REGISTER.BPQ *= REGISTER._2Q; continue;
case INSTR_MULQRBPR3: REGISTER.BPQ *= REGISTER._3Q; continue;
case INSTR_MULQRBPR4: REGISTER.BPQ *= REGISTER._4Q; continue;
case INSTR_MULQRBPR5: REGISTER.BPQ *= REGISTER._5Q; continue;
case INSTR_MULQRBPR6: REGISTER.BPQ *= REGISTER._6Q; continue;
case INSTR_MULQRBPR7: REGISTER.BPQ *= REGISTER._7Q; continue;
case INSTR_MULQRBPR8: REGISTER.BPQ *= REGISTER._8Q; continue;
case INSTR_MULQRBPR9: REGISTER.BPQ *= REGISTER._9Q; continue;
case INSTR_MULQRBPR10: REGISTER.BPQ *= REGISTER._10Q; continue;
case INSTR_MULQRBPR11: REGISTER.BPQ *= REGISTER._11Q; continue;
case INSTR_MULQRBPR12: REGISTER.BPQ *= REGISTER._12Q; continue;
case INSTR_MULQRBPRIP: REGISTER.BPQ *= REGISTER.IPQ; continue;
case INSTR_MULQRBPRSP: REGISTER.BPQ *= REGISTER.SPQ; continue;
case INSTR_MULQRBPRBP: REGISTER.BPQ *= REGISTER.BPQ; continue;
case INSTR_MULWRAI: REGISTER.AW *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWRARA: REGISTER.AW *= REGISTER.AW; continue;
case INSTR_MULWRARB: REGISTER.AW *= REGISTER.BW; continue;
case INSTR_MULWRARC: REGISTER.AW *= REGISTER.CW; continue;
case INSTR_MULWRARD: REGISTER.AW *= REGISTER.DW; continue;
case INSTR_MULWRAR0: REGISTER.AW *= REGISTER._0W; continue;
case INSTR_MULWRAR1: REGISTER.AW *= REGISTER._1W; continue;
case INSTR_MULWRAR2: REGISTER.AW *= REGISTER._2W; continue;
case INSTR_MULWRAR3: REGISTER.AW *= REGISTER._3W; continue;
case INSTR_MULWRAR4: REGISTER.AW *= REGISTER._4W; continue;
case INSTR_MULWRAR5: REGISTER.AW *= REGISTER._5W; continue;
case INSTR_MULWRAR6: REGISTER.AW *= REGISTER._6W; continue;
case INSTR_MULWRAR7: REGISTER.AW *= REGISTER._7W; continue;
case INSTR_MULWRAR8: REGISTER.AW *= REGISTER._8W; continue;
case INSTR_MULWRAR9: REGISTER.AW *= REGISTER._9W; continue;
case INSTR_MULWRAR10: REGISTER.AW *= REGISTER._10W; continue;
case INSTR_MULWRAR11: REGISTER.AW *= REGISTER._11W; continue;
case INSTR_MULWRAR12: REGISTER.AW *= REGISTER._12W; continue;
case INSTR_MULWRARIP: REGISTER.AW *= REGISTER.IPW; continue;
case INSTR_MULWRARSP: REGISTER.AW *= REGISTER.SPW; continue;
case INSTR_MULWRARBP: REGISTER.AW *= REGISTER.BPW; continue;
case INSTR_MULWRBI: REGISTER.BW *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWRBRA: REGISTER.BW *= REGISTER.AW; continue;
case INSTR_MULWRBRB: REGISTER.BW *= REGISTER.BW; continue;
case INSTR_MULWRBRC: REGISTER.BW *= REGISTER.CW; continue;
case INSTR_MULWRBRD: REGISTER.BW *= REGISTER.DW; continue;
case INSTR_MULWRBR0: REGISTER.BW *= REGISTER._0W; continue;
case INSTR_MULWRBR1: REGISTER.BW *= REGISTER._1W; continue;
case INSTR_MULWRBR2: REGISTER.BW *= REGISTER._2W; continue;
case INSTR_MULWRBR3: REGISTER.BW *= REGISTER._3W; continue;
case INSTR_MULWRBR4: REGISTER.BW *= REGISTER._4W; continue;
case INSTR_MULWRBR5: REGISTER.BW *= REGISTER._5W; continue;
case INSTR_MULWRBR6: REGISTER.BW *= REGISTER._6W; continue;
case INSTR_MULWRBR7: REGISTER.BW *= REGISTER._7W; continue;
case INSTR_MULWRBR8: REGISTER.BW *= REGISTER._8W; continue;
case INSTR_MULWRBR9: REGISTER.BW *= REGISTER._9W; continue;
case INSTR_MULWRBR10: REGISTER.BW *= REGISTER._10W; continue;
case INSTR_MULWRBR11: REGISTER.BW *= REGISTER._11W; continue;
case INSTR_MULWRBR12: REGISTER.BW *= REGISTER._12W; continue;
case INSTR_MULWRBRIP: REGISTER.BW *= REGISTER.IPW; continue;
case INSTR_MULWRBRSP: REGISTER.BW *= REGISTER.SPW; continue;
case INSTR_MULWRBRBP: REGISTER.BW *= REGISTER.BPW; continue;
case INSTR_MULWRCI: REGISTER.CW *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWRCRA: REGISTER.CW *= REGISTER.AW; continue;
case INSTR_MULWRCRB: REGISTER.CW *= REGISTER.BW; continue;
case INSTR_MULWRCRC: REGISTER.CW *= REGISTER.CW; continue;
case INSTR_MULWRCRD: REGISTER.CW *= REGISTER.DW; continue;
case INSTR_MULWRCR0: REGISTER.CW *= REGISTER._0W; continue;
case INSTR_MULWRCR1: REGISTER.CW *= REGISTER._1W; continue;
case INSTR_MULWRCR2: REGISTER.CW *= REGISTER._2W; continue;
case INSTR_MULWRCR3: REGISTER.CW *= REGISTER._3W; continue;
case INSTR_MULWRCR4: REGISTER.CW *= REGISTER._4W; continue;
case INSTR_MULWRCR5: REGISTER.CW *= REGISTER._5W; continue;
case INSTR_MULWRCR6: REGISTER.CW *= REGISTER._6W; continue;
case INSTR_MULWRCR7: REGISTER.CW *= REGISTER._7W; continue;
case INSTR_MULWRCR8: REGISTER.CW *= REGISTER._8W; continue;
case INSTR_MULWRCR9: REGISTER.CW *= REGISTER._9W; continue;
case INSTR_MULWRCR10: REGISTER.CW *= REGISTER._10W; continue;
case INSTR_MULWRCR11: REGISTER.CW *= REGISTER._11W; continue;
case INSTR_MULWRCR12: REGISTER.CW *= REGISTER._12W; continue;
case INSTR_MULWRCRIP: REGISTER.CW *= REGISTER.IPW; continue;
case INSTR_MULWRCRSP: REGISTER.CW *= REGISTER.SPW; continue;
case INSTR_MULWRCRBP: REGISTER.CW *= REGISTER.BPW; continue;
case INSTR_MULWRDI: REGISTER.DW *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWRDRA: REGISTER.DW *= REGISTER.AW; continue;
case INSTR_MULWRDRB: REGISTER.DW *= REGISTER.BW; continue;
case INSTR_MULWRDRC: REGISTER.DW *= REGISTER.CW; continue;
case INSTR_MULWRDRD: REGISTER.DW *= REGISTER.DW; continue;
case INSTR_MULWRDR0: REGISTER.DW *= REGISTER._0W; continue;
case INSTR_MULWRDR1: REGISTER.DW *= REGISTER._1W; continue;
case INSTR_MULWRDR2: REGISTER.DW *= REGISTER._2W; continue;
case INSTR_MULWRDR3: REGISTER.DW *= REGISTER._3W; continue;
case INSTR_MULWRDR4: REGISTER.DW *= REGISTER._4W; continue;
case INSTR_MULWRDR5: REGISTER.DW *= REGISTER._5W; continue;
case INSTR_MULWRDR6: REGISTER.DW *= REGISTER._6W; continue;
case INSTR_MULWRDR7: REGISTER.DW *= REGISTER._7W; continue;
case INSTR_MULWRDR8: REGISTER.DW *= REGISTER._8W; continue;
case INSTR_MULWRDR9: REGISTER.DW *= REGISTER._9W; continue;
case INSTR_MULWRDR10: REGISTER.DW *= REGISTER._10W; continue;
case INSTR_MULWRDR11: REGISTER.DW *= REGISTER._11W; continue;
case INSTR_MULWRDR12: REGISTER.DW *= REGISTER._12W; continue;
case INSTR_MULWRDRIP: REGISTER.DW *= REGISTER.IPW; continue;
case INSTR_MULWRDRSP: REGISTER.DW *= REGISTER.SPW; continue;
case INSTR_MULWRDRBP: REGISTER.DW *= REGISTER.BPW; continue;
case INSTR_MULWR0I: REGISTER._0W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR0RA: REGISTER._0W *= REGISTER.AW; continue;
case INSTR_MULWR0RB: REGISTER._0W *= REGISTER.BW; continue;
case INSTR_MULWR0RC: REGISTER._0W *= REGISTER.CW; continue;
case INSTR_MULWR0RD: REGISTER._0W *= REGISTER.DW; continue;
case INSTR_MULWR0R0: REGISTER._0W *= REGISTER._0W; continue;
case INSTR_MULWR0R1: REGISTER._0W *= REGISTER._1W; continue;
case INSTR_MULWR0R2: REGISTER._0W *= REGISTER._2W; continue;
case INSTR_MULWR0R3: REGISTER._0W *= REGISTER._3W; continue;
case INSTR_MULWR0R4: REGISTER._0W *= REGISTER._4W; continue;
case INSTR_MULWR0R5: REGISTER._0W *= REGISTER._5W; continue;
case INSTR_MULWR0R6: REGISTER._0W *= REGISTER._6W; continue;
case INSTR_MULWR0R7: REGISTER._0W *= REGISTER._7W; continue;
case INSTR_MULWR0R8: REGISTER._0W *= REGISTER._8W; continue;
case INSTR_MULWR0R9: REGISTER._0W *= REGISTER._9W; continue;
case INSTR_MULWR0R10: REGISTER._0W *= REGISTER._10W; continue;
case INSTR_MULWR0R11: REGISTER._0W *= REGISTER._11W; continue;
case INSTR_MULWR0R12: REGISTER._0W *= REGISTER._12W; continue;
case INSTR_MULWR0RIP: REGISTER._0W *= REGISTER.IPW; continue;
case INSTR_MULWR0RSP: REGISTER._0W *= REGISTER.SPW; continue;
case INSTR_MULWR0RBP: REGISTER._0W *= REGISTER.BPW; continue;
case INSTR_MULWR1I: REGISTER._1W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR1RA: REGISTER._1W *= REGISTER.AW; continue;
case INSTR_MULWR1RB: REGISTER._1W *= REGISTER.BW; continue;
case INSTR_MULWR1RC: REGISTER._1W *= REGISTER.CW; continue;
case INSTR_MULWR1RD: REGISTER._1W *= REGISTER.DW; continue;
case INSTR_MULWR1R0: REGISTER._1W *= REGISTER._0W; continue;
case INSTR_MULWR1R1: REGISTER._1W *= REGISTER._1W; continue;
case INSTR_MULWR1R2: REGISTER._1W *= REGISTER._2W; continue;
case INSTR_MULWR1R3: REGISTER._1W *= REGISTER._3W; continue;
case INSTR_MULWR1R4: REGISTER._1W *= REGISTER._4W; continue;
case INSTR_MULWR1R5: REGISTER._1W *= REGISTER._5W; continue;
case INSTR_MULWR1R6: REGISTER._1W *= REGISTER._6W; continue;
case INSTR_MULWR1R7: REGISTER._1W *= REGISTER._7W; continue;
case INSTR_MULWR1R8: REGISTER._1W *= REGISTER._8W; continue;
case INSTR_MULWR1R9: REGISTER._1W *= REGISTER._9W; continue;
case INSTR_MULWR1R10: REGISTER._1W *= REGISTER._10W; continue;
case INSTR_MULWR1R11: REGISTER._1W *= REGISTER._11W; continue;
case INSTR_MULWR1R12: REGISTER._1W *= REGISTER._12W; continue;
case INSTR_MULWR1RIP: REGISTER._1W *= REGISTER.IPW; continue;
case INSTR_MULWR1RSP: REGISTER._1W *= REGISTER.SPW; continue;
case INSTR_MULWR1RBP: REGISTER._1W *= REGISTER.BPW; continue;
case INSTR_MULWR2I: REGISTER._2W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR2RA: REGISTER._2W *= REGISTER.AW; continue;
case INSTR_MULWR2RB: REGISTER._2W *= REGISTER.BW; continue;
case INSTR_MULWR2RC: REGISTER._2W *= REGISTER.CW; continue;
case INSTR_MULWR2RD: REGISTER._2W *= REGISTER.DW; continue;
case INSTR_MULWR2R0: REGISTER._2W *= REGISTER._0W; continue;
case INSTR_MULWR2R1: REGISTER._2W *= REGISTER._1W; continue;
case INSTR_MULWR2R2: REGISTER._2W *= REGISTER._2W; continue;
case INSTR_MULWR2R3: REGISTER._2W *= REGISTER._3W; continue;
case INSTR_MULWR2R4: REGISTER._2W *= REGISTER._4W; continue;
case INSTR_MULWR2R5: REGISTER._2W *= REGISTER._5W; continue;
case INSTR_MULWR2R6: REGISTER._2W *= REGISTER._6W; continue;
case INSTR_MULWR2R7: REGISTER._2W *= REGISTER._7W; continue;
case INSTR_MULWR2R8: REGISTER._2W *= REGISTER._8W; continue;
case INSTR_MULWR2R9: REGISTER._2W *= REGISTER._9W; continue;
case INSTR_MULWR2R10: REGISTER._2W *= REGISTER._10W; continue;
case INSTR_MULWR2R11: REGISTER._2W *= REGISTER._11W; continue;
case INSTR_MULWR2R12: REGISTER._2W *= REGISTER._12W; continue;
case INSTR_MULWR2RIP: REGISTER._2W *= REGISTER.IPW; continue;
case INSTR_MULWR2RSP: REGISTER._2W *= REGISTER.SPW; continue;
case INSTR_MULWR2RBP: REGISTER._2W *= REGISTER.BPW; continue;
case INSTR_MULWR3I: REGISTER._3W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR3RA: REGISTER._3W *= REGISTER.AW; continue;
case INSTR_MULWR3RB: REGISTER._3W *= REGISTER.BW; continue;
case INSTR_MULWR3RC: REGISTER._3W *= REGISTER.CW; continue;
case INSTR_MULWR3RD: REGISTER._3W *= REGISTER.DW; continue;
case INSTR_MULWR3R0: REGISTER._3W *= REGISTER._0W; continue;
case INSTR_MULWR3R1: REGISTER._3W *= REGISTER._1W; continue;
case INSTR_MULWR3R2: REGISTER._3W *= REGISTER._2W; continue;
case INSTR_MULWR3R3: REGISTER._3W *= REGISTER._3W; continue;
case INSTR_MULWR3R4: REGISTER._3W *= REGISTER._4W; continue;
case INSTR_MULWR3R5: REGISTER._3W *= REGISTER._5W; continue;
case INSTR_MULWR3R6: REGISTER._3W *= REGISTER._6W; continue;
case INSTR_MULWR3R7: REGISTER._3W *= REGISTER._7W; continue;
case INSTR_MULWR3R8: REGISTER._3W *= REGISTER._8W; continue;
case INSTR_MULWR3R9: REGISTER._3W *= REGISTER._9W; continue;
case INSTR_MULWR3R10: REGISTER._3W *= REGISTER._10W; continue;
case INSTR_MULWR3R11: REGISTER._3W *= REGISTER._11W; continue;
case INSTR_MULWR3R12: REGISTER._3W *= REGISTER._12W; continue;
case INSTR_MULWR3RIP: REGISTER._3W *= REGISTER.IPW; continue;
case INSTR_MULWR3RSP: REGISTER._3W *= REGISTER.SPW; continue;
case INSTR_MULWR3RBP: REGISTER._3W *= REGISTER.BPW; continue;
case INSTR_MULWR4I: REGISTER._4W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR4RA: REGISTER._4W *= REGISTER.AW; continue;
case INSTR_MULWR4RB: REGISTER._4W *= REGISTER.BW; continue;
case INSTR_MULWR4RC: REGISTER._4W *= REGISTER.CW; continue;
case INSTR_MULWR4RD: REGISTER._4W *= REGISTER.DW; continue;
case INSTR_MULWR4R0: REGISTER._4W *= REGISTER._0W; continue;
case INSTR_MULWR4R1: REGISTER._4W *= REGISTER._1W; continue;
case INSTR_MULWR4R2: REGISTER._4W *= REGISTER._2W; continue;
case INSTR_MULWR4R3: REGISTER._4W *= REGISTER._3W; continue;
case INSTR_MULWR4R4: REGISTER._4W *= REGISTER._4W; continue;
case INSTR_MULWR4R5: REGISTER._4W *= REGISTER._5W; continue;
case INSTR_MULWR4R6: REGISTER._4W *= REGISTER._6W; continue;
case INSTR_MULWR4R7: REGISTER._4W *= REGISTER._7W; continue;
case INSTR_MULWR4R8: REGISTER._4W *= REGISTER._8W; continue;
case INSTR_MULWR4R9: REGISTER._4W *= REGISTER._9W; continue;
case INSTR_MULWR4R10: REGISTER._4W *= REGISTER._10W; continue;
case INSTR_MULWR4R11: REGISTER._4W *= REGISTER._11W; continue;
case INSTR_MULWR4R12: REGISTER._4W *= REGISTER._12W; continue;
case INSTR_MULWR4RIP: REGISTER._4W *= REGISTER.IPW; continue;
case INSTR_MULWR4RSP: REGISTER._4W *= REGISTER.SPW; continue;
case INSTR_MULWR4RBP: REGISTER._4W *= REGISTER.BPW; continue;
case INSTR_MULWR5I: REGISTER._5W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR5RA: REGISTER._5W *= REGISTER.AW; continue;
case INSTR_MULWR5RB: REGISTER._5W *= REGISTER.BW; continue;
case INSTR_MULWR5RC: REGISTER._5W *= REGISTER.CW; continue;
case INSTR_MULWR5RD: REGISTER._5W *= REGISTER.DW; continue;
case INSTR_MULWR5R0: REGISTER._5W *= REGISTER._0W; continue;
case INSTR_MULWR5R1: REGISTER._5W *= REGISTER._1W; continue;
case INSTR_MULWR5R2: REGISTER._5W *= REGISTER._2W; continue;
case INSTR_MULWR5R3: REGISTER._5W *= REGISTER._3W; continue;
case INSTR_MULWR5R4: REGISTER._5W *= REGISTER._4W; continue;
case INSTR_MULWR5R5: REGISTER._5W *= REGISTER._5W; continue;
case INSTR_MULWR5R6: REGISTER._5W *= REGISTER._6W; continue;
case INSTR_MULWR5R7: REGISTER._5W *= REGISTER._7W; continue;
case INSTR_MULWR5R8: REGISTER._5W *= REGISTER._8W; continue;
case INSTR_MULWR5R9: REGISTER._5W *= REGISTER._9W; continue;
case INSTR_MULWR5R10: REGISTER._5W *= REGISTER._10W; continue;
case INSTR_MULWR5R11: REGISTER._5W *= REGISTER._11W; continue;
case INSTR_MULWR5R12: REGISTER._5W *= REGISTER._12W; continue;
case INSTR_MULWR5RIP: REGISTER._5W *= REGISTER.IPW; continue;
case INSTR_MULWR5RSP: REGISTER._5W *= REGISTER.SPW; continue;
case INSTR_MULWR5RBP: REGISTER._5W *= REGISTER.BPW; continue;
case INSTR_MULWR6I: REGISTER._6W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR6RA: REGISTER._6W *= REGISTER.AW; continue;
case INSTR_MULWR6RB: REGISTER._6W *= REGISTER.BW; continue;
case INSTR_MULWR6RC: REGISTER._6W *= REGISTER.CW; continue;
case INSTR_MULWR6RD: REGISTER._6W *= REGISTER.DW; continue;
case INSTR_MULWR6R0: REGISTER._6W *= REGISTER._0W; continue;
case INSTR_MULWR6R1: REGISTER._6W *= REGISTER._1W; continue;
case INSTR_MULWR6R2: REGISTER._6W *= REGISTER._2W; continue;
case INSTR_MULWR6R3: REGISTER._6W *= REGISTER._3W; continue;
case INSTR_MULWR6R4: REGISTER._6W *= REGISTER._4W; continue;
case INSTR_MULWR6R5: REGISTER._6W *= REGISTER._5W; continue;
case INSTR_MULWR6R6: REGISTER._6W *= REGISTER._6W; continue;
case INSTR_MULWR6R7: REGISTER._6W *= REGISTER._7W; continue;
case INSTR_MULWR6R8: REGISTER._6W *= REGISTER._8W; continue;
case INSTR_MULWR6R9: REGISTER._6W *= REGISTER._9W; continue;
case INSTR_MULWR6R10: REGISTER._6W *= REGISTER._10W; continue;
case INSTR_MULWR6R11: REGISTER._6W *= REGISTER._11W; continue;
case INSTR_MULWR6R12: REGISTER._6W *= REGISTER._12W; continue;
case INSTR_MULWR6RIP: REGISTER._6W *= REGISTER.IPW; continue;
case INSTR_MULWR6RSP: REGISTER._6W *= REGISTER.SPW; continue;
case INSTR_MULWR6RBP: REGISTER._6W *= REGISTER.BPW; continue;
case INSTR_MULWR7I: REGISTER._7W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR7RA: REGISTER._7W *= REGISTER.AW; continue;
case INSTR_MULWR7RB: REGISTER._7W *= REGISTER.BW; continue;
case INSTR_MULWR7RC: REGISTER._7W *= REGISTER.CW; continue;
case INSTR_MULWR7RD: REGISTER._7W *= REGISTER.DW; continue;
case INSTR_MULWR7R0: REGISTER._7W *= REGISTER._0W; continue;
case INSTR_MULWR7R1: REGISTER._7W *= REGISTER._1W; continue;
case INSTR_MULWR7R2: REGISTER._7W *= REGISTER._2W; continue;
case INSTR_MULWR7R3: REGISTER._7W *= REGISTER._3W; continue;
case INSTR_MULWR7R4: REGISTER._7W *= REGISTER._4W; continue;
case INSTR_MULWR7R5: REGISTER._7W *= REGISTER._5W; continue;
case INSTR_MULWR7R6: REGISTER._7W *= REGISTER._6W; continue;
case INSTR_MULWR7R7: REGISTER._7W *= REGISTER._7W; continue;
case INSTR_MULWR7R8: REGISTER._7W *= REGISTER._8W; continue;
case INSTR_MULWR7R9: REGISTER._7W *= REGISTER._9W; continue;
case INSTR_MULWR7R10: REGISTER._7W *= REGISTER._10W; continue;
case INSTR_MULWR7R11: REGISTER._7W *= REGISTER._11W; continue;
case INSTR_MULWR7R12: REGISTER._7W *= REGISTER._12W; continue;
case INSTR_MULWR7RIP: REGISTER._7W *= REGISTER.IPW; continue;
case INSTR_MULWR7RSP: REGISTER._7W *= REGISTER.SPW; continue;
case INSTR_MULWR7RBP: REGISTER._7W *= REGISTER.BPW; continue;
case INSTR_MULWR8I: REGISTER._8W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR8RA: REGISTER._8W *= REGISTER.AW; continue;
case INSTR_MULWR8RB: REGISTER._8W *= REGISTER.BW; continue;
case INSTR_MULWR8RC: REGISTER._8W *= REGISTER.CW; continue;
case INSTR_MULWR8RD: REGISTER._8W *= REGISTER.DW; continue;
case INSTR_MULWR8R0: REGISTER._8W *= REGISTER._0W; continue;
case INSTR_MULWR8R1: REGISTER._8W *= REGISTER._1W; continue;
case INSTR_MULWR8R2: REGISTER._8W *= REGISTER._2W; continue;
case INSTR_MULWR8R3: REGISTER._8W *= REGISTER._3W; continue;
case INSTR_MULWR8R4: REGISTER._8W *= REGISTER._4W; continue;
case INSTR_MULWR8R5: REGISTER._8W *= REGISTER._5W; continue;
case INSTR_MULWR8R6: REGISTER._8W *= REGISTER._6W; continue;
case INSTR_MULWR8R7: REGISTER._8W *= REGISTER._7W; continue;
case INSTR_MULWR8R8: REGISTER._8W *= REGISTER._8W; continue;
case INSTR_MULWR8R9: REGISTER._8W *= REGISTER._9W; continue;
case INSTR_MULWR8R10: REGISTER._8W *= REGISTER._10W; continue;
case INSTR_MULWR8R11: REGISTER._8W *= REGISTER._11W; continue;
case INSTR_MULWR8R12: REGISTER._8W *= REGISTER._12W; continue;
case INSTR_MULWR8RIP: REGISTER._8W *= REGISTER.IPW; continue;
case INSTR_MULWR8RSP: REGISTER._8W *= REGISTER.SPW; continue;
case INSTR_MULWR8RBP: REGISTER._8W *= REGISTER.BPW; continue;
case INSTR_MULWR9I: REGISTER._9W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR9RA: REGISTER._9W *= REGISTER.AW; continue;
case INSTR_MULWR9RB: REGISTER._9W *= REGISTER.BW; continue;
case INSTR_MULWR9RC: REGISTER._9W *= REGISTER.CW; continue;
case INSTR_MULWR9RD: REGISTER._9W *= REGISTER.DW; continue;
case INSTR_MULWR9R0: REGISTER._9W *= REGISTER._0W; continue;
case INSTR_MULWR9R1: REGISTER._9W *= REGISTER._1W; continue;
case INSTR_MULWR9R2: REGISTER._9W *= REGISTER._2W; continue;
case INSTR_MULWR9R3: REGISTER._9W *= REGISTER._3W; continue;
case INSTR_MULWR9R4: REGISTER._9W *= REGISTER._4W; continue;
case INSTR_MULWR9R5: REGISTER._9W *= REGISTER._5W; continue;
case INSTR_MULWR9R6: REGISTER._9W *= REGISTER._6W; continue;
case INSTR_MULWR9R7: REGISTER._9W *= REGISTER._7W; continue;
case INSTR_MULWR9R8: REGISTER._9W *= REGISTER._8W; continue;
case INSTR_MULWR9R9: REGISTER._9W *= REGISTER._9W; continue;
case INSTR_MULWR9R10: REGISTER._9W *= REGISTER._10W; continue;
case INSTR_MULWR9R11: REGISTER._9W *= REGISTER._11W; continue;
case INSTR_MULWR9R12: REGISTER._9W *= REGISTER._12W; continue;
case INSTR_MULWR9RIP: REGISTER._9W *= REGISTER.IPW; continue;
case INSTR_MULWR9RSP: REGISTER._9W *= REGISTER.SPW; continue;
case INSTR_MULWR9RBP: REGISTER._9W *= REGISTER.BPW; continue;
case INSTR_MULWR10I: REGISTER._10W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR10RA: REGISTER._10W *= REGISTER.AW; continue;
case INSTR_MULWR10RB: REGISTER._10W *= REGISTER.BW; continue;
case INSTR_MULWR10RC: REGISTER._10W *= REGISTER.CW; continue;
case INSTR_MULWR10RD: REGISTER._10W *= REGISTER.DW; continue;
case INSTR_MULWR10R0: REGISTER._10W *= REGISTER._0W; continue;
case INSTR_MULWR10R1: REGISTER._10W *= REGISTER._1W; continue;
case INSTR_MULWR10R2: REGISTER._10W *= REGISTER._2W; continue;
case INSTR_MULWR10R3: REGISTER._10W *= REGISTER._3W; continue;
case INSTR_MULWR10R4: REGISTER._10W *= REGISTER._4W; continue;
case INSTR_MULWR10R5: REGISTER._10W *= REGISTER._5W; continue;
case INSTR_MULWR10R6: REGISTER._10W *= REGISTER._6W; continue;
case INSTR_MULWR10R7: REGISTER._10W *= REGISTER._7W; continue;
case INSTR_MULWR10R8: REGISTER._10W *= REGISTER._8W; continue;
case INSTR_MULWR10R9: REGISTER._10W *= REGISTER._9W; continue;
case INSTR_MULWR10R10: REGISTER._10W *= REGISTER._10W; continue;
case INSTR_MULWR10R11: REGISTER._10W *= REGISTER._11W; continue;
case INSTR_MULWR10R12: REGISTER._10W *= REGISTER._12W; continue;
case INSTR_MULWR10RIP: REGISTER._10W *= REGISTER.IPW; continue;
case INSTR_MULWR10RSP: REGISTER._10W *= REGISTER.SPW; continue;
case INSTR_MULWR10RBP: REGISTER._10W *= REGISTER.BPW; continue;
case INSTR_MULWR11I: REGISTER._11W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR11RA: REGISTER._11W *= REGISTER.AW; continue;
case INSTR_MULWR11RB: REGISTER._11W *= REGISTER.BW; continue;
case INSTR_MULWR11RC: REGISTER._11W *= REGISTER.CW; continue;
case INSTR_MULWR11RD: REGISTER._11W *= REGISTER.DW; continue;
case INSTR_MULWR11R0: REGISTER._11W *= REGISTER._0W; continue;
case INSTR_MULWR11R1: REGISTER._11W *= REGISTER._1W; continue;
case INSTR_MULWR11R2: REGISTER._11W *= REGISTER._2W; continue;
case INSTR_MULWR11R3: REGISTER._11W *= REGISTER._3W; continue;
case INSTR_MULWR11R4: REGISTER._11W *= REGISTER._4W; continue;
case INSTR_MULWR11R5: REGISTER._11W *= REGISTER._5W; continue;
case INSTR_MULWR11R6: REGISTER._11W *= REGISTER._6W; continue;
case INSTR_MULWR11R7: REGISTER._11W *= REGISTER._7W; continue;
case INSTR_MULWR11R8: REGISTER._11W *= REGISTER._8W; continue;
case INSTR_MULWR11R9: REGISTER._11W *= REGISTER._9W; continue;
case INSTR_MULWR11R10: REGISTER._11W *= REGISTER._10W; continue;
case INSTR_MULWR11R11: REGISTER._11W *= REGISTER._11W; continue;
case INSTR_MULWR11R12: REGISTER._11W *= REGISTER._12W; continue;
case INSTR_MULWR11RIP: REGISTER._11W *= REGISTER.IPW; continue;
case INSTR_MULWR11RSP: REGISTER._11W *= REGISTER.SPW; continue;
case INSTR_MULWR11RBP: REGISTER._11W *= REGISTER.BPW; continue;
case INSTR_MULWR12I: REGISTER._12W *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWR12RA: REGISTER._12W *= REGISTER.AW; continue;
case INSTR_MULWR12RB: REGISTER._12W *= REGISTER.BW; continue;
case INSTR_MULWR12RC: REGISTER._12W *= REGISTER.CW; continue;
case INSTR_MULWR12RD: REGISTER._12W *= REGISTER.DW; continue;
case INSTR_MULWR12R0: REGISTER._12W *= REGISTER._0W; continue;
case INSTR_MULWR12R1: REGISTER._12W *= REGISTER._1W; continue;
case INSTR_MULWR12R2: REGISTER._12W *= REGISTER._2W; continue;
case INSTR_MULWR12R3: REGISTER._12W *= REGISTER._3W; continue;
case INSTR_MULWR12R4: REGISTER._12W *= REGISTER._4W; continue;
case INSTR_MULWR12R5: REGISTER._12W *= REGISTER._5W; continue;
case INSTR_MULWR12R6: REGISTER._12W *= REGISTER._6W; continue;
case INSTR_MULWR12R7: REGISTER._12W *= REGISTER._7W; continue;
case INSTR_MULWR12R8: REGISTER._12W *= REGISTER._8W; continue;
case INSTR_MULWR12R9: REGISTER._12W *= REGISTER._9W; continue;
case INSTR_MULWR12R10: REGISTER._12W *= REGISTER._10W; continue;
case INSTR_MULWR12R11: REGISTER._12W *= REGISTER._11W; continue;
case INSTR_MULWR12R12: REGISTER._12W *= REGISTER._12W; continue;
case INSTR_MULWR12RIP: REGISTER._12W *= REGISTER.IPW; continue;
case INSTR_MULWR12RSP: REGISTER._12W *= REGISTER.SPW; continue;
case INSTR_MULWR12RBP: REGISTER._12W *= REGISTER.BPW; continue;
case INSTR_MULWRIPI: REGISTER.IPW *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWRIPRA: REGISTER.IPW *= REGISTER.AW; continue;
case INSTR_MULWRIPRB: REGISTER.IPW *= REGISTER.BW; continue;
case INSTR_MULWRIPRC: REGISTER.IPW *= REGISTER.CW; continue;
case INSTR_MULWRIPRD: REGISTER.IPW *= REGISTER.DW; continue;
case INSTR_MULWRIPR0: REGISTER.IPW *= REGISTER._0W; continue;
case INSTR_MULWRIPR1: REGISTER.IPW *= REGISTER._1W; continue;
case INSTR_MULWRIPR2: REGISTER.IPW *= REGISTER._2W; continue;
case INSTR_MULWRIPR3: REGISTER.IPW *= REGISTER._3W; continue;
case INSTR_MULWRIPR4: REGISTER.IPW *= REGISTER._4W; continue;
case INSTR_MULWRIPR5: REGISTER.IPW *= REGISTER._5W; continue;
case INSTR_MULWRIPR6: REGISTER.IPW *= REGISTER._6W; continue;
case INSTR_MULWRIPR7: REGISTER.IPW *= REGISTER._7W; continue;
case INSTR_MULWRIPR8: REGISTER.IPW *= REGISTER._8W; continue;
case INSTR_MULWRIPR9: REGISTER.IPW *= REGISTER._9W; continue;
case INSTR_MULWRIPR10: REGISTER.IPW *= REGISTER._10W; continue;
case INSTR_MULWRIPR11: REGISTER.IPW *= REGISTER._11W; continue;
case INSTR_MULWRIPR12: REGISTER.IPW *= REGISTER._12W; continue;
case INSTR_MULWRIPRIP: REGISTER.IPW *= REGISTER.IPW; continue;
case INSTR_MULWRIPRSP: REGISTER.IPW *= REGISTER.SPW; continue;
case INSTR_MULWRIPRBP: REGISTER.IPW *= REGISTER.BPW; continue;
case INSTR_MULWRSPI: REGISTER.SPW *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWRSPRA: REGISTER.SPW *= REGISTER.AW; continue;
case INSTR_MULWRSPRB: REGISTER.SPW *= REGISTER.BW; continue;
case INSTR_MULWRSPRC: REGISTER.SPW *= REGISTER.CW; continue;
case INSTR_MULWRSPRD: REGISTER.SPW *= REGISTER.DW; continue;
case INSTR_MULWRSPR0: REGISTER.SPW *= REGISTER._0W; continue;
case INSTR_MULWRSPR1: REGISTER.SPW *= REGISTER._1W; continue;
case INSTR_MULWRSPR2: REGISTER.SPW *= REGISTER._2W; continue;
case INSTR_MULWRSPR3: REGISTER.SPW *= REGISTER._3W; continue;
case INSTR_MULWRSPR4: REGISTER.SPW *= REGISTER._4W; continue;
case INSTR_MULWRSPR5: REGISTER.SPW *= REGISTER._5W; continue;
case INSTR_MULWRSPR6: REGISTER.SPW *= REGISTER._6W; continue;
case INSTR_MULWRSPR7: REGISTER.SPW *= REGISTER._7W; continue;
case INSTR_MULWRSPR8: REGISTER.SPW *= REGISTER._8W; continue;
case INSTR_MULWRSPR9: REGISTER.SPW *= REGISTER._9W; continue;
case INSTR_MULWRSPR10: REGISTER.SPW *= REGISTER._10W; continue;
case INSTR_MULWRSPR11: REGISTER.SPW *= REGISTER._11W; continue;
case INSTR_MULWRSPR12: REGISTER.SPW *= REGISTER._12W; continue;
case INSTR_MULWRSPRIP: REGISTER.SPW *= REGISTER.IPW; continue;
case INSTR_MULWRSPRSP: REGISTER.SPW *= REGISTER.SPW; continue;
case INSTR_MULWRSPRBP: REGISTER.SPW *= REGISTER.BPW; continue;
case INSTR_MULWRBPI: REGISTER.BPW *= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MULWRBPRA: REGISTER.BPW *= REGISTER.AW; continue;
case INSTR_MULWRBPRB: REGISTER.BPW *= REGISTER.BW; continue;
case INSTR_MULWRBPRC: REGISTER.BPW *= REGISTER.CW; continue;
case INSTR_MULWRBPRD: REGISTER.BPW *= REGISTER.DW; continue;
case INSTR_MULWRBPR0: REGISTER.BPW *= REGISTER._0W; continue;
case INSTR_MULWRBPR1: REGISTER.BPW *= REGISTER._1W; continue;
case INSTR_MULWRBPR2: REGISTER.BPW *= REGISTER._2W; continue;
case INSTR_MULWRBPR3: REGISTER.BPW *= REGISTER._3W; continue;
case INSTR_MULWRBPR4: REGISTER.BPW *= REGISTER._4W; continue;
case INSTR_MULWRBPR5: REGISTER.BPW *= REGISTER._5W; continue;
case INSTR_MULWRBPR6: REGISTER.BPW *= REGISTER._6W; continue;
case INSTR_MULWRBPR7: REGISTER.BPW *= REGISTER._7W; continue;
case INSTR_MULWRBPR8: REGISTER.BPW *= REGISTER._8W; continue;
case INSTR_MULWRBPR9: REGISTER.BPW *= REGISTER._9W; continue;
case INSTR_MULWRBPR10: REGISTER.BPW *= REGISTER._10W; continue;
case INSTR_MULWRBPR11: REGISTER.BPW *= REGISTER._11W; continue;
case INSTR_MULWRBPR12: REGISTER.BPW *= REGISTER._12W; continue;
case INSTR_MULWRBPRIP: REGISTER.BPW *= REGISTER.IPW; continue;
case INSTR_MULWRBPRSP: REGISTER.BPW *= REGISTER.SPW; continue;
case INSTR_MULWRBPRBP: REGISTER.BPW *= REGISTER.BPW; continue;
case INSTR_MULBRAI: REGISTER.AB *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBRARA: REGISTER.AB *= REGISTER.AB; continue;
case INSTR_MULBRARB: REGISTER.AB *= REGISTER.BB; continue;
case INSTR_MULBRARC: REGISTER.AB *= REGISTER.CB; continue;
case INSTR_MULBRARD: REGISTER.AB *= REGISTER.DB; continue;
case INSTR_MULBRAR0: REGISTER.AB *= REGISTER._0B; continue;
case INSTR_MULBRAR1: REGISTER.AB *= REGISTER._1B; continue;
case INSTR_MULBRAR2: REGISTER.AB *= REGISTER._2B; continue;
case INSTR_MULBRAR3: REGISTER.AB *= REGISTER._3B; continue;
case INSTR_MULBRAR4: REGISTER.AB *= REGISTER._4B; continue;
case INSTR_MULBRAR5: REGISTER.AB *= REGISTER._5B; continue;
case INSTR_MULBRAR6: REGISTER.AB *= REGISTER._6B; continue;
case INSTR_MULBRAR7: REGISTER.AB *= REGISTER._7B; continue;
case INSTR_MULBRAR8: REGISTER.AB *= REGISTER._8B; continue;
case INSTR_MULBRAR9: REGISTER.AB *= REGISTER._9B; continue;
case INSTR_MULBRAR10: REGISTER.AB *= REGISTER._10B; continue;
case INSTR_MULBRAR11: REGISTER.AB *= REGISTER._11B; continue;
case INSTR_MULBRAR12: REGISTER.AB *= REGISTER._12B; continue;
case INSTR_MULBRARIP: REGISTER.AB *= REGISTER.IPB; continue;
case INSTR_MULBRARSP: REGISTER.AB *= REGISTER.SPB; continue;
case INSTR_MULBRARBP: REGISTER.AB *= REGISTER.BPB; continue;
case INSTR_MULBRBI: REGISTER.BB *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBRBRA: REGISTER.BB *= REGISTER.AB; continue;
case INSTR_MULBRBRB: REGISTER.BB *= REGISTER.BB; continue;
case INSTR_MULBRBRC: REGISTER.BB *= REGISTER.CB; continue;
case INSTR_MULBRBRD: REGISTER.BB *= REGISTER.DB; continue;
case INSTR_MULBRBR0: REGISTER.BB *= REGISTER._0B; continue;
case INSTR_MULBRBR1: REGISTER.BB *= REGISTER._1B; continue;
case INSTR_MULBRBR2: REGISTER.BB *= REGISTER._2B; continue;
case INSTR_MULBRBR3: REGISTER.BB *= REGISTER._3B; continue;
case INSTR_MULBRBR4: REGISTER.BB *= REGISTER._4B; continue;
case INSTR_MULBRBR5: REGISTER.BB *= REGISTER._5B; continue;
case INSTR_MULBRBR6: REGISTER.BB *= REGISTER._6B; continue;
case INSTR_MULBRBR7: REGISTER.BB *= REGISTER._7B; continue;
case INSTR_MULBRBR8: REGISTER.BB *= REGISTER._8B; continue;
case INSTR_MULBRBR9: REGISTER.BB *= REGISTER._9B; continue;
case INSTR_MULBRBR10: REGISTER.BB *= REGISTER._10B; continue;
case INSTR_MULBRBR11: REGISTER.BB *= REGISTER._11B; continue;
case INSTR_MULBRBR12: REGISTER.BB *= REGISTER._12B; continue;
case INSTR_MULBRBRIP: REGISTER.BB *= REGISTER.IPB; continue;
case INSTR_MULBRBRSP: REGISTER.BB *= REGISTER.SPB; continue;
case INSTR_MULBRBRBP: REGISTER.BB *= REGISTER.BPB; continue;
case INSTR_MULBRCI: REGISTER.CB *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBRCRA: REGISTER.CB *= REGISTER.AB; continue;
case INSTR_MULBRCRB: REGISTER.CB *= REGISTER.BB; continue;
case INSTR_MULBRCRC: REGISTER.CB *= REGISTER.CB; continue;
case INSTR_MULBRCRD: REGISTER.CB *= REGISTER.DB; continue;
case INSTR_MULBRCR0: REGISTER.CB *= REGISTER._0B; continue;
case INSTR_MULBRCR1: REGISTER.CB *= REGISTER._1B; continue;
case INSTR_MULBRCR2: REGISTER.CB *= REGISTER._2B; continue;
case INSTR_MULBRCR3: REGISTER.CB *= REGISTER._3B; continue;
case INSTR_MULBRCR4: REGISTER.CB *= REGISTER._4B; continue;
case INSTR_MULBRCR5: REGISTER.CB *= REGISTER._5B; continue;
case INSTR_MULBRCR6: REGISTER.CB *= REGISTER._6B; continue;
case INSTR_MULBRCR7: REGISTER.CB *= REGISTER._7B; continue;
case INSTR_MULBRCR8: REGISTER.CB *= REGISTER._8B; continue;
case INSTR_MULBRCR9: REGISTER.CB *= REGISTER._9B; continue;
case INSTR_MULBRCR10: REGISTER.CB *= REGISTER._10B; continue;
case INSTR_MULBRCR11: REGISTER.CB *= REGISTER._11B; continue;
case INSTR_MULBRCR12: REGISTER.CB *= REGISTER._12B; continue;
case INSTR_MULBRCRIP: REGISTER.CB *= REGISTER.IPB; continue;
case INSTR_MULBRCRSP: REGISTER.CB *= REGISTER.SPB; continue;
case INSTR_MULBRCRBP: REGISTER.CB *= REGISTER.BPB; continue;
case INSTR_MULBRDI: REGISTER.DB *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBRDRA: REGISTER.DB *= REGISTER.AB; continue;
case INSTR_MULBRDRB: REGISTER.DB *= REGISTER.BB; continue;
case INSTR_MULBRDRC: REGISTER.DB *= REGISTER.CB; continue;
case INSTR_MULBRDRD: REGISTER.DB *= REGISTER.DB; continue;
case INSTR_MULBRDR0: REGISTER.DB *= REGISTER._0B; continue;
case INSTR_MULBRDR1: REGISTER.DB *= REGISTER._1B; continue;
case INSTR_MULBRDR2: REGISTER.DB *= REGISTER._2B; continue;
case INSTR_MULBRDR3: REGISTER.DB *= REGISTER._3B; continue;
case INSTR_MULBRDR4: REGISTER.DB *= REGISTER._4B; continue;
case INSTR_MULBRDR5: REGISTER.DB *= REGISTER._5B; continue;
case INSTR_MULBRDR6: REGISTER.DB *= REGISTER._6B; continue;
case INSTR_MULBRDR7: REGISTER.DB *= REGISTER._7B; continue;
case INSTR_MULBRDR8: REGISTER.DB *= REGISTER._8B; continue;
case INSTR_MULBRDR9: REGISTER.DB *= REGISTER._9B; continue;
case INSTR_MULBRDR10: REGISTER.DB *= REGISTER._10B; continue;
case INSTR_MULBRDR11: REGISTER.DB *= REGISTER._11B; continue;
case INSTR_MULBRDR12: REGISTER.DB *= REGISTER._12B; continue;
case INSTR_MULBRDRIP: REGISTER.DB *= REGISTER.IPB; continue;
case INSTR_MULBRDRSP: REGISTER.DB *= REGISTER.SPB; continue;
case INSTR_MULBRDRBP: REGISTER.DB *= REGISTER.BPB; continue;
case INSTR_MULBR0I: REGISTER._0B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR0RA: REGISTER._0B *= REGISTER.AB; continue;
case INSTR_MULBR0RB: REGISTER._0B *= REGISTER.BB; continue;
case INSTR_MULBR0RC: REGISTER._0B *= REGISTER.CB; continue;
case INSTR_MULBR0RD: REGISTER._0B *= REGISTER.DB; continue;
case INSTR_MULBR0R0: REGISTER._0B *= REGISTER._0B; continue;
case INSTR_MULBR0R1: REGISTER._0B *= REGISTER._1B; continue;
case INSTR_MULBR0R2: REGISTER._0B *= REGISTER._2B; continue;
case INSTR_MULBR0R3: REGISTER._0B *= REGISTER._3B; continue;
case INSTR_MULBR0R4: REGISTER._0B *= REGISTER._4B; continue;
case INSTR_MULBR0R5: REGISTER._0B *= REGISTER._5B; continue;
case INSTR_MULBR0R6: REGISTER._0B *= REGISTER._6B; continue;
case INSTR_MULBR0R7: REGISTER._0B *= REGISTER._7B; continue;
case INSTR_MULBR0R8: REGISTER._0B *= REGISTER._8B; continue;
case INSTR_MULBR0R9: REGISTER._0B *= REGISTER._9B; continue;
case INSTR_MULBR0R10: REGISTER._0B *= REGISTER._10B; continue;
case INSTR_MULBR0R11: REGISTER._0B *= REGISTER._11B; continue;
case INSTR_MULBR0R12: REGISTER._0B *= REGISTER._12B; continue;
case INSTR_MULBR0RIP: REGISTER._0B *= REGISTER.IPB; continue;
case INSTR_MULBR0RSP: REGISTER._0B *= REGISTER.SPB; continue;
case INSTR_MULBR0RBP: REGISTER._0B *= REGISTER.BPB; continue;
case INSTR_MULBR1I: REGISTER._1B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR1RA: REGISTER._1B *= REGISTER.AB; continue;
case INSTR_MULBR1RB: REGISTER._1B *= REGISTER.BB; continue;
case INSTR_MULBR1RC: REGISTER._1B *= REGISTER.CB; continue;
case INSTR_MULBR1RD: REGISTER._1B *= REGISTER.DB; continue;
case INSTR_MULBR1R0: REGISTER._1B *= REGISTER._0B; continue;
case INSTR_MULBR1R1: REGISTER._1B *= REGISTER._1B; continue;
case INSTR_MULBR1R2: REGISTER._1B *= REGISTER._2B; continue;
case INSTR_MULBR1R3: REGISTER._1B *= REGISTER._3B; continue;
case INSTR_MULBR1R4: REGISTER._1B *= REGISTER._4B; continue;
case INSTR_MULBR1R5: REGISTER._1B *= REGISTER._5B; continue;
case INSTR_MULBR1R6: REGISTER._1B *= REGISTER._6B; continue;
case INSTR_MULBR1R7: REGISTER._1B *= REGISTER._7B; continue;
case INSTR_MULBR1R8: REGISTER._1B *= REGISTER._8B; continue;
case INSTR_MULBR1R9: REGISTER._1B *= REGISTER._9B; continue;
case INSTR_MULBR1R10: REGISTER._1B *= REGISTER._10B; continue;
case INSTR_MULBR1R11: REGISTER._1B *= REGISTER._11B; continue;
case INSTR_MULBR1R12: REGISTER._1B *= REGISTER._12B; continue;
case INSTR_MULBR1RIP: REGISTER._1B *= REGISTER.IPB; continue;
case INSTR_MULBR1RSP: REGISTER._1B *= REGISTER.SPB; continue;
case INSTR_MULBR1RBP: REGISTER._1B *= REGISTER.BPB; continue;
case INSTR_MULBR2I: REGISTER._2B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR2RA: REGISTER._2B *= REGISTER.AB; continue;
case INSTR_MULBR2RB: REGISTER._2B *= REGISTER.BB; continue;
case INSTR_MULBR2RC: REGISTER._2B *= REGISTER.CB; continue;
case INSTR_MULBR2RD: REGISTER._2B *= REGISTER.DB; continue;
case INSTR_MULBR2R0: REGISTER._2B *= REGISTER._0B; continue;
case INSTR_MULBR2R1: REGISTER._2B *= REGISTER._1B; continue;
case INSTR_MULBR2R2: REGISTER._2B *= REGISTER._2B; continue;
case INSTR_MULBR2R3: REGISTER._2B *= REGISTER._3B; continue;
case INSTR_MULBR2R4: REGISTER._2B *= REGISTER._4B; continue;
case INSTR_MULBR2R5: REGISTER._2B *= REGISTER._5B; continue;
case INSTR_MULBR2R6: REGISTER._2B *= REGISTER._6B; continue;
case INSTR_MULBR2R7: REGISTER._2B *= REGISTER._7B; continue;
case INSTR_MULBR2R8: REGISTER._2B *= REGISTER._8B; continue;
case INSTR_MULBR2R9: REGISTER._2B *= REGISTER._9B; continue;
case INSTR_MULBR2R10: REGISTER._2B *= REGISTER._10B; continue;
case INSTR_MULBR2R11: REGISTER._2B *= REGISTER._11B; continue;
case INSTR_MULBR2R12: REGISTER._2B *= REGISTER._12B; continue;
case INSTR_MULBR2RIP: REGISTER._2B *= REGISTER.IPB; continue;
case INSTR_MULBR2RSP: REGISTER._2B *= REGISTER.SPB; continue;
case INSTR_MULBR2RBP: REGISTER._2B *= REGISTER.BPB; continue;
case INSTR_MULBR3I: REGISTER._3B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR3RA: REGISTER._3B *= REGISTER.AB; continue;
case INSTR_MULBR3RB: REGISTER._3B *= REGISTER.BB; continue;
case INSTR_MULBR3RC: REGISTER._3B *= REGISTER.CB; continue;
case INSTR_MULBR3RD: REGISTER._3B *= REGISTER.DB; continue;
case INSTR_MULBR3R0: REGISTER._3B *= REGISTER._0B; continue;
case INSTR_MULBR3R1: REGISTER._3B *= REGISTER._1B; continue;
case INSTR_MULBR3R2: REGISTER._3B *= REGISTER._2B; continue;
case INSTR_MULBR3R3: REGISTER._3B *= REGISTER._3B; continue;
case INSTR_MULBR3R4: REGISTER._3B *= REGISTER._4B; continue;
case INSTR_MULBR3R5: REGISTER._3B *= REGISTER._5B; continue;
case INSTR_MULBR3R6: REGISTER._3B *= REGISTER._6B; continue;
case INSTR_MULBR3R7: REGISTER._3B *= REGISTER._7B; continue;
case INSTR_MULBR3R8: REGISTER._3B *= REGISTER._8B; continue;
case INSTR_MULBR3R9: REGISTER._3B *= REGISTER._9B; continue;
case INSTR_MULBR3R10: REGISTER._3B *= REGISTER._10B; continue;
case INSTR_MULBR3R11: REGISTER._3B *= REGISTER._11B; continue;
case INSTR_MULBR3R12: REGISTER._3B *= REGISTER._12B; continue;
case INSTR_MULBR3RIP: REGISTER._3B *= REGISTER.IPB; continue;
case INSTR_MULBR3RSP: REGISTER._3B *= REGISTER.SPB; continue;
case INSTR_MULBR3RBP: REGISTER._3B *= REGISTER.BPB; continue;
case INSTR_MULBR4I: REGISTER._4B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR4RA: REGISTER._4B *= REGISTER.AB; continue;
case INSTR_MULBR4RB: REGISTER._4B *= REGISTER.BB; continue;
case INSTR_MULBR4RC: REGISTER._4B *= REGISTER.CB; continue;
case INSTR_MULBR4RD: REGISTER._4B *= REGISTER.DB; continue;
case INSTR_MULBR4R0: REGISTER._4B *= REGISTER._0B; continue;
case INSTR_MULBR4R1: REGISTER._4B *= REGISTER._1B; continue;
case INSTR_MULBR4R2: REGISTER._4B *= REGISTER._2B; continue;
case INSTR_MULBR4R3: REGISTER._4B *= REGISTER._3B; continue;
case INSTR_MULBR4R4: REGISTER._4B *= REGISTER._4B; continue;
case INSTR_MULBR4R5: REGISTER._4B *= REGISTER._5B; continue;
case INSTR_MULBR4R6: REGISTER._4B *= REGISTER._6B; continue;
case INSTR_MULBR4R7: REGISTER._4B *= REGISTER._7B; continue;
case INSTR_MULBR4R8: REGISTER._4B *= REGISTER._8B; continue;
case INSTR_MULBR4R9: REGISTER._4B *= REGISTER._9B; continue;
case INSTR_MULBR4R10: REGISTER._4B *= REGISTER._10B; continue;
case INSTR_MULBR4R11: REGISTER._4B *= REGISTER._11B; continue;
case INSTR_MULBR4R12: REGISTER._4B *= REGISTER._12B; continue;
case INSTR_MULBR4RIP: REGISTER._4B *= REGISTER.IPB; continue;
case INSTR_MULBR4RSP: REGISTER._4B *= REGISTER.SPB; continue;
case INSTR_MULBR4RBP: REGISTER._4B *= REGISTER.BPB; continue;
case INSTR_MULBR5I: REGISTER._5B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR5RA: REGISTER._5B *= REGISTER.AB; continue;
case INSTR_MULBR5RB: REGISTER._5B *= REGISTER.BB; continue;
case INSTR_MULBR5RC: REGISTER._5B *= REGISTER.CB; continue;
case INSTR_MULBR5RD: REGISTER._5B *= REGISTER.DB; continue;
case INSTR_MULBR5R0: REGISTER._5B *= REGISTER._0B; continue;
case INSTR_MULBR5R1: REGISTER._5B *= REGISTER._1B; continue;
case INSTR_MULBR5R2: REGISTER._5B *= REGISTER._2B; continue;
case INSTR_MULBR5R3: REGISTER._5B *= REGISTER._3B; continue;
case INSTR_MULBR5R4: REGISTER._5B *= REGISTER._4B; continue;
case INSTR_MULBR5R5: REGISTER._5B *= REGISTER._5B; continue;
case INSTR_MULBR5R6: REGISTER._5B *= REGISTER._6B; continue;
case INSTR_MULBR5R7: REGISTER._5B *= REGISTER._7B; continue;
case INSTR_MULBR5R8: REGISTER._5B *= REGISTER._8B; continue;
case INSTR_MULBR5R9: REGISTER._5B *= REGISTER._9B; continue;
case INSTR_MULBR5R10: REGISTER._5B *= REGISTER._10B; continue;
case INSTR_MULBR5R11: REGISTER._5B *= REGISTER._11B; continue;
case INSTR_MULBR5R12: REGISTER._5B *= REGISTER._12B; continue;
case INSTR_MULBR5RIP: REGISTER._5B *= REGISTER.IPB; continue;
case INSTR_MULBR5RSP: REGISTER._5B *= REGISTER.SPB; continue;
case INSTR_MULBR5RBP: REGISTER._5B *= REGISTER.BPB; continue;
case INSTR_MULBR6I: REGISTER._6B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR6RA: REGISTER._6B *= REGISTER.AB; continue;
case INSTR_MULBR6RB: REGISTER._6B *= REGISTER.BB; continue;
case INSTR_MULBR6RC: REGISTER._6B *= REGISTER.CB; continue;
case INSTR_MULBR6RD: REGISTER._6B *= REGISTER.DB; continue;
case INSTR_MULBR6R0: REGISTER._6B *= REGISTER._0B; continue;
case INSTR_MULBR6R1: REGISTER._6B *= REGISTER._1B; continue;
case INSTR_MULBR6R2: REGISTER._6B *= REGISTER._2B; continue;
case INSTR_MULBR6R3: REGISTER._6B *= REGISTER._3B; continue;
case INSTR_MULBR6R4: REGISTER._6B *= REGISTER._4B; continue;
case INSTR_MULBR6R5: REGISTER._6B *= REGISTER._5B; continue;
case INSTR_MULBR6R6: REGISTER._6B *= REGISTER._6B; continue;
case INSTR_MULBR6R7: REGISTER._6B *= REGISTER._7B; continue;
case INSTR_MULBR6R8: REGISTER._6B *= REGISTER._8B; continue;
case INSTR_MULBR6R9: REGISTER._6B *= REGISTER._9B; continue;
case INSTR_MULBR6R10: REGISTER._6B *= REGISTER._10B; continue;
case INSTR_MULBR6R11: REGISTER._6B *= REGISTER._11B; continue;
case INSTR_MULBR6R12: REGISTER._6B *= REGISTER._12B; continue;
case INSTR_MULBR6RIP: REGISTER._6B *= REGISTER.IPB; continue;
case INSTR_MULBR6RSP: REGISTER._6B *= REGISTER.SPB; continue;
case INSTR_MULBR6RBP: REGISTER._6B *= REGISTER.BPB; continue;
case INSTR_MULBR7I: REGISTER._7B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR7RA: REGISTER._7B *= REGISTER.AB; continue;
case INSTR_MULBR7RB: REGISTER._7B *= REGISTER.BB; continue;
case INSTR_MULBR7RC: REGISTER._7B *= REGISTER.CB; continue;
case INSTR_MULBR7RD: REGISTER._7B *= REGISTER.DB; continue;
case INSTR_MULBR7R0: REGISTER._7B *= REGISTER._0B; continue;
case INSTR_MULBR7R1: REGISTER._7B *= REGISTER._1B; continue;
case INSTR_MULBR7R2: REGISTER._7B *= REGISTER._2B; continue;
case INSTR_MULBR7R3: REGISTER._7B *= REGISTER._3B; continue;
case INSTR_MULBR7R4: REGISTER._7B *= REGISTER._4B; continue;
case INSTR_MULBR7R5: REGISTER._7B *= REGISTER._5B; continue;
case INSTR_MULBR7R6: REGISTER._7B *= REGISTER._6B; continue;
case INSTR_MULBR7R7: REGISTER._7B *= REGISTER._7B; continue;
case INSTR_MULBR7R8: REGISTER._7B *= REGISTER._8B; continue;
case INSTR_MULBR7R9: REGISTER._7B *= REGISTER._9B; continue;
case INSTR_MULBR7R10: REGISTER._7B *= REGISTER._10B; continue;
case INSTR_MULBR7R11: REGISTER._7B *= REGISTER._11B; continue;
case INSTR_MULBR7R12: REGISTER._7B *= REGISTER._12B; continue;
case INSTR_MULBR7RIP: REGISTER._7B *= REGISTER.IPB; continue;
case INSTR_MULBR7RSP: REGISTER._7B *= REGISTER.SPB; continue;
case INSTR_MULBR7RBP: REGISTER._7B *= REGISTER.BPB; continue;
case INSTR_MULBR8I: REGISTER._8B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR8RA: REGISTER._8B *= REGISTER.AB; continue;
case INSTR_MULBR8RB: REGISTER._8B *= REGISTER.BB; continue;
case INSTR_MULBR8RC: REGISTER._8B *= REGISTER.CB; continue;
case INSTR_MULBR8RD: REGISTER._8B *= REGISTER.DB; continue;
case INSTR_MULBR8R0: REGISTER._8B *= REGISTER._0B; continue;
case INSTR_MULBR8R1: REGISTER._8B *= REGISTER._1B; continue;
case INSTR_MULBR8R2: REGISTER._8B *= REGISTER._2B; continue;
case INSTR_MULBR8R3: REGISTER._8B *= REGISTER._3B; continue;
case INSTR_MULBR8R4: REGISTER._8B *= REGISTER._4B; continue;
case INSTR_MULBR8R5: REGISTER._8B *= REGISTER._5B; continue;
case INSTR_MULBR8R6: REGISTER._8B *= REGISTER._6B; continue;
case INSTR_MULBR8R7: REGISTER._8B *= REGISTER._7B; continue;
case INSTR_MULBR8R8: REGISTER._8B *= REGISTER._8B; continue;
case INSTR_MULBR8R9: REGISTER._8B *= REGISTER._9B; continue;
case INSTR_MULBR8R10: REGISTER._8B *= REGISTER._10B; continue;
case INSTR_MULBR8R11: REGISTER._8B *= REGISTER._11B; continue;
case INSTR_MULBR8R12: REGISTER._8B *= REGISTER._12B; continue;
case INSTR_MULBR8RIP: REGISTER._8B *= REGISTER.IPB; continue;
case INSTR_MULBR8RSP: REGISTER._8B *= REGISTER.SPB; continue;
case INSTR_MULBR8RBP: REGISTER._8B *= REGISTER.BPB; continue;
case INSTR_MULBR9I: REGISTER._9B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR9RA: REGISTER._9B *= REGISTER.AB; continue;
case INSTR_MULBR9RB: REGISTER._9B *= REGISTER.BB; continue;
case INSTR_MULBR9RC: REGISTER._9B *= REGISTER.CB; continue;
case INSTR_MULBR9RD: REGISTER._9B *= REGISTER.DB; continue;
case INSTR_MULBR9R0: REGISTER._9B *= REGISTER._0B; continue;
case INSTR_MULBR9R1: REGISTER._9B *= REGISTER._1B; continue;
case INSTR_MULBR9R2: REGISTER._9B *= REGISTER._2B; continue;
case INSTR_MULBR9R3: REGISTER._9B *= REGISTER._3B; continue;
case INSTR_MULBR9R4: REGISTER._9B *= REGISTER._4B; continue;
case INSTR_MULBR9R5: REGISTER._9B *= REGISTER._5B; continue;
case INSTR_MULBR9R6: REGISTER._9B *= REGISTER._6B; continue;
case INSTR_MULBR9R7: REGISTER._9B *= REGISTER._7B; continue;
case INSTR_MULBR9R8: REGISTER._9B *= REGISTER._8B; continue;
case INSTR_MULBR9R9: REGISTER._9B *= REGISTER._9B; continue;
case INSTR_MULBR9R10: REGISTER._9B *= REGISTER._10B; continue;
case INSTR_MULBR9R11: REGISTER._9B *= REGISTER._11B; continue;
case INSTR_MULBR9R12: REGISTER._9B *= REGISTER._12B; continue;
case INSTR_MULBR9RIP: REGISTER._9B *= REGISTER.IPB; continue;
case INSTR_MULBR9RSP: REGISTER._9B *= REGISTER.SPB; continue;
case INSTR_MULBR9RBP: REGISTER._9B *= REGISTER.BPB; continue;
case INSTR_MULBR10I: REGISTER._10B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR10RA: REGISTER._10B *= REGISTER.AB; continue;
case INSTR_MULBR10RB: REGISTER._10B *= REGISTER.BB; continue;
case INSTR_MULBR10RC: REGISTER._10B *= REGISTER.CB; continue;
case INSTR_MULBR10RD: REGISTER._10B *= REGISTER.DB; continue;
case INSTR_MULBR10R0: REGISTER._10B *= REGISTER._0B; continue;
case INSTR_MULBR10R1: REGISTER._10B *= REGISTER._1B; continue;
case INSTR_MULBR10R2: REGISTER._10B *= REGISTER._2B; continue;
case INSTR_MULBR10R3: REGISTER._10B *= REGISTER._3B; continue;
case INSTR_MULBR10R4: REGISTER._10B *= REGISTER._4B; continue;
case INSTR_MULBR10R5: REGISTER._10B *= REGISTER._5B; continue;
case INSTR_MULBR10R6: REGISTER._10B *= REGISTER._6B; continue;
case INSTR_MULBR10R7: REGISTER._10B *= REGISTER._7B; continue;
case INSTR_MULBR10R8: REGISTER._10B *= REGISTER._8B; continue;
case INSTR_MULBR10R9: REGISTER._10B *= REGISTER._9B; continue;
case INSTR_MULBR10R10: REGISTER._10B *= REGISTER._10B; continue;
case INSTR_MULBR10R11: REGISTER._10B *= REGISTER._11B; continue;
case INSTR_MULBR10R12: REGISTER._10B *= REGISTER._12B; continue;
case INSTR_MULBR10RIP: REGISTER._10B *= REGISTER.IPB; continue;
case INSTR_MULBR10RSP: REGISTER._10B *= REGISTER.SPB; continue;
case INSTR_MULBR10RBP: REGISTER._10B *= REGISTER.BPB; continue;
case INSTR_MULBR11I: REGISTER._11B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR11RA: REGISTER._11B *= REGISTER.AB; continue;
case INSTR_MULBR11RB: REGISTER._11B *= REGISTER.BB; continue;
case INSTR_MULBR11RC: REGISTER._11B *= REGISTER.CB; continue;
case INSTR_MULBR11RD: REGISTER._11B *= REGISTER.DB; continue;
case INSTR_MULBR11R0: REGISTER._11B *= REGISTER._0B; continue;
case INSTR_MULBR11R1: REGISTER._11B *= REGISTER._1B; continue;
case INSTR_MULBR11R2: REGISTER._11B *= REGISTER._2B; continue;
case INSTR_MULBR11R3: REGISTER._11B *= REGISTER._3B; continue;
case INSTR_MULBR11R4: REGISTER._11B *= REGISTER._4B; continue;
case INSTR_MULBR11R5: REGISTER._11B *= REGISTER._5B; continue;
case INSTR_MULBR11R6: REGISTER._11B *= REGISTER._6B; continue;
case INSTR_MULBR11R7: REGISTER._11B *= REGISTER._7B; continue;
case INSTR_MULBR11R8: REGISTER._11B *= REGISTER._8B; continue;
case INSTR_MULBR11R9: REGISTER._11B *= REGISTER._9B; continue;
case INSTR_MULBR11R10: REGISTER._11B *= REGISTER._10B; continue;
case INSTR_MULBR11R11: REGISTER._11B *= REGISTER._11B; continue;
case INSTR_MULBR11R12: REGISTER._11B *= REGISTER._12B; continue;
case INSTR_MULBR11RIP: REGISTER._11B *= REGISTER.IPB; continue;
case INSTR_MULBR11RSP: REGISTER._11B *= REGISTER.SPB; continue;
case INSTR_MULBR11RBP: REGISTER._11B *= REGISTER.BPB; continue;
case INSTR_MULBR12I: REGISTER._12B *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBR12RA: REGISTER._12B *= REGISTER.AB; continue;
case INSTR_MULBR12RB: REGISTER._12B *= REGISTER.BB; continue;
case INSTR_MULBR12RC: REGISTER._12B *= REGISTER.CB; continue;
case INSTR_MULBR12RD: REGISTER._12B *= REGISTER.DB; continue;
case INSTR_MULBR12R0: REGISTER._12B *= REGISTER._0B; continue;
case INSTR_MULBR12R1: REGISTER._12B *= REGISTER._1B; continue;
case INSTR_MULBR12R2: REGISTER._12B *= REGISTER._2B; continue;
case INSTR_MULBR12R3: REGISTER._12B *= REGISTER._3B; continue;
case INSTR_MULBR12R4: REGISTER._12B *= REGISTER._4B; continue;
case INSTR_MULBR12R5: REGISTER._12B *= REGISTER._5B; continue;
case INSTR_MULBR12R6: REGISTER._12B *= REGISTER._6B; continue;
case INSTR_MULBR12R7: REGISTER._12B *= REGISTER._7B; continue;
case INSTR_MULBR12R8: REGISTER._12B *= REGISTER._8B; continue;
case INSTR_MULBR12R9: REGISTER._12B *= REGISTER._9B; continue;
case INSTR_MULBR12R10: REGISTER._12B *= REGISTER._10B; continue;
case INSTR_MULBR12R11: REGISTER._12B *= REGISTER._11B; continue;
case INSTR_MULBR12R12: REGISTER._12B *= REGISTER._12B; continue;
case INSTR_MULBR12RIP: REGISTER._12B *= REGISTER.IPB; continue;
case INSTR_MULBR12RSP: REGISTER._12B *= REGISTER.SPB; continue;
case INSTR_MULBR12RBP: REGISTER._12B *= REGISTER.BPB; continue;
case INSTR_MULBRIPI: REGISTER.IPB *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBRIPRA: REGISTER.IPB *= REGISTER.AB; continue;
case INSTR_MULBRIPRB: REGISTER.IPB *= REGISTER.BB; continue;
case INSTR_MULBRIPRC: REGISTER.IPB *= REGISTER.CB; continue;
case INSTR_MULBRIPRD: REGISTER.IPB *= REGISTER.DB; continue;
case INSTR_MULBRIPR0: REGISTER.IPB *= REGISTER._0B; continue;
case INSTR_MULBRIPR1: REGISTER.IPB *= REGISTER._1B; continue;
case INSTR_MULBRIPR2: REGISTER.IPB *= REGISTER._2B; continue;
case INSTR_MULBRIPR3: REGISTER.IPB *= REGISTER._3B; continue;
case INSTR_MULBRIPR4: REGISTER.IPB *= REGISTER._4B; continue;
case INSTR_MULBRIPR5: REGISTER.IPB *= REGISTER._5B; continue;
case INSTR_MULBRIPR6: REGISTER.IPB *= REGISTER._6B; continue;
case INSTR_MULBRIPR7: REGISTER.IPB *= REGISTER._7B; continue;
case INSTR_MULBRIPR8: REGISTER.IPB *= REGISTER._8B; continue;
case INSTR_MULBRIPR9: REGISTER.IPB *= REGISTER._9B; continue;
case INSTR_MULBRIPR10: REGISTER.IPB *= REGISTER._10B; continue;
case INSTR_MULBRIPR11: REGISTER.IPB *= REGISTER._11B; continue;
case INSTR_MULBRIPR12: REGISTER.IPB *= REGISTER._12B; continue;
case INSTR_MULBRIPRIP: REGISTER.IPB *= REGISTER.IPB; continue;
case INSTR_MULBRIPRSP: REGISTER.IPB *= REGISTER.SPB; continue;
case INSTR_MULBRIPRBP: REGISTER.IPB *= REGISTER.BPB; continue;
case INSTR_MULBRSPI: REGISTER.SPB *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBRSPRA: REGISTER.SPB *= REGISTER.AB; continue;
case INSTR_MULBRSPRB: REGISTER.SPB *= REGISTER.BB; continue;
case INSTR_MULBRSPRC: REGISTER.SPB *= REGISTER.CB; continue;
case INSTR_MULBRSPRD: REGISTER.SPB *= REGISTER.DB; continue;
case INSTR_MULBRSPR0: REGISTER.SPB *= REGISTER._0B; continue;
case INSTR_MULBRSPR1: REGISTER.SPB *= REGISTER._1B; continue;
case INSTR_MULBRSPR2: REGISTER.SPB *= REGISTER._2B; continue;
case INSTR_MULBRSPR3: REGISTER.SPB *= REGISTER._3B; continue;
case INSTR_MULBRSPR4: REGISTER.SPB *= REGISTER._4B; continue;
case INSTR_MULBRSPR5: REGISTER.SPB *= REGISTER._5B; continue;
case INSTR_MULBRSPR6: REGISTER.SPB *= REGISTER._6B; continue;
case INSTR_MULBRSPR7: REGISTER.SPB *= REGISTER._7B; continue;
case INSTR_MULBRSPR8: REGISTER.SPB *= REGISTER._8B; continue;
case INSTR_MULBRSPR9: REGISTER.SPB *= REGISTER._9B; continue;
case INSTR_MULBRSPR10: REGISTER.SPB *= REGISTER._10B; continue;
case INSTR_MULBRSPR11: REGISTER.SPB *= REGISTER._11B; continue;
case INSTR_MULBRSPR12: REGISTER.SPB *= REGISTER._12B; continue;
case INSTR_MULBRSPRIP: REGISTER.SPB *= REGISTER.IPB; continue;
case INSTR_MULBRSPRSP: REGISTER.SPB *= REGISTER.SPB; continue;
case INSTR_MULBRSPRBP: REGISTER.SPB *= REGISTER.BPB; continue;
case INSTR_MULBRBPI: REGISTER.BPB *= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MULBRBPRA: REGISTER.BPB *= REGISTER.AB; continue;
case INSTR_MULBRBPRB: REGISTER.BPB *= REGISTER.BB; continue;
case INSTR_MULBRBPRC: REGISTER.BPB *= REGISTER.CB; continue;
case INSTR_MULBRBPRD: REGISTER.BPB *= REGISTER.DB; continue;
case INSTR_MULBRBPR0: REGISTER.BPB *= REGISTER._0B; continue;
case INSTR_MULBRBPR1: REGISTER.BPB *= REGISTER._1B; continue;
case INSTR_MULBRBPR2: REGISTER.BPB *= REGISTER._2B; continue;
case INSTR_MULBRBPR3: REGISTER.BPB *= REGISTER._3B; continue;
case INSTR_MULBRBPR4: REGISTER.BPB *= REGISTER._4B; continue;
case INSTR_MULBRBPR5: REGISTER.BPB *= REGISTER._5B; continue;
case INSTR_MULBRBPR6: REGISTER.BPB *= REGISTER._6B; continue;
case INSTR_MULBRBPR7: REGISTER.BPB *= REGISTER._7B; continue;
case INSTR_MULBRBPR8: REGISTER.BPB *= REGISTER._8B; continue;
case INSTR_MULBRBPR9: REGISTER.BPB *= REGISTER._9B; continue;
case INSTR_MULBRBPR10: REGISTER.BPB *= REGISTER._10B; continue;
case INSTR_MULBRBPR11: REGISTER.BPB *= REGISTER._11B; continue;
case INSTR_MULBRBPR12: REGISTER.BPB *= REGISTER._12B; continue;
case INSTR_MULBRBPRIP: REGISTER.BPB *= REGISTER.IPB; continue;
case INSTR_MULBRBPRSP: REGISTER.BPB *= REGISTER.SPB; continue;
case INSTR_MULBRBPRBP: REGISTER.BPB *= REGISTER.BPB; continue;
case INSTR_DIVQRAI: REGISTER.AQ /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQRARA: REGISTER.AQ /= REGISTER.AQ; continue;
case INSTR_DIVQRARB: REGISTER.AQ /= REGISTER.BQ; continue;
case INSTR_DIVQRARC: REGISTER.AQ /= REGISTER.CQ; continue;
case INSTR_DIVQRARD: REGISTER.AQ /= REGISTER.DQ; continue;
case INSTR_DIVQRAR0: REGISTER.AQ /= REGISTER._0Q; continue;
case INSTR_DIVQRAR1: REGISTER.AQ /= REGISTER._1Q; continue;
case INSTR_DIVQRAR2: REGISTER.AQ /= REGISTER._2Q; continue;
case INSTR_DIVQRAR3: REGISTER.AQ /= REGISTER._3Q; continue;
case INSTR_DIVQRAR4: REGISTER.AQ /= REGISTER._4Q; continue;
case INSTR_DIVQRAR5: REGISTER.AQ /= REGISTER._5Q; continue;
case INSTR_DIVQRAR6: REGISTER.AQ /= REGISTER._6Q; continue;
case INSTR_DIVQRAR7: REGISTER.AQ /= REGISTER._7Q; continue;
case INSTR_DIVQRAR8: REGISTER.AQ /= REGISTER._8Q; continue;
case INSTR_DIVQRAR9: REGISTER.AQ /= REGISTER._9Q; continue;
case INSTR_DIVQRAR10: REGISTER.AQ /= REGISTER._10Q; continue;
case INSTR_DIVQRAR11: REGISTER.AQ /= REGISTER._11Q; continue;
case INSTR_DIVQRAR12: REGISTER.AQ /= REGISTER._12Q; continue;
case INSTR_DIVQRARIP: REGISTER.AQ /= REGISTER.IPQ; continue;
case INSTR_DIVQRARSP: REGISTER.AQ /= REGISTER.SPQ; continue;
case INSTR_DIVQRARBP: REGISTER.AQ /= REGISTER.BPQ; continue;
case INSTR_DIVQRBI: REGISTER.BQ /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQRBRA: REGISTER.BQ /= REGISTER.AQ; continue;
case INSTR_DIVQRBRB: REGISTER.BQ /= REGISTER.BQ; continue;
case INSTR_DIVQRBRC: REGISTER.BQ /= REGISTER.CQ; continue;
case INSTR_DIVQRBRD: REGISTER.BQ /= REGISTER.DQ; continue;
case INSTR_DIVQRBR0: REGISTER.BQ /= REGISTER._0Q; continue;
case INSTR_DIVQRBR1: REGISTER.BQ /= REGISTER._1Q; continue;
case INSTR_DIVQRBR2: REGISTER.BQ /= REGISTER._2Q; continue;
case INSTR_DIVQRBR3: REGISTER.BQ /= REGISTER._3Q; continue;
case INSTR_DIVQRBR4: REGISTER.BQ /= REGISTER._4Q; continue;
case INSTR_DIVQRBR5: REGISTER.BQ /= REGISTER._5Q; continue;
case INSTR_DIVQRBR6: REGISTER.BQ /= REGISTER._6Q; continue;
case INSTR_DIVQRBR7: REGISTER.BQ /= REGISTER._7Q; continue;
case INSTR_DIVQRBR8: REGISTER.BQ /= REGISTER._8Q; continue;
case INSTR_DIVQRBR9: REGISTER.BQ /= REGISTER._9Q; continue;
case INSTR_DIVQRBR10: REGISTER.BQ /= REGISTER._10Q; continue;
case INSTR_DIVQRBR11: REGISTER.BQ /= REGISTER._11Q; continue;
case INSTR_DIVQRBR12: REGISTER.BQ /= REGISTER._12Q; continue;
case INSTR_DIVQRBRIP: REGISTER.BQ /= REGISTER.IPQ; continue;
case INSTR_DIVQRBRSP: REGISTER.BQ /= REGISTER.SPQ; continue;
case INSTR_DIVQRBRBP: REGISTER.BQ /= REGISTER.BPQ; continue;
case INSTR_DIVQRCI: REGISTER.CQ /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQRCRA: REGISTER.CQ /= REGISTER.AQ; continue;
case INSTR_DIVQRCRB: REGISTER.CQ /= REGISTER.BQ; continue;
case INSTR_DIVQRCRC: REGISTER.CQ /= REGISTER.CQ; continue;
case INSTR_DIVQRCRD: REGISTER.CQ /= REGISTER.DQ; continue;
case INSTR_DIVQRCR0: REGISTER.CQ /= REGISTER._0Q; continue;
case INSTR_DIVQRCR1: REGISTER.CQ /= REGISTER._1Q; continue;
case INSTR_DIVQRCR2: REGISTER.CQ /= REGISTER._2Q; continue;
case INSTR_DIVQRCR3: REGISTER.CQ /= REGISTER._3Q; continue;
case INSTR_DIVQRCR4: REGISTER.CQ /= REGISTER._4Q; continue;
case INSTR_DIVQRCR5: REGISTER.CQ /= REGISTER._5Q; continue;
case INSTR_DIVQRCR6: REGISTER.CQ /= REGISTER._6Q; continue;
case INSTR_DIVQRCR7: REGISTER.CQ /= REGISTER._7Q; continue;
case INSTR_DIVQRCR8: REGISTER.CQ /= REGISTER._8Q; continue;
case INSTR_DIVQRCR9: REGISTER.CQ /= REGISTER._9Q; continue;
case INSTR_DIVQRCR10: REGISTER.CQ /= REGISTER._10Q; continue;
case INSTR_DIVQRCR11: REGISTER.CQ /= REGISTER._11Q; continue;
case INSTR_DIVQRCR12: REGISTER.CQ /= REGISTER._12Q; continue;
case INSTR_DIVQRCRIP: REGISTER.CQ /= REGISTER.IPQ; continue;
case INSTR_DIVQRCRSP: REGISTER.CQ /= REGISTER.SPQ; continue;
case INSTR_DIVQRCRBP: REGISTER.CQ /= REGISTER.BPQ; continue;
case INSTR_DIVQRDI: REGISTER.DQ /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQRDRA: REGISTER.DQ /= REGISTER.AQ; continue;
case INSTR_DIVQRDRB: REGISTER.DQ /= REGISTER.BQ; continue;
case INSTR_DIVQRDRC: REGISTER.DQ /= REGISTER.CQ; continue;
case INSTR_DIVQRDRD: REGISTER.DQ /= REGISTER.DQ; continue;
case INSTR_DIVQRDR0: REGISTER.DQ /= REGISTER._0Q; continue;
case INSTR_DIVQRDR1: REGISTER.DQ /= REGISTER._1Q; continue;
case INSTR_DIVQRDR2: REGISTER.DQ /= REGISTER._2Q; continue;
case INSTR_DIVQRDR3: REGISTER.DQ /= REGISTER._3Q; continue;
case INSTR_DIVQRDR4: REGISTER.DQ /= REGISTER._4Q; continue;
case INSTR_DIVQRDR5: REGISTER.DQ /= REGISTER._5Q; continue;
case INSTR_DIVQRDR6: REGISTER.DQ /= REGISTER._6Q; continue;
case INSTR_DIVQRDR7: REGISTER.DQ /= REGISTER._7Q; continue;
case INSTR_DIVQRDR8: REGISTER.DQ /= REGISTER._8Q; continue;
case INSTR_DIVQRDR9: REGISTER.DQ /= REGISTER._9Q; continue;
case INSTR_DIVQRDR10: REGISTER.DQ /= REGISTER._10Q; continue;
case INSTR_DIVQRDR11: REGISTER.DQ /= REGISTER._11Q; continue;
case INSTR_DIVQRDR12: REGISTER.DQ /= REGISTER._12Q; continue;
case INSTR_DIVQRDRIP: REGISTER.DQ /= REGISTER.IPQ; continue;
case INSTR_DIVQRDRSP: REGISTER.DQ /= REGISTER.SPQ; continue;
case INSTR_DIVQRDRBP: REGISTER.DQ /= REGISTER.BPQ; continue;
case INSTR_DIVQR0I: REGISTER._0Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR0RA: REGISTER._0Q /= REGISTER.AQ; continue;
case INSTR_DIVQR0RB: REGISTER._0Q /= REGISTER.BQ; continue;
case INSTR_DIVQR0RC: REGISTER._0Q /= REGISTER.CQ; continue;
case INSTR_DIVQR0RD: REGISTER._0Q /= REGISTER.DQ; continue;
case INSTR_DIVQR0R0: REGISTER._0Q /= REGISTER._0Q; continue;
case INSTR_DIVQR0R1: REGISTER._0Q /= REGISTER._1Q; continue;
case INSTR_DIVQR0R2: REGISTER._0Q /= REGISTER._2Q; continue;
case INSTR_DIVQR0R3: REGISTER._0Q /= REGISTER._3Q; continue;
case INSTR_DIVQR0R4: REGISTER._0Q /= REGISTER._4Q; continue;
case INSTR_DIVQR0R5: REGISTER._0Q /= REGISTER._5Q; continue;
case INSTR_DIVQR0R6: REGISTER._0Q /= REGISTER._6Q; continue;
case INSTR_DIVQR0R7: REGISTER._0Q /= REGISTER._7Q; continue;
case INSTR_DIVQR0R8: REGISTER._0Q /= REGISTER._8Q; continue;
case INSTR_DIVQR0R9: REGISTER._0Q /= REGISTER._9Q; continue;
case INSTR_DIVQR0R10: REGISTER._0Q /= REGISTER._10Q; continue;
case INSTR_DIVQR0R11: REGISTER._0Q /= REGISTER._11Q; continue;
case INSTR_DIVQR0R12: REGISTER._0Q /= REGISTER._12Q; continue;
case INSTR_DIVQR0RIP: REGISTER._0Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR0RSP: REGISTER._0Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR0RBP: REGISTER._0Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR1I: REGISTER._1Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR1RA: REGISTER._1Q /= REGISTER.AQ; continue;
case INSTR_DIVQR1RB: REGISTER._1Q /= REGISTER.BQ; continue;
case INSTR_DIVQR1RC: REGISTER._1Q /= REGISTER.CQ; continue;
case INSTR_DIVQR1RD: REGISTER._1Q /= REGISTER.DQ; continue;
case INSTR_DIVQR1R0: REGISTER._1Q /= REGISTER._0Q; continue;
case INSTR_DIVQR1R1: REGISTER._1Q /= REGISTER._1Q; continue;
case INSTR_DIVQR1R2: REGISTER._1Q /= REGISTER._2Q; continue;
case INSTR_DIVQR1R3: REGISTER._1Q /= REGISTER._3Q; continue;
case INSTR_DIVQR1R4: REGISTER._1Q /= REGISTER._4Q; continue;
case INSTR_DIVQR1R5: REGISTER._1Q /= REGISTER._5Q; continue;
case INSTR_DIVQR1R6: REGISTER._1Q /= REGISTER._6Q; continue;
case INSTR_DIVQR1R7: REGISTER._1Q /= REGISTER._7Q; continue;
case INSTR_DIVQR1R8: REGISTER._1Q /= REGISTER._8Q; continue;
case INSTR_DIVQR1R9: REGISTER._1Q /= REGISTER._9Q; continue;
case INSTR_DIVQR1R10: REGISTER._1Q /= REGISTER._10Q; continue;
case INSTR_DIVQR1R11: REGISTER._1Q /= REGISTER._11Q; continue;
case INSTR_DIVQR1R12: REGISTER._1Q /= REGISTER._12Q; continue;
case INSTR_DIVQR1RIP: REGISTER._1Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR1RSP: REGISTER._1Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR1RBP: REGISTER._1Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR2I: REGISTER._2Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR2RA: REGISTER._2Q /= REGISTER.AQ; continue;
case INSTR_DIVQR2RB: REGISTER._2Q /= REGISTER.BQ; continue;
case INSTR_DIVQR2RC: REGISTER._2Q /= REGISTER.CQ; continue;
case INSTR_DIVQR2RD: REGISTER._2Q /= REGISTER.DQ; continue;
case INSTR_DIVQR2R0: REGISTER._2Q /= REGISTER._0Q; continue;
case INSTR_DIVQR2R1: REGISTER._2Q /= REGISTER._1Q; continue;
case INSTR_DIVQR2R2: REGISTER._2Q /= REGISTER._2Q; continue;
case INSTR_DIVQR2R3: REGISTER._2Q /= REGISTER._3Q; continue;
case INSTR_DIVQR2R4: REGISTER._2Q /= REGISTER._4Q; continue;
case INSTR_DIVQR2R5: REGISTER._2Q /= REGISTER._5Q; continue;
case INSTR_DIVQR2R6: REGISTER._2Q /= REGISTER._6Q; continue;
case INSTR_DIVQR2R7: REGISTER._2Q /= REGISTER._7Q; continue;
case INSTR_DIVQR2R8: REGISTER._2Q /= REGISTER._8Q; continue;
case INSTR_DIVQR2R9: REGISTER._2Q /= REGISTER._9Q; continue;
case INSTR_DIVQR2R10: REGISTER._2Q /= REGISTER._10Q; continue;
case INSTR_DIVQR2R11: REGISTER._2Q /= REGISTER._11Q; continue;
case INSTR_DIVQR2R12: REGISTER._2Q /= REGISTER._12Q; continue;
case INSTR_DIVQR2RIP: REGISTER._2Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR2RSP: REGISTER._2Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR2RBP: REGISTER._2Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR3I: REGISTER._3Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR3RA: REGISTER._3Q /= REGISTER.AQ; continue;
case INSTR_DIVQR3RB: REGISTER._3Q /= REGISTER.BQ; continue;
case INSTR_DIVQR3RC: REGISTER._3Q /= REGISTER.CQ; continue;
case INSTR_DIVQR3RD: REGISTER._3Q /= REGISTER.DQ; continue;
case INSTR_DIVQR3R0: REGISTER._3Q /= REGISTER._0Q; continue;
case INSTR_DIVQR3R1: REGISTER._3Q /= REGISTER._1Q; continue;
case INSTR_DIVQR3R2: REGISTER._3Q /= REGISTER._2Q; continue;
case INSTR_DIVQR3R3: REGISTER._3Q /= REGISTER._3Q; continue;
case INSTR_DIVQR3R4: REGISTER._3Q /= REGISTER._4Q; continue;
case INSTR_DIVQR3R5: REGISTER._3Q /= REGISTER._5Q; continue;
case INSTR_DIVQR3R6: REGISTER._3Q /= REGISTER._6Q; continue;
case INSTR_DIVQR3R7: REGISTER._3Q /= REGISTER._7Q; continue;
case INSTR_DIVQR3R8: REGISTER._3Q /= REGISTER._8Q; continue;
case INSTR_DIVQR3R9: REGISTER._3Q /= REGISTER._9Q; continue;
case INSTR_DIVQR3R10: REGISTER._3Q /= REGISTER._10Q; continue;
case INSTR_DIVQR3R11: REGISTER._3Q /= REGISTER._11Q; continue;
case INSTR_DIVQR3R12: REGISTER._3Q /= REGISTER._12Q; continue;
case INSTR_DIVQR3RIP: REGISTER._3Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR3RSP: REGISTER._3Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR3RBP: REGISTER._3Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR4I: REGISTER._4Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR4RA: REGISTER._4Q /= REGISTER.AQ; continue;
case INSTR_DIVQR4RB: REGISTER._4Q /= REGISTER.BQ; continue;
case INSTR_DIVQR4RC: REGISTER._4Q /= REGISTER.CQ; continue;
case INSTR_DIVQR4RD: REGISTER._4Q /= REGISTER.DQ; continue;
case INSTR_DIVQR4R0: REGISTER._4Q /= REGISTER._0Q; continue;
case INSTR_DIVQR4R1: REGISTER._4Q /= REGISTER._1Q; continue;
case INSTR_DIVQR4R2: REGISTER._4Q /= REGISTER._2Q; continue;
case INSTR_DIVQR4R3: REGISTER._4Q /= REGISTER._3Q; continue;
case INSTR_DIVQR4R4: REGISTER._4Q /= REGISTER._4Q; continue;
case INSTR_DIVQR4R5: REGISTER._4Q /= REGISTER._5Q; continue;
case INSTR_DIVQR4R6: REGISTER._4Q /= REGISTER._6Q; continue;
case INSTR_DIVQR4R7: REGISTER._4Q /= REGISTER._7Q; continue;
case INSTR_DIVQR4R8: REGISTER._4Q /= REGISTER._8Q; continue;
case INSTR_DIVQR4R9: REGISTER._4Q /= REGISTER._9Q; continue;
case INSTR_DIVQR4R10: REGISTER._4Q /= REGISTER._10Q; continue;
case INSTR_DIVQR4R11: REGISTER._4Q /= REGISTER._11Q; continue;
case INSTR_DIVQR4R12: REGISTER._4Q /= REGISTER._12Q; continue;
case INSTR_DIVQR4RIP: REGISTER._4Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR4RSP: REGISTER._4Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR4RBP: REGISTER._4Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR5I: REGISTER._5Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR5RA: REGISTER._5Q /= REGISTER.AQ; continue;
case INSTR_DIVQR5RB: REGISTER._5Q /= REGISTER.BQ; continue;
case INSTR_DIVQR5RC: REGISTER._5Q /= REGISTER.CQ; continue;
case INSTR_DIVQR5RD: REGISTER._5Q /= REGISTER.DQ; continue;
case INSTR_DIVQR5R0: REGISTER._5Q /= REGISTER._0Q; continue;
case INSTR_DIVQR5R1: REGISTER._5Q /= REGISTER._1Q; continue;
case INSTR_DIVQR5R2: REGISTER._5Q /= REGISTER._2Q; continue;
case INSTR_DIVQR5R3: REGISTER._5Q /= REGISTER._3Q; continue;
case INSTR_DIVQR5R4: REGISTER._5Q /= REGISTER._4Q; continue;
case INSTR_DIVQR5R5: REGISTER._5Q /= REGISTER._5Q; continue;
case INSTR_DIVQR5R6: REGISTER._5Q /= REGISTER._6Q; continue;
case INSTR_DIVQR5R7: REGISTER._5Q /= REGISTER._7Q; continue;
case INSTR_DIVQR5R8: REGISTER._5Q /= REGISTER._8Q; continue;
case INSTR_DIVQR5R9: REGISTER._5Q /= REGISTER._9Q; continue;
case INSTR_DIVQR5R10: REGISTER._5Q /= REGISTER._10Q; continue;
case INSTR_DIVQR5R11: REGISTER._5Q /= REGISTER._11Q; continue;
case INSTR_DIVQR5R12: REGISTER._5Q /= REGISTER._12Q; continue;
case INSTR_DIVQR5RIP: REGISTER._5Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR5RSP: REGISTER._5Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR5RBP: REGISTER._5Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR6I: REGISTER._6Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR6RA: REGISTER._6Q /= REGISTER.AQ; continue;
case INSTR_DIVQR6RB: REGISTER._6Q /= REGISTER.BQ; continue;
case INSTR_DIVQR6RC: REGISTER._6Q /= REGISTER.CQ; continue;
case INSTR_DIVQR6RD: REGISTER._6Q /= REGISTER.DQ; continue;
case INSTR_DIVQR6R0: REGISTER._6Q /= REGISTER._0Q; continue;
case INSTR_DIVQR6R1: REGISTER._6Q /= REGISTER._1Q; continue;
case INSTR_DIVQR6R2: REGISTER._6Q /= REGISTER._2Q; continue;
case INSTR_DIVQR6R3: REGISTER._6Q /= REGISTER._3Q; continue;
case INSTR_DIVQR6R4: REGISTER._6Q /= REGISTER._4Q; continue;
case INSTR_DIVQR6R5: REGISTER._6Q /= REGISTER._5Q; continue;
case INSTR_DIVQR6R6: REGISTER._6Q /= REGISTER._6Q; continue;
case INSTR_DIVQR6R7: REGISTER._6Q /= REGISTER._7Q; continue;
case INSTR_DIVQR6R8: REGISTER._6Q /= REGISTER._8Q; continue;
case INSTR_DIVQR6R9: REGISTER._6Q /= REGISTER._9Q; continue;
case INSTR_DIVQR6R10: REGISTER._6Q /= REGISTER._10Q; continue;
case INSTR_DIVQR6R11: REGISTER._6Q /= REGISTER._11Q; continue;
case INSTR_DIVQR6R12: REGISTER._6Q /= REGISTER._12Q; continue;
case INSTR_DIVQR6RIP: REGISTER._6Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR6RSP: REGISTER._6Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR6RBP: REGISTER._6Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR7I: REGISTER._7Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR7RA: REGISTER._7Q /= REGISTER.AQ; continue;
case INSTR_DIVQR7RB: REGISTER._7Q /= REGISTER.BQ; continue;
case INSTR_DIVQR7RC: REGISTER._7Q /= REGISTER.CQ; continue;
case INSTR_DIVQR7RD: REGISTER._7Q /= REGISTER.DQ; continue;
case INSTR_DIVQR7R0: REGISTER._7Q /= REGISTER._0Q; continue;
case INSTR_DIVQR7R1: REGISTER._7Q /= REGISTER._1Q; continue;
case INSTR_DIVQR7R2: REGISTER._7Q /= REGISTER._2Q; continue;
case INSTR_DIVQR7R3: REGISTER._7Q /= REGISTER._3Q; continue;
case INSTR_DIVQR7R4: REGISTER._7Q /= REGISTER._4Q; continue;
case INSTR_DIVQR7R5: REGISTER._7Q /= REGISTER._5Q; continue;
case INSTR_DIVQR7R6: REGISTER._7Q /= REGISTER._6Q; continue;
case INSTR_DIVQR7R7: REGISTER._7Q /= REGISTER._7Q; continue;
case INSTR_DIVQR7R8: REGISTER._7Q /= REGISTER._8Q; continue;
case INSTR_DIVQR7R9: REGISTER._7Q /= REGISTER._9Q; continue;
case INSTR_DIVQR7R10: REGISTER._7Q /= REGISTER._10Q; continue;
case INSTR_DIVQR7R11: REGISTER._7Q /= REGISTER._11Q; continue;
case INSTR_DIVQR7R12: REGISTER._7Q /= REGISTER._12Q; continue;
case INSTR_DIVQR7RIP: REGISTER._7Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR7RSP: REGISTER._7Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR7RBP: REGISTER._7Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR8I: REGISTER._8Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR8RA: REGISTER._8Q /= REGISTER.AQ; continue;
case INSTR_DIVQR8RB: REGISTER._8Q /= REGISTER.BQ; continue;
case INSTR_DIVQR8RC: REGISTER._8Q /= REGISTER.CQ; continue;
case INSTR_DIVQR8RD: REGISTER._8Q /= REGISTER.DQ; continue;
case INSTR_DIVQR8R0: REGISTER._8Q /= REGISTER._0Q; continue;
case INSTR_DIVQR8R1: REGISTER._8Q /= REGISTER._1Q; continue;
case INSTR_DIVQR8R2: REGISTER._8Q /= REGISTER._2Q; continue;
case INSTR_DIVQR8R3: REGISTER._8Q /= REGISTER._3Q; continue;
case INSTR_DIVQR8R4: REGISTER._8Q /= REGISTER._4Q; continue;
case INSTR_DIVQR8R5: REGISTER._8Q /= REGISTER._5Q; continue;
case INSTR_DIVQR8R6: REGISTER._8Q /= REGISTER._6Q; continue;
case INSTR_DIVQR8R7: REGISTER._8Q /= REGISTER._7Q; continue;
case INSTR_DIVQR8R8: REGISTER._8Q /= REGISTER._8Q; continue;
case INSTR_DIVQR8R9: REGISTER._8Q /= REGISTER._9Q; continue;
case INSTR_DIVQR8R10: REGISTER._8Q /= REGISTER._10Q; continue;
case INSTR_DIVQR8R11: REGISTER._8Q /= REGISTER._11Q; continue;
case INSTR_DIVQR8R12: REGISTER._8Q /= REGISTER._12Q; continue;
case INSTR_DIVQR8RIP: REGISTER._8Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR8RSP: REGISTER._8Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR8RBP: REGISTER._8Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR9I: REGISTER._9Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR9RA: REGISTER._9Q /= REGISTER.AQ; continue;
case INSTR_DIVQR9RB: REGISTER._9Q /= REGISTER.BQ; continue;
case INSTR_DIVQR9RC: REGISTER._9Q /= REGISTER.CQ; continue;
case INSTR_DIVQR9RD: REGISTER._9Q /= REGISTER.DQ; continue;
case INSTR_DIVQR9R0: REGISTER._9Q /= REGISTER._0Q; continue;
case INSTR_DIVQR9R1: REGISTER._9Q /= REGISTER._1Q; continue;
case INSTR_DIVQR9R2: REGISTER._9Q /= REGISTER._2Q; continue;
case INSTR_DIVQR9R3: REGISTER._9Q /= REGISTER._3Q; continue;
case INSTR_DIVQR9R4: REGISTER._9Q /= REGISTER._4Q; continue;
case INSTR_DIVQR9R5: REGISTER._9Q /= REGISTER._5Q; continue;
case INSTR_DIVQR9R6: REGISTER._9Q /= REGISTER._6Q; continue;
case INSTR_DIVQR9R7: REGISTER._9Q /= REGISTER._7Q; continue;
case INSTR_DIVQR9R8: REGISTER._9Q /= REGISTER._8Q; continue;
case INSTR_DIVQR9R9: REGISTER._9Q /= REGISTER._9Q; continue;
case INSTR_DIVQR9R10: REGISTER._9Q /= REGISTER._10Q; continue;
case INSTR_DIVQR9R11: REGISTER._9Q /= REGISTER._11Q; continue;
case INSTR_DIVQR9R12: REGISTER._9Q /= REGISTER._12Q; continue;
case INSTR_DIVQR9RIP: REGISTER._9Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR9RSP: REGISTER._9Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR9RBP: REGISTER._9Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR10I: REGISTER._10Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR10RA: REGISTER._10Q /= REGISTER.AQ; continue;
case INSTR_DIVQR10RB: REGISTER._10Q /= REGISTER.BQ; continue;
case INSTR_DIVQR10RC: REGISTER._10Q /= REGISTER.CQ; continue;
case INSTR_DIVQR10RD: REGISTER._10Q /= REGISTER.DQ; continue;
case INSTR_DIVQR10R0: REGISTER._10Q /= REGISTER._0Q; continue;
case INSTR_DIVQR10R1: REGISTER._10Q /= REGISTER._1Q; continue;
case INSTR_DIVQR10R2: REGISTER._10Q /= REGISTER._2Q; continue;
case INSTR_DIVQR10R3: REGISTER._10Q /= REGISTER._3Q; continue;
case INSTR_DIVQR10R4: REGISTER._10Q /= REGISTER._4Q; continue;
case INSTR_DIVQR10R5: REGISTER._10Q /= REGISTER._5Q; continue;
case INSTR_DIVQR10R6: REGISTER._10Q /= REGISTER._6Q; continue;
case INSTR_DIVQR10R7: REGISTER._10Q /= REGISTER._7Q; continue;
case INSTR_DIVQR10R8: REGISTER._10Q /= REGISTER._8Q; continue;
case INSTR_DIVQR10R9: REGISTER._10Q /= REGISTER._9Q; continue;
case INSTR_DIVQR10R10: REGISTER._10Q /= REGISTER._10Q; continue;
case INSTR_DIVQR10R11: REGISTER._10Q /= REGISTER._11Q; continue;
case INSTR_DIVQR10R12: REGISTER._10Q /= REGISTER._12Q; continue;
case INSTR_DIVQR10RIP: REGISTER._10Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR10RSP: REGISTER._10Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR10RBP: REGISTER._10Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR11I: REGISTER._11Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR11RA: REGISTER._11Q /= REGISTER.AQ; continue;
case INSTR_DIVQR11RB: REGISTER._11Q /= REGISTER.BQ; continue;
case INSTR_DIVQR11RC: REGISTER._11Q /= REGISTER.CQ; continue;
case INSTR_DIVQR11RD: REGISTER._11Q /= REGISTER.DQ; continue;
case INSTR_DIVQR11R0: REGISTER._11Q /= REGISTER._0Q; continue;
case INSTR_DIVQR11R1: REGISTER._11Q /= REGISTER._1Q; continue;
case INSTR_DIVQR11R2: REGISTER._11Q /= REGISTER._2Q; continue;
case INSTR_DIVQR11R3: REGISTER._11Q /= REGISTER._3Q; continue;
case INSTR_DIVQR11R4: REGISTER._11Q /= REGISTER._4Q; continue;
case INSTR_DIVQR11R5: REGISTER._11Q /= REGISTER._5Q; continue;
case INSTR_DIVQR11R6: REGISTER._11Q /= REGISTER._6Q; continue;
case INSTR_DIVQR11R7: REGISTER._11Q /= REGISTER._7Q; continue;
case INSTR_DIVQR11R8: REGISTER._11Q /= REGISTER._8Q; continue;
case INSTR_DIVQR11R9: REGISTER._11Q /= REGISTER._9Q; continue;
case INSTR_DIVQR11R10: REGISTER._11Q /= REGISTER._10Q; continue;
case INSTR_DIVQR11R11: REGISTER._11Q /= REGISTER._11Q; continue;
case INSTR_DIVQR11R12: REGISTER._11Q /= REGISTER._12Q; continue;
case INSTR_DIVQR11RIP: REGISTER._11Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR11RSP: REGISTER._11Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR11RBP: REGISTER._11Q /= REGISTER.BPQ; continue;
case INSTR_DIVQR12I: REGISTER._12Q /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQR12RA: REGISTER._12Q /= REGISTER.AQ; continue;
case INSTR_DIVQR12RB: REGISTER._12Q /= REGISTER.BQ; continue;
case INSTR_DIVQR12RC: REGISTER._12Q /= REGISTER.CQ; continue;
case INSTR_DIVQR12RD: REGISTER._12Q /= REGISTER.DQ; continue;
case INSTR_DIVQR12R0: REGISTER._12Q /= REGISTER._0Q; continue;
case INSTR_DIVQR12R1: REGISTER._12Q /= REGISTER._1Q; continue;
case INSTR_DIVQR12R2: REGISTER._12Q /= REGISTER._2Q; continue;
case INSTR_DIVQR12R3: REGISTER._12Q /= REGISTER._3Q; continue;
case INSTR_DIVQR12R4: REGISTER._12Q /= REGISTER._4Q; continue;
case INSTR_DIVQR12R5: REGISTER._12Q /= REGISTER._5Q; continue;
case INSTR_DIVQR12R6: REGISTER._12Q /= REGISTER._6Q; continue;
case INSTR_DIVQR12R7: REGISTER._12Q /= REGISTER._7Q; continue;
case INSTR_DIVQR12R8: REGISTER._12Q /= REGISTER._8Q; continue;
case INSTR_DIVQR12R9: REGISTER._12Q /= REGISTER._9Q; continue;
case INSTR_DIVQR12R10: REGISTER._12Q /= REGISTER._10Q; continue;
case INSTR_DIVQR12R11: REGISTER._12Q /= REGISTER._11Q; continue;
case INSTR_DIVQR12R12: REGISTER._12Q /= REGISTER._12Q; continue;
case INSTR_DIVQR12RIP: REGISTER._12Q /= REGISTER.IPQ; continue;
case INSTR_DIVQR12RSP: REGISTER._12Q /= REGISTER.SPQ; continue;
case INSTR_DIVQR12RBP: REGISTER._12Q /= REGISTER.BPQ; continue;
case INSTR_DIVQRIPI: REGISTER.IPQ /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQRIPRA: REGISTER.IPQ /= REGISTER.AQ; continue;
case INSTR_DIVQRIPRB: REGISTER.IPQ /= REGISTER.BQ; continue;
case INSTR_DIVQRIPRC: REGISTER.IPQ /= REGISTER.CQ; continue;
case INSTR_DIVQRIPRD: REGISTER.IPQ /= REGISTER.DQ; continue;
case INSTR_DIVQRIPR0: REGISTER.IPQ /= REGISTER._0Q; continue;
case INSTR_DIVQRIPR1: REGISTER.IPQ /= REGISTER._1Q; continue;
case INSTR_DIVQRIPR2: REGISTER.IPQ /= REGISTER._2Q; continue;
case INSTR_DIVQRIPR3: REGISTER.IPQ /= REGISTER._3Q; continue;
case INSTR_DIVQRIPR4: REGISTER.IPQ /= REGISTER._4Q; continue;
case INSTR_DIVQRIPR5: REGISTER.IPQ /= REGISTER._5Q; continue;
case INSTR_DIVQRIPR6: REGISTER.IPQ /= REGISTER._6Q; continue;
case INSTR_DIVQRIPR7: REGISTER.IPQ /= REGISTER._7Q; continue;
case INSTR_DIVQRIPR8: REGISTER.IPQ /= REGISTER._8Q; continue;
case INSTR_DIVQRIPR9: REGISTER.IPQ /= REGISTER._9Q; continue;
case INSTR_DIVQRIPR10: REGISTER.IPQ /= REGISTER._10Q; continue;
case INSTR_DIVQRIPR11: REGISTER.IPQ /= REGISTER._11Q; continue;
case INSTR_DIVQRIPR12: REGISTER.IPQ /= REGISTER._12Q; continue;
case INSTR_DIVQRIPRIP: REGISTER.IPQ /= REGISTER.IPQ; continue;
case INSTR_DIVQRIPRSP: REGISTER.IPQ /= REGISTER.SPQ; continue;
case INSTR_DIVQRIPRBP: REGISTER.IPQ /= REGISTER.BPQ; continue;
case INSTR_DIVQRSPI: REGISTER.SPQ /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQRSPRA: REGISTER.SPQ /= REGISTER.AQ; continue;
case INSTR_DIVQRSPRB: REGISTER.SPQ /= REGISTER.BQ; continue;
case INSTR_DIVQRSPRC: REGISTER.SPQ /= REGISTER.CQ; continue;
case INSTR_DIVQRSPRD: REGISTER.SPQ /= REGISTER.DQ; continue;
case INSTR_DIVQRSPR0: REGISTER.SPQ /= REGISTER._0Q; continue;
case INSTR_DIVQRSPR1: REGISTER.SPQ /= REGISTER._1Q; continue;
case INSTR_DIVQRSPR2: REGISTER.SPQ /= REGISTER._2Q; continue;
case INSTR_DIVQRSPR3: REGISTER.SPQ /= REGISTER._3Q; continue;
case INSTR_DIVQRSPR4: REGISTER.SPQ /= REGISTER._4Q; continue;
case INSTR_DIVQRSPR5: REGISTER.SPQ /= REGISTER._5Q; continue;
case INSTR_DIVQRSPR6: REGISTER.SPQ /= REGISTER._6Q; continue;
case INSTR_DIVQRSPR7: REGISTER.SPQ /= REGISTER._7Q; continue;
case INSTR_DIVQRSPR8: REGISTER.SPQ /= REGISTER._8Q; continue;
case INSTR_DIVQRSPR9: REGISTER.SPQ /= REGISTER._9Q; continue;
case INSTR_DIVQRSPR10: REGISTER.SPQ /= REGISTER._10Q; continue;
case INSTR_DIVQRSPR11: REGISTER.SPQ /= REGISTER._11Q; continue;
case INSTR_DIVQRSPR12: REGISTER.SPQ /= REGISTER._12Q; continue;
case INSTR_DIVQRSPRIP: REGISTER.SPQ /= REGISTER.IPQ; continue;
case INSTR_DIVQRSPRSP: REGISTER.SPQ /= REGISTER.SPQ; continue;
case INSTR_DIVQRSPRBP: REGISTER.SPQ /= REGISTER.BPQ; continue;
case INSTR_DIVQRBPI: REGISTER.BPQ /= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_DIVQRBPRA: REGISTER.BPQ /= REGISTER.AQ; continue;
case INSTR_DIVQRBPRB: REGISTER.BPQ /= REGISTER.BQ; continue;
case INSTR_DIVQRBPRC: REGISTER.BPQ /= REGISTER.CQ; continue;
case INSTR_DIVQRBPRD: REGISTER.BPQ /= REGISTER.DQ; continue;
case INSTR_DIVQRBPR0: REGISTER.BPQ /= REGISTER._0Q; continue;
case INSTR_DIVQRBPR1: REGISTER.BPQ /= REGISTER._1Q; continue;
case INSTR_DIVQRBPR2: REGISTER.BPQ /= REGISTER._2Q; continue;
case INSTR_DIVQRBPR3: REGISTER.BPQ /= REGISTER._3Q; continue;
case INSTR_DIVQRBPR4: REGISTER.BPQ /= REGISTER._4Q; continue;
case INSTR_DIVQRBPR5: REGISTER.BPQ /= REGISTER._5Q; continue;
case INSTR_DIVQRBPR6: REGISTER.BPQ /= REGISTER._6Q; continue;
case INSTR_DIVQRBPR7: REGISTER.BPQ /= REGISTER._7Q; continue;
case INSTR_DIVQRBPR8: REGISTER.BPQ /= REGISTER._8Q; continue;
case INSTR_DIVQRBPR9: REGISTER.BPQ /= REGISTER._9Q; continue;
case INSTR_DIVQRBPR10: REGISTER.BPQ /= REGISTER._10Q; continue;
case INSTR_DIVQRBPR11: REGISTER.BPQ /= REGISTER._11Q; continue;
case INSTR_DIVQRBPR12: REGISTER.BPQ /= REGISTER._12Q; continue;
case INSTR_DIVQRBPRIP: REGISTER.BPQ /= REGISTER.IPQ; continue;
case INSTR_DIVQRBPRSP: REGISTER.BPQ /= REGISTER.SPQ; continue;
case INSTR_DIVQRBPRBP: REGISTER.BPQ /= REGISTER.BPQ; continue;
case INSTR_DIVWRAI: REGISTER.AW /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWRARA: REGISTER.AW /= REGISTER.AW; continue;
case INSTR_DIVWRARB: REGISTER.AW /= REGISTER.BW; continue;
case INSTR_DIVWRARC: REGISTER.AW /= REGISTER.CW; continue;
case INSTR_DIVWRARD: REGISTER.AW /= REGISTER.DW; continue;
case INSTR_DIVWRAR0: REGISTER.AW /= REGISTER._0W; continue;
case INSTR_DIVWRAR1: REGISTER.AW /= REGISTER._1W; continue;
case INSTR_DIVWRAR2: REGISTER.AW /= REGISTER._2W; continue;
case INSTR_DIVWRAR3: REGISTER.AW /= REGISTER._3W; continue;
case INSTR_DIVWRAR4: REGISTER.AW /= REGISTER._4W; continue;
case INSTR_DIVWRAR5: REGISTER.AW /= REGISTER._5W; continue;
case INSTR_DIVWRAR6: REGISTER.AW /= REGISTER._6W; continue;
case INSTR_DIVWRAR7: REGISTER.AW /= REGISTER._7W; continue;
case INSTR_DIVWRAR8: REGISTER.AW /= REGISTER._8W; continue;
case INSTR_DIVWRAR9: REGISTER.AW /= REGISTER._9W; continue;
case INSTR_DIVWRAR10: REGISTER.AW /= REGISTER._10W; continue;
case INSTR_DIVWRAR11: REGISTER.AW /= REGISTER._11W; continue;
case INSTR_DIVWRAR12: REGISTER.AW /= REGISTER._12W; continue;
case INSTR_DIVWRARIP: REGISTER.AW /= REGISTER.IPW; continue;
case INSTR_DIVWRARSP: REGISTER.AW /= REGISTER.SPW; continue;
case INSTR_DIVWRARBP: REGISTER.AW /= REGISTER.BPW; continue;
case INSTR_DIVWRBI: REGISTER.BW /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWRBRA: REGISTER.BW /= REGISTER.AW; continue;
case INSTR_DIVWRBRB: REGISTER.BW /= REGISTER.BW; continue;
case INSTR_DIVWRBRC: REGISTER.BW /= REGISTER.CW; continue;
case INSTR_DIVWRBRD: REGISTER.BW /= REGISTER.DW; continue;
case INSTR_DIVWRBR0: REGISTER.BW /= REGISTER._0W; continue;
case INSTR_DIVWRBR1: REGISTER.BW /= REGISTER._1W; continue;
case INSTR_DIVWRBR2: REGISTER.BW /= REGISTER._2W; continue;
case INSTR_DIVWRBR3: REGISTER.BW /= REGISTER._3W; continue;
case INSTR_DIVWRBR4: REGISTER.BW /= REGISTER._4W; continue;
case INSTR_DIVWRBR5: REGISTER.BW /= REGISTER._5W; continue;
case INSTR_DIVWRBR6: REGISTER.BW /= REGISTER._6W; continue;
case INSTR_DIVWRBR7: REGISTER.BW /= REGISTER._7W; continue;
case INSTR_DIVWRBR8: REGISTER.BW /= REGISTER._8W; continue;
case INSTR_DIVWRBR9: REGISTER.BW /= REGISTER._9W; continue;
case INSTR_DIVWRBR10: REGISTER.BW /= REGISTER._10W; continue;
case INSTR_DIVWRBR11: REGISTER.BW /= REGISTER._11W; continue;
case INSTR_DIVWRBR12: REGISTER.BW /= REGISTER._12W; continue;
case INSTR_DIVWRBRIP: REGISTER.BW /= REGISTER.IPW; continue;
case INSTR_DIVWRBRSP: REGISTER.BW /= REGISTER.SPW; continue;
case INSTR_DIVWRBRBP: REGISTER.BW /= REGISTER.BPW; continue;
case INSTR_DIVWRCI: REGISTER.CW /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWRCRA: REGISTER.CW /= REGISTER.AW; continue;
case INSTR_DIVWRCRB: REGISTER.CW /= REGISTER.BW; continue;
case INSTR_DIVWRCRC: REGISTER.CW /= REGISTER.CW; continue;
case INSTR_DIVWRCRD: REGISTER.CW /= REGISTER.DW; continue;
case INSTR_DIVWRCR0: REGISTER.CW /= REGISTER._0W; continue;
case INSTR_DIVWRCR1: REGISTER.CW /= REGISTER._1W; continue;
case INSTR_DIVWRCR2: REGISTER.CW /= REGISTER._2W; continue;
case INSTR_DIVWRCR3: REGISTER.CW /= REGISTER._3W; continue;
case INSTR_DIVWRCR4: REGISTER.CW /= REGISTER._4W; continue;
case INSTR_DIVWRCR5: REGISTER.CW /= REGISTER._5W; continue;
case INSTR_DIVWRCR6: REGISTER.CW /= REGISTER._6W; continue;
case INSTR_DIVWRCR7: REGISTER.CW /= REGISTER._7W; continue;
case INSTR_DIVWRCR8: REGISTER.CW /= REGISTER._8W; continue;
case INSTR_DIVWRCR9: REGISTER.CW /= REGISTER._9W; continue;
case INSTR_DIVWRCR10: REGISTER.CW /= REGISTER._10W; continue;
case INSTR_DIVWRCR11: REGISTER.CW /= REGISTER._11W; continue;
case INSTR_DIVWRCR12: REGISTER.CW /= REGISTER._12W; continue;
case INSTR_DIVWRCRIP: REGISTER.CW /= REGISTER.IPW; continue;
case INSTR_DIVWRCRSP: REGISTER.CW /= REGISTER.SPW; continue;
case INSTR_DIVWRCRBP: REGISTER.CW /= REGISTER.BPW; continue;
case INSTR_DIVWRDI: REGISTER.DW /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWRDRA: REGISTER.DW /= REGISTER.AW; continue;
case INSTR_DIVWRDRB: REGISTER.DW /= REGISTER.BW; continue;
case INSTR_DIVWRDRC: REGISTER.DW /= REGISTER.CW; continue;
case INSTR_DIVWRDRD: REGISTER.DW /= REGISTER.DW; continue;
case INSTR_DIVWRDR0: REGISTER.DW /= REGISTER._0W; continue;
case INSTR_DIVWRDR1: REGISTER.DW /= REGISTER._1W; continue;
case INSTR_DIVWRDR2: REGISTER.DW /= REGISTER._2W; continue;
case INSTR_DIVWRDR3: REGISTER.DW /= REGISTER._3W; continue;
case INSTR_DIVWRDR4: REGISTER.DW /= REGISTER._4W; continue;
case INSTR_DIVWRDR5: REGISTER.DW /= REGISTER._5W; continue;
case INSTR_DIVWRDR6: REGISTER.DW /= REGISTER._6W; continue;
case INSTR_DIVWRDR7: REGISTER.DW /= REGISTER._7W; continue;
case INSTR_DIVWRDR8: REGISTER.DW /= REGISTER._8W; continue;
case INSTR_DIVWRDR9: REGISTER.DW /= REGISTER._9W; continue;
case INSTR_DIVWRDR10: REGISTER.DW /= REGISTER._10W; continue;
case INSTR_DIVWRDR11: REGISTER.DW /= REGISTER._11W; continue;
case INSTR_DIVWRDR12: REGISTER.DW /= REGISTER._12W; continue;
case INSTR_DIVWRDRIP: REGISTER.DW /= REGISTER.IPW; continue;
case INSTR_DIVWRDRSP: REGISTER.DW /= REGISTER.SPW; continue;
case INSTR_DIVWRDRBP: REGISTER.DW /= REGISTER.BPW; continue;
case INSTR_DIVWR0I: REGISTER._0W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR0RA: REGISTER._0W /= REGISTER.AW; continue;
case INSTR_DIVWR0RB: REGISTER._0W /= REGISTER.BW; continue;
case INSTR_DIVWR0RC: REGISTER._0W /= REGISTER.CW; continue;
case INSTR_DIVWR0RD: REGISTER._0W /= REGISTER.DW; continue;
case INSTR_DIVWR0R0: REGISTER._0W /= REGISTER._0W; continue;
case INSTR_DIVWR0R1: REGISTER._0W /= REGISTER._1W; continue;
case INSTR_DIVWR0R2: REGISTER._0W /= REGISTER._2W; continue;
case INSTR_DIVWR0R3: REGISTER._0W /= REGISTER._3W; continue;
case INSTR_DIVWR0R4: REGISTER._0W /= REGISTER._4W; continue;
case INSTR_DIVWR0R5: REGISTER._0W /= REGISTER._5W; continue;
case INSTR_DIVWR0R6: REGISTER._0W /= REGISTER._6W; continue;
case INSTR_DIVWR0R7: REGISTER._0W /= REGISTER._7W; continue;
case INSTR_DIVWR0R8: REGISTER._0W /= REGISTER._8W; continue;
case INSTR_DIVWR0R9: REGISTER._0W /= REGISTER._9W; continue;
case INSTR_DIVWR0R10: REGISTER._0W /= REGISTER._10W; continue;
case INSTR_DIVWR0R11: REGISTER._0W /= REGISTER._11W; continue;
case INSTR_DIVWR0R12: REGISTER._0W /= REGISTER._12W; continue;
case INSTR_DIVWR0RIP: REGISTER._0W /= REGISTER.IPW; continue;
case INSTR_DIVWR0RSP: REGISTER._0W /= REGISTER.SPW; continue;
case INSTR_DIVWR0RBP: REGISTER._0W /= REGISTER.BPW; continue;
case INSTR_DIVWR1I: REGISTER._1W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR1RA: REGISTER._1W /= REGISTER.AW; continue;
case INSTR_DIVWR1RB: REGISTER._1W /= REGISTER.BW; continue;
case INSTR_DIVWR1RC: REGISTER._1W /= REGISTER.CW; continue;
case INSTR_DIVWR1RD: REGISTER._1W /= REGISTER.DW; continue;
case INSTR_DIVWR1R0: REGISTER._1W /= REGISTER._0W; continue;
case INSTR_DIVWR1R1: REGISTER._1W /= REGISTER._1W; continue;
case INSTR_DIVWR1R2: REGISTER._1W /= REGISTER._2W; continue;
case INSTR_DIVWR1R3: REGISTER._1W /= REGISTER._3W; continue;
case INSTR_DIVWR1R4: REGISTER._1W /= REGISTER._4W; continue;
case INSTR_DIVWR1R5: REGISTER._1W /= REGISTER._5W; continue;
case INSTR_DIVWR1R6: REGISTER._1W /= REGISTER._6W; continue;
case INSTR_DIVWR1R7: REGISTER._1W /= REGISTER._7W; continue;
case INSTR_DIVWR1R8: REGISTER._1W /= REGISTER._8W; continue;
case INSTR_DIVWR1R9: REGISTER._1W /= REGISTER._9W; continue;
case INSTR_DIVWR1R10: REGISTER._1W /= REGISTER._10W; continue;
case INSTR_DIVWR1R11: REGISTER._1W /= REGISTER._11W; continue;
case INSTR_DIVWR1R12: REGISTER._1W /= REGISTER._12W; continue;
case INSTR_DIVWR1RIP: REGISTER._1W /= REGISTER.IPW; continue;
case INSTR_DIVWR1RSP: REGISTER._1W /= REGISTER.SPW; continue;
case INSTR_DIVWR1RBP: REGISTER._1W /= REGISTER.BPW; continue;
case INSTR_DIVWR2I: REGISTER._2W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR2RA: REGISTER._2W /= REGISTER.AW; continue;
case INSTR_DIVWR2RB: REGISTER._2W /= REGISTER.BW; continue;
case INSTR_DIVWR2RC: REGISTER._2W /= REGISTER.CW; continue;
case INSTR_DIVWR2RD: REGISTER._2W /= REGISTER.DW; continue;
case INSTR_DIVWR2R0: REGISTER._2W /= REGISTER._0W; continue;
case INSTR_DIVWR2R1: REGISTER._2W /= REGISTER._1W; continue;
case INSTR_DIVWR2R2: REGISTER._2W /= REGISTER._2W; continue;
case INSTR_DIVWR2R3: REGISTER._2W /= REGISTER._3W; continue;
case INSTR_DIVWR2R4: REGISTER._2W /= REGISTER._4W; continue;
case INSTR_DIVWR2R5: REGISTER._2W /= REGISTER._5W; continue;
case INSTR_DIVWR2R6: REGISTER._2W /= REGISTER._6W; continue;
case INSTR_DIVWR2R7: REGISTER._2W /= REGISTER._7W; continue;
case INSTR_DIVWR2R8: REGISTER._2W /= REGISTER._8W; continue;
case INSTR_DIVWR2R9: REGISTER._2W /= REGISTER._9W; continue;
case INSTR_DIVWR2R10: REGISTER._2W /= REGISTER._10W; continue;
case INSTR_DIVWR2R11: REGISTER._2W /= REGISTER._11W; continue;
case INSTR_DIVWR2R12: REGISTER._2W /= REGISTER._12W; continue;
case INSTR_DIVWR2RIP: REGISTER._2W /= REGISTER.IPW; continue;
case INSTR_DIVWR2RSP: REGISTER._2W /= REGISTER.SPW; continue;
case INSTR_DIVWR2RBP: REGISTER._2W /= REGISTER.BPW; continue;
case INSTR_DIVWR3I: REGISTER._3W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR3RA: REGISTER._3W /= REGISTER.AW; continue;
case INSTR_DIVWR3RB: REGISTER._3W /= REGISTER.BW; continue;
case INSTR_DIVWR3RC: REGISTER._3W /= REGISTER.CW; continue;
case INSTR_DIVWR3RD: REGISTER._3W /= REGISTER.DW; continue;
case INSTR_DIVWR3R0: REGISTER._3W /= REGISTER._0W; continue;
case INSTR_DIVWR3R1: REGISTER._3W /= REGISTER._1W; continue;
case INSTR_DIVWR3R2: REGISTER._3W /= REGISTER._2W; continue;
case INSTR_DIVWR3R3: REGISTER._3W /= REGISTER._3W; continue;
case INSTR_DIVWR3R4: REGISTER._3W /= REGISTER._4W; continue;
case INSTR_DIVWR3R5: REGISTER._3W /= REGISTER._5W; continue;
case INSTR_DIVWR3R6: REGISTER._3W /= REGISTER._6W; continue;
case INSTR_DIVWR3R7: REGISTER._3W /= REGISTER._7W; continue;
case INSTR_DIVWR3R8: REGISTER._3W /= REGISTER._8W; continue;
case INSTR_DIVWR3R9: REGISTER._3W /= REGISTER._9W; continue;
case INSTR_DIVWR3R10: REGISTER._3W /= REGISTER._10W; continue;
case INSTR_DIVWR3R11: REGISTER._3W /= REGISTER._11W; continue;
case INSTR_DIVWR3R12: REGISTER._3W /= REGISTER._12W; continue;
case INSTR_DIVWR3RIP: REGISTER._3W /= REGISTER.IPW; continue;
case INSTR_DIVWR3RSP: REGISTER._3W /= REGISTER.SPW; continue;
case INSTR_DIVWR3RBP: REGISTER._3W /= REGISTER.BPW; continue;
case INSTR_DIVWR4I: REGISTER._4W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR4RA: REGISTER._4W /= REGISTER.AW; continue;
case INSTR_DIVWR4RB: REGISTER._4W /= REGISTER.BW; continue;
case INSTR_DIVWR4RC: REGISTER._4W /= REGISTER.CW; continue;
case INSTR_DIVWR4RD: REGISTER._4W /= REGISTER.DW; continue;
case INSTR_DIVWR4R0: REGISTER._4W /= REGISTER._0W; continue;
case INSTR_DIVWR4R1: REGISTER._4W /= REGISTER._1W; continue;
case INSTR_DIVWR4R2: REGISTER._4W /= REGISTER._2W; continue;
case INSTR_DIVWR4R3: REGISTER._4W /= REGISTER._3W; continue;
case INSTR_DIVWR4R4: REGISTER._4W /= REGISTER._4W; continue;
case INSTR_DIVWR4R5: REGISTER._4W /= REGISTER._5W; continue;
case INSTR_DIVWR4R6: REGISTER._4W /= REGISTER._6W; continue;
case INSTR_DIVWR4R7: REGISTER._4W /= REGISTER._7W; continue;
case INSTR_DIVWR4R8: REGISTER._4W /= REGISTER._8W; continue;
case INSTR_DIVWR4R9: REGISTER._4W /= REGISTER._9W; continue;
case INSTR_DIVWR4R10: REGISTER._4W /= REGISTER._10W; continue;
case INSTR_DIVWR4R11: REGISTER._4W /= REGISTER._11W; continue;
case INSTR_DIVWR4R12: REGISTER._4W /= REGISTER._12W; continue;
case INSTR_DIVWR4RIP: REGISTER._4W /= REGISTER.IPW; continue;
case INSTR_DIVWR4RSP: REGISTER._4W /= REGISTER.SPW; continue;
case INSTR_DIVWR4RBP: REGISTER._4W /= REGISTER.BPW; continue;
case INSTR_DIVWR5I: REGISTER._5W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR5RA: REGISTER._5W /= REGISTER.AW; continue;
case INSTR_DIVWR5RB: REGISTER._5W /= REGISTER.BW; continue;
case INSTR_DIVWR5RC: REGISTER._5W /= REGISTER.CW; continue;
case INSTR_DIVWR5RD: REGISTER._5W /= REGISTER.DW; continue;
case INSTR_DIVWR5R0: REGISTER._5W /= REGISTER._0W; continue;
case INSTR_DIVWR5R1: REGISTER._5W /= REGISTER._1W; continue;
case INSTR_DIVWR5R2: REGISTER._5W /= REGISTER._2W; continue;
case INSTR_DIVWR5R3: REGISTER._5W /= REGISTER._3W; continue;
case INSTR_DIVWR5R4: REGISTER._5W /= REGISTER._4W; continue;
case INSTR_DIVWR5R5: REGISTER._5W /= REGISTER._5W; continue;
case INSTR_DIVWR5R6: REGISTER._5W /= REGISTER._6W; continue;
case INSTR_DIVWR5R7: REGISTER._5W /= REGISTER._7W; continue;
case INSTR_DIVWR5R8: REGISTER._5W /= REGISTER._8W; continue;
case INSTR_DIVWR5R9: REGISTER._5W /= REGISTER._9W; continue;
case INSTR_DIVWR5R10: REGISTER._5W /= REGISTER._10W; continue;
case INSTR_DIVWR5R11: REGISTER._5W /= REGISTER._11W; continue;
case INSTR_DIVWR5R12: REGISTER._5W /= REGISTER._12W; continue;
case INSTR_DIVWR5RIP: REGISTER._5W /= REGISTER.IPW; continue;
case INSTR_DIVWR5RSP: REGISTER._5W /= REGISTER.SPW; continue;
case INSTR_DIVWR5RBP: REGISTER._5W /= REGISTER.BPW; continue;
case INSTR_DIVWR6I: REGISTER._6W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR6RA: REGISTER._6W /= REGISTER.AW; continue;
case INSTR_DIVWR6RB: REGISTER._6W /= REGISTER.BW; continue;
case INSTR_DIVWR6RC: REGISTER._6W /= REGISTER.CW; continue;
case INSTR_DIVWR6RD: REGISTER._6W /= REGISTER.DW; continue;
case INSTR_DIVWR6R0: REGISTER._6W /= REGISTER._0W; continue;
case INSTR_DIVWR6R1: REGISTER._6W /= REGISTER._1W; continue;
case INSTR_DIVWR6R2: REGISTER._6W /= REGISTER._2W; continue;
case INSTR_DIVWR6R3: REGISTER._6W /= REGISTER._3W; continue;
case INSTR_DIVWR6R4: REGISTER._6W /= REGISTER._4W; continue;
case INSTR_DIVWR6R5: REGISTER._6W /= REGISTER._5W; continue;
case INSTR_DIVWR6R6: REGISTER._6W /= REGISTER._6W; continue;
case INSTR_DIVWR6R7: REGISTER._6W /= REGISTER._7W; continue;
case INSTR_DIVWR6R8: REGISTER._6W /= REGISTER._8W; continue;
case INSTR_DIVWR6R9: REGISTER._6W /= REGISTER._9W; continue;
case INSTR_DIVWR6R10: REGISTER._6W /= REGISTER._10W; continue;
case INSTR_DIVWR6R11: REGISTER._6W /= REGISTER._11W; continue;
case INSTR_DIVWR6R12: REGISTER._6W /= REGISTER._12W; continue;
case INSTR_DIVWR6RIP: REGISTER._6W /= REGISTER.IPW; continue;
case INSTR_DIVWR6RSP: REGISTER._6W /= REGISTER.SPW; continue;
case INSTR_DIVWR6RBP: REGISTER._6W /= REGISTER.BPW; continue;
case INSTR_DIVWR7I: REGISTER._7W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR7RA: REGISTER._7W /= REGISTER.AW; continue;
case INSTR_DIVWR7RB: REGISTER._7W /= REGISTER.BW; continue;
case INSTR_DIVWR7RC: REGISTER._7W /= REGISTER.CW; continue;
case INSTR_DIVWR7RD: REGISTER._7W /= REGISTER.DW; continue;
case INSTR_DIVWR7R0: REGISTER._7W /= REGISTER._0W; continue;
case INSTR_DIVWR7R1: REGISTER._7W /= REGISTER._1W; continue;
case INSTR_DIVWR7R2: REGISTER._7W /= REGISTER._2W; continue;
case INSTR_DIVWR7R3: REGISTER._7W /= REGISTER._3W; continue;
case INSTR_DIVWR7R4: REGISTER._7W /= REGISTER._4W; continue;
case INSTR_DIVWR7R5: REGISTER._7W /= REGISTER._5W; continue;
case INSTR_DIVWR7R6: REGISTER._7W /= REGISTER._6W; continue;
case INSTR_DIVWR7R7: REGISTER._7W /= REGISTER._7W; continue;
case INSTR_DIVWR7R8: REGISTER._7W /= REGISTER._8W; continue;
case INSTR_DIVWR7R9: REGISTER._7W /= REGISTER._9W; continue;
case INSTR_DIVWR7R10: REGISTER._7W /= REGISTER._10W; continue;
case INSTR_DIVWR7R11: REGISTER._7W /= REGISTER._11W; continue;
case INSTR_DIVWR7R12: REGISTER._7W /= REGISTER._12W; continue;
case INSTR_DIVWR7RIP: REGISTER._7W /= REGISTER.IPW; continue;
case INSTR_DIVWR7RSP: REGISTER._7W /= REGISTER.SPW; continue;
case INSTR_DIVWR7RBP: REGISTER._7W /= REGISTER.BPW; continue;
case INSTR_DIVWR8I: REGISTER._8W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR8RA: REGISTER._8W /= REGISTER.AW; continue;
case INSTR_DIVWR8RB: REGISTER._8W /= REGISTER.BW; continue;
case INSTR_DIVWR8RC: REGISTER._8W /= REGISTER.CW; continue;
case INSTR_DIVWR8RD: REGISTER._8W /= REGISTER.DW; continue;
case INSTR_DIVWR8R0: REGISTER._8W /= REGISTER._0W; continue;
case INSTR_DIVWR8R1: REGISTER._8W /= REGISTER._1W; continue;
case INSTR_DIVWR8R2: REGISTER._8W /= REGISTER._2W; continue;
case INSTR_DIVWR8R3: REGISTER._8W /= REGISTER._3W; continue;
case INSTR_DIVWR8R4: REGISTER._8W /= REGISTER._4W; continue;
case INSTR_DIVWR8R5: REGISTER._8W /= REGISTER._5W; continue;
case INSTR_DIVWR8R6: REGISTER._8W /= REGISTER._6W; continue;
case INSTR_DIVWR8R7: REGISTER._8W /= REGISTER._7W; continue;
case INSTR_DIVWR8R8: REGISTER._8W /= REGISTER._8W; continue;
case INSTR_DIVWR8R9: REGISTER._8W /= REGISTER._9W; continue;
case INSTR_DIVWR8R10: REGISTER._8W /= REGISTER._10W; continue;
case INSTR_DIVWR8R11: REGISTER._8W /= REGISTER._11W; continue;
case INSTR_DIVWR8R12: REGISTER._8W /= REGISTER._12W; continue;
case INSTR_DIVWR8RIP: REGISTER._8W /= REGISTER.IPW; continue;
case INSTR_DIVWR8RSP: REGISTER._8W /= REGISTER.SPW; continue;
case INSTR_DIVWR8RBP: REGISTER._8W /= REGISTER.BPW; continue;
case INSTR_DIVWR9I: REGISTER._9W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR9RA: REGISTER._9W /= REGISTER.AW; continue;
case INSTR_DIVWR9RB: REGISTER._9W /= REGISTER.BW; continue;
case INSTR_DIVWR9RC: REGISTER._9W /= REGISTER.CW; continue;
case INSTR_DIVWR9RD: REGISTER._9W /= REGISTER.DW; continue;
case INSTR_DIVWR9R0: REGISTER._9W /= REGISTER._0W; continue;
case INSTR_DIVWR9R1: REGISTER._9W /= REGISTER._1W; continue;
case INSTR_DIVWR9R2: REGISTER._9W /= REGISTER._2W; continue;
case INSTR_DIVWR9R3: REGISTER._9W /= REGISTER._3W; continue;
case INSTR_DIVWR9R4: REGISTER._9W /= REGISTER._4W; continue;
case INSTR_DIVWR9R5: REGISTER._9W /= REGISTER._5W; continue;
case INSTR_DIVWR9R6: REGISTER._9W /= REGISTER._6W; continue;
case INSTR_DIVWR9R7: REGISTER._9W /= REGISTER._7W; continue;
case INSTR_DIVWR9R8: REGISTER._9W /= REGISTER._8W; continue;
case INSTR_DIVWR9R9: REGISTER._9W /= REGISTER._9W; continue;
case INSTR_DIVWR9R10: REGISTER._9W /= REGISTER._10W; continue;
case INSTR_DIVWR9R11: REGISTER._9W /= REGISTER._11W; continue;
case INSTR_DIVWR9R12: REGISTER._9W /= REGISTER._12W; continue;
case INSTR_DIVWR9RIP: REGISTER._9W /= REGISTER.IPW; continue;
case INSTR_DIVWR9RSP: REGISTER._9W /= REGISTER.SPW; continue;
case INSTR_DIVWR9RBP: REGISTER._9W /= REGISTER.BPW; continue;
case INSTR_DIVWR10I: REGISTER._10W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR10RA: REGISTER._10W /= REGISTER.AW; continue;
case INSTR_DIVWR10RB: REGISTER._10W /= REGISTER.BW; continue;
case INSTR_DIVWR10RC: REGISTER._10W /= REGISTER.CW; continue;
case INSTR_DIVWR10RD: REGISTER._10W /= REGISTER.DW; continue;
case INSTR_DIVWR10R0: REGISTER._10W /= REGISTER._0W; continue;
case INSTR_DIVWR10R1: REGISTER._10W /= REGISTER._1W; continue;
case INSTR_DIVWR10R2: REGISTER._10W /= REGISTER._2W; continue;
case INSTR_DIVWR10R3: REGISTER._10W /= REGISTER._3W; continue;
case INSTR_DIVWR10R4: REGISTER._10W /= REGISTER._4W; continue;
case INSTR_DIVWR10R5: REGISTER._10W /= REGISTER._5W; continue;
case INSTR_DIVWR10R6: REGISTER._10W /= REGISTER._6W; continue;
case INSTR_DIVWR10R7: REGISTER._10W /= REGISTER._7W; continue;
case INSTR_DIVWR10R8: REGISTER._10W /= REGISTER._8W; continue;
case INSTR_DIVWR10R9: REGISTER._10W /= REGISTER._9W; continue;
case INSTR_DIVWR10R10: REGISTER._10W /= REGISTER._10W; continue;
case INSTR_DIVWR10R11: REGISTER._10W /= REGISTER._11W; continue;
case INSTR_DIVWR10R12: REGISTER._10W /= REGISTER._12W; continue;
case INSTR_DIVWR10RIP: REGISTER._10W /= REGISTER.IPW; continue;
case INSTR_DIVWR10RSP: REGISTER._10W /= REGISTER.SPW; continue;
case INSTR_DIVWR10RBP: REGISTER._10W /= REGISTER.BPW; continue;
case INSTR_DIVWR11I: REGISTER._11W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR11RA: REGISTER._11W /= REGISTER.AW; continue;
case INSTR_DIVWR11RB: REGISTER._11W /= REGISTER.BW; continue;
case INSTR_DIVWR11RC: REGISTER._11W /= REGISTER.CW; continue;
case INSTR_DIVWR11RD: REGISTER._11W /= REGISTER.DW; continue;
case INSTR_DIVWR11R0: REGISTER._11W /= REGISTER._0W; continue;
case INSTR_DIVWR11R1: REGISTER._11W /= REGISTER._1W; continue;
case INSTR_DIVWR11R2: REGISTER._11W /= REGISTER._2W; continue;
case INSTR_DIVWR11R3: REGISTER._11W /= REGISTER._3W; continue;
case INSTR_DIVWR11R4: REGISTER._11W /= REGISTER._4W; continue;
case INSTR_DIVWR11R5: REGISTER._11W /= REGISTER._5W; continue;
case INSTR_DIVWR11R6: REGISTER._11W /= REGISTER._6W; continue;
case INSTR_DIVWR11R7: REGISTER._11W /= REGISTER._7W; continue;
case INSTR_DIVWR11R8: REGISTER._11W /= REGISTER._8W; continue;
case INSTR_DIVWR11R9: REGISTER._11W /= REGISTER._9W; continue;
case INSTR_DIVWR11R10: REGISTER._11W /= REGISTER._10W; continue;
case INSTR_DIVWR11R11: REGISTER._11W /= REGISTER._11W; continue;
case INSTR_DIVWR11R12: REGISTER._11W /= REGISTER._12W; continue;
case INSTR_DIVWR11RIP: REGISTER._11W /= REGISTER.IPW; continue;
case INSTR_DIVWR11RSP: REGISTER._11W /= REGISTER.SPW; continue;
case INSTR_DIVWR11RBP: REGISTER._11W /= REGISTER.BPW; continue;
case INSTR_DIVWR12I: REGISTER._12W /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWR12RA: REGISTER._12W /= REGISTER.AW; continue;
case INSTR_DIVWR12RB: REGISTER._12W /= REGISTER.BW; continue;
case INSTR_DIVWR12RC: REGISTER._12W /= REGISTER.CW; continue;
case INSTR_DIVWR12RD: REGISTER._12W /= REGISTER.DW; continue;
case INSTR_DIVWR12R0: REGISTER._12W /= REGISTER._0W; continue;
case INSTR_DIVWR12R1: REGISTER._12W /= REGISTER._1W; continue;
case INSTR_DIVWR12R2: REGISTER._12W /= REGISTER._2W; continue;
case INSTR_DIVWR12R3: REGISTER._12W /= REGISTER._3W; continue;
case INSTR_DIVWR12R4: REGISTER._12W /= REGISTER._4W; continue;
case INSTR_DIVWR12R5: REGISTER._12W /= REGISTER._5W; continue;
case INSTR_DIVWR12R6: REGISTER._12W /= REGISTER._6W; continue;
case INSTR_DIVWR12R7: REGISTER._12W /= REGISTER._7W; continue;
case INSTR_DIVWR12R8: REGISTER._12W /= REGISTER._8W; continue;
case INSTR_DIVWR12R9: REGISTER._12W /= REGISTER._9W; continue;
case INSTR_DIVWR12R10: REGISTER._12W /= REGISTER._10W; continue;
case INSTR_DIVWR12R11: REGISTER._12W /= REGISTER._11W; continue;
case INSTR_DIVWR12R12: REGISTER._12W /= REGISTER._12W; continue;
case INSTR_DIVWR12RIP: REGISTER._12W /= REGISTER.IPW; continue;
case INSTR_DIVWR12RSP: REGISTER._12W /= REGISTER.SPW; continue;
case INSTR_DIVWR12RBP: REGISTER._12W /= REGISTER.BPW; continue;
case INSTR_DIVWRIPI: REGISTER.IPW /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWRIPRA: REGISTER.IPW /= REGISTER.AW; continue;
case INSTR_DIVWRIPRB: REGISTER.IPW /= REGISTER.BW; continue;
case INSTR_DIVWRIPRC: REGISTER.IPW /= REGISTER.CW; continue;
case INSTR_DIVWRIPRD: REGISTER.IPW /= REGISTER.DW; continue;
case INSTR_DIVWRIPR0: REGISTER.IPW /= REGISTER._0W; continue;
case INSTR_DIVWRIPR1: REGISTER.IPW /= REGISTER._1W; continue;
case INSTR_DIVWRIPR2: REGISTER.IPW /= REGISTER._2W; continue;
case INSTR_DIVWRIPR3: REGISTER.IPW /= REGISTER._3W; continue;
case INSTR_DIVWRIPR4: REGISTER.IPW /= REGISTER._4W; continue;
case INSTR_DIVWRIPR5: REGISTER.IPW /= REGISTER._5W; continue;
case INSTR_DIVWRIPR6: REGISTER.IPW /= REGISTER._6W; continue;
case INSTR_DIVWRIPR7: REGISTER.IPW /= REGISTER._7W; continue;
case INSTR_DIVWRIPR8: REGISTER.IPW /= REGISTER._8W; continue;
case INSTR_DIVWRIPR9: REGISTER.IPW /= REGISTER._9W; continue;
case INSTR_DIVWRIPR10: REGISTER.IPW /= REGISTER._10W; continue;
case INSTR_DIVWRIPR11: REGISTER.IPW /= REGISTER._11W; continue;
case INSTR_DIVWRIPR12: REGISTER.IPW /= REGISTER._12W; continue;
case INSTR_DIVWRIPRIP: REGISTER.IPW /= REGISTER.IPW; continue;
case INSTR_DIVWRIPRSP: REGISTER.IPW /= REGISTER.SPW; continue;
case INSTR_DIVWRIPRBP: REGISTER.IPW /= REGISTER.BPW; continue;
case INSTR_DIVWRSPI: REGISTER.SPW /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWRSPRA: REGISTER.SPW /= REGISTER.AW; continue;
case INSTR_DIVWRSPRB: REGISTER.SPW /= REGISTER.BW; continue;
case INSTR_DIVWRSPRC: REGISTER.SPW /= REGISTER.CW; continue;
case INSTR_DIVWRSPRD: REGISTER.SPW /= REGISTER.DW; continue;
case INSTR_DIVWRSPR0: REGISTER.SPW /= REGISTER._0W; continue;
case INSTR_DIVWRSPR1: REGISTER.SPW /= REGISTER._1W; continue;
case INSTR_DIVWRSPR2: REGISTER.SPW /= REGISTER._2W; continue;
case INSTR_DIVWRSPR3: REGISTER.SPW /= REGISTER._3W; continue;
case INSTR_DIVWRSPR4: REGISTER.SPW /= REGISTER._4W; continue;
case INSTR_DIVWRSPR5: REGISTER.SPW /= REGISTER._5W; continue;
case INSTR_DIVWRSPR6: REGISTER.SPW /= REGISTER._6W; continue;
case INSTR_DIVWRSPR7: REGISTER.SPW /= REGISTER._7W; continue;
case INSTR_DIVWRSPR8: REGISTER.SPW /= REGISTER._8W; continue;
case INSTR_DIVWRSPR9: REGISTER.SPW /= REGISTER._9W; continue;
case INSTR_DIVWRSPR10: REGISTER.SPW /= REGISTER._10W; continue;
case INSTR_DIVWRSPR11: REGISTER.SPW /= REGISTER._11W; continue;
case INSTR_DIVWRSPR12: REGISTER.SPW /= REGISTER._12W; continue;
case INSTR_DIVWRSPRIP: REGISTER.SPW /= REGISTER.IPW; continue;
case INSTR_DIVWRSPRSP: REGISTER.SPW /= REGISTER.SPW; continue;
case INSTR_DIVWRSPRBP: REGISTER.SPW /= REGISTER.BPW; continue;
case INSTR_DIVWRBPI: REGISTER.BPW /= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_DIVWRBPRA: REGISTER.BPW /= REGISTER.AW; continue;
case INSTR_DIVWRBPRB: REGISTER.BPW /= REGISTER.BW; continue;
case INSTR_DIVWRBPRC: REGISTER.BPW /= REGISTER.CW; continue;
case INSTR_DIVWRBPRD: REGISTER.BPW /= REGISTER.DW; continue;
case INSTR_DIVWRBPR0: REGISTER.BPW /= REGISTER._0W; continue;
case INSTR_DIVWRBPR1: REGISTER.BPW /= REGISTER._1W; continue;
case INSTR_DIVWRBPR2: REGISTER.BPW /= REGISTER._2W; continue;
case INSTR_DIVWRBPR3: REGISTER.BPW /= REGISTER._3W; continue;
case INSTR_DIVWRBPR4: REGISTER.BPW /= REGISTER._4W; continue;
case INSTR_DIVWRBPR5: REGISTER.BPW /= REGISTER._5W; continue;
case INSTR_DIVWRBPR6: REGISTER.BPW /= REGISTER._6W; continue;
case INSTR_DIVWRBPR7: REGISTER.BPW /= REGISTER._7W; continue;
case INSTR_DIVWRBPR8: REGISTER.BPW /= REGISTER._8W; continue;
case INSTR_DIVWRBPR9: REGISTER.BPW /= REGISTER._9W; continue;
case INSTR_DIVWRBPR10: REGISTER.BPW /= REGISTER._10W; continue;
case INSTR_DIVWRBPR11: REGISTER.BPW /= REGISTER._11W; continue;
case INSTR_DIVWRBPR12: REGISTER.BPW /= REGISTER._12W; continue;
case INSTR_DIVWRBPRIP: REGISTER.BPW /= REGISTER.IPW; continue;
case INSTR_DIVWRBPRSP: REGISTER.BPW /= REGISTER.SPW; continue;
case INSTR_DIVWRBPRBP: REGISTER.BPW /= REGISTER.BPW; continue;
case INSTR_DIVBRAI: REGISTER.AB /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBRARA: REGISTER.AB /= REGISTER.AB; continue;
case INSTR_DIVBRARB: REGISTER.AB /= REGISTER.BB; continue;
case INSTR_DIVBRARC: REGISTER.AB /= REGISTER.CB; continue;
case INSTR_DIVBRARD: REGISTER.AB /= REGISTER.DB; continue;
case INSTR_DIVBRAR0: REGISTER.AB /= REGISTER._0B; continue;
case INSTR_DIVBRAR1: REGISTER.AB /= REGISTER._1B; continue;
case INSTR_DIVBRAR2: REGISTER.AB /= REGISTER._2B; continue;
case INSTR_DIVBRAR3: REGISTER.AB /= REGISTER._3B; continue;
case INSTR_DIVBRAR4: REGISTER.AB /= REGISTER._4B; continue;
case INSTR_DIVBRAR5: REGISTER.AB /= REGISTER._5B; continue;
case INSTR_DIVBRAR6: REGISTER.AB /= REGISTER._6B; continue;
case INSTR_DIVBRAR7: REGISTER.AB /= REGISTER._7B; continue;
case INSTR_DIVBRAR8: REGISTER.AB /= REGISTER._8B; continue;
case INSTR_DIVBRAR9: REGISTER.AB /= REGISTER._9B; continue;
case INSTR_DIVBRAR10: REGISTER.AB /= REGISTER._10B; continue;
case INSTR_DIVBRAR11: REGISTER.AB /= REGISTER._11B; continue;
case INSTR_DIVBRAR12: REGISTER.AB /= REGISTER._12B; continue;
case INSTR_DIVBRARIP: REGISTER.AB /= REGISTER.IPB; continue;
case INSTR_DIVBRARSP: REGISTER.AB /= REGISTER.SPB; continue;
case INSTR_DIVBRARBP: REGISTER.AB /= REGISTER.BPB; continue;
case INSTR_DIVBRBI: REGISTER.BB /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBRBRA: REGISTER.BB /= REGISTER.AB; continue;
case INSTR_DIVBRBRB: REGISTER.BB /= REGISTER.BB; continue;
case INSTR_DIVBRBRC: REGISTER.BB /= REGISTER.CB; continue;
case INSTR_DIVBRBRD: REGISTER.BB /= REGISTER.DB; continue;
case INSTR_DIVBRBR0: REGISTER.BB /= REGISTER._0B; continue;
case INSTR_DIVBRBR1: REGISTER.BB /= REGISTER._1B; continue;
case INSTR_DIVBRBR2: REGISTER.BB /= REGISTER._2B; continue;
case INSTR_DIVBRBR3: REGISTER.BB /= REGISTER._3B; continue;
case INSTR_DIVBRBR4: REGISTER.BB /= REGISTER._4B; continue;
case INSTR_DIVBRBR5: REGISTER.BB /= REGISTER._5B; continue;
case INSTR_DIVBRBR6: REGISTER.BB /= REGISTER._6B; continue;
case INSTR_DIVBRBR7: REGISTER.BB /= REGISTER._7B; continue;
case INSTR_DIVBRBR8: REGISTER.BB /= REGISTER._8B; continue;
case INSTR_DIVBRBR9: REGISTER.BB /= REGISTER._9B; continue;
case INSTR_DIVBRBR10: REGISTER.BB /= REGISTER._10B; continue;
case INSTR_DIVBRBR11: REGISTER.BB /= REGISTER._11B; continue;
case INSTR_DIVBRBR12: REGISTER.BB /= REGISTER._12B; continue;
case INSTR_DIVBRBRIP: REGISTER.BB /= REGISTER.IPB; continue;
case INSTR_DIVBRBRSP: REGISTER.BB /= REGISTER.SPB; continue;
case INSTR_DIVBRBRBP: REGISTER.BB /= REGISTER.BPB; continue;
case INSTR_DIVBRCI: REGISTER.CB /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBRCRA: REGISTER.CB /= REGISTER.AB; continue;
case INSTR_DIVBRCRB: REGISTER.CB /= REGISTER.BB; continue;
case INSTR_DIVBRCRC: REGISTER.CB /= REGISTER.CB; continue;
case INSTR_DIVBRCRD: REGISTER.CB /= REGISTER.DB; continue;
case INSTR_DIVBRCR0: REGISTER.CB /= REGISTER._0B; continue;
case INSTR_DIVBRCR1: REGISTER.CB /= REGISTER._1B; continue;
case INSTR_DIVBRCR2: REGISTER.CB /= REGISTER._2B; continue;
case INSTR_DIVBRCR3: REGISTER.CB /= REGISTER._3B; continue;
case INSTR_DIVBRCR4: REGISTER.CB /= REGISTER._4B; continue;
case INSTR_DIVBRCR5: REGISTER.CB /= REGISTER._5B; continue;
case INSTR_DIVBRCR6: REGISTER.CB /= REGISTER._6B; continue;
case INSTR_DIVBRCR7: REGISTER.CB /= REGISTER._7B; continue;
case INSTR_DIVBRCR8: REGISTER.CB /= REGISTER._8B; continue;
case INSTR_DIVBRCR9: REGISTER.CB /= REGISTER._9B; continue;
case INSTR_DIVBRCR10: REGISTER.CB /= REGISTER._10B; continue;
case INSTR_DIVBRCR11: REGISTER.CB /= REGISTER._11B; continue;
case INSTR_DIVBRCR12: REGISTER.CB /= REGISTER._12B; continue;
case INSTR_DIVBRCRIP: REGISTER.CB /= REGISTER.IPB; continue;
case INSTR_DIVBRCRSP: REGISTER.CB /= REGISTER.SPB; continue;
case INSTR_DIVBRCRBP: REGISTER.CB /= REGISTER.BPB; continue;
case INSTR_DIVBRDI: REGISTER.DB /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBRDRA: REGISTER.DB /= REGISTER.AB; continue;
case INSTR_DIVBRDRB: REGISTER.DB /= REGISTER.BB; continue;
case INSTR_DIVBRDRC: REGISTER.DB /= REGISTER.CB; continue;
case INSTR_DIVBRDRD: REGISTER.DB /= REGISTER.DB; continue;
case INSTR_DIVBRDR0: REGISTER.DB /= REGISTER._0B; continue;
case INSTR_DIVBRDR1: REGISTER.DB /= REGISTER._1B; continue;
case INSTR_DIVBRDR2: REGISTER.DB /= REGISTER._2B; continue;
case INSTR_DIVBRDR3: REGISTER.DB /= REGISTER._3B; continue;
case INSTR_DIVBRDR4: REGISTER.DB /= REGISTER._4B; continue;
case INSTR_DIVBRDR5: REGISTER.DB /= REGISTER._5B; continue;
case INSTR_DIVBRDR6: REGISTER.DB /= REGISTER._6B; continue;
case INSTR_DIVBRDR7: REGISTER.DB /= REGISTER._7B; continue;
case INSTR_DIVBRDR8: REGISTER.DB /= REGISTER._8B; continue;
case INSTR_DIVBRDR9: REGISTER.DB /= REGISTER._9B; continue;
case INSTR_DIVBRDR10: REGISTER.DB /= REGISTER._10B; continue;
case INSTR_DIVBRDR11: REGISTER.DB /= REGISTER._11B; continue;
case INSTR_DIVBRDR12: REGISTER.DB /= REGISTER._12B; continue;
case INSTR_DIVBRDRIP: REGISTER.DB /= REGISTER.IPB; continue;
case INSTR_DIVBRDRSP: REGISTER.DB /= REGISTER.SPB; continue;
case INSTR_DIVBRDRBP: REGISTER.DB /= REGISTER.BPB; continue;
case INSTR_DIVBR0I: REGISTER._0B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR0RA: REGISTER._0B /= REGISTER.AB; continue;
case INSTR_DIVBR0RB: REGISTER._0B /= REGISTER.BB; continue;
case INSTR_DIVBR0RC: REGISTER._0B /= REGISTER.CB; continue;
case INSTR_DIVBR0RD: REGISTER._0B /= REGISTER.DB; continue;
case INSTR_DIVBR0R0: REGISTER._0B /= REGISTER._0B; continue;
case INSTR_DIVBR0R1: REGISTER._0B /= REGISTER._1B; continue;
case INSTR_DIVBR0R2: REGISTER._0B /= REGISTER._2B; continue;
case INSTR_DIVBR0R3: REGISTER._0B /= REGISTER._3B; continue;
case INSTR_DIVBR0R4: REGISTER._0B /= REGISTER._4B; continue;
case INSTR_DIVBR0R5: REGISTER._0B /= REGISTER._5B; continue;
case INSTR_DIVBR0R6: REGISTER._0B /= REGISTER._6B; continue;
case INSTR_DIVBR0R7: REGISTER._0B /= REGISTER._7B; continue;
case INSTR_DIVBR0R8: REGISTER._0B /= REGISTER._8B; continue;
case INSTR_DIVBR0R9: REGISTER._0B /= REGISTER._9B; continue;
case INSTR_DIVBR0R10: REGISTER._0B /= REGISTER._10B; continue;
case INSTR_DIVBR0R11: REGISTER._0B /= REGISTER._11B; continue;
case INSTR_DIVBR0R12: REGISTER._0B /= REGISTER._12B; continue;
case INSTR_DIVBR0RIP: REGISTER._0B /= REGISTER.IPB; continue;
case INSTR_DIVBR0RSP: REGISTER._0B /= REGISTER.SPB; continue;
case INSTR_DIVBR0RBP: REGISTER._0B /= REGISTER.BPB; continue;
case INSTR_DIVBR1I: REGISTER._1B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR1RA: REGISTER._1B /= REGISTER.AB; continue;
case INSTR_DIVBR1RB: REGISTER._1B /= REGISTER.BB; continue;
case INSTR_DIVBR1RC: REGISTER._1B /= REGISTER.CB; continue;
case INSTR_DIVBR1RD: REGISTER._1B /= REGISTER.DB; continue;
case INSTR_DIVBR1R0: REGISTER._1B /= REGISTER._0B; continue;
case INSTR_DIVBR1R1: REGISTER._1B /= REGISTER._1B; continue;
case INSTR_DIVBR1R2: REGISTER._1B /= REGISTER._2B; continue;
case INSTR_DIVBR1R3: REGISTER._1B /= REGISTER._3B; continue;
case INSTR_DIVBR1R4: REGISTER._1B /= REGISTER._4B; continue;
case INSTR_DIVBR1R5: REGISTER._1B /= REGISTER._5B; continue;
case INSTR_DIVBR1R6: REGISTER._1B /= REGISTER._6B; continue;
case INSTR_DIVBR1R7: REGISTER._1B /= REGISTER._7B; continue;
case INSTR_DIVBR1R8: REGISTER._1B /= REGISTER._8B; continue;
case INSTR_DIVBR1R9: REGISTER._1B /= REGISTER._9B; continue;
case INSTR_DIVBR1R10: REGISTER._1B /= REGISTER._10B; continue;
case INSTR_DIVBR1R11: REGISTER._1B /= REGISTER._11B; continue;
case INSTR_DIVBR1R12: REGISTER._1B /= REGISTER._12B; continue;
case INSTR_DIVBR1RIP: REGISTER._1B /= REGISTER.IPB; continue;
case INSTR_DIVBR1RSP: REGISTER._1B /= REGISTER.SPB; continue;
case INSTR_DIVBR1RBP: REGISTER._1B /= REGISTER.BPB; continue;
case INSTR_DIVBR2I: REGISTER._2B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR2RA: REGISTER._2B /= REGISTER.AB; continue;
case INSTR_DIVBR2RB: REGISTER._2B /= REGISTER.BB; continue;
case INSTR_DIVBR2RC: REGISTER._2B /= REGISTER.CB; continue;
case INSTR_DIVBR2RD: REGISTER._2B /= REGISTER.DB; continue;
case INSTR_DIVBR2R0: REGISTER._2B /= REGISTER._0B; continue;
case INSTR_DIVBR2R1: REGISTER._2B /= REGISTER._1B; continue;
case INSTR_DIVBR2R2: REGISTER._2B /= REGISTER._2B; continue;
case INSTR_DIVBR2R3: REGISTER._2B /= REGISTER._3B; continue;
case INSTR_DIVBR2R4: REGISTER._2B /= REGISTER._4B; continue;
case INSTR_DIVBR2R5: REGISTER._2B /= REGISTER._5B; continue;
case INSTR_DIVBR2R6: REGISTER._2B /= REGISTER._6B; continue;
case INSTR_DIVBR2R7: REGISTER._2B /= REGISTER._7B; continue;
case INSTR_DIVBR2R8: REGISTER._2B /= REGISTER._8B; continue;
case INSTR_DIVBR2R9: REGISTER._2B /= REGISTER._9B; continue;
case INSTR_DIVBR2R10: REGISTER._2B /= REGISTER._10B; continue;
case INSTR_DIVBR2R11: REGISTER._2B /= REGISTER._11B; continue;
case INSTR_DIVBR2R12: REGISTER._2B /= REGISTER._12B; continue;
case INSTR_DIVBR2RIP: REGISTER._2B /= REGISTER.IPB; continue;
case INSTR_DIVBR2RSP: REGISTER._2B /= REGISTER.SPB; continue;
case INSTR_DIVBR2RBP: REGISTER._2B /= REGISTER.BPB; continue;
case INSTR_DIVBR3I: REGISTER._3B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR3RA: REGISTER._3B /= REGISTER.AB; continue;
case INSTR_DIVBR3RB: REGISTER._3B /= REGISTER.BB; continue;
case INSTR_DIVBR3RC: REGISTER._3B /= REGISTER.CB; continue;
case INSTR_DIVBR3RD: REGISTER._3B /= REGISTER.DB; continue;
case INSTR_DIVBR3R0: REGISTER._3B /= REGISTER._0B; continue;
case INSTR_DIVBR3R1: REGISTER._3B /= REGISTER._1B; continue;
case INSTR_DIVBR3R2: REGISTER._3B /= REGISTER._2B; continue;
case INSTR_DIVBR3R3: REGISTER._3B /= REGISTER._3B; continue;
case INSTR_DIVBR3R4: REGISTER._3B /= REGISTER._4B; continue;
case INSTR_DIVBR3R5: REGISTER._3B /= REGISTER._5B; continue;
case INSTR_DIVBR3R6: REGISTER._3B /= REGISTER._6B; continue;
case INSTR_DIVBR3R7: REGISTER._3B /= REGISTER._7B; continue;
case INSTR_DIVBR3R8: REGISTER._3B /= REGISTER._8B; continue;
case INSTR_DIVBR3R9: REGISTER._3B /= REGISTER._9B; continue;
case INSTR_DIVBR3R10: REGISTER._3B /= REGISTER._10B; continue;
case INSTR_DIVBR3R11: REGISTER._3B /= REGISTER._11B; continue;
case INSTR_DIVBR3R12: REGISTER._3B /= REGISTER._12B; continue;
case INSTR_DIVBR3RIP: REGISTER._3B /= REGISTER.IPB; continue;
case INSTR_DIVBR3RSP: REGISTER._3B /= REGISTER.SPB; continue;
case INSTR_DIVBR3RBP: REGISTER._3B /= REGISTER.BPB; continue;
case INSTR_DIVBR4I: REGISTER._4B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR4RA: REGISTER._4B /= REGISTER.AB; continue;
case INSTR_DIVBR4RB: REGISTER._4B /= REGISTER.BB; continue;
case INSTR_DIVBR4RC: REGISTER._4B /= REGISTER.CB; continue;
case INSTR_DIVBR4RD: REGISTER._4B /= REGISTER.DB; continue;
case INSTR_DIVBR4R0: REGISTER._4B /= REGISTER._0B; continue;
case INSTR_DIVBR4R1: REGISTER._4B /= REGISTER._1B; continue;
case INSTR_DIVBR4R2: REGISTER._4B /= REGISTER._2B; continue;
case INSTR_DIVBR4R3: REGISTER._4B /= REGISTER._3B; continue;
case INSTR_DIVBR4R4: REGISTER._4B /= REGISTER._4B; continue;
case INSTR_DIVBR4R5: REGISTER._4B /= REGISTER._5B; continue;
case INSTR_DIVBR4R6: REGISTER._4B /= REGISTER._6B; continue;
case INSTR_DIVBR4R7: REGISTER._4B /= REGISTER._7B; continue;
case INSTR_DIVBR4R8: REGISTER._4B /= REGISTER._8B; continue;
case INSTR_DIVBR4R9: REGISTER._4B /= REGISTER._9B; continue;
case INSTR_DIVBR4R10: REGISTER._4B /= REGISTER._10B; continue;
case INSTR_DIVBR4R11: REGISTER._4B /= REGISTER._11B; continue;
case INSTR_DIVBR4R12: REGISTER._4B /= REGISTER._12B; continue;
case INSTR_DIVBR4RIP: REGISTER._4B /= REGISTER.IPB; continue;
case INSTR_DIVBR4RSP: REGISTER._4B /= REGISTER.SPB; continue;
case INSTR_DIVBR4RBP: REGISTER._4B /= REGISTER.BPB; continue;
case INSTR_DIVBR5I: REGISTER._5B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR5RA: REGISTER._5B /= REGISTER.AB; continue;
case INSTR_DIVBR5RB: REGISTER._5B /= REGISTER.BB; continue;
case INSTR_DIVBR5RC: REGISTER._5B /= REGISTER.CB; continue;
case INSTR_DIVBR5RD: REGISTER._5B /= REGISTER.DB; continue;
case INSTR_DIVBR5R0: REGISTER._5B /= REGISTER._0B; continue;
case INSTR_DIVBR5R1: REGISTER._5B /= REGISTER._1B; continue;
case INSTR_DIVBR5R2: REGISTER._5B /= REGISTER._2B; continue;
case INSTR_DIVBR5R3: REGISTER._5B /= REGISTER._3B; continue;
case INSTR_DIVBR5R4: REGISTER._5B /= REGISTER._4B; continue;
case INSTR_DIVBR5R5: REGISTER._5B /= REGISTER._5B; continue;
case INSTR_DIVBR5R6: REGISTER._5B /= REGISTER._6B; continue;
case INSTR_DIVBR5R7: REGISTER._5B /= REGISTER._7B; continue;
case INSTR_DIVBR5R8: REGISTER._5B /= REGISTER._8B; continue;
case INSTR_DIVBR5R9: REGISTER._5B /= REGISTER._9B; continue;
case INSTR_DIVBR5R10: REGISTER._5B /= REGISTER._10B; continue;
case INSTR_DIVBR5R11: REGISTER._5B /= REGISTER._11B; continue;
case INSTR_DIVBR5R12: REGISTER._5B /= REGISTER._12B; continue;
case INSTR_DIVBR5RIP: REGISTER._5B /= REGISTER.IPB; continue;
case INSTR_DIVBR5RSP: REGISTER._5B /= REGISTER.SPB; continue;
case INSTR_DIVBR5RBP: REGISTER._5B /= REGISTER.BPB; continue;
case INSTR_DIVBR6I: REGISTER._6B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR6RA: REGISTER._6B /= REGISTER.AB; continue;
case INSTR_DIVBR6RB: REGISTER._6B /= REGISTER.BB; continue;
case INSTR_DIVBR6RC: REGISTER._6B /= REGISTER.CB; continue;
case INSTR_DIVBR6RD: REGISTER._6B /= REGISTER.DB; continue;
case INSTR_DIVBR6R0: REGISTER._6B /= REGISTER._0B; continue;
case INSTR_DIVBR6R1: REGISTER._6B /= REGISTER._1B; continue;
case INSTR_DIVBR6R2: REGISTER._6B /= REGISTER._2B; continue;
case INSTR_DIVBR6R3: REGISTER._6B /= REGISTER._3B; continue;
case INSTR_DIVBR6R4: REGISTER._6B /= REGISTER._4B; continue;
case INSTR_DIVBR6R5: REGISTER._6B /= REGISTER._5B; continue;
case INSTR_DIVBR6R6: REGISTER._6B /= REGISTER._6B; continue;
case INSTR_DIVBR6R7: REGISTER._6B /= REGISTER._7B; continue;
case INSTR_DIVBR6R8: REGISTER._6B /= REGISTER._8B; continue;
case INSTR_DIVBR6R9: REGISTER._6B /= REGISTER._9B; continue;
case INSTR_DIVBR6R10: REGISTER._6B /= REGISTER._10B; continue;
case INSTR_DIVBR6R11: REGISTER._6B /= REGISTER._11B; continue;
case INSTR_DIVBR6R12: REGISTER._6B /= REGISTER._12B; continue;
case INSTR_DIVBR6RIP: REGISTER._6B /= REGISTER.IPB; continue;
case INSTR_DIVBR6RSP: REGISTER._6B /= REGISTER.SPB; continue;
case INSTR_DIVBR6RBP: REGISTER._6B /= REGISTER.BPB; continue;
case INSTR_DIVBR7I: REGISTER._7B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR7RA: REGISTER._7B /= REGISTER.AB; continue;
case INSTR_DIVBR7RB: REGISTER._7B /= REGISTER.BB; continue;
case INSTR_DIVBR7RC: REGISTER._7B /= REGISTER.CB; continue;
case INSTR_DIVBR7RD: REGISTER._7B /= REGISTER.DB; continue;
case INSTR_DIVBR7R0: REGISTER._7B /= REGISTER._0B; continue;
case INSTR_DIVBR7R1: REGISTER._7B /= REGISTER._1B; continue;
case INSTR_DIVBR7R2: REGISTER._7B /= REGISTER._2B; continue;
case INSTR_DIVBR7R3: REGISTER._7B /= REGISTER._3B; continue;
case INSTR_DIVBR7R4: REGISTER._7B /= REGISTER._4B; continue;
case INSTR_DIVBR7R5: REGISTER._7B /= REGISTER._5B; continue;
case INSTR_DIVBR7R6: REGISTER._7B /= REGISTER._6B; continue;
case INSTR_DIVBR7R7: REGISTER._7B /= REGISTER._7B; continue;
case INSTR_DIVBR7R8: REGISTER._7B /= REGISTER._8B; continue;
case INSTR_DIVBR7R9: REGISTER._7B /= REGISTER._9B; continue;
case INSTR_DIVBR7R10: REGISTER._7B /= REGISTER._10B; continue;
case INSTR_DIVBR7R11: REGISTER._7B /= REGISTER._11B; continue;
case INSTR_DIVBR7R12: REGISTER._7B /= REGISTER._12B; continue;
case INSTR_DIVBR7RIP: REGISTER._7B /= REGISTER.IPB; continue;
case INSTR_DIVBR7RSP: REGISTER._7B /= REGISTER.SPB; continue;
case INSTR_DIVBR7RBP: REGISTER._7B /= REGISTER.BPB; continue;
case INSTR_DIVBR8I: REGISTER._8B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR8RA: REGISTER._8B /= REGISTER.AB; continue;
case INSTR_DIVBR8RB: REGISTER._8B /= REGISTER.BB; continue;
case INSTR_DIVBR8RC: REGISTER._8B /= REGISTER.CB; continue;
case INSTR_DIVBR8RD: REGISTER._8B /= REGISTER.DB; continue;
case INSTR_DIVBR8R0: REGISTER._8B /= REGISTER._0B; continue;
case INSTR_DIVBR8R1: REGISTER._8B /= REGISTER._1B; continue;
case INSTR_DIVBR8R2: REGISTER._8B /= REGISTER._2B; continue;
case INSTR_DIVBR8R3: REGISTER._8B /= REGISTER._3B; continue;
case INSTR_DIVBR8R4: REGISTER._8B /= REGISTER._4B; continue;
case INSTR_DIVBR8R5: REGISTER._8B /= REGISTER._5B; continue;
case INSTR_DIVBR8R6: REGISTER._8B /= REGISTER._6B; continue;
case INSTR_DIVBR8R7: REGISTER._8B /= REGISTER._7B; continue;
case INSTR_DIVBR8R8: REGISTER._8B /= REGISTER._8B; continue;
case INSTR_DIVBR8R9: REGISTER._8B /= REGISTER._9B; continue;
case INSTR_DIVBR8R10: REGISTER._8B /= REGISTER._10B; continue;
case INSTR_DIVBR8R11: REGISTER._8B /= REGISTER._11B; continue;
case INSTR_DIVBR8R12: REGISTER._8B /= REGISTER._12B; continue;
case INSTR_DIVBR8RIP: REGISTER._8B /= REGISTER.IPB; continue;
case INSTR_DIVBR8RSP: REGISTER._8B /= REGISTER.SPB; continue;
case INSTR_DIVBR8RBP: REGISTER._8B /= REGISTER.BPB; continue;
case INSTR_DIVBR9I: REGISTER._9B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR9RA: REGISTER._9B /= REGISTER.AB; continue;
case INSTR_DIVBR9RB: REGISTER._9B /= REGISTER.BB; continue;
case INSTR_DIVBR9RC: REGISTER._9B /= REGISTER.CB; continue;
case INSTR_DIVBR9RD: REGISTER._9B /= REGISTER.DB; continue;
case INSTR_DIVBR9R0: REGISTER._9B /= REGISTER._0B; continue;
case INSTR_DIVBR9R1: REGISTER._9B /= REGISTER._1B; continue;
case INSTR_DIVBR9R2: REGISTER._9B /= REGISTER._2B; continue;
case INSTR_DIVBR9R3: REGISTER._9B /= REGISTER._3B; continue;
case INSTR_DIVBR9R4: REGISTER._9B /= REGISTER._4B; continue;
case INSTR_DIVBR9R5: REGISTER._9B /= REGISTER._5B; continue;
case INSTR_DIVBR9R6: REGISTER._9B /= REGISTER._6B; continue;
case INSTR_DIVBR9R7: REGISTER._9B /= REGISTER._7B; continue;
case INSTR_DIVBR9R8: REGISTER._9B /= REGISTER._8B; continue;
case INSTR_DIVBR9R9: REGISTER._9B /= REGISTER._9B; continue;
case INSTR_DIVBR9R10: REGISTER._9B /= REGISTER._10B; continue;
case INSTR_DIVBR9R11: REGISTER._9B /= REGISTER._11B; continue;
case INSTR_DIVBR9R12: REGISTER._9B /= REGISTER._12B; continue;
case INSTR_DIVBR9RIP: REGISTER._9B /= REGISTER.IPB; continue;
case INSTR_DIVBR9RSP: REGISTER._9B /= REGISTER.SPB; continue;
case INSTR_DIVBR9RBP: REGISTER._9B /= REGISTER.BPB; continue;
case INSTR_DIVBR10I: REGISTER._10B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR10RA: REGISTER._10B /= REGISTER.AB; continue;
case INSTR_DIVBR10RB: REGISTER._10B /= REGISTER.BB; continue;
case INSTR_DIVBR10RC: REGISTER._10B /= REGISTER.CB; continue;
case INSTR_DIVBR10RD: REGISTER._10B /= REGISTER.DB; continue;
case INSTR_DIVBR10R0: REGISTER._10B /= REGISTER._0B; continue;
case INSTR_DIVBR10R1: REGISTER._10B /= REGISTER._1B; continue;
case INSTR_DIVBR10R2: REGISTER._10B /= REGISTER._2B; continue;
case INSTR_DIVBR10R3: REGISTER._10B /= REGISTER._3B; continue;
case INSTR_DIVBR10R4: REGISTER._10B /= REGISTER._4B; continue;
case INSTR_DIVBR10R5: REGISTER._10B /= REGISTER._5B; continue;
case INSTR_DIVBR10R6: REGISTER._10B /= REGISTER._6B; continue;
case INSTR_DIVBR10R7: REGISTER._10B /= REGISTER._7B; continue;
case INSTR_DIVBR10R8: REGISTER._10B /= REGISTER._8B; continue;
case INSTR_DIVBR10R9: REGISTER._10B /= REGISTER._9B; continue;
case INSTR_DIVBR10R10: REGISTER._10B /= REGISTER._10B; continue;
case INSTR_DIVBR10R11: REGISTER._10B /= REGISTER._11B; continue;
case INSTR_DIVBR10R12: REGISTER._10B /= REGISTER._12B; continue;
case INSTR_DIVBR10RIP: REGISTER._10B /= REGISTER.IPB; continue;
case INSTR_DIVBR10RSP: REGISTER._10B /= REGISTER.SPB; continue;
case INSTR_DIVBR10RBP: REGISTER._10B /= REGISTER.BPB; continue;
case INSTR_DIVBR11I: REGISTER._11B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR11RA: REGISTER._11B /= REGISTER.AB; continue;
case INSTR_DIVBR11RB: REGISTER._11B /= REGISTER.BB; continue;
case INSTR_DIVBR11RC: REGISTER._11B /= REGISTER.CB; continue;
case INSTR_DIVBR11RD: REGISTER._11B /= REGISTER.DB; continue;
case INSTR_DIVBR11R0: REGISTER._11B /= REGISTER._0B; continue;
case INSTR_DIVBR11R1: REGISTER._11B /= REGISTER._1B; continue;
case INSTR_DIVBR11R2: REGISTER._11B /= REGISTER._2B; continue;
case INSTR_DIVBR11R3: REGISTER._11B /= REGISTER._3B; continue;
case INSTR_DIVBR11R4: REGISTER._11B /= REGISTER._4B; continue;
case INSTR_DIVBR11R5: REGISTER._11B /= REGISTER._5B; continue;
case INSTR_DIVBR11R6: REGISTER._11B /= REGISTER._6B; continue;
case INSTR_DIVBR11R7: REGISTER._11B /= REGISTER._7B; continue;
case INSTR_DIVBR11R8: REGISTER._11B /= REGISTER._8B; continue;
case INSTR_DIVBR11R9: REGISTER._11B /= REGISTER._9B; continue;
case INSTR_DIVBR11R10: REGISTER._11B /= REGISTER._10B; continue;
case INSTR_DIVBR11R11: REGISTER._11B /= REGISTER._11B; continue;
case INSTR_DIVBR11R12: REGISTER._11B /= REGISTER._12B; continue;
case INSTR_DIVBR11RIP: REGISTER._11B /= REGISTER.IPB; continue;
case INSTR_DIVBR11RSP: REGISTER._11B /= REGISTER.SPB; continue;
case INSTR_DIVBR11RBP: REGISTER._11B /= REGISTER.BPB; continue;
case INSTR_DIVBR12I: REGISTER._12B /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBR12RA: REGISTER._12B /= REGISTER.AB; continue;
case INSTR_DIVBR12RB: REGISTER._12B /= REGISTER.BB; continue;
case INSTR_DIVBR12RC: REGISTER._12B /= REGISTER.CB; continue;
case INSTR_DIVBR12RD: REGISTER._12B /= REGISTER.DB; continue;
case INSTR_DIVBR12R0: REGISTER._12B /= REGISTER._0B; continue;
case INSTR_DIVBR12R1: REGISTER._12B /= REGISTER._1B; continue;
case INSTR_DIVBR12R2: REGISTER._12B /= REGISTER._2B; continue;
case INSTR_DIVBR12R3: REGISTER._12B /= REGISTER._3B; continue;
case INSTR_DIVBR12R4: REGISTER._12B /= REGISTER._4B; continue;
case INSTR_DIVBR12R5: REGISTER._12B /= REGISTER._5B; continue;
case INSTR_DIVBR12R6: REGISTER._12B /= REGISTER._6B; continue;
case INSTR_DIVBR12R7: REGISTER._12B /= REGISTER._7B; continue;
case INSTR_DIVBR12R8: REGISTER._12B /= REGISTER._8B; continue;
case INSTR_DIVBR12R9: REGISTER._12B /= REGISTER._9B; continue;
case INSTR_DIVBR12R10: REGISTER._12B /= REGISTER._10B; continue;
case INSTR_DIVBR12R11: REGISTER._12B /= REGISTER._11B; continue;
case INSTR_DIVBR12R12: REGISTER._12B /= REGISTER._12B; continue;
case INSTR_DIVBR12RIP: REGISTER._12B /= REGISTER.IPB; continue;
case INSTR_DIVBR12RSP: REGISTER._12B /= REGISTER.SPB; continue;
case INSTR_DIVBR12RBP: REGISTER._12B /= REGISTER.BPB; continue;
case INSTR_DIVBRIPI: REGISTER.IPB /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBRIPRA: REGISTER.IPB /= REGISTER.AB; continue;
case INSTR_DIVBRIPRB: REGISTER.IPB /= REGISTER.BB; continue;
case INSTR_DIVBRIPRC: REGISTER.IPB /= REGISTER.CB; continue;
case INSTR_DIVBRIPRD: REGISTER.IPB /= REGISTER.DB; continue;
case INSTR_DIVBRIPR0: REGISTER.IPB /= REGISTER._0B; continue;
case INSTR_DIVBRIPR1: REGISTER.IPB /= REGISTER._1B; continue;
case INSTR_DIVBRIPR2: REGISTER.IPB /= REGISTER._2B; continue;
case INSTR_DIVBRIPR3: REGISTER.IPB /= REGISTER._3B; continue;
case INSTR_DIVBRIPR4: REGISTER.IPB /= REGISTER._4B; continue;
case INSTR_DIVBRIPR5: REGISTER.IPB /= REGISTER._5B; continue;
case INSTR_DIVBRIPR6: REGISTER.IPB /= REGISTER._6B; continue;
case INSTR_DIVBRIPR7: REGISTER.IPB /= REGISTER._7B; continue;
case INSTR_DIVBRIPR8: REGISTER.IPB /= REGISTER._8B; continue;
case INSTR_DIVBRIPR9: REGISTER.IPB /= REGISTER._9B; continue;
case INSTR_DIVBRIPR10: REGISTER.IPB /= REGISTER._10B; continue;
case INSTR_DIVBRIPR11: REGISTER.IPB /= REGISTER._11B; continue;
case INSTR_DIVBRIPR12: REGISTER.IPB /= REGISTER._12B; continue;
case INSTR_DIVBRIPRIP: REGISTER.IPB /= REGISTER.IPB; continue;
case INSTR_DIVBRIPRSP: REGISTER.IPB /= REGISTER.SPB; continue;
case INSTR_DIVBRIPRBP: REGISTER.IPB /= REGISTER.BPB; continue;
case INSTR_DIVBRSPI: REGISTER.SPB /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBRSPRA: REGISTER.SPB /= REGISTER.AB; continue;
case INSTR_DIVBRSPRB: REGISTER.SPB /= REGISTER.BB; continue;
case INSTR_DIVBRSPRC: REGISTER.SPB /= REGISTER.CB; continue;
case INSTR_DIVBRSPRD: REGISTER.SPB /= REGISTER.DB; continue;
case INSTR_DIVBRSPR0: REGISTER.SPB /= REGISTER._0B; continue;
case INSTR_DIVBRSPR1: REGISTER.SPB /= REGISTER._1B; continue;
case INSTR_DIVBRSPR2: REGISTER.SPB /= REGISTER._2B; continue;
case INSTR_DIVBRSPR3: REGISTER.SPB /= REGISTER._3B; continue;
case INSTR_DIVBRSPR4: REGISTER.SPB /= REGISTER._4B; continue;
case INSTR_DIVBRSPR5: REGISTER.SPB /= REGISTER._5B; continue;
case INSTR_DIVBRSPR6: REGISTER.SPB /= REGISTER._6B; continue;
case INSTR_DIVBRSPR7: REGISTER.SPB /= REGISTER._7B; continue;
case INSTR_DIVBRSPR8: REGISTER.SPB /= REGISTER._8B; continue;
case INSTR_DIVBRSPR9: REGISTER.SPB /= REGISTER._9B; continue;
case INSTR_DIVBRSPR10: REGISTER.SPB /= REGISTER._10B; continue;
case INSTR_DIVBRSPR11: REGISTER.SPB /= REGISTER._11B; continue;
case INSTR_DIVBRSPR12: REGISTER.SPB /= REGISTER._12B; continue;
case INSTR_DIVBRSPRIP: REGISTER.SPB /= REGISTER.IPB; continue;
case INSTR_DIVBRSPRSP: REGISTER.SPB /= REGISTER.SPB; continue;
case INSTR_DIVBRSPRBP: REGISTER.SPB /= REGISTER.BPB; continue;
case INSTR_DIVBRBPI: REGISTER.BPB /= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_DIVBRBPRA: REGISTER.BPB /= REGISTER.AB; continue;
case INSTR_DIVBRBPRB: REGISTER.BPB /= REGISTER.BB; continue;
case INSTR_DIVBRBPRC: REGISTER.BPB /= REGISTER.CB; continue;
case INSTR_DIVBRBPRD: REGISTER.BPB /= REGISTER.DB; continue;
case INSTR_DIVBRBPR0: REGISTER.BPB /= REGISTER._0B; continue;
case INSTR_DIVBRBPR1: REGISTER.BPB /= REGISTER._1B; continue;
case INSTR_DIVBRBPR2: REGISTER.BPB /= REGISTER._2B; continue;
case INSTR_DIVBRBPR3: REGISTER.BPB /= REGISTER._3B; continue;
case INSTR_DIVBRBPR4: REGISTER.BPB /= REGISTER._4B; continue;
case INSTR_DIVBRBPR5: REGISTER.BPB /= REGISTER._5B; continue;
case INSTR_DIVBRBPR6: REGISTER.BPB /= REGISTER._6B; continue;
case INSTR_DIVBRBPR7: REGISTER.BPB /= REGISTER._7B; continue;
case INSTR_DIVBRBPR8: REGISTER.BPB /= REGISTER._8B; continue;
case INSTR_DIVBRBPR9: REGISTER.BPB /= REGISTER._9B; continue;
case INSTR_DIVBRBPR10: REGISTER.BPB /= REGISTER._10B; continue;
case INSTR_DIVBRBPR11: REGISTER.BPB /= REGISTER._11B; continue;
case INSTR_DIVBRBPR12: REGISTER.BPB /= REGISTER._12B; continue;
case INSTR_DIVBRBPRIP: REGISTER.BPB /= REGISTER.IPB; continue;
case INSTR_DIVBRBPRSP: REGISTER.BPB /= REGISTER.SPB; continue;
case INSTR_DIVBRBPRBP: REGISTER.BPB /= REGISTER.BPB; continue;
case INSTR_MODQRAI: REGISTER.AQ %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQRARA: REGISTER.AQ %= REGISTER.AQ; continue;
case INSTR_MODQRARB: REGISTER.AQ %= REGISTER.BQ; continue;
case INSTR_MODQRARC: REGISTER.AQ %= REGISTER.CQ; continue;
case INSTR_MODQRARD: REGISTER.AQ %= REGISTER.DQ; continue;
case INSTR_MODQRAR0: REGISTER.AQ %= REGISTER._0Q; continue;
case INSTR_MODQRAR1: REGISTER.AQ %= REGISTER._1Q; continue;
case INSTR_MODQRAR2: REGISTER.AQ %= REGISTER._2Q; continue;
case INSTR_MODQRAR3: REGISTER.AQ %= REGISTER._3Q; continue;
case INSTR_MODQRAR4: REGISTER.AQ %= REGISTER._4Q; continue;
case INSTR_MODQRAR5: REGISTER.AQ %= REGISTER._5Q; continue;
case INSTR_MODQRAR6: REGISTER.AQ %= REGISTER._6Q; continue;
case INSTR_MODQRAR7: REGISTER.AQ %= REGISTER._7Q; continue;
case INSTR_MODQRAR8: REGISTER.AQ %= REGISTER._8Q; continue;
case INSTR_MODQRAR9: REGISTER.AQ %= REGISTER._9Q; continue;
case INSTR_MODQRAR10: REGISTER.AQ %= REGISTER._10Q; continue;
case INSTR_MODQRAR11: REGISTER.AQ %= REGISTER._11Q; continue;
case INSTR_MODQRAR12: REGISTER.AQ %= REGISTER._12Q; continue;
case INSTR_MODQRARIP: REGISTER.AQ %= REGISTER.IPQ; continue;
case INSTR_MODQRARSP: REGISTER.AQ %= REGISTER.SPQ; continue;
case INSTR_MODQRARBP: REGISTER.AQ %= REGISTER.BPQ; continue;
case INSTR_MODQRBI: REGISTER.BQ %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQRBRA: REGISTER.BQ %= REGISTER.AQ; continue;
case INSTR_MODQRBRB: REGISTER.BQ %= REGISTER.BQ; continue;
case INSTR_MODQRBRC: REGISTER.BQ %= REGISTER.CQ; continue;
case INSTR_MODQRBRD: REGISTER.BQ %= REGISTER.DQ; continue;
case INSTR_MODQRBR0: REGISTER.BQ %= REGISTER._0Q; continue;
case INSTR_MODQRBR1: REGISTER.BQ %= REGISTER._1Q; continue;
case INSTR_MODQRBR2: REGISTER.BQ %= REGISTER._2Q; continue;
case INSTR_MODQRBR3: REGISTER.BQ %= REGISTER._3Q; continue;
case INSTR_MODQRBR4: REGISTER.BQ %= REGISTER._4Q; continue;
case INSTR_MODQRBR5: REGISTER.BQ %= REGISTER._5Q; continue;
case INSTR_MODQRBR6: REGISTER.BQ %= REGISTER._6Q; continue;
case INSTR_MODQRBR7: REGISTER.BQ %= REGISTER._7Q; continue;
case INSTR_MODQRBR8: REGISTER.BQ %= REGISTER._8Q; continue;
case INSTR_MODQRBR9: REGISTER.BQ %= REGISTER._9Q; continue;
case INSTR_MODQRBR10: REGISTER.BQ %= REGISTER._10Q; continue;
case INSTR_MODQRBR11: REGISTER.BQ %= REGISTER._11Q; continue;
case INSTR_MODQRBR12: REGISTER.BQ %= REGISTER._12Q; continue;
case INSTR_MODQRBRIP: REGISTER.BQ %= REGISTER.IPQ; continue;
case INSTR_MODQRBRSP: REGISTER.BQ %= REGISTER.SPQ; continue;
case INSTR_MODQRBRBP: REGISTER.BQ %= REGISTER.BPQ; continue;
case INSTR_MODQRCI: REGISTER.CQ %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQRCRA: REGISTER.CQ %= REGISTER.AQ; continue;
case INSTR_MODQRCRB: REGISTER.CQ %= REGISTER.BQ; continue;
case INSTR_MODQRCRC: REGISTER.CQ %= REGISTER.CQ; continue;
case INSTR_MODQRCRD: REGISTER.CQ %= REGISTER.DQ; continue;
case INSTR_MODQRCR0: REGISTER.CQ %= REGISTER._0Q; continue;
case INSTR_MODQRCR1: REGISTER.CQ %= REGISTER._1Q; continue;
case INSTR_MODQRCR2: REGISTER.CQ %= REGISTER._2Q; continue;
case INSTR_MODQRCR3: REGISTER.CQ %= REGISTER._3Q; continue;
case INSTR_MODQRCR4: REGISTER.CQ %= REGISTER._4Q; continue;
case INSTR_MODQRCR5: REGISTER.CQ %= REGISTER._5Q; continue;
case INSTR_MODQRCR6: REGISTER.CQ %= REGISTER._6Q; continue;
case INSTR_MODQRCR7: REGISTER.CQ %= REGISTER._7Q; continue;
case INSTR_MODQRCR8: REGISTER.CQ %= REGISTER._8Q; continue;
case INSTR_MODQRCR9: REGISTER.CQ %= REGISTER._9Q; continue;
case INSTR_MODQRCR10: REGISTER.CQ %= REGISTER._10Q; continue;
case INSTR_MODQRCR11: REGISTER.CQ %= REGISTER._11Q; continue;
case INSTR_MODQRCR12: REGISTER.CQ %= REGISTER._12Q; continue;
case INSTR_MODQRCRIP: REGISTER.CQ %= REGISTER.IPQ; continue;
case INSTR_MODQRCRSP: REGISTER.CQ %= REGISTER.SPQ; continue;
case INSTR_MODQRCRBP: REGISTER.CQ %= REGISTER.BPQ; continue;
case INSTR_MODQRDI: REGISTER.DQ %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQRDRA: REGISTER.DQ %= REGISTER.AQ; continue;
case INSTR_MODQRDRB: REGISTER.DQ %= REGISTER.BQ; continue;
case INSTR_MODQRDRC: REGISTER.DQ %= REGISTER.CQ; continue;
case INSTR_MODQRDRD: REGISTER.DQ %= REGISTER.DQ; continue;
case INSTR_MODQRDR0: REGISTER.DQ %= REGISTER._0Q; continue;
case INSTR_MODQRDR1: REGISTER.DQ %= REGISTER._1Q; continue;
case INSTR_MODQRDR2: REGISTER.DQ %= REGISTER._2Q; continue;
case INSTR_MODQRDR3: REGISTER.DQ %= REGISTER._3Q; continue;
case INSTR_MODQRDR4: REGISTER.DQ %= REGISTER._4Q; continue;
case INSTR_MODQRDR5: REGISTER.DQ %= REGISTER._5Q; continue;
case INSTR_MODQRDR6: REGISTER.DQ %= REGISTER._6Q; continue;
case INSTR_MODQRDR7: REGISTER.DQ %= REGISTER._7Q; continue;
case INSTR_MODQRDR8: REGISTER.DQ %= REGISTER._8Q; continue;
case INSTR_MODQRDR9: REGISTER.DQ %= REGISTER._9Q; continue;
case INSTR_MODQRDR10: REGISTER.DQ %= REGISTER._10Q; continue;
case INSTR_MODQRDR11: REGISTER.DQ %= REGISTER._11Q; continue;
case INSTR_MODQRDR12: REGISTER.DQ %= REGISTER._12Q; continue;
case INSTR_MODQRDRIP: REGISTER.DQ %= REGISTER.IPQ; continue;
case INSTR_MODQRDRSP: REGISTER.DQ %= REGISTER.SPQ; continue;
case INSTR_MODQRDRBP: REGISTER.DQ %= REGISTER.BPQ; continue;
case INSTR_MODQR0I: REGISTER._0Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR0RA: REGISTER._0Q %= REGISTER.AQ; continue;
case INSTR_MODQR0RB: REGISTER._0Q %= REGISTER.BQ; continue;
case INSTR_MODQR0RC: REGISTER._0Q %= REGISTER.CQ; continue;
case INSTR_MODQR0RD: REGISTER._0Q %= REGISTER.DQ; continue;
case INSTR_MODQR0R0: REGISTER._0Q %= REGISTER._0Q; continue;
case INSTR_MODQR0R1: REGISTER._0Q %= REGISTER._1Q; continue;
case INSTR_MODQR0R2: REGISTER._0Q %= REGISTER._2Q; continue;
case INSTR_MODQR0R3: REGISTER._0Q %= REGISTER._3Q; continue;
case INSTR_MODQR0R4: REGISTER._0Q %= REGISTER._4Q; continue;
case INSTR_MODQR0R5: REGISTER._0Q %= REGISTER._5Q; continue;
case INSTR_MODQR0R6: REGISTER._0Q %= REGISTER._6Q; continue;
case INSTR_MODQR0R7: REGISTER._0Q %= REGISTER._7Q; continue;
case INSTR_MODQR0R8: REGISTER._0Q %= REGISTER._8Q; continue;
case INSTR_MODQR0R9: REGISTER._0Q %= REGISTER._9Q; continue;
case INSTR_MODQR0R10: REGISTER._0Q %= REGISTER._10Q; continue;
case INSTR_MODQR0R11: REGISTER._0Q %= REGISTER._11Q; continue;
case INSTR_MODQR0R12: REGISTER._0Q %= REGISTER._12Q; continue;
case INSTR_MODQR0RIP: REGISTER._0Q %= REGISTER.IPQ; continue;
case INSTR_MODQR0RSP: REGISTER._0Q %= REGISTER.SPQ; continue;
case INSTR_MODQR0RBP: REGISTER._0Q %= REGISTER.BPQ; continue;
case INSTR_MODQR1I: REGISTER._1Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR1RA: REGISTER._1Q %= REGISTER.AQ; continue;
case INSTR_MODQR1RB: REGISTER._1Q %= REGISTER.BQ; continue;
case INSTR_MODQR1RC: REGISTER._1Q %= REGISTER.CQ; continue;
case INSTR_MODQR1RD: REGISTER._1Q %= REGISTER.DQ; continue;
case INSTR_MODQR1R0: REGISTER._1Q %= REGISTER._0Q; continue;
case INSTR_MODQR1R1: REGISTER._1Q %= REGISTER._1Q; continue;
case INSTR_MODQR1R2: REGISTER._1Q %= REGISTER._2Q; continue;
case INSTR_MODQR1R3: REGISTER._1Q %= REGISTER._3Q; continue;
case INSTR_MODQR1R4: REGISTER._1Q %= REGISTER._4Q; continue;
case INSTR_MODQR1R5: REGISTER._1Q %= REGISTER._5Q; continue;
case INSTR_MODQR1R6: REGISTER._1Q %= REGISTER._6Q; continue;
case INSTR_MODQR1R7: REGISTER._1Q %= REGISTER._7Q; continue;
case INSTR_MODQR1R8: REGISTER._1Q %= REGISTER._8Q; continue;
case INSTR_MODQR1R9: REGISTER._1Q %= REGISTER._9Q; continue;
case INSTR_MODQR1R10: REGISTER._1Q %= REGISTER._10Q; continue;
case INSTR_MODQR1R11: REGISTER._1Q %= REGISTER._11Q; continue;
case INSTR_MODQR1R12: REGISTER._1Q %= REGISTER._12Q; continue;
case INSTR_MODQR1RIP: REGISTER._1Q %= REGISTER.IPQ; continue;
case INSTR_MODQR1RSP: REGISTER._1Q %= REGISTER.SPQ; continue;
case INSTR_MODQR1RBP: REGISTER._1Q %= REGISTER.BPQ; continue;
case INSTR_MODQR2I: REGISTER._2Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR2RA: REGISTER._2Q %= REGISTER.AQ; continue;
case INSTR_MODQR2RB: REGISTER._2Q %= REGISTER.BQ; continue;
case INSTR_MODQR2RC: REGISTER._2Q %= REGISTER.CQ; continue;
case INSTR_MODQR2RD: REGISTER._2Q %= REGISTER.DQ; continue;
case INSTR_MODQR2R0: REGISTER._2Q %= REGISTER._0Q; continue;
case INSTR_MODQR2R1: REGISTER._2Q %= REGISTER._1Q; continue;
case INSTR_MODQR2R2: REGISTER._2Q %= REGISTER._2Q; continue;
case INSTR_MODQR2R3: REGISTER._2Q %= REGISTER._3Q; continue;
case INSTR_MODQR2R4: REGISTER._2Q %= REGISTER._4Q; continue;
case INSTR_MODQR2R5: REGISTER._2Q %= REGISTER._5Q; continue;
case INSTR_MODQR2R6: REGISTER._2Q %= REGISTER._6Q; continue;
case INSTR_MODQR2R7: REGISTER._2Q %= REGISTER._7Q; continue;
case INSTR_MODQR2R8: REGISTER._2Q %= REGISTER._8Q; continue;
case INSTR_MODQR2R9: REGISTER._2Q %= REGISTER._9Q; continue;
case INSTR_MODQR2R10: REGISTER._2Q %= REGISTER._10Q; continue;
case INSTR_MODQR2R11: REGISTER._2Q %= REGISTER._11Q; continue;
case INSTR_MODQR2R12: REGISTER._2Q %= REGISTER._12Q; continue;
case INSTR_MODQR2RIP: REGISTER._2Q %= REGISTER.IPQ; continue;
case INSTR_MODQR2RSP: REGISTER._2Q %= REGISTER.SPQ; continue;
case INSTR_MODQR2RBP: REGISTER._2Q %= REGISTER.BPQ; continue;
case INSTR_MODQR3I: REGISTER._3Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR3RA: REGISTER._3Q %= REGISTER.AQ; continue;
case INSTR_MODQR3RB: REGISTER._3Q %= REGISTER.BQ; continue;
case INSTR_MODQR3RC: REGISTER._3Q %= REGISTER.CQ; continue;
case INSTR_MODQR3RD: REGISTER._3Q %= REGISTER.DQ; continue;
case INSTR_MODQR3R0: REGISTER._3Q %= REGISTER._0Q; continue;
case INSTR_MODQR3R1: REGISTER._3Q %= REGISTER._1Q; continue;
case INSTR_MODQR3R2: REGISTER._3Q %= REGISTER._2Q; continue;
case INSTR_MODQR3R3: REGISTER._3Q %= REGISTER._3Q; continue;
case INSTR_MODQR3R4: REGISTER._3Q %= REGISTER._4Q; continue;
case INSTR_MODQR3R5: REGISTER._3Q %= REGISTER._5Q; continue;
case INSTR_MODQR3R6: REGISTER._3Q %= REGISTER._6Q; continue;
case INSTR_MODQR3R7: REGISTER._3Q %= REGISTER._7Q; continue;
case INSTR_MODQR3R8: REGISTER._3Q %= REGISTER._8Q; continue;
case INSTR_MODQR3R9: REGISTER._3Q %= REGISTER._9Q; continue;
case INSTR_MODQR3R10: REGISTER._3Q %= REGISTER._10Q; continue;
case INSTR_MODQR3R11: REGISTER._3Q %= REGISTER._11Q; continue;
case INSTR_MODQR3R12: REGISTER._3Q %= REGISTER._12Q; continue;
case INSTR_MODQR3RIP: REGISTER._3Q %= REGISTER.IPQ; continue;
case INSTR_MODQR3RSP: REGISTER._3Q %= REGISTER.SPQ; continue;
case INSTR_MODQR3RBP: REGISTER._3Q %= REGISTER.BPQ; continue;
case INSTR_MODQR4I: REGISTER._4Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR4RA: REGISTER._4Q %= REGISTER.AQ; continue;
case INSTR_MODQR4RB: REGISTER._4Q %= REGISTER.BQ; continue;
case INSTR_MODQR4RC: REGISTER._4Q %= REGISTER.CQ; continue;
case INSTR_MODQR4RD: REGISTER._4Q %= REGISTER.DQ; continue;
case INSTR_MODQR4R0: REGISTER._4Q %= REGISTER._0Q; continue;
case INSTR_MODQR4R1: REGISTER._4Q %= REGISTER._1Q; continue;
case INSTR_MODQR4R2: REGISTER._4Q %= REGISTER._2Q; continue;
case INSTR_MODQR4R3: REGISTER._4Q %= REGISTER._3Q; continue;
case INSTR_MODQR4R4: REGISTER._4Q %= REGISTER._4Q; continue;
case INSTR_MODQR4R5: REGISTER._4Q %= REGISTER._5Q; continue;
case INSTR_MODQR4R6: REGISTER._4Q %= REGISTER._6Q; continue;
case INSTR_MODQR4R7: REGISTER._4Q %= REGISTER._7Q; continue;
case INSTR_MODQR4R8: REGISTER._4Q %= REGISTER._8Q; continue;
case INSTR_MODQR4R9: REGISTER._4Q %= REGISTER._9Q; continue;
case INSTR_MODQR4R10: REGISTER._4Q %= REGISTER._10Q; continue;
case INSTR_MODQR4R11: REGISTER._4Q %= REGISTER._11Q; continue;
case INSTR_MODQR4R12: REGISTER._4Q %= REGISTER._12Q; continue;
case INSTR_MODQR4RIP: REGISTER._4Q %= REGISTER.IPQ; continue;
case INSTR_MODQR4RSP: REGISTER._4Q %= REGISTER.SPQ; continue;
case INSTR_MODQR4RBP: REGISTER._4Q %= REGISTER.BPQ; continue;
case INSTR_MODQR5I: REGISTER._5Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR5RA: REGISTER._5Q %= REGISTER.AQ; continue;
case INSTR_MODQR5RB: REGISTER._5Q %= REGISTER.BQ; continue;
case INSTR_MODQR5RC: REGISTER._5Q %= REGISTER.CQ; continue;
case INSTR_MODQR5RD: REGISTER._5Q %= REGISTER.DQ; continue;
case INSTR_MODQR5R0: REGISTER._5Q %= REGISTER._0Q; continue;
case INSTR_MODQR5R1: REGISTER._5Q %= REGISTER._1Q; continue;
case INSTR_MODQR5R2: REGISTER._5Q %= REGISTER._2Q; continue;
case INSTR_MODQR5R3: REGISTER._5Q %= REGISTER._3Q; continue;
case INSTR_MODQR5R4: REGISTER._5Q %= REGISTER._4Q; continue;
case INSTR_MODQR5R5: REGISTER._5Q %= REGISTER._5Q; continue;
case INSTR_MODQR5R6: REGISTER._5Q %= REGISTER._6Q; continue;
case INSTR_MODQR5R7: REGISTER._5Q %= REGISTER._7Q; continue;
case INSTR_MODQR5R8: REGISTER._5Q %= REGISTER._8Q; continue;
case INSTR_MODQR5R9: REGISTER._5Q %= REGISTER._9Q; continue;
case INSTR_MODQR5R10: REGISTER._5Q %= REGISTER._10Q; continue;
case INSTR_MODQR5R11: REGISTER._5Q %= REGISTER._11Q; continue;
case INSTR_MODQR5R12: REGISTER._5Q %= REGISTER._12Q; continue;
case INSTR_MODQR5RIP: REGISTER._5Q %= REGISTER.IPQ; continue;
case INSTR_MODQR5RSP: REGISTER._5Q %= REGISTER.SPQ; continue;
case INSTR_MODQR5RBP: REGISTER._5Q %= REGISTER.BPQ; continue;
case INSTR_MODQR6I: REGISTER._6Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR6RA: REGISTER._6Q %= REGISTER.AQ; continue;
case INSTR_MODQR6RB: REGISTER._6Q %= REGISTER.BQ; continue;
case INSTR_MODQR6RC: REGISTER._6Q %= REGISTER.CQ; continue;
case INSTR_MODQR6RD: REGISTER._6Q %= REGISTER.DQ; continue;
case INSTR_MODQR6R0: REGISTER._6Q %= REGISTER._0Q; continue;
case INSTR_MODQR6R1: REGISTER._6Q %= REGISTER._1Q; continue;
case INSTR_MODQR6R2: REGISTER._6Q %= REGISTER._2Q; continue;
case INSTR_MODQR6R3: REGISTER._6Q %= REGISTER._3Q; continue;
case INSTR_MODQR6R4: REGISTER._6Q %= REGISTER._4Q; continue;
case INSTR_MODQR6R5: REGISTER._6Q %= REGISTER._5Q; continue;
case INSTR_MODQR6R6: REGISTER._6Q %= REGISTER._6Q; continue;
case INSTR_MODQR6R7: REGISTER._6Q %= REGISTER._7Q; continue;
case INSTR_MODQR6R8: REGISTER._6Q %= REGISTER._8Q; continue;
case INSTR_MODQR6R9: REGISTER._6Q %= REGISTER._9Q; continue;
case INSTR_MODQR6R10: REGISTER._6Q %= REGISTER._10Q; continue;
case INSTR_MODQR6R11: REGISTER._6Q %= REGISTER._11Q; continue;
case INSTR_MODQR6R12: REGISTER._6Q %= REGISTER._12Q; continue;
case INSTR_MODQR6RIP: REGISTER._6Q %= REGISTER.IPQ; continue;
case INSTR_MODQR6RSP: REGISTER._6Q %= REGISTER.SPQ; continue;
case INSTR_MODQR6RBP: REGISTER._6Q %= REGISTER.BPQ; continue;
case INSTR_MODQR7I: REGISTER._7Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR7RA: REGISTER._7Q %= REGISTER.AQ; continue;
case INSTR_MODQR7RB: REGISTER._7Q %= REGISTER.BQ; continue;
case INSTR_MODQR7RC: REGISTER._7Q %= REGISTER.CQ; continue;
case INSTR_MODQR7RD: REGISTER._7Q %= REGISTER.DQ; continue;
case INSTR_MODQR7R0: REGISTER._7Q %= REGISTER._0Q; continue;
case INSTR_MODQR7R1: REGISTER._7Q %= REGISTER._1Q; continue;
case INSTR_MODQR7R2: REGISTER._7Q %= REGISTER._2Q; continue;
case INSTR_MODQR7R3: REGISTER._7Q %= REGISTER._3Q; continue;
case INSTR_MODQR7R4: REGISTER._7Q %= REGISTER._4Q; continue;
case INSTR_MODQR7R5: REGISTER._7Q %= REGISTER._5Q; continue;
case INSTR_MODQR7R6: REGISTER._7Q %= REGISTER._6Q; continue;
case INSTR_MODQR7R7: REGISTER._7Q %= REGISTER._7Q; continue;
case INSTR_MODQR7R8: REGISTER._7Q %= REGISTER._8Q; continue;
case INSTR_MODQR7R9: REGISTER._7Q %= REGISTER._9Q; continue;
case INSTR_MODQR7R10: REGISTER._7Q %= REGISTER._10Q; continue;
case INSTR_MODQR7R11: REGISTER._7Q %= REGISTER._11Q; continue;
case INSTR_MODQR7R12: REGISTER._7Q %= REGISTER._12Q; continue;
case INSTR_MODQR7RIP: REGISTER._7Q %= REGISTER.IPQ; continue;
case INSTR_MODQR7RSP: REGISTER._7Q %= REGISTER.SPQ; continue;
case INSTR_MODQR7RBP: REGISTER._7Q %= REGISTER.BPQ; continue;
case INSTR_MODQR8I: REGISTER._8Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR8RA: REGISTER._8Q %= REGISTER.AQ; continue;
case INSTR_MODQR8RB: REGISTER._8Q %= REGISTER.BQ; continue;
case INSTR_MODQR8RC: REGISTER._8Q %= REGISTER.CQ; continue;
case INSTR_MODQR8RD: REGISTER._8Q %= REGISTER.DQ; continue;
case INSTR_MODQR8R0: REGISTER._8Q %= REGISTER._0Q; continue;
case INSTR_MODQR8R1: REGISTER._8Q %= REGISTER._1Q; continue;
case INSTR_MODQR8R2: REGISTER._8Q %= REGISTER._2Q; continue;
case INSTR_MODQR8R3: REGISTER._8Q %= REGISTER._3Q; continue;
case INSTR_MODQR8R4: REGISTER._8Q %= REGISTER._4Q; continue;
case INSTR_MODQR8R5: REGISTER._8Q %= REGISTER._5Q; continue;
case INSTR_MODQR8R6: REGISTER._8Q %= REGISTER._6Q; continue;
case INSTR_MODQR8R7: REGISTER._8Q %= REGISTER._7Q; continue;
case INSTR_MODQR8R8: REGISTER._8Q %= REGISTER._8Q; continue;
case INSTR_MODQR8R9: REGISTER._8Q %= REGISTER._9Q; continue;
case INSTR_MODQR8R10: REGISTER._8Q %= REGISTER._10Q; continue;
case INSTR_MODQR8R11: REGISTER._8Q %= REGISTER._11Q; continue;
case INSTR_MODQR8R12: REGISTER._8Q %= REGISTER._12Q; continue;
case INSTR_MODQR8RIP: REGISTER._8Q %= REGISTER.IPQ; continue;
case INSTR_MODQR8RSP: REGISTER._8Q %= REGISTER.SPQ; continue;
case INSTR_MODQR8RBP: REGISTER._8Q %= REGISTER.BPQ; continue;
case INSTR_MODQR9I: REGISTER._9Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR9RA: REGISTER._9Q %= REGISTER.AQ; continue;
case INSTR_MODQR9RB: REGISTER._9Q %= REGISTER.BQ; continue;
case INSTR_MODQR9RC: REGISTER._9Q %= REGISTER.CQ; continue;
case INSTR_MODQR9RD: REGISTER._9Q %= REGISTER.DQ; continue;
case INSTR_MODQR9R0: REGISTER._9Q %= REGISTER._0Q; continue;
case INSTR_MODQR9R1: REGISTER._9Q %= REGISTER._1Q; continue;
case INSTR_MODQR9R2: REGISTER._9Q %= REGISTER._2Q; continue;
case INSTR_MODQR9R3: REGISTER._9Q %= REGISTER._3Q; continue;
case INSTR_MODQR9R4: REGISTER._9Q %= REGISTER._4Q; continue;
case INSTR_MODQR9R5: REGISTER._9Q %= REGISTER._5Q; continue;
case INSTR_MODQR9R6: REGISTER._9Q %= REGISTER._6Q; continue;
case INSTR_MODQR9R7: REGISTER._9Q %= REGISTER._7Q; continue;
case INSTR_MODQR9R8: REGISTER._9Q %= REGISTER._8Q; continue;
case INSTR_MODQR9R9: REGISTER._9Q %= REGISTER._9Q; continue;
case INSTR_MODQR9R10: REGISTER._9Q %= REGISTER._10Q; continue;
case INSTR_MODQR9R11: REGISTER._9Q %= REGISTER._11Q; continue;
case INSTR_MODQR9R12: REGISTER._9Q %= REGISTER._12Q; continue;
case INSTR_MODQR9RIP: REGISTER._9Q %= REGISTER.IPQ; continue;
case INSTR_MODQR9RSP: REGISTER._9Q %= REGISTER.SPQ; continue;
case INSTR_MODQR9RBP: REGISTER._9Q %= REGISTER.BPQ; continue;
case INSTR_MODQR10I: REGISTER._10Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR10RA: REGISTER._10Q %= REGISTER.AQ; continue;
case INSTR_MODQR10RB: REGISTER._10Q %= REGISTER.BQ; continue;
case INSTR_MODQR10RC: REGISTER._10Q %= REGISTER.CQ; continue;
case INSTR_MODQR10RD: REGISTER._10Q %= REGISTER.DQ; continue;
case INSTR_MODQR10R0: REGISTER._10Q %= REGISTER._0Q; continue;
case INSTR_MODQR10R1: REGISTER._10Q %= REGISTER._1Q; continue;
case INSTR_MODQR10R2: REGISTER._10Q %= REGISTER._2Q; continue;
case INSTR_MODQR10R3: REGISTER._10Q %= REGISTER._3Q; continue;
case INSTR_MODQR10R4: REGISTER._10Q %= REGISTER._4Q; continue;
case INSTR_MODQR10R5: REGISTER._10Q %= REGISTER._5Q; continue;
case INSTR_MODQR10R6: REGISTER._10Q %= REGISTER._6Q; continue;
case INSTR_MODQR10R7: REGISTER._10Q %= REGISTER._7Q; continue;
case INSTR_MODQR10R8: REGISTER._10Q %= REGISTER._8Q; continue;
case INSTR_MODQR10R9: REGISTER._10Q %= REGISTER._9Q; continue;
case INSTR_MODQR10R10: REGISTER._10Q %= REGISTER._10Q; continue;
case INSTR_MODQR10R11: REGISTER._10Q %= REGISTER._11Q; continue;
case INSTR_MODQR10R12: REGISTER._10Q %= REGISTER._12Q; continue;
case INSTR_MODQR10RIP: REGISTER._10Q %= REGISTER.IPQ; continue;
case INSTR_MODQR10RSP: REGISTER._10Q %= REGISTER.SPQ; continue;
case INSTR_MODQR10RBP: REGISTER._10Q %= REGISTER.BPQ; continue;
case INSTR_MODQR11I: REGISTER._11Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR11RA: REGISTER._11Q %= REGISTER.AQ; continue;
case INSTR_MODQR11RB: REGISTER._11Q %= REGISTER.BQ; continue;
case INSTR_MODQR11RC: REGISTER._11Q %= REGISTER.CQ; continue;
case INSTR_MODQR11RD: REGISTER._11Q %= REGISTER.DQ; continue;
case INSTR_MODQR11R0: REGISTER._11Q %= REGISTER._0Q; continue;
case INSTR_MODQR11R1: REGISTER._11Q %= REGISTER._1Q; continue;
case INSTR_MODQR11R2: REGISTER._11Q %= REGISTER._2Q; continue;
case INSTR_MODQR11R3: REGISTER._11Q %= REGISTER._3Q; continue;
case INSTR_MODQR11R4: REGISTER._11Q %= REGISTER._4Q; continue;
case INSTR_MODQR11R5: REGISTER._11Q %= REGISTER._5Q; continue;
case INSTR_MODQR11R6: REGISTER._11Q %= REGISTER._6Q; continue;
case INSTR_MODQR11R7: REGISTER._11Q %= REGISTER._7Q; continue;
case INSTR_MODQR11R8: REGISTER._11Q %= REGISTER._8Q; continue;
case INSTR_MODQR11R9: REGISTER._11Q %= REGISTER._9Q; continue;
case INSTR_MODQR11R10: REGISTER._11Q %= REGISTER._10Q; continue;
case INSTR_MODQR11R11: REGISTER._11Q %= REGISTER._11Q; continue;
case INSTR_MODQR11R12: REGISTER._11Q %= REGISTER._12Q; continue;
case INSTR_MODQR11RIP: REGISTER._11Q %= REGISTER.IPQ; continue;
case INSTR_MODQR11RSP: REGISTER._11Q %= REGISTER.SPQ; continue;
case INSTR_MODQR11RBP: REGISTER._11Q %= REGISTER.BPQ; continue;
case INSTR_MODQR12I: REGISTER._12Q %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQR12RA: REGISTER._12Q %= REGISTER.AQ; continue;
case INSTR_MODQR12RB: REGISTER._12Q %= REGISTER.BQ; continue;
case INSTR_MODQR12RC: REGISTER._12Q %= REGISTER.CQ; continue;
case INSTR_MODQR12RD: REGISTER._12Q %= REGISTER.DQ; continue;
case INSTR_MODQR12R0: REGISTER._12Q %= REGISTER._0Q; continue;
case INSTR_MODQR12R1: REGISTER._12Q %= REGISTER._1Q; continue;
case INSTR_MODQR12R2: REGISTER._12Q %= REGISTER._2Q; continue;
case INSTR_MODQR12R3: REGISTER._12Q %= REGISTER._3Q; continue;
case INSTR_MODQR12R4: REGISTER._12Q %= REGISTER._4Q; continue;
case INSTR_MODQR12R5: REGISTER._12Q %= REGISTER._5Q; continue;
case INSTR_MODQR12R6: REGISTER._12Q %= REGISTER._6Q; continue;
case INSTR_MODQR12R7: REGISTER._12Q %= REGISTER._7Q; continue;
case INSTR_MODQR12R8: REGISTER._12Q %= REGISTER._8Q; continue;
case INSTR_MODQR12R9: REGISTER._12Q %= REGISTER._9Q; continue;
case INSTR_MODQR12R10: REGISTER._12Q %= REGISTER._10Q; continue;
case INSTR_MODQR12R11: REGISTER._12Q %= REGISTER._11Q; continue;
case INSTR_MODQR12R12: REGISTER._12Q %= REGISTER._12Q; continue;
case INSTR_MODQR12RIP: REGISTER._12Q %= REGISTER.IPQ; continue;
case INSTR_MODQR12RSP: REGISTER._12Q %= REGISTER.SPQ; continue;
case INSTR_MODQR12RBP: REGISTER._12Q %= REGISTER.BPQ; continue;
case INSTR_MODQRIPI: REGISTER.IPQ %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQRIPRA: REGISTER.IPQ %= REGISTER.AQ; continue;
case INSTR_MODQRIPRB: REGISTER.IPQ %= REGISTER.BQ; continue;
case INSTR_MODQRIPRC: REGISTER.IPQ %= REGISTER.CQ; continue;
case INSTR_MODQRIPRD: REGISTER.IPQ %= REGISTER.DQ; continue;
case INSTR_MODQRIPR0: REGISTER.IPQ %= REGISTER._0Q; continue;
case INSTR_MODQRIPR1: REGISTER.IPQ %= REGISTER._1Q; continue;
case INSTR_MODQRIPR2: REGISTER.IPQ %= REGISTER._2Q; continue;
case INSTR_MODQRIPR3: REGISTER.IPQ %= REGISTER._3Q; continue;
case INSTR_MODQRIPR4: REGISTER.IPQ %= REGISTER._4Q; continue;
case INSTR_MODQRIPR5: REGISTER.IPQ %= REGISTER._5Q; continue;
case INSTR_MODQRIPR6: REGISTER.IPQ %= REGISTER._6Q; continue;
case INSTR_MODQRIPR7: REGISTER.IPQ %= REGISTER._7Q; continue;
case INSTR_MODQRIPR8: REGISTER.IPQ %= REGISTER._8Q; continue;
case INSTR_MODQRIPR9: REGISTER.IPQ %= REGISTER._9Q; continue;
case INSTR_MODQRIPR10: REGISTER.IPQ %= REGISTER._10Q; continue;
case INSTR_MODQRIPR11: REGISTER.IPQ %= REGISTER._11Q; continue;
case INSTR_MODQRIPR12: REGISTER.IPQ %= REGISTER._12Q; continue;
case INSTR_MODQRIPRIP: REGISTER.IPQ %= REGISTER.IPQ; continue;
case INSTR_MODQRIPRSP: REGISTER.IPQ %= REGISTER.SPQ; continue;
case INSTR_MODQRIPRBP: REGISTER.IPQ %= REGISTER.BPQ; continue;
case INSTR_MODQRSPI: REGISTER.SPQ %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQRSPRA: REGISTER.SPQ %= REGISTER.AQ; continue;
case INSTR_MODQRSPRB: REGISTER.SPQ %= REGISTER.BQ; continue;
case INSTR_MODQRSPRC: REGISTER.SPQ %= REGISTER.CQ; continue;
case INSTR_MODQRSPRD: REGISTER.SPQ %= REGISTER.DQ; continue;
case INSTR_MODQRSPR0: REGISTER.SPQ %= REGISTER._0Q; continue;
case INSTR_MODQRSPR1: REGISTER.SPQ %= REGISTER._1Q; continue;
case INSTR_MODQRSPR2: REGISTER.SPQ %= REGISTER._2Q; continue;
case INSTR_MODQRSPR3: REGISTER.SPQ %= REGISTER._3Q; continue;
case INSTR_MODQRSPR4: REGISTER.SPQ %= REGISTER._4Q; continue;
case INSTR_MODQRSPR5: REGISTER.SPQ %= REGISTER._5Q; continue;
case INSTR_MODQRSPR6: REGISTER.SPQ %= REGISTER._6Q; continue;
case INSTR_MODQRSPR7: REGISTER.SPQ %= REGISTER._7Q; continue;
case INSTR_MODQRSPR8: REGISTER.SPQ %= REGISTER._8Q; continue;
case INSTR_MODQRSPR9: REGISTER.SPQ %= REGISTER._9Q; continue;
case INSTR_MODQRSPR10: REGISTER.SPQ %= REGISTER._10Q; continue;
case INSTR_MODQRSPR11: REGISTER.SPQ %= REGISTER._11Q; continue;
case INSTR_MODQRSPR12: REGISTER.SPQ %= REGISTER._12Q; continue;
case INSTR_MODQRSPRIP: REGISTER.SPQ %= REGISTER.IPQ; continue;
case INSTR_MODQRSPRSP: REGISTER.SPQ %= REGISTER.SPQ; continue;
case INSTR_MODQRSPRBP: REGISTER.SPQ %= REGISTER.BPQ; continue;
case INSTR_MODQRBPI: REGISTER.BPQ %= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_MODQRBPRA: REGISTER.BPQ %= REGISTER.AQ; continue;
case INSTR_MODQRBPRB: REGISTER.BPQ %= REGISTER.BQ; continue;
case INSTR_MODQRBPRC: REGISTER.BPQ %= REGISTER.CQ; continue;
case INSTR_MODQRBPRD: REGISTER.BPQ %= REGISTER.DQ; continue;
case INSTR_MODQRBPR0: REGISTER.BPQ %= REGISTER._0Q; continue;
case INSTR_MODQRBPR1: REGISTER.BPQ %= REGISTER._1Q; continue;
case INSTR_MODQRBPR2: REGISTER.BPQ %= REGISTER._2Q; continue;
case INSTR_MODQRBPR3: REGISTER.BPQ %= REGISTER._3Q; continue;
case INSTR_MODQRBPR4: REGISTER.BPQ %= REGISTER._4Q; continue;
case INSTR_MODQRBPR5: REGISTER.BPQ %= REGISTER._5Q; continue;
case INSTR_MODQRBPR6: REGISTER.BPQ %= REGISTER._6Q; continue;
case INSTR_MODQRBPR7: REGISTER.BPQ %= REGISTER._7Q; continue;
case INSTR_MODQRBPR8: REGISTER.BPQ %= REGISTER._8Q; continue;
case INSTR_MODQRBPR9: REGISTER.BPQ %= REGISTER._9Q; continue;
case INSTR_MODQRBPR10: REGISTER.BPQ %= REGISTER._10Q; continue;
case INSTR_MODQRBPR11: REGISTER.BPQ %= REGISTER._11Q; continue;
case INSTR_MODQRBPR12: REGISTER.BPQ %= REGISTER._12Q; continue;
case INSTR_MODQRBPRIP: REGISTER.BPQ %= REGISTER.IPQ; continue;
case INSTR_MODQRBPRSP: REGISTER.BPQ %= REGISTER.SPQ; continue;
case INSTR_MODQRBPRBP: REGISTER.BPQ %= REGISTER.BPQ; continue;
case INSTR_MODWRAI: REGISTER.AW %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWRARA: REGISTER.AW %= REGISTER.AW; continue;
case INSTR_MODWRARB: REGISTER.AW %= REGISTER.BW; continue;
case INSTR_MODWRARC: REGISTER.AW %= REGISTER.CW; continue;
case INSTR_MODWRARD: REGISTER.AW %= REGISTER.DW; continue;
case INSTR_MODWRAR0: REGISTER.AW %= REGISTER._0W; continue;
case INSTR_MODWRAR1: REGISTER.AW %= REGISTER._1W; continue;
case INSTR_MODWRAR2: REGISTER.AW %= REGISTER._2W; continue;
case INSTR_MODWRAR3: REGISTER.AW %= REGISTER._3W; continue;
case INSTR_MODWRAR4: REGISTER.AW %= REGISTER._4W; continue;
case INSTR_MODWRAR5: REGISTER.AW %= REGISTER._5W; continue;
case INSTR_MODWRAR6: REGISTER.AW %= REGISTER._6W; continue;
case INSTR_MODWRAR7: REGISTER.AW %= REGISTER._7W; continue;
case INSTR_MODWRAR8: REGISTER.AW %= REGISTER._8W; continue;
case INSTR_MODWRAR9: REGISTER.AW %= REGISTER._9W; continue;
case INSTR_MODWRAR10: REGISTER.AW %= REGISTER._10W; continue;
case INSTR_MODWRAR11: REGISTER.AW %= REGISTER._11W; continue;
case INSTR_MODWRAR12: REGISTER.AW %= REGISTER._12W; continue;
case INSTR_MODWRARIP: REGISTER.AW %= REGISTER.IPW; continue;
case INSTR_MODWRARSP: REGISTER.AW %= REGISTER.SPW; continue;
case INSTR_MODWRARBP: REGISTER.AW %= REGISTER.BPW; continue;
case INSTR_MODWRBI: REGISTER.BW %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWRBRA: REGISTER.BW %= REGISTER.AW; continue;
case INSTR_MODWRBRB: REGISTER.BW %= REGISTER.BW; continue;
case INSTR_MODWRBRC: REGISTER.BW %= REGISTER.CW; continue;
case INSTR_MODWRBRD: REGISTER.BW %= REGISTER.DW; continue;
case INSTR_MODWRBR0: REGISTER.BW %= REGISTER._0W; continue;
case INSTR_MODWRBR1: REGISTER.BW %= REGISTER._1W; continue;
case INSTR_MODWRBR2: REGISTER.BW %= REGISTER._2W; continue;
case INSTR_MODWRBR3: REGISTER.BW %= REGISTER._3W; continue;
case INSTR_MODWRBR4: REGISTER.BW %= REGISTER._4W; continue;
case INSTR_MODWRBR5: REGISTER.BW %= REGISTER._5W; continue;
case INSTR_MODWRBR6: REGISTER.BW %= REGISTER._6W; continue;
case INSTR_MODWRBR7: REGISTER.BW %= REGISTER._7W; continue;
case INSTR_MODWRBR8: REGISTER.BW %= REGISTER._8W; continue;
case INSTR_MODWRBR9: REGISTER.BW %= REGISTER._9W; continue;
case INSTR_MODWRBR10: REGISTER.BW %= REGISTER._10W; continue;
case INSTR_MODWRBR11: REGISTER.BW %= REGISTER._11W; continue;
case INSTR_MODWRBR12: REGISTER.BW %= REGISTER._12W; continue;
case INSTR_MODWRBRIP: REGISTER.BW %= REGISTER.IPW; continue;
case INSTR_MODWRBRSP: REGISTER.BW %= REGISTER.SPW; continue;
case INSTR_MODWRBRBP: REGISTER.BW %= REGISTER.BPW; continue;
case INSTR_MODWRCI: REGISTER.CW %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWRCRA: REGISTER.CW %= REGISTER.AW; continue;
case INSTR_MODWRCRB: REGISTER.CW %= REGISTER.BW; continue;
case INSTR_MODWRCRC: REGISTER.CW %= REGISTER.CW; continue;
case INSTR_MODWRCRD: REGISTER.CW %= REGISTER.DW; continue;
case INSTR_MODWRCR0: REGISTER.CW %= REGISTER._0W; continue;
case INSTR_MODWRCR1: REGISTER.CW %= REGISTER._1W; continue;
case INSTR_MODWRCR2: REGISTER.CW %= REGISTER._2W; continue;
case INSTR_MODWRCR3: REGISTER.CW %= REGISTER._3W; continue;
case INSTR_MODWRCR4: REGISTER.CW %= REGISTER._4W; continue;
case INSTR_MODWRCR5: REGISTER.CW %= REGISTER._5W; continue;
case INSTR_MODWRCR6: REGISTER.CW %= REGISTER._6W; continue;
case INSTR_MODWRCR7: REGISTER.CW %= REGISTER._7W; continue;
case INSTR_MODWRCR8: REGISTER.CW %= REGISTER._8W; continue;
case INSTR_MODWRCR9: REGISTER.CW %= REGISTER._9W; continue;
case INSTR_MODWRCR10: REGISTER.CW %= REGISTER._10W; continue;
case INSTR_MODWRCR11: REGISTER.CW %= REGISTER._11W; continue;
case INSTR_MODWRCR12: REGISTER.CW %= REGISTER._12W; continue;
case INSTR_MODWRCRIP: REGISTER.CW %= REGISTER.IPW; continue;
case INSTR_MODWRCRSP: REGISTER.CW %= REGISTER.SPW; continue;
case INSTR_MODWRCRBP: REGISTER.CW %= REGISTER.BPW; continue;
case INSTR_MODWRDI: REGISTER.DW %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWRDRA: REGISTER.DW %= REGISTER.AW; continue;
case INSTR_MODWRDRB: REGISTER.DW %= REGISTER.BW; continue;
case INSTR_MODWRDRC: REGISTER.DW %= REGISTER.CW; continue;
case INSTR_MODWRDRD: REGISTER.DW %= REGISTER.DW; continue;
case INSTR_MODWRDR0: REGISTER.DW %= REGISTER._0W; continue;
case INSTR_MODWRDR1: REGISTER.DW %= REGISTER._1W; continue;
case INSTR_MODWRDR2: REGISTER.DW %= REGISTER._2W; continue;
case INSTR_MODWRDR3: REGISTER.DW %= REGISTER._3W; continue;
case INSTR_MODWRDR4: REGISTER.DW %= REGISTER._4W; continue;
case INSTR_MODWRDR5: REGISTER.DW %= REGISTER._5W; continue;
case INSTR_MODWRDR6: REGISTER.DW %= REGISTER._6W; continue;
case INSTR_MODWRDR7: REGISTER.DW %= REGISTER._7W; continue;
case INSTR_MODWRDR8: REGISTER.DW %= REGISTER._8W; continue;
case INSTR_MODWRDR9: REGISTER.DW %= REGISTER._9W; continue;
case INSTR_MODWRDR10: REGISTER.DW %= REGISTER._10W; continue;
case INSTR_MODWRDR11: REGISTER.DW %= REGISTER._11W; continue;
case INSTR_MODWRDR12: REGISTER.DW %= REGISTER._12W; continue;
case INSTR_MODWRDRIP: REGISTER.DW %= REGISTER.IPW; continue;
case INSTR_MODWRDRSP: REGISTER.DW %= REGISTER.SPW; continue;
case INSTR_MODWRDRBP: REGISTER.DW %= REGISTER.BPW; continue;
case INSTR_MODWR0I: REGISTER._0W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR0RA: REGISTER._0W %= REGISTER.AW; continue;
case INSTR_MODWR0RB: REGISTER._0W %= REGISTER.BW; continue;
case INSTR_MODWR0RC: REGISTER._0W %= REGISTER.CW; continue;
case INSTR_MODWR0RD: REGISTER._0W %= REGISTER.DW; continue;
case INSTR_MODWR0R0: REGISTER._0W %= REGISTER._0W; continue;
case INSTR_MODWR0R1: REGISTER._0W %= REGISTER._1W; continue;
case INSTR_MODWR0R2: REGISTER._0W %= REGISTER._2W; continue;
case INSTR_MODWR0R3: REGISTER._0W %= REGISTER._3W; continue;
case INSTR_MODWR0R4: REGISTER._0W %= REGISTER._4W; continue;
case INSTR_MODWR0R5: REGISTER._0W %= REGISTER._5W; continue;
case INSTR_MODWR0R6: REGISTER._0W %= REGISTER._6W; continue;
case INSTR_MODWR0R7: REGISTER._0W %= REGISTER._7W; continue;
case INSTR_MODWR0R8: REGISTER._0W %= REGISTER._8W; continue;
case INSTR_MODWR0R9: REGISTER._0W %= REGISTER._9W; continue;
case INSTR_MODWR0R10: REGISTER._0W %= REGISTER._10W; continue;
case INSTR_MODWR0R11: REGISTER._0W %= REGISTER._11W; continue;
case INSTR_MODWR0R12: REGISTER._0W %= REGISTER._12W; continue;
case INSTR_MODWR0RIP: REGISTER._0W %= REGISTER.IPW; continue;
case INSTR_MODWR0RSP: REGISTER._0W %= REGISTER.SPW; continue;
case INSTR_MODWR0RBP: REGISTER._0W %= REGISTER.BPW; continue;
case INSTR_MODWR1I: REGISTER._1W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR1RA: REGISTER._1W %= REGISTER.AW; continue;
case INSTR_MODWR1RB: REGISTER._1W %= REGISTER.BW; continue;
case INSTR_MODWR1RC: REGISTER._1W %= REGISTER.CW; continue;
case INSTR_MODWR1RD: REGISTER._1W %= REGISTER.DW; continue;
case INSTR_MODWR1R0: REGISTER._1W %= REGISTER._0W; continue;
case INSTR_MODWR1R1: REGISTER._1W %= REGISTER._1W; continue;
case INSTR_MODWR1R2: REGISTER._1W %= REGISTER._2W; continue;
case INSTR_MODWR1R3: REGISTER._1W %= REGISTER._3W; continue;
case INSTR_MODWR1R4: REGISTER._1W %= REGISTER._4W; continue;
case INSTR_MODWR1R5: REGISTER._1W %= REGISTER._5W; continue;
case INSTR_MODWR1R6: REGISTER._1W %= REGISTER._6W; continue;
case INSTR_MODWR1R7: REGISTER._1W %= REGISTER._7W; continue;
case INSTR_MODWR1R8: REGISTER._1W %= REGISTER._8W; continue;
case INSTR_MODWR1R9: REGISTER._1W %= REGISTER._9W; continue;
case INSTR_MODWR1R10: REGISTER._1W %= REGISTER._10W; continue;
case INSTR_MODWR1R11: REGISTER._1W %= REGISTER._11W; continue;
case INSTR_MODWR1R12: REGISTER._1W %= REGISTER._12W; continue;
case INSTR_MODWR1RIP: REGISTER._1W %= REGISTER.IPW; continue;
case INSTR_MODWR1RSP: REGISTER._1W %= REGISTER.SPW; continue;
case INSTR_MODWR1RBP: REGISTER._1W %= REGISTER.BPW; continue;
case INSTR_MODWR2I: REGISTER._2W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR2RA: REGISTER._2W %= REGISTER.AW; continue;
case INSTR_MODWR2RB: REGISTER._2W %= REGISTER.BW; continue;
case INSTR_MODWR2RC: REGISTER._2W %= REGISTER.CW; continue;
case INSTR_MODWR2RD: REGISTER._2W %= REGISTER.DW; continue;
case INSTR_MODWR2R0: REGISTER._2W %= REGISTER._0W; continue;
case INSTR_MODWR2R1: REGISTER._2W %= REGISTER._1W; continue;
case INSTR_MODWR2R2: REGISTER._2W %= REGISTER._2W; continue;
case INSTR_MODWR2R3: REGISTER._2W %= REGISTER._3W; continue;
case INSTR_MODWR2R4: REGISTER._2W %= REGISTER._4W; continue;
case INSTR_MODWR2R5: REGISTER._2W %= REGISTER._5W; continue;
case INSTR_MODWR2R6: REGISTER._2W %= REGISTER._6W; continue;
case INSTR_MODWR2R7: REGISTER._2W %= REGISTER._7W; continue;
case INSTR_MODWR2R8: REGISTER._2W %= REGISTER._8W; continue;
case INSTR_MODWR2R9: REGISTER._2W %= REGISTER._9W; continue;
case INSTR_MODWR2R10: REGISTER._2W %= REGISTER._10W; continue;
case INSTR_MODWR2R11: REGISTER._2W %= REGISTER._11W; continue;
case INSTR_MODWR2R12: REGISTER._2W %= REGISTER._12W; continue;
case INSTR_MODWR2RIP: REGISTER._2W %= REGISTER.IPW; continue;
case INSTR_MODWR2RSP: REGISTER._2W %= REGISTER.SPW; continue;
case INSTR_MODWR2RBP: REGISTER._2W %= REGISTER.BPW; continue;
case INSTR_MODWR3I: REGISTER._3W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR3RA: REGISTER._3W %= REGISTER.AW; continue;
case INSTR_MODWR3RB: REGISTER._3W %= REGISTER.BW; continue;
case INSTR_MODWR3RC: REGISTER._3W %= REGISTER.CW; continue;
case INSTR_MODWR3RD: REGISTER._3W %= REGISTER.DW; continue;
case INSTR_MODWR3R0: REGISTER._3W %= REGISTER._0W; continue;
case INSTR_MODWR3R1: REGISTER._3W %= REGISTER._1W; continue;
case INSTR_MODWR3R2: REGISTER._3W %= REGISTER._2W; continue;
case INSTR_MODWR3R3: REGISTER._3W %= REGISTER._3W; continue;
case INSTR_MODWR3R4: REGISTER._3W %= REGISTER._4W; continue;
case INSTR_MODWR3R5: REGISTER._3W %= REGISTER._5W; continue;
case INSTR_MODWR3R6: REGISTER._3W %= REGISTER._6W; continue;
case INSTR_MODWR3R7: REGISTER._3W %= REGISTER._7W; continue;
case INSTR_MODWR3R8: REGISTER._3W %= REGISTER._8W; continue;
case INSTR_MODWR3R9: REGISTER._3W %= REGISTER._9W; continue;
case INSTR_MODWR3R10: REGISTER._3W %= REGISTER._10W; continue;
case INSTR_MODWR3R11: REGISTER._3W %= REGISTER._11W; continue;
case INSTR_MODWR3R12: REGISTER._3W %= REGISTER._12W; continue;
case INSTR_MODWR3RIP: REGISTER._3W %= REGISTER.IPW; continue;
case INSTR_MODWR3RSP: REGISTER._3W %= REGISTER.SPW; continue;
case INSTR_MODWR3RBP: REGISTER._3W %= REGISTER.BPW; continue;
case INSTR_MODWR4I: REGISTER._4W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR4RA: REGISTER._4W %= REGISTER.AW; continue;
case INSTR_MODWR4RB: REGISTER._4W %= REGISTER.BW; continue;
case INSTR_MODWR4RC: REGISTER._4W %= REGISTER.CW; continue;
case INSTR_MODWR4RD: REGISTER._4W %= REGISTER.DW; continue;
case INSTR_MODWR4R0: REGISTER._4W %= REGISTER._0W; continue;
case INSTR_MODWR4R1: REGISTER._4W %= REGISTER._1W; continue;
case INSTR_MODWR4R2: REGISTER._4W %= REGISTER._2W; continue;
case INSTR_MODWR4R3: REGISTER._4W %= REGISTER._3W; continue;
case INSTR_MODWR4R4: REGISTER._4W %= REGISTER._4W; continue;
case INSTR_MODWR4R5: REGISTER._4W %= REGISTER._5W; continue;
case INSTR_MODWR4R6: REGISTER._4W %= REGISTER._6W; continue;
case INSTR_MODWR4R7: REGISTER._4W %= REGISTER._7W; continue;
case INSTR_MODWR4R8: REGISTER._4W %= REGISTER._8W; continue;
case INSTR_MODWR4R9: REGISTER._4W %= REGISTER._9W; continue;
case INSTR_MODWR4R10: REGISTER._4W %= REGISTER._10W; continue;
case INSTR_MODWR4R11: REGISTER._4W %= REGISTER._11W; continue;
case INSTR_MODWR4R12: REGISTER._4W %= REGISTER._12W; continue;
case INSTR_MODWR4RIP: REGISTER._4W %= REGISTER.IPW; continue;
case INSTR_MODWR4RSP: REGISTER._4W %= REGISTER.SPW; continue;
case INSTR_MODWR4RBP: REGISTER._4W %= REGISTER.BPW; continue;
case INSTR_MODWR5I: REGISTER._5W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR5RA: REGISTER._5W %= REGISTER.AW; continue;
case INSTR_MODWR5RB: REGISTER._5W %= REGISTER.BW; continue;
case INSTR_MODWR5RC: REGISTER._5W %= REGISTER.CW; continue;
case INSTR_MODWR5RD: REGISTER._5W %= REGISTER.DW; continue;
case INSTR_MODWR5R0: REGISTER._5W %= REGISTER._0W; continue;
case INSTR_MODWR5R1: REGISTER._5W %= REGISTER._1W; continue;
case INSTR_MODWR5R2: REGISTER._5W %= REGISTER._2W; continue;
case INSTR_MODWR5R3: REGISTER._5W %= REGISTER._3W; continue;
case INSTR_MODWR5R4: REGISTER._5W %= REGISTER._4W; continue;
case INSTR_MODWR5R5: REGISTER._5W %= REGISTER._5W; continue;
case INSTR_MODWR5R6: REGISTER._5W %= REGISTER._6W; continue;
case INSTR_MODWR5R7: REGISTER._5W %= REGISTER._7W; continue;
case INSTR_MODWR5R8: REGISTER._5W %= REGISTER._8W; continue;
case INSTR_MODWR5R9: REGISTER._5W %= REGISTER._9W; continue;
case INSTR_MODWR5R10: REGISTER._5W %= REGISTER._10W; continue;
case INSTR_MODWR5R11: REGISTER._5W %= REGISTER._11W; continue;
case INSTR_MODWR5R12: REGISTER._5W %= REGISTER._12W; continue;
case INSTR_MODWR5RIP: REGISTER._5W %= REGISTER.IPW; continue;
case INSTR_MODWR5RSP: REGISTER._5W %= REGISTER.SPW; continue;
case INSTR_MODWR5RBP: REGISTER._5W %= REGISTER.BPW; continue;
case INSTR_MODWR6I: REGISTER._6W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR6RA: REGISTER._6W %= REGISTER.AW; continue;
case INSTR_MODWR6RB: REGISTER._6W %= REGISTER.BW; continue;
case INSTR_MODWR6RC: REGISTER._6W %= REGISTER.CW; continue;
case INSTR_MODWR6RD: REGISTER._6W %= REGISTER.DW; continue;
case INSTR_MODWR6R0: REGISTER._6W %= REGISTER._0W; continue;
case INSTR_MODWR6R1: REGISTER._6W %= REGISTER._1W; continue;
case INSTR_MODWR6R2: REGISTER._6W %= REGISTER._2W; continue;
case INSTR_MODWR6R3: REGISTER._6W %= REGISTER._3W; continue;
case INSTR_MODWR6R4: REGISTER._6W %= REGISTER._4W; continue;
case INSTR_MODWR6R5: REGISTER._6W %= REGISTER._5W; continue;
case INSTR_MODWR6R6: REGISTER._6W %= REGISTER._6W; continue;
case INSTR_MODWR6R7: REGISTER._6W %= REGISTER._7W; continue;
case INSTR_MODWR6R8: REGISTER._6W %= REGISTER._8W; continue;
case INSTR_MODWR6R9: REGISTER._6W %= REGISTER._9W; continue;
case INSTR_MODWR6R10: REGISTER._6W %= REGISTER._10W; continue;
case INSTR_MODWR6R11: REGISTER._6W %= REGISTER._11W; continue;
case INSTR_MODWR6R12: REGISTER._6W %= REGISTER._12W; continue;
case INSTR_MODWR6RIP: REGISTER._6W %= REGISTER.IPW; continue;
case INSTR_MODWR6RSP: REGISTER._6W %= REGISTER.SPW; continue;
case INSTR_MODWR6RBP: REGISTER._6W %= REGISTER.BPW; continue;
case INSTR_MODWR7I: REGISTER._7W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR7RA: REGISTER._7W %= REGISTER.AW; continue;
case INSTR_MODWR7RB: REGISTER._7W %= REGISTER.BW; continue;
case INSTR_MODWR7RC: REGISTER._7W %= REGISTER.CW; continue;
case INSTR_MODWR7RD: REGISTER._7W %= REGISTER.DW; continue;
case INSTR_MODWR7R0: REGISTER._7W %= REGISTER._0W; continue;
case INSTR_MODWR7R1: REGISTER._7W %= REGISTER._1W; continue;
case INSTR_MODWR7R2: REGISTER._7W %= REGISTER._2W; continue;
case INSTR_MODWR7R3: REGISTER._7W %= REGISTER._3W; continue;
case INSTR_MODWR7R4: REGISTER._7W %= REGISTER._4W; continue;
case INSTR_MODWR7R5: REGISTER._7W %= REGISTER._5W; continue;
case INSTR_MODWR7R6: REGISTER._7W %= REGISTER._6W; continue;
case INSTR_MODWR7R7: REGISTER._7W %= REGISTER._7W; continue;
case INSTR_MODWR7R8: REGISTER._7W %= REGISTER._8W; continue;
case INSTR_MODWR7R9: REGISTER._7W %= REGISTER._9W; continue;
case INSTR_MODWR7R10: REGISTER._7W %= REGISTER._10W; continue;
case INSTR_MODWR7R11: REGISTER._7W %= REGISTER._11W; continue;
case INSTR_MODWR7R12: REGISTER._7W %= REGISTER._12W; continue;
case INSTR_MODWR7RIP: REGISTER._7W %= REGISTER.IPW; continue;
case INSTR_MODWR7RSP: REGISTER._7W %= REGISTER.SPW; continue;
case INSTR_MODWR7RBP: REGISTER._7W %= REGISTER.BPW; continue;
case INSTR_MODWR8I: REGISTER._8W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR8RA: REGISTER._8W %= REGISTER.AW; continue;
case INSTR_MODWR8RB: REGISTER._8W %= REGISTER.BW; continue;
case INSTR_MODWR8RC: REGISTER._8W %= REGISTER.CW; continue;
case INSTR_MODWR8RD: REGISTER._8W %= REGISTER.DW; continue;
case INSTR_MODWR8R0: REGISTER._8W %= REGISTER._0W; continue;
case INSTR_MODWR8R1: REGISTER._8W %= REGISTER._1W; continue;
case INSTR_MODWR8R2: REGISTER._8W %= REGISTER._2W; continue;
case INSTR_MODWR8R3: REGISTER._8W %= REGISTER._3W; continue;
case INSTR_MODWR8R4: REGISTER._8W %= REGISTER._4W; continue;
case INSTR_MODWR8R5: REGISTER._8W %= REGISTER._5W; continue;
case INSTR_MODWR8R6: REGISTER._8W %= REGISTER._6W; continue;
case INSTR_MODWR8R7: REGISTER._8W %= REGISTER._7W; continue;
case INSTR_MODWR8R8: REGISTER._8W %= REGISTER._8W; continue;
case INSTR_MODWR8R9: REGISTER._8W %= REGISTER._9W; continue;
case INSTR_MODWR8R10: REGISTER._8W %= REGISTER._10W; continue;
case INSTR_MODWR8R11: REGISTER._8W %= REGISTER._11W; continue;
case INSTR_MODWR8R12: REGISTER._8W %= REGISTER._12W; continue;
case INSTR_MODWR8RIP: REGISTER._8W %= REGISTER.IPW; continue;
case INSTR_MODWR8RSP: REGISTER._8W %= REGISTER.SPW; continue;
case INSTR_MODWR8RBP: REGISTER._8W %= REGISTER.BPW; continue;
case INSTR_MODWR9I: REGISTER._9W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR9RA: REGISTER._9W %= REGISTER.AW; continue;
case INSTR_MODWR9RB: REGISTER._9W %= REGISTER.BW; continue;
case INSTR_MODWR9RC: REGISTER._9W %= REGISTER.CW; continue;
case INSTR_MODWR9RD: REGISTER._9W %= REGISTER.DW; continue;
case INSTR_MODWR9R0: REGISTER._9W %= REGISTER._0W; continue;
case INSTR_MODWR9R1: REGISTER._9W %= REGISTER._1W; continue;
case INSTR_MODWR9R2: REGISTER._9W %= REGISTER._2W; continue;
case INSTR_MODWR9R3: REGISTER._9W %= REGISTER._3W; continue;
case INSTR_MODWR9R4: REGISTER._9W %= REGISTER._4W; continue;
case INSTR_MODWR9R5: REGISTER._9W %= REGISTER._5W; continue;
case INSTR_MODWR9R6: REGISTER._9W %= REGISTER._6W; continue;
case INSTR_MODWR9R7: REGISTER._9W %= REGISTER._7W; continue;
case INSTR_MODWR9R8: REGISTER._9W %= REGISTER._8W; continue;
case INSTR_MODWR9R9: REGISTER._9W %= REGISTER._9W; continue;
case INSTR_MODWR9R10: REGISTER._9W %= REGISTER._10W; continue;
case INSTR_MODWR9R11: REGISTER._9W %= REGISTER._11W; continue;
case INSTR_MODWR9R12: REGISTER._9W %= REGISTER._12W; continue;
case INSTR_MODWR9RIP: REGISTER._9W %= REGISTER.IPW; continue;
case INSTR_MODWR9RSP: REGISTER._9W %= REGISTER.SPW; continue;
case INSTR_MODWR9RBP: REGISTER._9W %= REGISTER.BPW; continue;
case INSTR_MODWR10I: REGISTER._10W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR10RA: REGISTER._10W %= REGISTER.AW; continue;
case INSTR_MODWR10RB: REGISTER._10W %= REGISTER.BW; continue;
case INSTR_MODWR10RC: REGISTER._10W %= REGISTER.CW; continue;
case INSTR_MODWR10RD: REGISTER._10W %= REGISTER.DW; continue;
case INSTR_MODWR10R0: REGISTER._10W %= REGISTER._0W; continue;
case INSTR_MODWR10R1: REGISTER._10W %= REGISTER._1W; continue;
case INSTR_MODWR10R2: REGISTER._10W %= REGISTER._2W; continue;
case INSTR_MODWR10R3: REGISTER._10W %= REGISTER._3W; continue;
case INSTR_MODWR10R4: REGISTER._10W %= REGISTER._4W; continue;
case INSTR_MODWR10R5: REGISTER._10W %= REGISTER._5W; continue;
case INSTR_MODWR10R6: REGISTER._10W %= REGISTER._6W; continue;
case INSTR_MODWR10R7: REGISTER._10W %= REGISTER._7W; continue;
case INSTR_MODWR10R8: REGISTER._10W %= REGISTER._8W; continue;
case INSTR_MODWR10R9: REGISTER._10W %= REGISTER._9W; continue;
case INSTR_MODWR10R10: REGISTER._10W %= REGISTER._10W; continue;
case INSTR_MODWR10R11: REGISTER._10W %= REGISTER._11W; continue;
case INSTR_MODWR10R12: REGISTER._10W %= REGISTER._12W; continue;
case INSTR_MODWR10RIP: REGISTER._10W %= REGISTER.IPW; continue;
case INSTR_MODWR10RSP: REGISTER._10W %= REGISTER.SPW; continue;
case INSTR_MODWR10RBP: REGISTER._10W %= REGISTER.BPW; continue;
case INSTR_MODWR11I: REGISTER._11W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR11RA: REGISTER._11W %= REGISTER.AW; continue;
case INSTR_MODWR11RB: REGISTER._11W %= REGISTER.BW; continue;
case INSTR_MODWR11RC: REGISTER._11W %= REGISTER.CW; continue;
case INSTR_MODWR11RD: REGISTER._11W %= REGISTER.DW; continue;
case INSTR_MODWR11R0: REGISTER._11W %= REGISTER._0W; continue;
case INSTR_MODWR11R1: REGISTER._11W %= REGISTER._1W; continue;
case INSTR_MODWR11R2: REGISTER._11W %= REGISTER._2W; continue;
case INSTR_MODWR11R3: REGISTER._11W %= REGISTER._3W; continue;
case INSTR_MODWR11R4: REGISTER._11W %= REGISTER._4W; continue;
case INSTR_MODWR11R5: REGISTER._11W %= REGISTER._5W; continue;
case INSTR_MODWR11R6: REGISTER._11W %= REGISTER._6W; continue;
case INSTR_MODWR11R7: REGISTER._11W %= REGISTER._7W; continue;
case INSTR_MODWR11R8: REGISTER._11W %= REGISTER._8W; continue;
case INSTR_MODWR11R9: REGISTER._11W %= REGISTER._9W; continue;
case INSTR_MODWR11R10: REGISTER._11W %= REGISTER._10W; continue;
case INSTR_MODWR11R11: REGISTER._11W %= REGISTER._11W; continue;
case INSTR_MODWR11R12: REGISTER._11W %= REGISTER._12W; continue;
case INSTR_MODWR11RIP: REGISTER._11W %= REGISTER.IPW; continue;
case INSTR_MODWR11RSP: REGISTER._11W %= REGISTER.SPW; continue;
case INSTR_MODWR11RBP: REGISTER._11W %= REGISTER.BPW; continue;
case INSTR_MODWR12I: REGISTER._12W %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWR12RA: REGISTER._12W %= REGISTER.AW; continue;
case INSTR_MODWR12RB: REGISTER._12W %= REGISTER.BW; continue;
case INSTR_MODWR12RC: REGISTER._12W %= REGISTER.CW; continue;
case INSTR_MODWR12RD: REGISTER._12W %= REGISTER.DW; continue;
case INSTR_MODWR12R0: REGISTER._12W %= REGISTER._0W; continue;
case INSTR_MODWR12R1: REGISTER._12W %= REGISTER._1W; continue;
case INSTR_MODWR12R2: REGISTER._12W %= REGISTER._2W; continue;
case INSTR_MODWR12R3: REGISTER._12W %= REGISTER._3W; continue;
case INSTR_MODWR12R4: REGISTER._12W %= REGISTER._4W; continue;
case INSTR_MODWR12R5: REGISTER._12W %= REGISTER._5W; continue;
case INSTR_MODWR12R6: REGISTER._12W %= REGISTER._6W; continue;
case INSTR_MODWR12R7: REGISTER._12W %= REGISTER._7W; continue;
case INSTR_MODWR12R8: REGISTER._12W %= REGISTER._8W; continue;
case INSTR_MODWR12R9: REGISTER._12W %= REGISTER._9W; continue;
case INSTR_MODWR12R10: REGISTER._12W %= REGISTER._10W; continue;
case INSTR_MODWR12R11: REGISTER._12W %= REGISTER._11W; continue;
case INSTR_MODWR12R12: REGISTER._12W %= REGISTER._12W; continue;
case INSTR_MODWR12RIP: REGISTER._12W %= REGISTER.IPW; continue;
case INSTR_MODWR12RSP: REGISTER._12W %= REGISTER.SPW; continue;
case INSTR_MODWR12RBP: REGISTER._12W %= REGISTER.BPW; continue;
case INSTR_MODWRIPI: REGISTER.IPW %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWRIPRA: REGISTER.IPW %= REGISTER.AW; continue;
case INSTR_MODWRIPRB: REGISTER.IPW %= REGISTER.BW; continue;
case INSTR_MODWRIPRC: REGISTER.IPW %= REGISTER.CW; continue;
case INSTR_MODWRIPRD: REGISTER.IPW %= REGISTER.DW; continue;
case INSTR_MODWRIPR0: REGISTER.IPW %= REGISTER._0W; continue;
case INSTR_MODWRIPR1: REGISTER.IPW %= REGISTER._1W; continue;
case INSTR_MODWRIPR2: REGISTER.IPW %= REGISTER._2W; continue;
case INSTR_MODWRIPR3: REGISTER.IPW %= REGISTER._3W; continue;
case INSTR_MODWRIPR4: REGISTER.IPW %= REGISTER._4W; continue;
case INSTR_MODWRIPR5: REGISTER.IPW %= REGISTER._5W; continue;
case INSTR_MODWRIPR6: REGISTER.IPW %= REGISTER._6W; continue;
case INSTR_MODWRIPR7: REGISTER.IPW %= REGISTER._7W; continue;
case INSTR_MODWRIPR8: REGISTER.IPW %= REGISTER._8W; continue;
case INSTR_MODWRIPR9: REGISTER.IPW %= REGISTER._9W; continue;
case INSTR_MODWRIPR10: REGISTER.IPW %= REGISTER._10W; continue;
case INSTR_MODWRIPR11: REGISTER.IPW %= REGISTER._11W; continue;
case INSTR_MODWRIPR12: REGISTER.IPW %= REGISTER._12W; continue;
case INSTR_MODWRIPRIP: REGISTER.IPW %= REGISTER.IPW; continue;
case INSTR_MODWRIPRSP: REGISTER.IPW %= REGISTER.SPW; continue;
case INSTR_MODWRIPRBP: REGISTER.IPW %= REGISTER.BPW; continue;
case INSTR_MODWRSPI: REGISTER.SPW %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWRSPRA: REGISTER.SPW %= REGISTER.AW; continue;
case INSTR_MODWRSPRB: REGISTER.SPW %= REGISTER.BW; continue;
case INSTR_MODWRSPRC: REGISTER.SPW %= REGISTER.CW; continue;
case INSTR_MODWRSPRD: REGISTER.SPW %= REGISTER.DW; continue;
case INSTR_MODWRSPR0: REGISTER.SPW %= REGISTER._0W; continue;
case INSTR_MODWRSPR1: REGISTER.SPW %= REGISTER._1W; continue;
case INSTR_MODWRSPR2: REGISTER.SPW %= REGISTER._2W; continue;
case INSTR_MODWRSPR3: REGISTER.SPW %= REGISTER._3W; continue;
case INSTR_MODWRSPR4: REGISTER.SPW %= REGISTER._4W; continue;
case INSTR_MODWRSPR5: REGISTER.SPW %= REGISTER._5W; continue;
case INSTR_MODWRSPR6: REGISTER.SPW %= REGISTER._6W; continue;
case INSTR_MODWRSPR7: REGISTER.SPW %= REGISTER._7W; continue;
case INSTR_MODWRSPR8: REGISTER.SPW %= REGISTER._8W; continue;
case INSTR_MODWRSPR9: REGISTER.SPW %= REGISTER._9W; continue;
case INSTR_MODWRSPR10: REGISTER.SPW %= REGISTER._10W; continue;
case INSTR_MODWRSPR11: REGISTER.SPW %= REGISTER._11W; continue;
case INSTR_MODWRSPR12: REGISTER.SPW %= REGISTER._12W; continue;
case INSTR_MODWRSPRIP: REGISTER.SPW %= REGISTER.IPW; continue;
case INSTR_MODWRSPRSP: REGISTER.SPW %= REGISTER.SPW; continue;
case INSTR_MODWRSPRBP: REGISTER.SPW %= REGISTER.BPW; continue;
case INSTR_MODWRBPI: REGISTER.BPW %= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_MODWRBPRA: REGISTER.BPW %= REGISTER.AW; continue;
case INSTR_MODWRBPRB: REGISTER.BPW %= REGISTER.BW; continue;
case INSTR_MODWRBPRC: REGISTER.BPW %= REGISTER.CW; continue;
case INSTR_MODWRBPRD: REGISTER.BPW %= REGISTER.DW; continue;
case INSTR_MODWRBPR0: REGISTER.BPW %= REGISTER._0W; continue;
case INSTR_MODWRBPR1: REGISTER.BPW %= REGISTER._1W; continue;
case INSTR_MODWRBPR2: REGISTER.BPW %= REGISTER._2W; continue;
case INSTR_MODWRBPR3: REGISTER.BPW %= REGISTER._3W; continue;
case INSTR_MODWRBPR4: REGISTER.BPW %= REGISTER._4W; continue;
case INSTR_MODWRBPR5: REGISTER.BPW %= REGISTER._5W; continue;
case INSTR_MODWRBPR6: REGISTER.BPW %= REGISTER._6W; continue;
case INSTR_MODWRBPR7: REGISTER.BPW %= REGISTER._7W; continue;
case INSTR_MODWRBPR8: REGISTER.BPW %= REGISTER._8W; continue;
case INSTR_MODWRBPR9: REGISTER.BPW %= REGISTER._9W; continue;
case INSTR_MODWRBPR10: REGISTER.BPW %= REGISTER._10W; continue;
case INSTR_MODWRBPR11: REGISTER.BPW %= REGISTER._11W; continue;
case INSTR_MODWRBPR12: REGISTER.BPW %= REGISTER._12W; continue;
case INSTR_MODWRBPRIP: REGISTER.BPW %= REGISTER.IPW; continue;
case INSTR_MODWRBPRSP: REGISTER.BPW %= REGISTER.SPW; continue;
case INSTR_MODWRBPRBP: REGISTER.BPW %= REGISTER.BPW; continue;
case INSTR_MODBRAI: REGISTER.AB %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBRARA: REGISTER.AB %= REGISTER.AB; continue;
case INSTR_MODBRARB: REGISTER.AB %= REGISTER.BB; continue;
case INSTR_MODBRARC: REGISTER.AB %= REGISTER.CB; continue;
case INSTR_MODBRARD: REGISTER.AB %= REGISTER.DB; continue;
case INSTR_MODBRAR0: REGISTER.AB %= REGISTER._0B; continue;
case INSTR_MODBRAR1: REGISTER.AB %= REGISTER._1B; continue;
case INSTR_MODBRAR2: REGISTER.AB %= REGISTER._2B; continue;
case INSTR_MODBRAR3: REGISTER.AB %= REGISTER._3B; continue;
case INSTR_MODBRAR4: REGISTER.AB %= REGISTER._4B; continue;
case INSTR_MODBRAR5: REGISTER.AB %= REGISTER._5B; continue;
case INSTR_MODBRAR6: REGISTER.AB %= REGISTER._6B; continue;
case INSTR_MODBRAR7: REGISTER.AB %= REGISTER._7B; continue;
case INSTR_MODBRAR8: REGISTER.AB %= REGISTER._8B; continue;
case INSTR_MODBRAR9: REGISTER.AB %= REGISTER._9B; continue;
case INSTR_MODBRAR10: REGISTER.AB %= REGISTER._10B; continue;
case INSTR_MODBRAR11: REGISTER.AB %= REGISTER._11B; continue;
case INSTR_MODBRAR12: REGISTER.AB %= REGISTER._12B; continue;
case INSTR_MODBRARIP: REGISTER.AB %= REGISTER.IPB; continue;
case INSTR_MODBRARSP: REGISTER.AB %= REGISTER.SPB; continue;
case INSTR_MODBRARBP: REGISTER.AB %= REGISTER.BPB; continue;
case INSTR_MODBRBI: REGISTER.BB %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBRBRA: REGISTER.BB %= REGISTER.AB; continue;
case INSTR_MODBRBRB: REGISTER.BB %= REGISTER.BB; continue;
case INSTR_MODBRBRC: REGISTER.BB %= REGISTER.CB; continue;
case INSTR_MODBRBRD: REGISTER.BB %= REGISTER.DB; continue;
case INSTR_MODBRBR0: REGISTER.BB %= REGISTER._0B; continue;
case INSTR_MODBRBR1: REGISTER.BB %= REGISTER._1B; continue;
case INSTR_MODBRBR2: REGISTER.BB %= REGISTER._2B; continue;
case INSTR_MODBRBR3: REGISTER.BB %= REGISTER._3B; continue;
case INSTR_MODBRBR4: REGISTER.BB %= REGISTER._4B; continue;
case INSTR_MODBRBR5: REGISTER.BB %= REGISTER._5B; continue;
case INSTR_MODBRBR6: REGISTER.BB %= REGISTER._6B; continue;
case INSTR_MODBRBR7: REGISTER.BB %= REGISTER._7B; continue;
case INSTR_MODBRBR8: REGISTER.BB %= REGISTER._8B; continue;
case INSTR_MODBRBR9: REGISTER.BB %= REGISTER._9B; continue;
case INSTR_MODBRBR10: REGISTER.BB %= REGISTER._10B; continue;
case INSTR_MODBRBR11: REGISTER.BB %= REGISTER._11B; continue;
case INSTR_MODBRBR12: REGISTER.BB %= REGISTER._12B; continue;
case INSTR_MODBRBRIP: REGISTER.BB %= REGISTER.IPB; continue;
case INSTR_MODBRBRSP: REGISTER.BB %= REGISTER.SPB; continue;
case INSTR_MODBRBRBP: REGISTER.BB %= REGISTER.BPB; continue;
case INSTR_MODBRCI: REGISTER.CB %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBRCRA: REGISTER.CB %= REGISTER.AB; continue;
case INSTR_MODBRCRB: REGISTER.CB %= REGISTER.BB; continue;
case INSTR_MODBRCRC: REGISTER.CB %= REGISTER.CB; continue;
case INSTR_MODBRCRD: REGISTER.CB %= REGISTER.DB; continue;
case INSTR_MODBRCR0: REGISTER.CB %= REGISTER._0B; continue;
case INSTR_MODBRCR1: REGISTER.CB %= REGISTER._1B; continue;
case INSTR_MODBRCR2: REGISTER.CB %= REGISTER._2B; continue;
case INSTR_MODBRCR3: REGISTER.CB %= REGISTER._3B; continue;
case INSTR_MODBRCR4: REGISTER.CB %= REGISTER._4B; continue;
case INSTR_MODBRCR5: REGISTER.CB %= REGISTER._5B; continue;
case INSTR_MODBRCR6: REGISTER.CB %= REGISTER._6B; continue;
case INSTR_MODBRCR7: REGISTER.CB %= REGISTER._7B; continue;
case INSTR_MODBRCR8: REGISTER.CB %= REGISTER._8B; continue;
case INSTR_MODBRCR9: REGISTER.CB %= REGISTER._9B; continue;
case INSTR_MODBRCR10: REGISTER.CB %= REGISTER._10B; continue;
case INSTR_MODBRCR11: REGISTER.CB %= REGISTER._11B; continue;
case INSTR_MODBRCR12: REGISTER.CB %= REGISTER._12B; continue;
case INSTR_MODBRCRIP: REGISTER.CB %= REGISTER.IPB; continue;
case INSTR_MODBRCRSP: REGISTER.CB %= REGISTER.SPB; continue;
case INSTR_MODBRCRBP: REGISTER.CB %= REGISTER.BPB; continue;
case INSTR_MODBRDI: REGISTER.DB %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBRDRA: REGISTER.DB %= REGISTER.AB; continue;
case INSTR_MODBRDRB: REGISTER.DB %= REGISTER.BB; continue;
case INSTR_MODBRDRC: REGISTER.DB %= REGISTER.CB; continue;
case INSTR_MODBRDRD: REGISTER.DB %= REGISTER.DB; continue;
case INSTR_MODBRDR0: REGISTER.DB %= REGISTER._0B; continue;
case INSTR_MODBRDR1: REGISTER.DB %= REGISTER._1B; continue;
case INSTR_MODBRDR2: REGISTER.DB %= REGISTER._2B; continue;
case INSTR_MODBRDR3: REGISTER.DB %= REGISTER._3B; continue;
case INSTR_MODBRDR4: REGISTER.DB %= REGISTER._4B; continue;
case INSTR_MODBRDR5: REGISTER.DB %= REGISTER._5B; continue;
case INSTR_MODBRDR6: REGISTER.DB %= REGISTER._6B; continue;
case INSTR_MODBRDR7: REGISTER.DB %= REGISTER._7B; continue;
case INSTR_MODBRDR8: REGISTER.DB %= REGISTER._8B; continue;
case INSTR_MODBRDR9: REGISTER.DB %= REGISTER._9B; continue;
case INSTR_MODBRDR10: REGISTER.DB %= REGISTER._10B; continue;
case INSTR_MODBRDR11: REGISTER.DB %= REGISTER._11B; continue;
case INSTR_MODBRDR12: REGISTER.DB %= REGISTER._12B; continue;
case INSTR_MODBRDRIP: REGISTER.DB %= REGISTER.IPB; continue;
case INSTR_MODBRDRSP: REGISTER.DB %= REGISTER.SPB; continue;
case INSTR_MODBRDRBP: REGISTER.DB %= REGISTER.BPB; continue;
case INSTR_MODBR0I: REGISTER._0B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR0RA: REGISTER._0B %= REGISTER.AB; continue;
case INSTR_MODBR0RB: REGISTER._0B %= REGISTER.BB; continue;
case INSTR_MODBR0RC: REGISTER._0B %= REGISTER.CB; continue;
case INSTR_MODBR0RD: REGISTER._0B %= REGISTER.DB; continue;
case INSTR_MODBR0R0: REGISTER._0B %= REGISTER._0B; continue;
case INSTR_MODBR0R1: REGISTER._0B %= REGISTER._1B; continue;
case INSTR_MODBR0R2: REGISTER._0B %= REGISTER._2B; continue;
case INSTR_MODBR0R3: REGISTER._0B %= REGISTER._3B; continue;
case INSTR_MODBR0R4: REGISTER._0B %= REGISTER._4B; continue;
case INSTR_MODBR0R5: REGISTER._0B %= REGISTER._5B; continue;
case INSTR_MODBR0R6: REGISTER._0B %= REGISTER._6B; continue;
case INSTR_MODBR0R7: REGISTER._0B %= REGISTER._7B; continue;
case INSTR_MODBR0R8: REGISTER._0B %= REGISTER._8B; continue;
case INSTR_MODBR0R9: REGISTER._0B %= REGISTER._9B; continue;
case INSTR_MODBR0R10: REGISTER._0B %= REGISTER._10B; continue;
case INSTR_MODBR0R11: REGISTER._0B %= REGISTER._11B; continue;
case INSTR_MODBR0R12: REGISTER._0B %= REGISTER._12B; continue;
case INSTR_MODBR0RIP: REGISTER._0B %= REGISTER.IPB; continue;
case INSTR_MODBR0RSP: REGISTER._0B %= REGISTER.SPB; continue;
case INSTR_MODBR0RBP: REGISTER._0B %= REGISTER.BPB; continue;
case INSTR_MODBR1I: REGISTER._1B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR1RA: REGISTER._1B %= REGISTER.AB; continue;
case INSTR_MODBR1RB: REGISTER._1B %= REGISTER.BB; continue;
case INSTR_MODBR1RC: REGISTER._1B %= REGISTER.CB; continue;
case INSTR_MODBR1RD: REGISTER._1B %= REGISTER.DB; continue;
case INSTR_MODBR1R0: REGISTER._1B %= REGISTER._0B; continue;
case INSTR_MODBR1R1: REGISTER._1B %= REGISTER._1B; continue;
case INSTR_MODBR1R2: REGISTER._1B %= REGISTER._2B; continue;
case INSTR_MODBR1R3: REGISTER._1B %= REGISTER._3B; continue;
case INSTR_MODBR1R4: REGISTER._1B %= REGISTER._4B; continue;
case INSTR_MODBR1R5: REGISTER._1B %= REGISTER._5B; continue;
case INSTR_MODBR1R6: REGISTER._1B %= REGISTER._6B; continue;
case INSTR_MODBR1R7: REGISTER._1B %= REGISTER._7B; continue;
case INSTR_MODBR1R8: REGISTER._1B %= REGISTER._8B; continue;
case INSTR_MODBR1R9: REGISTER._1B %= REGISTER._9B; continue;
case INSTR_MODBR1R10: REGISTER._1B %= REGISTER._10B; continue;
case INSTR_MODBR1R11: REGISTER._1B %= REGISTER._11B; continue;
case INSTR_MODBR1R12: REGISTER._1B %= REGISTER._12B; continue;
case INSTR_MODBR1RIP: REGISTER._1B %= REGISTER.IPB; continue;
case INSTR_MODBR1RSP: REGISTER._1B %= REGISTER.SPB; continue;
case INSTR_MODBR1RBP: REGISTER._1B %= REGISTER.BPB; continue;
case INSTR_MODBR2I: REGISTER._2B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR2RA: REGISTER._2B %= REGISTER.AB; continue;
case INSTR_MODBR2RB: REGISTER._2B %= REGISTER.BB; continue;
case INSTR_MODBR2RC: REGISTER._2B %= REGISTER.CB; continue;
case INSTR_MODBR2RD: REGISTER._2B %= REGISTER.DB; continue;
case INSTR_MODBR2R0: REGISTER._2B %= REGISTER._0B; continue;
case INSTR_MODBR2R1: REGISTER._2B %= REGISTER._1B; continue;
case INSTR_MODBR2R2: REGISTER._2B %= REGISTER._2B; continue;
case INSTR_MODBR2R3: REGISTER._2B %= REGISTER._3B; continue;
case INSTR_MODBR2R4: REGISTER._2B %= REGISTER._4B; continue;
case INSTR_MODBR2R5: REGISTER._2B %= REGISTER._5B; continue;
case INSTR_MODBR2R6: REGISTER._2B %= REGISTER._6B; continue;
case INSTR_MODBR2R7: REGISTER._2B %= REGISTER._7B; continue;
case INSTR_MODBR2R8: REGISTER._2B %= REGISTER._8B; continue;
case INSTR_MODBR2R9: REGISTER._2B %= REGISTER._9B; continue;
case INSTR_MODBR2R10: REGISTER._2B %= REGISTER._10B; continue;
case INSTR_MODBR2R11: REGISTER._2B %= REGISTER._11B; continue;
case INSTR_MODBR2R12: REGISTER._2B %= REGISTER._12B; continue;
case INSTR_MODBR2RIP: REGISTER._2B %= REGISTER.IPB; continue;
case INSTR_MODBR2RSP: REGISTER._2B %= REGISTER.SPB; continue;
case INSTR_MODBR2RBP: REGISTER._2B %= REGISTER.BPB; continue;
case INSTR_MODBR3I: REGISTER._3B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR3RA: REGISTER._3B %= REGISTER.AB; continue;
case INSTR_MODBR3RB: REGISTER._3B %= REGISTER.BB; continue;
case INSTR_MODBR3RC: REGISTER._3B %= REGISTER.CB; continue;
case INSTR_MODBR3RD: REGISTER._3B %= REGISTER.DB; continue;
case INSTR_MODBR3R0: REGISTER._3B %= REGISTER._0B; continue;
case INSTR_MODBR3R1: REGISTER._3B %= REGISTER._1B; continue;
case INSTR_MODBR3R2: REGISTER._3B %= REGISTER._2B; continue;
case INSTR_MODBR3R3: REGISTER._3B %= REGISTER._3B; continue;
case INSTR_MODBR3R4: REGISTER._3B %= REGISTER._4B; continue;
case INSTR_MODBR3R5: REGISTER._3B %= REGISTER._5B; continue;
case INSTR_MODBR3R6: REGISTER._3B %= REGISTER._6B; continue;
case INSTR_MODBR3R7: REGISTER._3B %= REGISTER._7B; continue;
case INSTR_MODBR3R8: REGISTER._3B %= REGISTER._8B; continue;
case INSTR_MODBR3R9: REGISTER._3B %= REGISTER._9B; continue;
case INSTR_MODBR3R10: REGISTER._3B %= REGISTER._10B; continue;
case INSTR_MODBR3R11: REGISTER._3B %= REGISTER._11B; continue;
case INSTR_MODBR3R12: REGISTER._3B %= REGISTER._12B; continue;
case INSTR_MODBR3RIP: REGISTER._3B %= REGISTER.IPB; continue;
case INSTR_MODBR3RSP: REGISTER._3B %= REGISTER.SPB; continue;
case INSTR_MODBR3RBP: REGISTER._3B %= REGISTER.BPB; continue;
case INSTR_MODBR4I: REGISTER._4B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR4RA: REGISTER._4B %= REGISTER.AB; continue;
case INSTR_MODBR4RB: REGISTER._4B %= REGISTER.BB; continue;
case INSTR_MODBR4RC: REGISTER._4B %= REGISTER.CB; continue;
case INSTR_MODBR4RD: REGISTER._4B %= REGISTER.DB; continue;
case INSTR_MODBR4R0: REGISTER._4B %= REGISTER._0B; continue;
case INSTR_MODBR4R1: REGISTER._4B %= REGISTER._1B; continue;
case INSTR_MODBR4R2: REGISTER._4B %= REGISTER._2B; continue;
case INSTR_MODBR4R3: REGISTER._4B %= REGISTER._3B; continue;
case INSTR_MODBR4R4: REGISTER._4B %= REGISTER._4B; continue;
case INSTR_MODBR4R5: REGISTER._4B %= REGISTER._5B; continue;
case INSTR_MODBR4R6: REGISTER._4B %= REGISTER._6B; continue;
case INSTR_MODBR4R7: REGISTER._4B %= REGISTER._7B; continue;
case INSTR_MODBR4R8: REGISTER._4B %= REGISTER._8B; continue;
case INSTR_MODBR4R9: REGISTER._4B %= REGISTER._9B; continue;
case INSTR_MODBR4R10: REGISTER._4B %= REGISTER._10B; continue;
case INSTR_MODBR4R11: REGISTER._4B %= REGISTER._11B; continue;
case INSTR_MODBR4R12: REGISTER._4B %= REGISTER._12B; continue;
case INSTR_MODBR4RIP: REGISTER._4B %= REGISTER.IPB; continue;
case INSTR_MODBR4RSP: REGISTER._4B %= REGISTER.SPB; continue;
case INSTR_MODBR4RBP: REGISTER._4B %= REGISTER.BPB; continue;
case INSTR_MODBR5I: REGISTER._5B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR5RA: REGISTER._5B %= REGISTER.AB; continue;
case INSTR_MODBR5RB: REGISTER._5B %= REGISTER.BB; continue;
case INSTR_MODBR5RC: REGISTER._5B %= REGISTER.CB; continue;
case INSTR_MODBR5RD: REGISTER._5B %= REGISTER.DB; continue;
case INSTR_MODBR5R0: REGISTER._5B %= REGISTER._0B; continue;
case INSTR_MODBR5R1: REGISTER._5B %= REGISTER._1B; continue;
case INSTR_MODBR5R2: REGISTER._5B %= REGISTER._2B; continue;
case INSTR_MODBR5R3: REGISTER._5B %= REGISTER._3B; continue;
case INSTR_MODBR5R4: REGISTER._5B %= REGISTER._4B; continue;
case INSTR_MODBR5R5: REGISTER._5B %= REGISTER._5B; continue;
case INSTR_MODBR5R6: REGISTER._5B %= REGISTER._6B; continue;
case INSTR_MODBR5R7: REGISTER._5B %= REGISTER._7B; continue;
case INSTR_MODBR5R8: REGISTER._5B %= REGISTER._8B; continue;
case INSTR_MODBR5R9: REGISTER._5B %= REGISTER._9B; continue;
case INSTR_MODBR5R10: REGISTER._5B %= REGISTER._10B; continue;
case INSTR_MODBR5R11: REGISTER._5B %= REGISTER._11B; continue;
case INSTR_MODBR5R12: REGISTER._5B %= REGISTER._12B; continue;
case INSTR_MODBR5RIP: REGISTER._5B %= REGISTER.IPB; continue;
case INSTR_MODBR5RSP: REGISTER._5B %= REGISTER.SPB; continue;
case INSTR_MODBR5RBP: REGISTER._5B %= REGISTER.BPB; continue;
case INSTR_MODBR6I: REGISTER._6B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR6RA: REGISTER._6B %= REGISTER.AB; continue;
case INSTR_MODBR6RB: REGISTER._6B %= REGISTER.BB; continue;
case INSTR_MODBR6RC: REGISTER._6B %= REGISTER.CB; continue;
case INSTR_MODBR6RD: REGISTER._6B %= REGISTER.DB; continue;
case INSTR_MODBR6R0: REGISTER._6B %= REGISTER._0B; continue;
case INSTR_MODBR6R1: REGISTER._6B %= REGISTER._1B; continue;
case INSTR_MODBR6R2: REGISTER._6B %= REGISTER._2B; continue;
case INSTR_MODBR6R3: REGISTER._6B %= REGISTER._3B; continue;
case INSTR_MODBR6R4: REGISTER._6B %= REGISTER._4B; continue;
case INSTR_MODBR6R5: REGISTER._6B %= REGISTER._5B; continue;
case INSTR_MODBR6R6: REGISTER._6B %= REGISTER._6B; continue;
case INSTR_MODBR6R7: REGISTER._6B %= REGISTER._7B; continue;
case INSTR_MODBR6R8: REGISTER._6B %= REGISTER._8B; continue;
case INSTR_MODBR6R9: REGISTER._6B %= REGISTER._9B; continue;
case INSTR_MODBR6R10: REGISTER._6B %= REGISTER._10B; continue;
case INSTR_MODBR6R11: REGISTER._6B %= REGISTER._11B; continue;
case INSTR_MODBR6R12: REGISTER._6B %= REGISTER._12B; continue;
case INSTR_MODBR6RIP: REGISTER._6B %= REGISTER.IPB; continue;
case INSTR_MODBR6RSP: REGISTER._6B %= REGISTER.SPB; continue;
case INSTR_MODBR6RBP: REGISTER._6B %= REGISTER.BPB; continue;
case INSTR_MODBR7I: REGISTER._7B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR7RA: REGISTER._7B %= REGISTER.AB; continue;
case INSTR_MODBR7RB: REGISTER._7B %= REGISTER.BB; continue;
case INSTR_MODBR7RC: REGISTER._7B %= REGISTER.CB; continue;
case INSTR_MODBR7RD: REGISTER._7B %= REGISTER.DB; continue;
case INSTR_MODBR7R0: REGISTER._7B %= REGISTER._0B; continue;
case INSTR_MODBR7R1: REGISTER._7B %= REGISTER._1B; continue;
case INSTR_MODBR7R2: REGISTER._7B %= REGISTER._2B; continue;
case INSTR_MODBR7R3: REGISTER._7B %= REGISTER._3B; continue;
case INSTR_MODBR7R4: REGISTER._7B %= REGISTER._4B; continue;
case INSTR_MODBR7R5: REGISTER._7B %= REGISTER._5B; continue;
case INSTR_MODBR7R6: REGISTER._7B %= REGISTER._6B; continue;
case INSTR_MODBR7R7: REGISTER._7B %= REGISTER._7B; continue;
case INSTR_MODBR7R8: REGISTER._7B %= REGISTER._8B; continue;
case INSTR_MODBR7R9: REGISTER._7B %= REGISTER._9B; continue;
case INSTR_MODBR7R10: REGISTER._7B %= REGISTER._10B; continue;
case INSTR_MODBR7R11: REGISTER._7B %= REGISTER._11B; continue;
case INSTR_MODBR7R12: REGISTER._7B %= REGISTER._12B; continue;
case INSTR_MODBR7RIP: REGISTER._7B %= REGISTER.IPB; continue;
case INSTR_MODBR7RSP: REGISTER._7B %= REGISTER.SPB; continue;
case INSTR_MODBR7RBP: REGISTER._7B %= REGISTER.BPB; continue;
case INSTR_MODBR8I: REGISTER._8B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR8RA: REGISTER._8B %= REGISTER.AB; continue;
case INSTR_MODBR8RB: REGISTER._8B %= REGISTER.BB; continue;
case INSTR_MODBR8RC: REGISTER._8B %= REGISTER.CB; continue;
case INSTR_MODBR8RD: REGISTER._8B %= REGISTER.DB; continue;
case INSTR_MODBR8R0: REGISTER._8B %= REGISTER._0B; continue;
case INSTR_MODBR8R1: REGISTER._8B %= REGISTER._1B; continue;
case INSTR_MODBR8R2: REGISTER._8B %= REGISTER._2B; continue;
case INSTR_MODBR8R3: REGISTER._8B %= REGISTER._3B; continue;
case INSTR_MODBR8R4: REGISTER._8B %= REGISTER._4B; continue;
case INSTR_MODBR8R5: REGISTER._8B %= REGISTER._5B; continue;
case INSTR_MODBR8R6: REGISTER._8B %= REGISTER._6B; continue;
case INSTR_MODBR8R7: REGISTER._8B %= REGISTER._7B; continue;
case INSTR_MODBR8R8: REGISTER._8B %= REGISTER._8B; continue;
case INSTR_MODBR8R9: REGISTER._8B %= REGISTER._9B; continue;
case INSTR_MODBR8R10: REGISTER._8B %= REGISTER._10B; continue;
case INSTR_MODBR8R11: REGISTER._8B %= REGISTER._11B; continue;
case INSTR_MODBR8R12: REGISTER._8B %= REGISTER._12B; continue;
case INSTR_MODBR8RIP: REGISTER._8B %= REGISTER.IPB; continue;
case INSTR_MODBR8RSP: REGISTER._8B %= REGISTER.SPB; continue;
case INSTR_MODBR8RBP: REGISTER._8B %= REGISTER.BPB; continue;
case INSTR_MODBR9I: REGISTER._9B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR9RA: REGISTER._9B %= REGISTER.AB; continue;
case INSTR_MODBR9RB: REGISTER._9B %= REGISTER.BB; continue;
case INSTR_MODBR9RC: REGISTER._9B %= REGISTER.CB; continue;
case INSTR_MODBR9RD: REGISTER._9B %= REGISTER.DB; continue;
case INSTR_MODBR9R0: REGISTER._9B %= REGISTER._0B; continue;
case INSTR_MODBR9R1: REGISTER._9B %= REGISTER._1B; continue;
case INSTR_MODBR9R2: REGISTER._9B %= REGISTER._2B; continue;
case INSTR_MODBR9R3: REGISTER._9B %= REGISTER._3B; continue;
case INSTR_MODBR9R4: REGISTER._9B %= REGISTER._4B; continue;
case INSTR_MODBR9R5: REGISTER._9B %= REGISTER._5B; continue;
case INSTR_MODBR9R6: REGISTER._9B %= REGISTER._6B; continue;
case INSTR_MODBR9R7: REGISTER._9B %= REGISTER._7B; continue;
case INSTR_MODBR9R8: REGISTER._9B %= REGISTER._8B; continue;
case INSTR_MODBR9R9: REGISTER._9B %= REGISTER._9B; continue;
case INSTR_MODBR9R10: REGISTER._9B %= REGISTER._10B; continue;
case INSTR_MODBR9R11: REGISTER._9B %= REGISTER._11B; continue;
case INSTR_MODBR9R12: REGISTER._9B %= REGISTER._12B; continue;
case INSTR_MODBR9RIP: REGISTER._9B %= REGISTER.IPB; continue;
case INSTR_MODBR9RSP: REGISTER._9B %= REGISTER.SPB; continue;
case INSTR_MODBR9RBP: REGISTER._9B %= REGISTER.BPB; continue;
case INSTR_MODBR10I: REGISTER._10B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR10RA: REGISTER._10B %= REGISTER.AB; continue;
case INSTR_MODBR10RB: REGISTER._10B %= REGISTER.BB; continue;
case INSTR_MODBR10RC: REGISTER._10B %= REGISTER.CB; continue;
case INSTR_MODBR10RD: REGISTER._10B %= REGISTER.DB; continue;
case INSTR_MODBR10R0: REGISTER._10B %= REGISTER._0B; continue;
case INSTR_MODBR10R1: REGISTER._10B %= REGISTER._1B; continue;
case INSTR_MODBR10R2: REGISTER._10B %= REGISTER._2B; continue;
case INSTR_MODBR10R3: REGISTER._10B %= REGISTER._3B; continue;
case INSTR_MODBR10R4: REGISTER._10B %= REGISTER._4B; continue;
case INSTR_MODBR10R5: REGISTER._10B %= REGISTER._5B; continue;
case INSTR_MODBR10R6: REGISTER._10B %= REGISTER._6B; continue;
case INSTR_MODBR10R7: REGISTER._10B %= REGISTER._7B; continue;
case INSTR_MODBR10R8: REGISTER._10B %= REGISTER._8B; continue;
case INSTR_MODBR10R9: REGISTER._10B %= REGISTER._9B; continue;
case INSTR_MODBR10R10: REGISTER._10B %= REGISTER._10B; continue;
case INSTR_MODBR10R11: REGISTER._10B %= REGISTER._11B; continue;
case INSTR_MODBR10R12: REGISTER._10B %= REGISTER._12B; continue;
case INSTR_MODBR10RIP: REGISTER._10B %= REGISTER.IPB; continue;
case INSTR_MODBR10RSP: REGISTER._10B %= REGISTER.SPB; continue;
case INSTR_MODBR10RBP: REGISTER._10B %= REGISTER.BPB; continue;
case INSTR_MODBR11I: REGISTER._11B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR11RA: REGISTER._11B %= REGISTER.AB; continue;
case INSTR_MODBR11RB: REGISTER._11B %= REGISTER.BB; continue;
case INSTR_MODBR11RC: REGISTER._11B %= REGISTER.CB; continue;
case INSTR_MODBR11RD: REGISTER._11B %= REGISTER.DB; continue;
case INSTR_MODBR11R0: REGISTER._11B %= REGISTER._0B; continue;
case INSTR_MODBR11R1: REGISTER._11B %= REGISTER._1B; continue;
case INSTR_MODBR11R2: REGISTER._11B %= REGISTER._2B; continue;
case INSTR_MODBR11R3: REGISTER._11B %= REGISTER._3B; continue;
case INSTR_MODBR11R4: REGISTER._11B %= REGISTER._4B; continue;
case INSTR_MODBR11R5: REGISTER._11B %= REGISTER._5B; continue;
case INSTR_MODBR11R6: REGISTER._11B %= REGISTER._6B; continue;
case INSTR_MODBR11R7: REGISTER._11B %= REGISTER._7B; continue;
case INSTR_MODBR11R8: REGISTER._11B %= REGISTER._8B; continue;
case INSTR_MODBR11R9: REGISTER._11B %= REGISTER._9B; continue;
case INSTR_MODBR11R10: REGISTER._11B %= REGISTER._10B; continue;
case INSTR_MODBR11R11: REGISTER._11B %= REGISTER._11B; continue;
case INSTR_MODBR11R12: REGISTER._11B %= REGISTER._12B; continue;
case INSTR_MODBR11RIP: REGISTER._11B %= REGISTER.IPB; continue;
case INSTR_MODBR11RSP: REGISTER._11B %= REGISTER.SPB; continue;
case INSTR_MODBR11RBP: REGISTER._11B %= REGISTER.BPB; continue;
case INSTR_MODBR12I: REGISTER._12B %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBR12RA: REGISTER._12B %= REGISTER.AB; continue;
case INSTR_MODBR12RB: REGISTER._12B %= REGISTER.BB; continue;
case INSTR_MODBR12RC: REGISTER._12B %= REGISTER.CB; continue;
case INSTR_MODBR12RD: REGISTER._12B %= REGISTER.DB; continue;
case INSTR_MODBR12R0: REGISTER._12B %= REGISTER._0B; continue;
case INSTR_MODBR12R1: REGISTER._12B %= REGISTER._1B; continue;
case INSTR_MODBR12R2: REGISTER._12B %= REGISTER._2B; continue;
case INSTR_MODBR12R3: REGISTER._12B %= REGISTER._3B; continue;
case INSTR_MODBR12R4: REGISTER._12B %= REGISTER._4B; continue;
case INSTR_MODBR12R5: REGISTER._12B %= REGISTER._5B; continue;
case INSTR_MODBR12R6: REGISTER._12B %= REGISTER._6B; continue;
case INSTR_MODBR12R7: REGISTER._12B %= REGISTER._7B; continue;
case INSTR_MODBR12R8: REGISTER._12B %= REGISTER._8B; continue;
case INSTR_MODBR12R9: REGISTER._12B %= REGISTER._9B; continue;
case INSTR_MODBR12R10: REGISTER._12B %= REGISTER._10B; continue;
case INSTR_MODBR12R11: REGISTER._12B %= REGISTER._11B; continue;
case INSTR_MODBR12R12: REGISTER._12B %= REGISTER._12B; continue;
case INSTR_MODBR12RIP: REGISTER._12B %= REGISTER.IPB; continue;
case INSTR_MODBR12RSP: REGISTER._12B %= REGISTER.SPB; continue;
case INSTR_MODBR12RBP: REGISTER._12B %= REGISTER.BPB; continue;
case INSTR_MODBRIPI: REGISTER.IPB %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBRIPRA: REGISTER.IPB %= REGISTER.AB; continue;
case INSTR_MODBRIPRB: REGISTER.IPB %= REGISTER.BB; continue;
case INSTR_MODBRIPRC: REGISTER.IPB %= REGISTER.CB; continue;
case INSTR_MODBRIPRD: REGISTER.IPB %= REGISTER.DB; continue;
case INSTR_MODBRIPR0: REGISTER.IPB %= REGISTER._0B; continue;
case INSTR_MODBRIPR1: REGISTER.IPB %= REGISTER._1B; continue;
case INSTR_MODBRIPR2: REGISTER.IPB %= REGISTER._2B; continue;
case INSTR_MODBRIPR3: REGISTER.IPB %= REGISTER._3B; continue;
case INSTR_MODBRIPR4: REGISTER.IPB %= REGISTER._4B; continue;
case INSTR_MODBRIPR5: REGISTER.IPB %= REGISTER._5B; continue;
case INSTR_MODBRIPR6: REGISTER.IPB %= REGISTER._6B; continue;
case INSTR_MODBRIPR7: REGISTER.IPB %= REGISTER._7B; continue;
case INSTR_MODBRIPR8: REGISTER.IPB %= REGISTER._8B; continue;
case INSTR_MODBRIPR9: REGISTER.IPB %= REGISTER._9B; continue;
case INSTR_MODBRIPR10: REGISTER.IPB %= REGISTER._10B; continue;
case INSTR_MODBRIPR11: REGISTER.IPB %= REGISTER._11B; continue;
case INSTR_MODBRIPR12: REGISTER.IPB %= REGISTER._12B; continue;
case INSTR_MODBRIPRIP: REGISTER.IPB %= REGISTER.IPB; continue;
case INSTR_MODBRIPRSP: REGISTER.IPB %= REGISTER.SPB; continue;
case INSTR_MODBRIPRBP: REGISTER.IPB %= REGISTER.BPB; continue;
case INSTR_MODBRSPI: REGISTER.SPB %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBRSPRA: REGISTER.SPB %= REGISTER.AB; continue;
case INSTR_MODBRSPRB: REGISTER.SPB %= REGISTER.BB; continue;
case INSTR_MODBRSPRC: REGISTER.SPB %= REGISTER.CB; continue;
case INSTR_MODBRSPRD: REGISTER.SPB %= REGISTER.DB; continue;
case INSTR_MODBRSPR0: REGISTER.SPB %= REGISTER._0B; continue;
case INSTR_MODBRSPR1: REGISTER.SPB %= REGISTER._1B; continue;
case INSTR_MODBRSPR2: REGISTER.SPB %= REGISTER._2B; continue;
case INSTR_MODBRSPR3: REGISTER.SPB %= REGISTER._3B; continue;
case INSTR_MODBRSPR4: REGISTER.SPB %= REGISTER._4B; continue;
case INSTR_MODBRSPR5: REGISTER.SPB %= REGISTER._5B; continue;
case INSTR_MODBRSPR6: REGISTER.SPB %= REGISTER._6B; continue;
case INSTR_MODBRSPR7: REGISTER.SPB %= REGISTER._7B; continue;
case INSTR_MODBRSPR8: REGISTER.SPB %= REGISTER._8B; continue;
case INSTR_MODBRSPR9: REGISTER.SPB %= REGISTER._9B; continue;
case INSTR_MODBRSPR10: REGISTER.SPB %= REGISTER._10B; continue;
case INSTR_MODBRSPR11: REGISTER.SPB %= REGISTER._11B; continue;
case INSTR_MODBRSPR12: REGISTER.SPB %= REGISTER._12B; continue;
case INSTR_MODBRSPRIP: REGISTER.SPB %= REGISTER.IPB; continue;
case INSTR_MODBRSPRSP: REGISTER.SPB %= REGISTER.SPB; continue;
case INSTR_MODBRSPRBP: REGISTER.SPB %= REGISTER.BPB; continue;
case INSTR_MODBRBPI: REGISTER.BPB %= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_MODBRBPRA: REGISTER.BPB %= REGISTER.AB; continue;
case INSTR_MODBRBPRB: REGISTER.BPB %= REGISTER.BB; continue;
case INSTR_MODBRBPRC: REGISTER.BPB %= REGISTER.CB; continue;
case INSTR_MODBRBPRD: REGISTER.BPB %= REGISTER.DB; continue;
case INSTR_MODBRBPR0: REGISTER.BPB %= REGISTER._0B; continue;
case INSTR_MODBRBPR1: REGISTER.BPB %= REGISTER._1B; continue;
case INSTR_MODBRBPR2: REGISTER.BPB %= REGISTER._2B; continue;
case INSTR_MODBRBPR3: REGISTER.BPB %= REGISTER._3B; continue;
case INSTR_MODBRBPR4: REGISTER.BPB %= REGISTER._4B; continue;
case INSTR_MODBRBPR5: REGISTER.BPB %= REGISTER._5B; continue;
case INSTR_MODBRBPR6: REGISTER.BPB %= REGISTER._6B; continue;
case INSTR_MODBRBPR7: REGISTER.BPB %= REGISTER._7B; continue;
case INSTR_MODBRBPR8: REGISTER.BPB %= REGISTER._8B; continue;
case INSTR_MODBRBPR9: REGISTER.BPB %= REGISTER._9B; continue;
case INSTR_MODBRBPR10: REGISTER.BPB %= REGISTER._10B; continue;
case INSTR_MODBRBPR11: REGISTER.BPB %= REGISTER._11B; continue;
case INSTR_MODBRBPR12: REGISTER.BPB %= REGISTER._12B; continue;
case INSTR_MODBRBPRIP: REGISTER.BPB %= REGISTER.IPB; continue;
case INSTR_MODBRBPRSP: REGISTER.BPB %= REGISTER.SPB; continue;
case INSTR_MODBRBPRBP: REGISTER.BPB %= REGISTER.BPB; continue;
case INSTR_ORQRAI: REGISTER.AQ |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQRARA: REGISTER.AQ |= REGISTER.AQ; continue;
case INSTR_ORQRARB: REGISTER.AQ |= REGISTER.BQ; continue;
case INSTR_ORQRARC: REGISTER.AQ |= REGISTER.CQ; continue;
case INSTR_ORQRARD: REGISTER.AQ |= REGISTER.DQ; continue;
case INSTR_ORQRAR0: REGISTER.AQ |= REGISTER._0Q; continue;
case INSTR_ORQRAR1: REGISTER.AQ |= REGISTER._1Q; continue;
case INSTR_ORQRAR2: REGISTER.AQ |= REGISTER._2Q; continue;
case INSTR_ORQRAR3: REGISTER.AQ |= REGISTER._3Q; continue;
case INSTR_ORQRAR4: REGISTER.AQ |= REGISTER._4Q; continue;
case INSTR_ORQRAR5: REGISTER.AQ |= REGISTER._5Q; continue;
case INSTR_ORQRAR6: REGISTER.AQ |= REGISTER._6Q; continue;
case INSTR_ORQRAR7: REGISTER.AQ |= REGISTER._7Q; continue;
case INSTR_ORQRAR8: REGISTER.AQ |= REGISTER._8Q; continue;
case INSTR_ORQRAR9: REGISTER.AQ |= REGISTER._9Q; continue;
case INSTR_ORQRAR10: REGISTER.AQ |= REGISTER._10Q; continue;
case INSTR_ORQRAR11: REGISTER.AQ |= REGISTER._11Q; continue;
case INSTR_ORQRAR12: REGISTER.AQ |= REGISTER._12Q; continue;
case INSTR_ORQRARIP: REGISTER.AQ |= REGISTER.IPQ; continue;
case INSTR_ORQRARSP: REGISTER.AQ |= REGISTER.SPQ; continue;
case INSTR_ORQRARBP: REGISTER.AQ |= REGISTER.BPQ; continue;
case INSTR_ORQRBI: REGISTER.BQ |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQRBRA: REGISTER.BQ |= REGISTER.AQ; continue;
case INSTR_ORQRBRB: REGISTER.BQ |= REGISTER.BQ; continue;
case INSTR_ORQRBRC: REGISTER.BQ |= REGISTER.CQ; continue;
case INSTR_ORQRBRD: REGISTER.BQ |= REGISTER.DQ; continue;
case INSTR_ORQRBR0: REGISTER.BQ |= REGISTER._0Q; continue;
case INSTR_ORQRBR1: REGISTER.BQ |= REGISTER._1Q; continue;
case INSTR_ORQRBR2: REGISTER.BQ |= REGISTER._2Q; continue;
case INSTR_ORQRBR3: REGISTER.BQ |= REGISTER._3Q; continue;
case INSTR_ORQRBR4: REGISTER.BQ |= REGISTER._4Q; continue;
case INSTR_ORQRBR5: REGISTER.BQ |= REGISTER._5Q; continue;
case INSTR_ORQRBR6: REGISTER.BQ |= REGISTER._6Q; continue;
case INSTR_ORQRBR7: REGISTER.BQ |= REGISTER._7Q; continue;
case INSTR_ORQRBR8: REGISTER.BQ |= REGISTER._8Q; continue;
case INSTR_ORQRBR9: REGISTER.BQ |= REGISTER._9Q; continue;
case INSTR_ORQRBR10: REGISTER.BQ |= REGISTER._10Q; continue;
case INSTR_ORQRBR11: REGISTER.BQ |= REGISTER._11Q; continue;
case INSTR_ORQRBR12: REGISTER.BQ |= REGISTER._12Q; continue;
case INSTR_ORQRBRIP: REGISTER.BQ |= REGISTER.IPQ; continue;
case INSTR_ORQRBRSP: REGISTER.BQ |= REGISTER.SPQ; continue;
case INSTR_ORQRBRBP: REGISTER.BQ |= REGISTER.BPQ; continue;
case INSTR_ORQRCI: REGISTER.CQ |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQRCRA: REGISTER.CQ |= REGISTER.AQ; continue;
case INSTR_ORQRCRB: REGISTER.CQ |= REGISTER.BQ; continue;
case INSTR_ORQRCRC: REGISTER.CQ |= REGISTER.CQ; continue;
case INSTR_ORQRCRD: REGISTER.CQ |= REGISTER.DQ; continue;
case INSTR_ORQRCR0: REGISTER.CQ |= REGISTER._0Q; continue;
case INSTR_ORQRCR1: REGISTER.CQ |= REGISTER._1Q; continue;
case INSTR_ORQRCR2: REGISTER.CQ |= REGISTER._2Q; continue;
case INSTR_ORQRCR3: REGISTER.CQ |= REGISTER._3Q; continue;
case INSTR_ORQRCR4: REGISTER.CQ |= REGISTER._4Q; continue;
case INSTR_ORQRCR5: REGISTER.CQ |= REGISTER._5Q; continue;
case INSTR_ORQRCR6: REGISTER.CQ |= REGISTER._6Q; continue;
case INSTR_ORQRCR7: REGISTER.CQ |= REGISTER._7Q; continue;
case INSTR_ORQRCR8: REGISTER.CQ |= REGISTER._8Q; continue;
case INSTR_ORQRCR9: REGISTER.CQ |= REGISTER._9Q; continue;
case INSTR_ORQRCR10: REGISTER.CQ |= REGISTER._10Q; continue;
case INSTR_ORQRCR11: REGISTER.CQ |= REGISTER._11Q; continue;
case INSTR_ORQRCR12: REGISTER.CQ |= REGISTER._12Q; continue;
case INSTR_ORQRCRIP: REGISTER.CQ |= REGISTER.IPQ; continue;
case INSTR_ORQRCRSP: REGISTER.CQ |= REGISTER.SPQ; continue;
case INSTR_ORQRCRBP: REGISTER.CQ |= REGISTER.BPQ; continue;
case INSTR_ORQRDI: REGISTER.DQ |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQRDRA: REGISTER.DQ |= REGISTER.AQ; continue;
case INSTR_ORQRDRB: REGISTER.DQ |= REGISTER.BQ; continue;
case INSTR_ORQRDRC: REGISTER.DQ |= REGISTER.CQ; continue;
case INSTR_ORQRDRD: REGISTER.DQ |= REGISTER.DQ; continue;
case INSTR_ORQRDR0: REGISTER.DQ |= REGISTER._0Q; continue;
case INSTR_ORQRDR1: REGISTER.DQ |= REGISTER._1Q; continue;
case INSTR_ORQRDR2: REGISTER.DQ |= REGISTER._2Q; continue;
case INSTR_ORQRDR3: REGISTER.DQ |= REGISTER._3Q; continue;
case INSTR_ORQRDR4: REGISTER.DQ |= REGISTER._4Q; continue;
case INSTR_ORQRDR5: REGISTER.DQ |= REGISTER._5Q; continue;
case INSTR_ORQRDR6: REGISTER.DQ |= REGISTER._6Q; continue;
case INSTR_ORQRDR7: REGISTER.DQ |= REGISTER._7Q; continue;
case INSTR_ORQRDR8: REGISTER.DQ |= REGISTER._8Q; continue;
case INSTR_ORQRDR9: REGISTER.DQ |= REGISTER._9Q; continue;
case INSTR_ORQRDR10: REGISTER.DQ |= REGISTER._10Q; continue;
case INSTR_ORQRDR11: REGISTER.DQ |= REGISTER._11Q; continue;
case INSTR_ORQRDR12: REGISTER.DQ |= REGISTER._12Q; continue;
case INSTR_ORQRDRIP: REGISTER.DQ |= REGISTER.IPQ; continue;
case INSTR_ORQRDRSP: REGISTER.DQ |= REGISTER.SPQ; continue;
case INSTR_ORQRDRBP: REGISTER.DQ |= REGISTER.BPQ; continue;
case INSTR_ORQR0I: REGISTER._0Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR0RA: REGISTER._0Q |= REGISTER.AQ; continue;
case INSTR_ORQR0RB: REGISTER._0Q |= REGISTER.BQ; continue;
case INSTR_ORQR0RC: REGISTER._0Q |= REGISTER.CQ; continue;
case INSTR_ORQR0RD: REGISTER._0Q |= REGISTER.DQ; continue;
case INSTR_ORQR0R0: REGISTER._0Q |= REGISTER._0Q; continue;
case INSTR_ORQR0R1: REGISTER._0Q |= REGISTER._1Q; continue;
case INSTR_ORQR0R2: REGISTER._0Q |= REGISTER._2Q; continue;
case INSTR_ORQR0R3: REGISTER._0Q |= REGISTER._3Q; continue;
case INSTR_ORQR0R4: REGISTER._0Q |= REGISTER._4Q; continue;
case INSTR_ORQR0R5: REGISTER._0Q |= REGISTER._5Q; continue;
case INSTR_ORQR0R6: REGISTER._0Q |= REGISTER._6Q; continue;
case INSTR_ORQR0R7: REGISTER._0Q |= REGISTER._7Q; continue;
case INSTR_ORQR0R8: REGISTER._0Q |= REGISTER._8Q; continue;
case INSTR_ORQR0R9: REGISTER._0Q |= REGISTER._9Q; continue;
case INSTR_ORQR0R10: REGISTER._0Q |= REGISTER._10Q; continue;
case INSTR_ORQR0R11: REGISTER._0Q |= REGISTER._11Q; continue;
case INSTR_ORQR0R12: REGISTER._0Q |= REGISTER._12Q; continue;
case INSTR_ORQR0RIP: REGISTER._0Q |= REGISTER.IPQ; continue;
case INSTR_ORQR0RSP: REGISTER._0Q |= REGISTER.SPQ; continue;
case INSTR_ORQR0RBP: REGISTER._0Q |= REGISTER.BPQ; continue;
case INSTR_ORQR1I: REGISTER._1Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR1RA: REGISTER._1Q |= REGISTER.AQ; continue;
case INSTR_ORQR1RB: REGISTER._1Q |= REGISTER.BQ; continue;
case INSTR_ORQR1RC: REGISTER._1Q |= REGISTER.CQ; continue;
case INSTR_ORQR1RD: REGISTER._1Q |= REGISTER.DQ; continue;
case INSTR_ORQR1R0: REGISTER._1Q |= REGISTER._0Q; continue;
case INSTR_ORQR1R1: REGISTER._1Q |= REGISTER._1Q; continue;
case INSTR_ORQR1R2: REGISTER._1Q |= REGISTER._2Q; continue;
case INSTR_ORQR1R3: REGISTER._1Q |= REGISTER._3Q; continue;
case INSTR_ORQR1R4: REGISTER._1Q |= REGISTER._4Q; continue;
case INSTR_ORQR1R5: REGISTER._1Q |= REGISTER._5Q; continue;
case INSTR_ORQR1R6: REGISTER._1Q |= REGISTER._6Q; continue;
case INSTR_ORQR1R7: REGISTER._1Q |= REGISTER._7Q; continue;
case INSTR_ORQR1R8: REGISTER._1Q |= REGISTER._8Q; continue;
case INSTR_ORQR1R9: REGISTER._1Q |= REGISTER._9Q; continue;
case INSTR_ORQR1R10: REGISTER._1Q |= REGISTER._10Q; continue;
case INSTR_ORQR1R11: REGISTER._1Q |= REGISTER._11Q; continue;
case INSTR_ORQR1R12: REGISTER._1Q |= REGISTER._12Q; continue;
case INSTR_ORQR1RIP: REGISTER._1Q |= REGISTER.IPQ; continue;
case INSTR_ORQR1RSP: REGISTER._1Q |= REGISTER.SPQ; continue;
case INSTR_ORQR1RBP: REGISTER._1Q |= REGISTER.BPQ; continue;
case INSTR_ORQR2I: REGISTER._2Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR2RA: REGISTER._2Q |= REGISTER.AQ; continue;
case INSTR_ORQR2RB: REGISTER._2Q |= REGISTER.BQ; continue;
case INSTR_ORQR2RC: REGISTER._2Q |= REGISTER.CQ; continue;
case INSTR_ORQR2RD: REGISTER._2Q |= REGISTER.DQ; continue;
case INSTR_ORQR2R0: REGISTER._2Q |= REGISTER._0Q; continue;
case INSTR_ORQR2R1: REGISTER._2Q |= REGISTER._1Q; continue;
case INSTR_ORQR2R2: REGISTER._2Q |= REGISTER._2Q; continue;
case INSTR_ORQR2R3: REGISTER._2Q |= REGISTER._3Q; continue;
case INSTR_ORQR2R4: REGISTER._2Q |= REGISTER._4Q; continue;
case INSTR_ORQR2R5: REGISTER._2Q |= REGISTER._5Q; continue;
case INSTR_ORQR2R6: REGISTER._2Q |= REGISTER._6Q; continue;
case INSTR_ORQR2R7: REGISTER._2Q |= REGISTER._7Q; continue;
case INSTR_ORQR2R8: REGISTER._2Q |= REGISTER._8Q; continue;
case INSTR_ORQR2R9: REGISTER._2Q |= REGISTER._9Q; continue;
case INSTR_ORQR2R10: REGISTER._2Q |= REGISTER._10Q; continue;
case INSTR_ORQR2R11: REGISTER._2Q |= REGISTER._11Q; continue;
case INSTR_ORQR2R12: REGISTER._2Q |= REGISTER._12Q; continue;
case INSTR_ORQR2RIP: REGISTER._2Q |= REGISTER.IPQ; continue;
case INSTR_ORQR2RSP: REGISTER._2Q |= REGISTER.SPQ; continue;
case INSTR_ORQR2RBP: REGISTER._2Q |= REGISTER.BPQ; continue;
case INSTR_ORQR3I: REGISTER._3Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR3RA: REGISTER._3Q |= REGISTER.AQ; continue;
case INSTR_ORQR3RB: REGISTER._3Q |= REGISTER.BQ; continue;
case INSTR_ORQR3RC: REGISTER._3Q |= REGISTER.CQ; continue;
case INSTR_ORQR3RD: REGISTER._3Q |= REGISTER.DQ; continue;
case INSTR_ORQR3R0: REGISTER._3Q |= REGISTER._0Q; continue;
case INSTR_ORQR3R1: REGISTER._3Q |= REGISTER._1Q; continue;
case INSTR_ORQR3R2: REGISTER._3Q |= REGISTER._2Q; continue;
case INSTR_ORQR3R3: REGISTER._3Q |= REGISTER._3Q; continue;
case INSTR_ORQR3R4: REGISTER._3Q |= REGISTER._4Q; continue;
case INSTR_ORQR3R5: REGISTER._3Q |= REGISTER._5Q; continue;
case INSTR_ORQR3R6: REGISTER._3Q |= REGISTER._6Q; continue;
case INSTR_ORQR3R7: REGISTER._3Q |= REGISTER._7Q; continue;
case INSTR_ORQR3R8: REGISTER._3Q |= REGISTER._8Q; continue;
case INSTR_ORQR3R9: REGISTER._3Q |= REGISTER._9Q; continue;
case INSTR_ORQR3R10: REGISTER._3Q |= REGISTER._10Q; continue;
case INSTR_ORQR3R11: REGISTER._3Q |= REGISTER._11Q; continue;
case INSTR_ORQR3R12: REGISTER._3Q |= REGISTER._12Q; continue;
case INSTR_ORQR3RIP: REGISTER._3Q |= REGISTER.IPQ; continue;
case INSTR_ORQR3RSP: REGISTER._3Q |= REGISTER.SPQ; continue;
case INSTR_ORQR3RBP: REGISTER._3Q |= REGISTER.BPQ; continue;
case INSTR_ORQR4I: REGISTER._4Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR4RA: REGISTER._4Q |= REGISTER.AQ; continue;
case INSTR_ORQR4RB: REGISTER._4Q |= REGISTER.BQ; continue;
case INSTR_ORQR4RC: REGISTER._4Q |= REGISTER.CQ; continue;
case INSTR_ORQR4RD: REGISTER._4Q |= REGISTER.DQ; continue;
case INSTR_ORQR4R0: REGISTER._4Q |= REGISTER._0Q; continue;
case INSTR_ORQR4R1: REGISTER._4Q |= REGISTER._1Q; continue;
case INSTR_ORQR4R2: REGISTER._4Q |= REGISTER._2Q; continue;
case INSTR_ORQR4R3: REGISTER._4Q |= REGISTER._3Q; continue;
case INSTR_ORQR4R4: REGISTER._4Q |= REGISTER._4Q; continue;
case INSTR_ORQR4R5: REGISTER._4Q |= REGISTER._5Q; continue;
case INSTR_ORQR4R6: REGISTER._4Q |= REGISTER._6Q; continue;
case INSTR_ORQR4R7: REGISTER._4Q |= REGISTER._7Q; continue;
case INSTR_ORQR4R8: REGISTER._4Q |= REGISTER._8Q; continue;
case INSTR_ORQR4R9: REGISTER._4Q |= REGISTER._9Q; continue;
case INSTR_ORQR4R10: REGISTER._4Q |= REGISTER._10Q; continue;
case INSTR_ORQR4R11: REGISTER._4Q |= REGISTER._11Q; continue;
case INSTR_ORQR4R12: REGISTER._4Q |= REGISTER._12Q; continue;
case INSTR_ORQR4RIP: REGISTER._4Q |= REGISTER.IPQ; continue;
case INSTR_ORQR4RSP: REGISTER._4Q |= REGISTER.SPQ; continue;
case INSTR_ORQR4RBP: REGISTER._4Q |= REGISTER.BPQ; continue;
case INSTR_ORQR5I: REGISTER._5Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR5RA: REGISTER._5Q |= REGISTER.AQ; continue;
case INSTR_ORQR5RB: REGISTER._5Q |= REGISTER.BQ; continue;
case INSTR_ORQR5RC: REGISTER._5Q |= REGISTER.CQ; continue;
case INSTR_ORQR5RD: REGISTER._5Q |= REGISTER.DQ; continue;
case INSTR_ORQR5R0: REGISTER._5Q |= REGISTER._0Q; continue;
case INSTR_ORQR5R1: REGISTER._5Q |= REGISTER._1Q; continue;
case INSTR_ORQR5R2: REGISTER._5Q |= REGISTER._2Q; continue;
case INSTR_ORQR5R3: REGISTER._5Q |= REGISTER._3Q; continue;
case INSTR_ORQR5R4: REGISTER._5Q |= REGISTER._4Q; continue;
case INSTR_ORQR5R5: REGISTER._5Q |= REGISTER._5Q; continue;
case INSTR_ORQR5R6: REGISTER._5Q |= REGISTER._6Q; continue;
case INSTR_ORQR5R7: REGISTER._5Q |= REGISTER._7Q; continue;
case INSTR_ORQR5R8: REGISTER._5Q |= REGISTER._8Q; continue;
case INSTR_ORQR5R9: REGISTER._5Q |= REGISTER._9Q; continue;
case INSTR_ORQR5R10: REGISTER._5Q |= REGISTER._10Q; continue;
case INSTR_ORQR5R11: REGISTER._5Q |= REGISTER._11Q; continue;
case INSTR_ORQR5R12: REGISTER._5Q |= REGISTER._12Q; continue;
case INSTR_ORQR5RIP: REGISTER._5Q |= REGISTER.IPQ; continue;
case INSTR_ORQR5RSP: REGISTER._5Q |= REGISTER.SPQ; continue;
case INSTR_ORQR5RBP: REGISTER._5Q |= REGISTER.BPQ; continue;
case INSTR_ORQR6I: REGISTER._6Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR6RA: REGISTER._6Q |= REGISTER.AQ; continue;
case INSTR_ORQR6RB: REGISTER._6Q |= REGISTER.BQ; continue;
case INSTR_ORQR6RC: REGISTER._6Q |= REGISTER.CQ; continue;
case INSTR_ORQR6RD: REGISTER._6Q |= REGISTER.DQ; continue;
case INSTR_ORQR6R0: REGISTER._6Q |= REGISTER._0Q; continue;
case INSTR_ORQR6R1: REGISTER._6Q |= REGISTER._1Q; continue;
case INSTR_ORQR6R2: REGISTER._6Q |= REGISTER._2Q; continue;
case INSTR_ORQR6R3: REGISTER._6Q |= REGISTER._3Q; continue;
case INSTR_ORQR6R4: REGISTER._6Q |= REGISTER._4Q; continue;
case INSTR_ORQR6R5: REGISTER._6Q |= REGISTER._5Q; continue;
case INSTR_ORQR6R6: REGISTER._6Q |= REGISTER._6Q; continue;
case INSTR_ORQR6R7: REGISTER._6Q |= REGISTER._7Q; continue;
case INSTR_ORQR6R8: REGISTER._6Q |= REGISTER._8Q; continue;
case INSTR_ORQR6R9: REGISTER._6Q |= REGISTER._9Q; continue;
case INSTR_ORQR6R10: REGISTER._6Q |= REGISTER._10Q; continue;
case INSTR_ORQR6R11: REGISTER._6Q |= REGISTER._11Q; continue;
case INSTR_ORQR6R12: REGISTER._6Q |= REGISTER._12Q; continue;
case INSTR_ORQR6RIP: REGISTER._6Q |= REGISTER.IPQ; continue;
case INSTR_ORQR6RSP: REGISTER._6Q |= REGISTER.SPQ; continue;
case INSTR_ORQR6RBP: REGISTER._6Q |= REGISTER.BPQ; continue;
case INSTR_ORQR7I: REGISTER._7Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR7RA: REGISTER._7Q |= REGISTER.AQ; continue;
case INSTR_ORQR7RB: REGISTER._7Q |= REGISTER.BQ; continue;
case INSTR_ORQR7RC: REGISTER._7Q |= REGISTER.CQ; continue;
case INSTR_ORQR7RD: REGISTER._7Q |= REGISTER.DQ; continue;
case INSTR_ORQR7R0: REGISTER._7Q |= REGISTER._0Q; continue;
case INSTR_ORQR7R1: REGISTER._7Q |= REGISTER._1Q; continue;
case INSTR_ORQR7R2: REGISTER._7Q |= REGISTER._2Q; continue;
case INSTR_ORQR7R3: REGISTER._7Q |= REGISTER._3Q; continue;
case INSTR_ORQR7R4: REGISTER._7Q |= REGISTER._4Q; continue;
case INSTR_ORQR7R5: REGISTER._7Q |= REGISTER._5Q; continue;
case INSTR_ORQR7R6: REGISTER._7Q |= REGISTER._6Q; continue;
case INSTR_ORQR7R7: REGISTER._7Q |= REGISTER._7Q; continue;
case INSTR_ORQR7R8: REGISTER._7Q |= REGISTER._8Q; continue;
case INSTR_ORQR7R9: REGISTER._7Q |= REGISTER._9Q; continue;
case INSTR_ORQR7R10: REGISTER._7Q |= REGISTER._10Q; continue;
case INSTR_ORQR7R11: REGISTER._7Q |= REGISTER._11Q; continue;
case INSTR_ORQR7R12: REGISTER._7Q |= REGISTER._12Q; continue;
case INSTR_ORQR7RIP: REGISTER._7Q |= REGISTER.IPQ; continue;
case INSTR_ORQR7RSP: REGISTER._7Q |= REGISTER.SPQ; continue;
case INSTR_ORQR7RBP: REGISTER._7Q |= REGISTER.BPQ; continue;
case INSTR_ORQR8I: REGISTER._8Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR8RA: REGISTER._8Q |= REGISTER.AQ; continue;
case INSTR_ORQR8RB: REGISTER._8Q |= REGISTER.BQ; continue;
case INSTR_ORQR8RC: REGISTER._8Q |= REGISTER.CQ; continue;
case INSTR_ORQR8RD: REGISTER._8Q |= REGISTER.DQ; continue;
case INSTR_ORQR8R0: REGISTER._8Q |= REGISTER._0Q; continue;
case INSTR_ORQR8R1: REGISTER._8Q |= REGISTER._1Q; continue;
case INSTR_ORQR8R2: REGISTER._8Q |= REGISTER._2Q; continue;
case INSTR_ORQR8R3: REGISTER._8Q |= REGISTER._3Q; continue;
case INSTR_ORQR8R4: REGISTER._8Q |= REGISTER._4Q; continue;
case INSTR_ORQR8R5: REGISTER._8Q |= REGISTER._5Q; continue;
case INSTR_ORQR8R6: REGISTER._8Q |= REGISTER._6Q; continue;
case INSTR_ORQR8R7: REGISTER._8Q |= REGISTER._7Q; continue;
case INSTR_ORQR8R8: REGISTER._8Q |= REGISTER._8Q; continue;
case INSTR_ORQR8R9: REGISTER._8Q |= REGISTER._9Q; continue;
case INSTR_ORQR8R10: REGISTER._8Q |= REGISTER._10Q; continue;
case INSTR_ORQR8R11: REGISTER._8Q |= REGISTER._11Q; continue;
case INSTR_ORQR8R12: REGISTER._8Q |= REGISTER._12Q; continue;
case INSTR_ORQR8RIP: REGISTER._8Q |= REGISTER.IPQ; continue;
case INSTR_ORQR8RSP: REGISTER._8Q |= REGISTER.SPQ; continue;
case INSTR_ORQR8RBP: REGISTER._8Q |= REGISTER.BPQ; continue;
case INSTR_ORQR9I: REGISTER._9Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR9RA: REGISTER._9Q |= REGISTER.AQ; continue;
case INSTR_ORQR9RB: REGISTER._9Q |= REGISTER.BQ; continue;
case INSTR_ORQR9RC: REGISTER._9Q |= REGISTER.CQ; continue;
case INSTR_ORQR9RD: REGISTER._9Q |= REGISTER.DQ; continue;
case INSTR_ORQR9R0: REGISTER._9Q |= REGISTER._0Q; continue;
case INSTR_ORQR9R1: REGISTER._9Q |= REGISTER._1Q; continue;
case INSTR_ORQR9R2: REGISTER._9Q |= REGISTER._2Q; continue;
case INSTR_ORQR9R3: REGISTER._9Q |= REGISTER._3Q; continue;
case INSTR_ORQR9R4: REGISTER._9Q |= REGISTER._4Q; continue;
case INSTR_ORQR9R5: REGISTER._9Q |= REGISTER._5Q; continue;
case INSTR_ORQR9R6: REGISTER._9Q |= REGISTER._6Q; continue;
case INSTR_ORQR9R7: REGISTER._9Q |= REGISTER._7Q; continue;
case INSTR_ORQR9R8: REGISTER._9Q |= REGISTER._8Q; continue;
case INSTR_ORQR9R9: REGISTER._9Q |= REGISTER._9Q; continue;
case INSTR_ORQR9R10: REGISTER._9Q |= REGISTER._10Q; continue;
case INSTR_ORQR9R11: REGISTER._9Q |= REGISTER._11Q; continue;
case INSTR_ORQR9R12: REGISTER._9Q |= REGISTER._12Q; continue;
case INSTR_ORQR9RIP: REGISTER._9Q |= REGISTER.IPQ; continue;
case INSTR_ORQR9RSP: REGISTER._9Q |= REGISTER.SPQ; continue;
case INSTR_ORQR9RBP: REGISTER._9Q |= REGISTER.BPQ; continue;
case INSTR_ORQR10I: REGISTER._10Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR10RA: REGISTER._10Q |= REGISTER.AQ; continue;
case INSTR_ORQR10RB: REGISTER._10Q |= REGISTER.BQ; continue;
case INSTR_ORQR10RC: REGISTER._10Q |= REGISTER.CQ; continue;
case INSTR_ORQR10RD: REGISTER._10Q |= REGISTER.DQ; continue;
case INSTR_ORQR10R0: REGISTER._10Q |= REGISTER._0Q; continue;
case INSTR_ORQR10R1: REGISTER._10Q |= REGISTER._1Q; continue;
case INSTR_ORQR10R2: REGISTER._10Q |= REGISTER._2Q; continue;
case INSTR_ORQR10R3: REGISTER._10Q |= REGISTER._3Q; continue;
case INSTR_ORQR10R4: REGISTER._10Q |= REGISTER._4Q; continue;
case INSTR_ORQR10R5: REGISTER._10Q |= REGISTER._5Q; continue;
case INSTR_ORQR10R6: REGISTER._10Q |= REGISTER._6Q; continue;
case INSTR_ORQR10R7: REGISTER._10Q |= REGISTER._7Q; continue;
case INSTR_ORQR10R8: REGISTER._10Q |= REGISTER._8Q; continue;
case INSTR_ORQR10R9: REGISTER._10Q |= REGISTER._9Q; continue;
case INSTR_ORQR10R10: REGISTER._10Q |= REGISTER._10Q; continue;
case INSTR_ORQR10R11: REGISTER._10Q |= REGISTER._11Q; continue;
case INSTR_ORQR10R12: REGISTER._10Q |= REGISTER._12Q; continue;
case INSTR_ORQR10RIP: REGISTER._10Q |= REGISTER.IPQ; continue;
case INSTR_ORQR10RSP: REGISTER._10Q |= REGISTER.SPQ; continue;
case INSTR_ORQR10RBP: REGISTER._10Q |= REGISTER.BPQ; continue;
case INSTR_ORQR11I: REGISTER._11Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR11RA: REGISTER._11Q |= REGISTER.AQ; continue;
case INSTR_ORQR11RB: REGISTER._11Q |= REGISTER.BQ; continue;
case INSTR_ORQR11RC: REGISTER._11Q |= REGISTER.CQ; continue;
case INSTR_ORQR11RD: REGISTER._11Q |= REGISTER.DQ; continue;
case INSTR_ORQR11R0: REGISTER._11Q |= REGISTER._0Q; continue;
case INSTR_ORQR11R1: REGISTER._11Q |= REGISTER._1Q; continue;
case INSTR_ORQR11R2: REGISTER._11Q |= REGISTER._2Q; continue;
case INSTR_ORQR11R3: REGISTER._11Q |= REGISTER._3Q; continue;
case INSTR_ORQR11R4: REGISTER._11Q |= REGISTER._4Q; continue;
case INSTR_ORQR11R5: REGISTER._11Q |= REGISTER._5Q; continue;
case INSTR_ORQR11R6: REGISTER._11Q |= REGISTER._6Q; continue;
case INSTR_ORQR11R7: REGISTER._11Q |= REGISTER._7Q; continue;
case INSTR_ORQR11R8: REGISTER._11Q |= REGISTER._8Q; continue;
case INSTR_ORQR11R9: REGISTER._11Q |= REGISTER._9Q; continue;
case INSTR_ORQR11R10: REGISTER._11Q |= REGISTER._10Q; continue;
case INSTR_ORQR11R11: REGISTER._11Q |= REGISTER._11Q; continue;
case INSTR_ORQR11R12: REGISTER._11Q |= REGISTER._12Q; continue;
case INSTR_ORQR11RIP: REGISTER._11Q |= REGISTER.IPQ; continue;
case INSTR_ORQR11RSP: REGISTER._11Q |= REGISTER.SPQ; continue;
case INSTR_ORQR11RBP: REGISTER._11Q |= REGISTER.BPQ; continue;
case INSTR_ORQR12I: REGISTER._12Q |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQR12RA: REGISTER._12Q |= REGISTER.AQ; continue;
case INSTR_ORQR12RB: REGISTER._12Q |= REGISTER.BQ; continue;
case INSTR_ORQR12RC: REGISTER._12Q |= REGISTER.CQ; continue;
case INSTR_ORQR12RD: REGISTER._12Q |= REGISTER.DQ; continue;
case INSTR_ORQR12R0: REGISTER._12Q |= REGISTER._0Q; continue;
case INSTR_ORQR12R1: REGISTER._12Q |= REGISTER._1Q; continue;
case INSTR_ORQR12R2: REGISTER._12Q |= REGISTER._2Q; continue;
case INSTR_ORQR12R3: REGISTER._12Q |= REGISTER._3Q; continue;
case INSTR_ORQR12R4: REGISTER._12Q |= REGISTER._4Q; continue;
case INSTR_ORQR12R5: REGISTER._12Q |= REGISTER._5Q; continue;
case INSTR_ORQR12R6: REGISTER._12Q |= REGISTER._6Q; continue;
case INSTR_ORQR12R7: REGISTER._12Q |= REGISTER._7Q; continue;
case INSTR_ORQR12R8: REGISTER._12Q |= REGISTER._8Q; continue;
case INSTR_ORQR12R9: REGISTER._12Q |= REGISTER._9Q; continue;
case INSTR_ORQR12R10: REGISTER._12Q |= REGISTER._10Q; continue;
case INSTR_ORQR12R11: REGISTER._12Q |= REGISTER._11Q; continue;
case INSTR_ORQR12R12: REGISTER._12Q |= REGISTER._12Q; continue;
case INSTR_ORQR12RIP: REGISTER._12Q |= REGISTER.IPQ; continue;
case INSTR_ORQR12RSP: REGISTER._12Q |= REGISTER.SPQ; continue;
case INSTR_ORQR12RBP: REGISTER._12Q |= REGISTER.BPQ; continue;
case INSTR_ORQRIPI: REGISTER.IPQ |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQRIPRA: REGISTER.IPQ |= REGISTER.AQ; continue;
case INSTR_ORQRIPRB: REGISTER.IPQ |= REGISTER.BQ; continue;
case INSTR_ORQRIPRC: REGISTER.IPQ |= REGISTER.CQ; continue;
case INSTR_ORQRIPRD: REGISTER.IPQ |= REGISTER.DQ; continue;
case INSTR_ORQRIPR0: REGISTER.IPQ |= REGISTER._0Q; continue;
case INSTR_ORQRIPR1: REGISTER.IPQ |= REGISTER._1Q; continue;
case INSTR_ORQRIPR2: REGISTER.IPQ |= REGISTER._2Q; continue;
case INSTR_ORQRIPR3: REGISTER.IPQ |= REGISTER._3Q; continue;
case INSTR_ORQRIPR4: REGISTER.IPQ |= REGISTER._4Q; continue;
case INSTR_ORQRIPR5: REGISTER.IPQ |= REGISTER._5Q; continue;
case INSTR_ORQRIPR6: REGISTER.IPQ |= REGISTER._6Q; continue;
case INSTR_ORQRIPR7: REGISTER.IPQ |= REGISTER._7Q; continue;
case INSTR_ORQRIPR8: REGISTER.IPQ |= REGISTER._8Q; continue;
case INSTR_ORQRIPR9: REGISTER.IPQ |= REGISTER._9Q; continue;
case INSTR_ORQRIPR10: REGISTER.IPQ |= REGISTER._10Q; continue;
case INSTR_ORQRIPR11: REGISTER.IPQ |= REGISTER._11Q; continue;
case INSTR_ORQRIPR12: REGISTER.IPQ |= REGISTER._12Q; continue;
case INSTR_ORQRIPRIP: REGISTER.IPQ |= REGISTER.IPQ; continue;
case INSTR_ORQRIPRSP: REGISTER.IPQ |= REGISTER.SPQ; continue;
case INSTR_ORQRIPRBP: REGISTER.IPQ |= REGISTER.BPQ; continue;
case INSTR_ORQRSPI: REGISTER.SPQ |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQRSPRA: REGISTER.SPQ |= REGISTER.AQ; continue;
case INSTR_ORQRSPRB: REGISTER.SPQ |= REGISTER.BQ; continue;
case INSTR_ORQRSPRC: REGISTER.SPQ |= REGISTER.CQ; continue;
case INSTR_ORQRSPRD: REGISTER.SPQ |= REGISTER.DQ; continue;
case INSTR_ORQRSPR0: REGISTER.SPQ |= REGISTER._0Q; continue;
case INSTR_ORQRSPR1: REGISTER.SPQ |= REGISTER._1Q; continue;
case INSTR_ORQRSPR2: REGISTER.SPQ |= REGISTER._2Q; continue;
case INSTR_ORQRSPR3: REGISTER.SPQ |= REGISTER._3Q; continue;
case INSTR_ORQRSPR4: REGISTER.SPQ |= REGISTER._4Q; continue;
case INSTR_ORQRSPR5: REGISTER.SPQ |= REGISTER._5Q; continue;
case INSTR_ORQRSPR6: REGISTER.SPQ |= REGISTER._6Q; continue;
case INSTR_ORQRSPR7: REGISTER.SPQ |= REGISTER._7Q; continue;
case INSTR_ORQRSPR8: REGISTER.SPQ |= REGISTER._8Q; continue;
case INSTR_ORQRSPR9: REGISTER.SPQ |= REGISTER._9Q; continue;
case INSTR_ORQRSPR10: REGISTER.SPQ |= REGISTER._10Q; continue;
case INSTR_ORQRSPR11: REGISTER.SPQ |= REGISTER._11Q; continue;
case INSTR_ORQRSPR12: REGISTER.SPQ |= REGISTER._12Q; continue;
case INSTR_ORQRSPRIP: REGISTER.SPQ |= REGISTER.IPQ; continue;
case INSTR_ORQRSPRSP: REGISTER.SPQ |= REGISTER.SPQ; continue;
case INSTR_ORQRSPRBP: REGISTER.SPQ |= REGISTER.BPQ; continue;
case INSTR_ORQRBPI: REGISTER.BPQ |= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ORQRBPRA: REGISTER.BPQ |= REGISTER.AQ; continue;
case INSTR_ORQRBPRB: REGISTER.BPQ |= REGISTER.BQ; continue;
case INSTR_ORQRBPRC: REGISTER.BPQ |= REGISTER.CQ; continue;
case INSTR_ORQRBPRD: REGISTER.BPQ |= REGISTER.DQ; continue;
case INSTR_ORQRBPR0: REGISTER.BPQ |= REGISTER._0Q; continue;
case INSTR_ORQRBPR1: REGISTER.BPQ |= REGISTER._1Q; continue;
case INSTR_ORQRBPR2: REGISTER.BPQ |= REGISTER._2Q; continue;
case INSTR_ORQRBPR3: REGISTER.BPQ |= REGISTER._3Q; continue;
case INSTR_ORQRBPR4: REGISTER.BPQ |= REGISTER._4Q; continue;
case INSTR_ORQRBPR5: REGISTER.BPQ |= REGISTER._5Q; continue;
case INSTR_ORQRBPR6: REGISTER.BPQ |= REGISTER._6Q; continue;
case INSTR_ORQRBPR7: REGISTER.BPQ |= REGISTER._7Q; continue;
case INSTR_ORQRBPR8: REGISTER.BPQ |= REGISTER._8Q; continue;
case INSTR_ORQRBPR9: REGISTER.BPQ |= REGISTER._9Q; continue;
case INSTR_ORQRBPR10: REGISTER.BPQ |= REGISTER._10Q; continue;
case INSTR_ORQRBPR11: REGISTER.BPQ |= REGISTER._11Q; continue;
case INSTR_ORQRBPR12: REGISTER.BPQ |= REGISTER._12Q; continue;
case INSTR_ORQRBPRIP: REGISTER.BPQ |= REGISTER.IPQ; continue;
case INSTR_ORQRBPRSP: REGISTER.BPQ |= REGISTER.SPQ; continue;
case INSTR_ORQRBPRBP: REGISTER.BPQ |= REGISTER.BPQ; continue;
case INSTR_ORWRAI: REGISTER.AW |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWRARA: REGISTER.AW |= REGISTER.AW; continue;
case INSTR_ORWRARB: REGISTER.AW |= REGISTER.BW; continue;
case INSTR_ORWRARC: REGISTER.AW |= REGISTER.CW; continue;
case INSTR_ORWRARD: REGISTER.AW |= REGISTER.DW; continue;
case INSTR_ORWRAR0: REGISTER.AW |= REGISTER._0W; continue;
case INSTR_ORWRAR1: REGISTER.AW |= REGISTER._1W; continue;
case INSTR_ORWRAR2: REGISTER.AW |= REGISTER._2W; continue;
case INSTR_ORWRAR3: REGISTER.AW |= REGISTER._3W; continue;
case INSTR_ORWRAR4: REGISTER.AW |= REGISTER._4W; continue;
case INSTR_ORWRAR5: REGISTER.AW |= REGISTER._5W; continue;
case INSTR_ORWRAR6: REGISTER.AW |= REGISTER._6W; continue;
case INSTR_ORWRAR7: REGISTER.AW |= REGISTER._7W; continue;
case INSTR_ORWRAR8: REGISTER.AW |= REGISTER._8W; continue;
case INSTR_ORWRAR9: REGISTER.AW |= REGISTER._9W; continue;
case INSTR_ORWRAR10: REGISTER.AW |= REGISTER._10W; continue;
case INSTR_ORWRAR11: REGISTER.AW |= REGISTER._11W; continue;
case INSTR_ORWRAR12: REGISTER.AW |= REGISTER._12W; continue;
case INSTR_ORWRARIP: REGISTER.AW |= REGISTER.IPW; continue;
case INSTR_ORWRARSP: REGISTER.AW |= REGISTER.SPW; continue;
case INSTR_ORWRARBP: REGISTER.AW |= REGISTER.BPW; continue;
case INSTR_ORWRBI: REGISTER.BW |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWRBRA: REGISTER.BW |= REGISTER.AW; continue;
case INSTR_ORWRBRB: REGISTER.BW |= REGISTER.BW; continue;
case INSTR_ORWRBRC: REGISTER.BW |= REGISTER.CW; continue;
case INSTR_ORWRBRD: REGISTER.BW |= REGISTER.DW; continue;
case INSTR_ORWRBR0: REGISTER.BW |= REGISTER._0W; continue;
case INSTR_ORWRBR1: REGISTER.BW |= REGISTER._1W; continue;
case INSTR_ORWRBR2: REGISTER.BW |= REGISTER._2W; continue;
case INSTR_ORWRBR3: REGISTER.BW |= REGISTER._3W; continue;
case INSTR_ORWRBR4: REGISTER.BW |= REGISTER._4W; continue;
case INSTR_ORWRBR5: REGISTER.BW |= REGISTER._5W; continue;
case INSTR_ORWRBR6: REGISTER.BW |= REGISTER._6W; continue;
case INSTR_ORWRBR7: REGISTER.BW |= REGISTER._7W; continue;
case INSTR_ORWRBR8: REGISTER.BW |= REGISTER._8W; continue;
case INSTR_ORWRBR9: REGISTER.BW |= REGISTER._9W; continue;
case INSTR_ORWRBR10: REGISTER.BW |= REGISTER._10W; continue;
case INSTR_ORWRBR11: REGISTER.BW |= REGISTER._11W; continue;
case INSTR_ORWRBR12: REGISTER.BW |= REGISTER._12W; continue;
case INSTR_ORWRBRIP: REGISTER.BW |= REGISTER.IPW; continue;
case INSTR_ORWRBRSP: REGISTER.BW |= REGISTER.SPW; continue;
case INSTR_ORWRBRBP: REGISTER.BW |= REGISTER.BPW; continue;
case INSTR_ORWRCI: REGISTER.CW |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWRCRA: REGISTER.CW |= REGISTER.AW; continue;
case INSTR_ORWRCRB: REGISTER.CW |= REGISTER.BW; continue;
case INSTR_ORWRCRC: REGISTER.CW |= REGISTER.CW; continue;
case INSTR_ORWRCRD: REGISTER.CW |= REGISTER.DW; continue;
case INSTR_ORWRCR0: REGISTER.CW |= REGISTER._0W; continue;
case INSTR_ORWRCR1: REGISTER.CW |= REGISTER._1W; continue;
case INSTR_ORWRCR2: REGISTER.CW |= REGISTER._2W; continue;
case INSTR_ORWRCR3: REGISTER.CW |= REGISTER._3W; continue;
case INSTR_ORWRCR4: REGISTER.CW |= REGISTER._4W; continue;
case INSTR_ORWRCR5: REGISTER.CW |= REGISTER._5W; continue;
case INSTR_ORWRCR6: REGISTER.CW |= REGISTER._6W; continue;
case INSTR_ORWRCR7: REGISTER.CW |= REGISTER._7W; continue;
case INSTR_ORWRCR8: REGISTER.CW |= REGISTER._8W; continue;
case INSTR_ORWRCR9: REGISTER.CW |= REGISTER._9W; continue;
case INSTR_ORWRCR10: REGISTER.CW |= REGISTER._10W; continue;
case INSTR_ORWRCR11: REGISTER.CW |= REGISTER._11W; continue;
case INSTR_ORWRCR12: REGISTER.CW |= REGISTER._12W; continue;
case INSTR_ORWRCRIP: REGISTER.CW |= REGISTER.IPW; continue;
case INSTR_ORWRCRSP: REGISTER.CW |= REGISTER.SPW; continue;
case INSTR_ORWRCRBP: REGISTER.CW |= REGISTER.BPW; continue;
case INSTR_ORWRDI: REGISTER.DW |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWRDRA: REGISTER.DW |= REGISTER.AW; continue;
case INSTR_ORWRDRB: REGISTER.DW |= REGISTER.BW; continue;
case INSTR_ORWRDRC: REGISTER.DW |= REGISTER.CW; continue;
case INSTR_ORWRDRD: REGISTER.DW |= REGISTER.DW; continue;
case INSTR_ORWRDR0: REGISTER.DW |= REGISTER._0W; continue;
case INSTR_ORWRDR1: REGISTER.DW |= REGISTER._1W; continue;
case INSTR_ORWRDR2: REGISTER.DW |= REGISTER._2W; continue;
case INSTR_ORWRDR3: REGISTER.DW |= REGISTER._3W; continue;
case INSTR_ORWRDR4: REGISTER.DW |= REGISTER._4W; continue;
case INSTR_ORWRDR5: REGISTER.DW |= REGISTER._5W; continue;
case INSTR_ORWRDR6: REGISTER.DW |= REGISTER._6W; continue;
case INSTR_ORWRDR7: REGISTER.DW |= REGISTER._7W; continue;
case INSTR_ORWRDR8: REGISTER.DW |= REGISTER._8W; continue;
case INSTR_ORWRDR9: REGISTER.DW |= REGISTER._9W; continue;
case INSTR_ORWRDR10: REGISTER.DW |= REGISTER._10W; continue;
case INSTR_ORWRDR11: REGISTER.DW |= REGISTER._11W; continue;
case INSTR_ORWRDR12: REGISTER.DW |= REGISTER._12W; continue;
case INSTR_ORWRDRIP: REGISTER.DW |= REGISTER.IPW; continue;
case INSTR_ORWRDRSP: REGISTER.DW |= REGISTER.SPW; continue;
case INSTR_ORWRDRBP: REGISTER.DW |= REGISTER.BPW; continue;
case INSTR_ORWR0I: REGISTER._0W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR0RA: REGISTER._0W |= REGISTER.AW; continue;
case INSTR_ORWR0RB: REGISTER._0W |= REGISTER.BW; continue;
case INSTR_ORWR0RC: REGISTER._0W |= REGISTER.CW; continue;
case INSTR_ORWR0RD: REGISTER._0W |= REGISTER.DW; continue;
case INSTR_ORWR0R0: REGISTER._0W |= REGISTER._0W; continue;
case INSTR_ORWR0R1: REGISTER._0W |= REGISTER._1W; continue;
case INSTR_ORWR0R2: REGISTER._0W |= REGISTER._2W; continue;
case INSTR_ORWR0R3: REGISTER._0W |= REGISTER._3W; continue;
case INSTR_ORWR0R4: REGISTER._0W |= REGISTER._4W; continue;
case INSTR_ORWR0R5: REGISTER._0W |= REGISTER._5W; continue;
case INSTR_ORWR0R6: REGISTER._0W |= REGISTER._6W; continue;
case INSTR_ORWR0R7: REGISTER._0W |= REGISTER._7W; continue;
case INSTR_ORWR0R8: REGISTER._0W |= REGISTER._8W; continue;
case INSTR_ORWR0R9: REGISTER._0W |= REGISTER._9W; continue;
case INSTR_ORWR0R10: REGISTER._0W |= REGISTER._10W; continue;
case INSTR_ORWR0R11: REGISTER._0W |= REGISTER._11W; continue;
case INSTR_ORWR0R12: REGISTER._0W |= REGISTER._12W; continue;
case INSTR_ORWR0RIP: REGISTER._0W |= REGISTER.IPW; continue;
case INSTR_ORWR0RSP: REGISTER._0W |= REGISTER.SPW; continue;
case INSTR_ORWR0RBP: REGISTER._0W |= REGISTER.BPW; continue;
case INSTR_ORWR1I: REGISTER._1W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR1RA: REGISTER._1W |= REGISTER.AW; continue;
case INSTR_ORWR1RB: REGISTER._1W |= REGISTER.BW; continue;
case INSTR_ORWR1RC: REGISTER._1W |= REGISTER.CW; continue;
case INSTR_ORWR1RD: REGISTER._1W |= REGISTER.DW; continue;
case INSTR_ORWR1R0: REGISTER._1W |= REGISTER._0W; continue;
case INSTR_ORWR1R1: REGISTER._1W |= REGISTER._1W; continue;
case INSTR_ORWR1R2: REGISTER._1W |= REGISTER._2W; continue;
case INSTR_ORWR1R3: REGISTER._1W |= REGISTER._3W; continue;
case INSTR_ORWR1R4: REGISTER._1W |= REGISTER._4W; continue;
case INSTR_ORWR1R5: REGISTER._1W |= REGISTER._5W; continue;
case INSTR_ORWR1R6: REGISTER._1W |= REGISTER._6W; continue;
case INSTR_ORWR1R7: REGISTER._1W |= REGISTER._7W; continue;
case INSTR_ORWR1R8: REGISTER._1W |= REGISTER._8W; continue;
case INSTR_ORWR1R9: REGISTER._1W |= REGISTER._9W; continue;
case INSTR_ORWR1R10: REGISTER._1W |= REGISTER._10W; continue;
case INSTR_ORWR1R11: REGISTER._1W |= REGISTER._11W; continue;
case INSTR_ORWR1R12: REGISTER._1W |= REGISTER._12W; continue;
case INSTR_ORWR1RIP: REGISTER._1W |= REGISTER.IPW; continue;
case INSTR_ORWR1RSP: REGISTER._1W |= REGISTER.SPW; continue;
case INSTR_ORWR1RBP: REGISTER._1W |= REGISTER.BPW; continue;
case INSTR_ORWR2I: REGISTER._2W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR2RA: REGISTER._2W |= REGISTER.AW; continue;
case INSTR_ORWR2RB: REGISTER._2W |= REGISTER.BW; continue;
case INSTR_ORWR2RC: REGISTER._2W |= REGISTER.CW; continue;
case INSTR_ORWR2RD: REGISTER._2W |= REGISTER.DW; continue;
case INSTR_ORWR2R0: REGISTER._2W |= REGISTER._0W; continue;
case INSTR_ORWR2R1: REGISTER._2W |= REGISTER._1W; continue;
case INSTR_ORWR2R2: REGISTER._2W |= REGISTER._2W; continue;
case INSTR_ORWR2R3: REGISTER._2W |= REGISTER._3W; continue;
case INSTR_ORWR2R4: REGISTER._2W |= REGISTER._4W; continue;
case INSTR_ORWR2R5: REGISTER._2W |= REGISTER._5W; continue;
case INSTR_ORWR2R6: REGISTER._2W |= REGISTER._6W; continue;
case INSTR_ORWR2R7: REGISTER._2W |= REGISTER._7W; continue;
case INSTR_ORWR2R8: REGISTER._2W |= REGISTER._8W; continue;
case INSTR_ORWR2R9: REGISTER._2W |= REGISTER._9W; continue;
case INSTR_ORWR2R10: REGISTER._2W |= REGISTER._10W; continue;
case INSTR_ORWR2R11: REGISTER._2W |= REGISTER._11W; continue;
case INSTR_ORWR2R12: REGISTER._2W |= REGISTER._12W; continue;
case INSTR_ORWR2RIP: REGISTER._2W |= REGISTER.IPW; continue;
case INSTR_ORWR2RSP: REGISTER._2W |= REGISTER.SPW; continue;
case INSTR_ORWR2RBP: REGISTER._2W |= REGISTER.BPW; continue;
case INSTR_ORWR3I: REGISTER._3W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR3RA: REGISTER._3W |= REGISTER.AW; continue;
case INSTR_ORWR3RB: REGISTER._3W |= REGISTER.BW; continue;
case INSTR_ORWR3RC: REGISTER._3W |= REGISTER.CW; continue;
case INSTR_ORWR3RD: REGISTER._3W |= REGISTER.DW; continue;
case INSTR_ORWR3R0: REGISTER._3W |= REGISTER._0W; continue;
case INSTR_ORWR3R1: REGISTER._3W |= REGISTER._1W; continue;
case INSTR_ORWR3R2: REGISTER._3W |= REGISTER._2W; continue;
case INSTR_ORWR3R3: REGISTER._3W |= REGISTER._3W; continue;
case INSTR_ORWR3R4: REGISTER._3W |= REGISTER._4W; continue;
case INSTR_ORWR3R5: REGISTER._3W |= REGISTER._5W; continue;
case INSTR_ORWR3R6: REGISTER._3W |= REGISTER._6W; continue;
case INSTR_ORWR3R7: REGISTER._3W |= REGISTER._7W; continue;
case INSTR_ORWR3R8: REGISTER._3W |= REGISTER._8W; continue;
case INSTR_ORWR3R9: REGISTER._3W |= REGISTER._9W; continue;
case INSTR_ORWR3R10: REGISTER._3W |= REGISTER._10W; continue;
case INSTR_ORWR3R11: REGISTER._3W |= REGISTER._11W; continue;
case INSTR_ORWR3R12: REGISTER._3W |= REGISTER._12W; continue;
case INSTR_ORWR3RIP: REGISTER._3W |= REGISTER.IPW; continue;
case INSTR_ORWR3RSP: REGISTER._3W |= REGISTER.SPW; continue;
case INSTR_ORWR3RBP: REGISTER._3W |= REGISTER.BPW; continue;
case INSTR_ORWR4I: REGISTER._4W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR4RA: REGISTER._4W |= REGISTER.AW; continue;
case INSTR_ORWR4RB: REGISTER._4W |= REGISTER.BW; continue;
case INSTR_ORWR4RC: REGISTER._4W |= REGISTER.CW; continue;
case INSTR_ORWR4RD: REGISTER._4W |= REGISTER.DW; continue;
case INSTR_ORWR4R0: REGISTER._4W |= REGISTER._0W; continue;
case INSTR_ORWR4R1: REGISTER._4W |= REGISTER._1W; continue;
case INSTR_ORWR4R2: REGISTER._4W |= REGISTER._2W; continue;
case INSTR_ORWR4R3: REGISTER._4W |= REGISTER._3W; continue;
case INSTR_ORWR4R4: REGISTER._4W |= REGISTER._4W; continue;
case INSTR_ORWR4R5: REGISTER._4W |= REGISTER._5W; continue;
case INSTR_ORWR4R6: REGISTER._4W |= REGISTER._6W; continue;
case INSTR_ORWR4R7: REGISTER._4W |= REGISTER._7W; continue;
case INSTR_ORWR4R8: REGISTER._4W |= REGISTER._8W; continue;
case INSTR_ORWR4R9: REGISTER._4W |= REGISTER._9W; continue;
case INSTR_ORWR4R10: REGISTER._4W |= REGISTER._10W; continue;
case INSTR_ORWR4R11: REGISTER._4W |= REGISTER._11W; continue;
case INSTR_ORWR4R12: REGISTER._4W |= REGISTER._12W; continue;
case INSTR_ORWR4RIP: REGISTER._4W |= REGISTER.IPW; continue;
case INSTR_ORWR4RSP: REGISTER._4W |= REGISTER.SPW; continue;
case INSTR_ORWR4RBP: REGISTER._4W |= REGISTER.BPW; continue;
case INSTR_ORWR5I: REGISTER._5W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR5RA: REGISTER._5W |= REGISTER.AW; continue;
case INSTR_ORWR5RB: REGISTER._5W |= REGISTER.BW; continue;
case INSTR_ORWR5RC: REGISTER._5W |= REGISTER.CW; continue;
case INSTR_ORWR5RD: REGISTER._5W |= REGISTER.DW; continue;
case INSTR_ORWR5R0: REGISTER._5W |= REGISTER._0W; continue;
case INSTR_ORWR5R1: REGISTER._5W |= REGISTER._1W; continue;
case INSTR_ORWR5R2: REGISTER._5W |= REGISTER._2W; continue;
case INSTR_ORWR5R3: REGISTER._5W |= REGISTER._3W; continue;
case INSTR_ORWR5R4: REGISTER._5W |= REGISTER._4W; continue;
case INSTR_ORWR5R5: REGISTER._5W |= REGISTER._5W; continue;
case INSTR_ORWR5R6: REGISTER._5W |= REGISTER._6W; continue;
case INSTR_ORWR5R7: REGISTER._5W |= REGISTER._7W; continue;
case INSTR_ORWR5R8: REGISTER._5W |= REGISTER._8W; continue;
case INSTR_ORWR5R9: REGISTER._5W |= REGISTER._9W; continue;
case INSTR_ORWR5R10: REGISTER._5W |= REGISTER._10W; continue;
case INSTR_ORWR5R11: REGISTER._5W |= REGISTER._11W; continue;
case INSTR_ORWR5R12: REGISTER._5W |= REGISTER._12W; continue;
case INSTR_ORWR5RIP: REGISTER._5W |= REGISTER.IPW; continue;
case INSTR_ORWR5RSP: REGISTER._5W |= REGISTER.SPW; continue;
case INSTR_ORWR5RBP: REGISTER._5W |= REGISTER.BPW; continue;
case INSTR_ORWR6I: REGISTER._6W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR6RA: REGISTER._6W |= REGISTER.AW; continue;
case INSTR_ORWR6RB: REGISTER._6W |= REGISTER.BW; continue;
case INSTR_ORWR6RC: REGISTER._6W |= REGISTER.CW; continue;
case INSTR_ORWR6RD: REGISTER._6W |= REGISTER.DW; continue;
case INSTR_ORWR6R0: REGISTER._6W |= REGISTER._0W; continue;
case INSTR_ORWR6R1: REGISTER._6W |= REGISTER._1W; continue;
case INSTR_ORWR6R2: REGISTER._6W |= REGISTER._2W; continue;
case INSTR_ORWR6R3: REGISTER._6W |= REGISTER._3W; continue;
case INSTR_ORWR6R4: REGISTER._6W |= REGISTER._4W; continue;
case INSTR_ORWR6R5: REGISTER._6W |= REGISTER._5W; continue;
case INSTR_ORWR6R6: REGISTER._6W |= REGISTER._6W; continue;
case INSTR_ORWR6R7: REGISTER._6W |= REGISTER._7W; continue;
case INSTR_ORWR6R8: REGISTER._6W |= REGISTER._8W; continue;
case INSTR_ORWR6R9: REGISTER._6W |= REGISTER._9W; continue;
case INSTR_ORWR6R10: REGISTER._6W |= REGISTER._10W; continue;
case INSTR_ORWR6R11: REGISTER._6W |= REGISTER._11W; continue;
case INSTR_ORWR6R12: REGISTER._6W |= REGISTER._12W; continue;
case INSTR_ORWR6RIP: REGISTER._6W |= REGISTER.IPW; continue;
case INSTR_ORWR6RSP: REGISTER._6W |= REGISTER.SPW; continue;
case INSTR_ORWR6RBP: REGISTER._6W |= REGISTER.BPW; continue;
case INSTR_ORWR7I: REGISTER._7W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR7RA: REGISTER._7W |= REGISTER.AW; continue;
case INSTR_ORWR7RB: REGISTER._7W |= REGISTER.BW; continue;
case INSTR_ORWR7RC: REGISTER._7W |= REGISTER.CW; continue;
case INSTR_ORWR7RD: REGISTER._7W |= REGISTER.DW; continue;
case INSTR_ORWR7R0: REGISTER._7W |= REGISTER._0W; continue;
case INSTR_ORWR7R1: REGISTER._7W |= REGISTER._1W; continue;
case INSTR_ORWR7R2: REGISTER._7W |= REGISTER._2W; continue;
case INSTR_ORWR7R3: REGISTER._7W |= REGISTER._3W; continue;
case INSTR_ORWR7R4: REGISTER._7W |= REGISTER._4W; continue;
case INSTR_ORWR7R5: REGISTER._7W |= REGISTER._5W; continue;
case INSTR_ORWR7R6: REGISTER._7W |= REGISTER._6W; continue;
case INSTR_ORWR7R7: REGISTER._7W |= REGISTER._7W; continue;
case INSTR_ORWR7R8: REGISTER._7W |= REGISTER._8W; continue;
case INSTR_ORWR7R9: REGISTER._7W |= REGISTER._9W; continue;
case INSTR_ORWR7R10: REGISTER._7W |= REGISTER._10W; continue;
case INSTR_ORWR7R11: REGISTER._7W |= REGISTER._11W; continue;
case INSTR_ORWR7R12: REGISTER._7W |= REGISTER._12W; continue;
case INSTR_ORWR7RIP: REGISTER._7W |= REGISTER.IPW; continue;
case INSTR_ORWR7RSP: REGISTER._7W |= REGISTER.SPW; continue;
case INSTR_ORWR7RBP: REGISTER._7W |= REGISTER.BPW; continue;
case INSTR_ORWR8I: REGISTER._8W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR8RA: REGISTER._8W |= REGISTER.AW; continue;
case INSTR_ORWR8RB: REGISTER._8W |= REGISTER.BW; continue;
case INSTR_ORWR8RC: REGISTER._8W |= REGISTER.CW; continue;
case INSTR_ORWR8RD: REGISTER._8W |= REGISTER.DW; continue;
case INSTR_ORWR8R0: REGISTER._8W |= REGISTER._0W; continue;
case INSTR_ORWR8R1: REGISTER._8W |= REGISTER._1W; continue;
case INSTR_ORWR8R2: REGISTER._8W |= REGISTER._2W; continue;
case INSTR_ORWR8R3: REGISTER._8W |= REGISTER._3W; continue;
case INSTR_ORWR8R4: REGISTER._8W |= REGISTER._4W; continue;
case INSTR_ORWR8R5: REGISTER._8W |= REGISTER._5W; continue;
case INSTR_ORWR8R6: REGISTER._8W |= REGISTER._6W; continue;
case INSTR_ORWR8R7: REGISTER._8W |= REGISTER._7W; continue;
case INSTR_ORWR8R8: REGISTER._8W |= REGISTER._8W; continue;
case INSTR_ORWR8R9: REGISTER._8W |= REGISTER._9W; continue;
case INSTR_ORWR8R10: REGISTER._8W |= REGISTER._10W; continue;
case INSTR_ORWR8R11: REGISTER._8W |= REGISTER._11W; continue;
case INSTR_ORWR8R12: REGISTER._8W |= REGISTER._12W; continue;
case INSTR_ORWR8RIP: REGISTER._8W |= REGISTER.IPW; continue;
case INSTR_ORWR8RSP: REGISTER._8W |= REGISTER.SPW; continue;
case INSTR_ORWR8RBP: REGISTER._8W |= REGISTER.BPW; continue;
case INSTR_ORWR9I: REGISTER._9W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR9RA: REGISTER._9W |= REGISTER.AW; continue;
case INSTR_ORWR9RB: REGISTER._9W |= REGISTER.BW; continue;
case INSTR_ORWR9RC: REGISTER._9W |= REGISTER.CW; continue;
case INSTR_ORWR9RD: REGISTER._9W |= REGISTER.DW; continue;
case INSTR_ORWR9R0: REGISTER._9W |= REGISTER._0W; continue;
case INSTR_ORWR9R1: REGISTER._9W |= REGISTER._1W; continue;
case INSTR_ORWR9R2: REGISTER._9W |= REGISTER._2W; continue;
case INSTR_ORWR9R3: REGISTER._9W |= REGISTER._3W; continue;
case INSTR_ORWR9R4: REGISTER._9W |= REGISTER._4W; continue;
case INSTR_ORWR9R5: REGISTER._9W |= REGISTER._5W; continue;
case INSTR_ORWR9R6: REGISTER._9W |= REGISTER._6W; continue;
case INSTR_ORWR9R7: REGISTER._9W |= REGISTER._7W; continue;
case INSTR_ORWR9R8: REGISTER._9W |= REGISTER._8W; continue;
case INSTR_ORWR9R9: REGISTER._9W |= REGISTER._9W; continue;
case INSTR_ORWR9R10: REGISTER._9W |= REGISTER._10W; continue;
case INSTR_ORWR9R11: REGISTER._9W |= REGISTER._11W; continue;
case INSTR_ORWR9R12: REGISTER._9W |= REGISTER._12W; continue;
case INSTR_ORWR9RIP: REGISTER._9W |= REGISTER.IPW; continue;
case INSTR_ORWR9RSP: REGISTER._9W |= REGISTER.SPW; continue;
case INSTR_ORWR9RBP: REGISTER._9W |= REGISTER.BPW; continue;
case INSTR_ORWR10I: REGISTER._10W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR10RA: REGISTER._10W |= REGISTER.AW; continue;
case INSTR_ORWR10RB: REGISTER._10W |= REGISTER.BW; continue;
case INSTR_ORWR10RC: REGISTER._10W |= REGISTER.CW; continue;
case INSTR_ORWR10RD: REGISTER._10W |= REGISTER.DW; continue;
case INSTR_ORWR10R0: REGISTER._10W |= REGISTER._0W; continue;
case INSTR_ORWR10R1: REGISTER._10W |= REGISTER._1W; continue;
case INSTR_ORWR10R2: REGISTER._10W |= REGISTER._2W; continue;
case INSTR_ORWR10R3: REGISTER._10W |= REGISTER._3W; continue;
case INSTR_ORWR10R4: REGISTER._10W |= REGISTER._4W; continue;
case INSTR_ORWR10R5: REGISTER._10W |= REGISTER._5W; continue;
case INSTR_ORWR10R6: REGISTER._10W |= REGISTER._6W; continue;
case INSTR_ORWR10R7: REGISTER._10W |= REGISTER._7W; continue;
case INSTR_ORWR10R8: REGISTER._10W |= REGISTER._8W; continue;
case INSTR_ORWR10R9: REGISTER._10W |= REGISTER._9W; continue;
case INSTR_ORWR10R10: REGISTER._10W |= REGISTER._10W; continue;
case INSTR_ORWR10R11: REGISTER._10W |= REGISTER._11W; continue;
case INSTR_ORWR10R12: REGISTER._10W |= REGISTER._12W; continue;
case INSTR_ORWR10RIP: REGISTER._10W |= REGISTER.IPW; continue;
case INSTR_ORWR10RSP: REGISTER._10W |= REGISTER.SPW; continue;
case INSTR_ORWR10RBP: REGISTER._10W |= REGISTER.BPW; continue;
case INSTR_ORWR11I: REGISTER._11W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR11RA: REGISTER._11W |= REGISTER.AW; continue;
case INSTR_ORWR11RB: REGISTER._11W |= REGISTER.BW; continue;
case INSTR_ORWR11RC: REGISTER._11W |= REGISTER.CW; continue;
case INSTR_ORWR11RD: REGISTER._11W |= REGISTER.DW; continue;
case INSTR_ORWR11R0: REGISTER._11W |= REGISTER._0W; continue;
case INSTR_ORWR11R1: REGISTER._11W |= REGISTER._1W; continue;
case INSTR_ORWR11R2: REGISTER._11W |= REGISTER._2W; continue;
case INSTR_ORWR11R3: REGISTER._11W |= REGISTER._3W; continue;
case INSTR_ORWR11R4: REGISTER._11W |= REGISTER._4W; continue;
case INSTR_ORWR11R5: REGISTER._11W |= REGISTER._5W; continue;
case INSTR_ORWR11R6: REGISTER._11W |= REGISTER._6W; continue;
case INSTR_ORWR11R7: REGISTER._11W |= REGISTER._7W; continue;
case INSTR_ORWR11R8: REGISTER._11W |= REGISTER._8W; continue;
case INSTR_ORWR11R9: REGISTER._11W |= REGISTER._9W; continue;
case INSTR_ORWR11R10: REGISTER._11W |= REGISTER._10W; continue;
case INSTR_ORWR11R11: REGISTER._11W |= REGISTER._11W; continue;
case INSTR_ORWR11R12: REGISTER._11W |= REGISTER._12W; continue;
case INSTR_ORWR11RIP: REGISTER._11W |= REGISTER.IPW; continue;
case INSTR_ORWR11RSP: REGISTER._11W |= REGISTER.SPW; continue;
case INSTR_ORWR11RBP: REGISTER._11W |= REGISTER.BPW; continue;
case INSTR_ORWR12I: REGISTER._12W |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWR12RA: REGISTER._12W |= REGISTER.AW; continue;
case INSTR_ORWR12RB: REGISTER._12W |= REGISTER.BW; continue;
case INSTR_ORWR12RC: REGISTER._12W |= REGISTER.CW; continue;
case INSTR_ORWR12RD: REGISTER._12W |= REGISTER.DW; continue;
case INSTR_ORWR12R0: REGISTER._12W |= REGISTER._0W; continue;
case INSTR_ORWR12R1: REGISTER._12W |= REGISTER._1W; continue;
case INSTR_ORWR12R2: REGISTER._12W |= REGISTER._2W; continue;
case INSTR_ORWR12R3: REGISTER._12W |= REGISTER._3W; continue;
case INSTR_ORWR12R4: REGISTER._12W |= REGISTER._4W; continue;
case INSTR_ORWR12R5: REGISTER._12W |= REGISTER._5W; continue;
case INSTR_ORWR12R6: REGISTER._12W |= REGISTER._6W; continue;
case INSTR_ORWR12R7: REGISTER._12W |= REGISTER._7W; continue;
case INSTR_ORWR12R8: REGISTER._12W |= REGISTER._8W; continue;
case INSTR_ORWR12R9: REGISTER._12W |= REGISTER._9W; continue;
case INSTR_ORWR12R10: REGISTER._12W |= REGISTER._10W; continue;
case INSTR_ORWR12R11: REGISTER._12W |= REGISTER._11W; continue;
case INSTR_ORWR12R12: REGISTER._12W |= REGISTER._12W; continue;
case INSTR_ORWR12RIP: REGISTER._12W |= REGISTER.IPW; continue;
case INSTR_ORWR12RSP: REGISTER._12W |= REGISTER.SPW; continue;
case INSTR_ORWR12RBP: REGISTER._12W |= REGISTER.BPW; continue;
case INSTR_ORWRIPI: REGISTER.IPW |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWRIPRA: REGISTER.IPW |= REGISTER.AW; continue;
case INSTR_ORWRIPRB: REGISTER.IPW |= REGISTER.BW; continue;
case INSTR_ORWRIPRC: REGISTER.IPW |= REGISTER.CW; continue;
case INSTR_ORWRIPRD: REGISTER.IPW |= REGISTER.DW; continue;
case INSTR_ORWRIPR0: REGISTER.IPW |= REGISTER._0W; continue;
case INSTR_ORWRIPR1: REGISTER.IPW |= REGISTER._1W; continue;
case INSTR_ORWRIPR2: REGISTER.IPW |= REGISTER._2W; continue;
case INSTR_ORWRIPR3: REGISTER.IPW |= REGISTER._3W; continue;
case INSTR_ORWRIPR4: REGISTER.IPW |= REGISTER._4W; continue;
case INSTR_ORWRIPR5: REGISTER.IPW |= REGISTER._5W; continue;
case INSTR_ORWRIPR6: REGISTER.IPW |= REGISTER._6W; continue;
case INSTR_ORWRIPR7: REGISTER.IPW |= REGISTER._7W; continue;
case INSTR_ORWRIPR8: REGISTER.IPW |= REGISTER._8W; continue;
case INSTR_ORWRIPR9: REGISTER.IPW |= REGISTER._9W; continue;
case INSTR_ORWRIPR10: REGISTER.IPW |= REGISTER._10W; continue;
case INSTR_ORWRIPR11: REGISTER.IPW |= REGISTER._11W; continue;
case INSTR_ORWRIPR12: REGISTER.IPW |= REGISTER._12W; continue;
case INSTR_ORWRIPRIP: REGISTER.IPW |= REGISTER.IPW; continue;
case INSTR_ORWRIPRSP: REGISTER.IPW |= REGISTER.SPW; continue;
case INSTR_ORWRIPRBP: REGISTER.IPW |= REGISTER.BPW; continue;
case INSTR_ORWRSPI: REGISTER.SPW |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWRSPRA: REGISTER.SPW |= REGISTER.AW; continue;
case INSTR_ORWRSPRB: REGISTER.SPW |= REGISTER.BW; continue;
case INSTR_ORWRSPRC: REGISTER.SPW |= REGISTER.CW; continue;
case INSTR_ORWRSPRD: REGISTER.SPW |= REGISTER.DW; continue;
case INSTR_ORWRSPR0: REGISTER.SPW |= REGISTER._0W; continue;
case INSTR_ORWRSPR1: REGISTER.SPW |= REGISTER._1W; continue;
case INSTR_ORWRSPR2: REGISTER.SPW |= REGISTER._2W; continue;
case INSTR_ORWRSPR3: REGISTER.SPW |= REGISTER._3W; continue;
case INSTR_ORWRSPR4: REGISTER.SPW |= REGISTER._4W; continue;
case INSTR_ORWRSPR5: REGISTER.SPW |= REGISTER._5W; continue;
case INSTR_ORWRSPR6: REGISTER.SPW |= REGISTER._6W; continue;
case INSTR_ORWRSPR7: REGISTER.SPW |= REGISTER._7W; continue;
case INSTR_ORWRSPR8: REGISTER.SPW |= REGISTER._8W; continue;
case INSTR_ORWRSPR9: REGISTER.SPW |= REGISTER._9W; continue;
case INSTR_ORWRSPR10: REGISTER.SPW |= REGISTER._10W; continue;
case INSTR_ORWRSPR11: REGISTER.SPW |= REGISTER._11W; continue;
case INSTR_ORWRSPR12: REGISTER.SPW |= REGISTER._12W; continue;
case INSTR_ORWRSPRIP: REGISTER.SPW |= REGISTER.IPW; continue;
case INSTR_ORWRSPRSP: REGISTER.SPW |= REGISTER.SPW; continue;
case INSTR_ORWRSPRBP: REGISTER.SPW |= REGISTER.BPW; continue;
case INSTR_ORWRBPI: REGISTER.BPW |= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ORWRBPRA: REGISTER.BPW |= REGISTER.AW; continue;
case INSTR_ORWRBPRB: REGISTER.BPW |= REGISTER.BW; continue;
case INSTR_ORWRBPRC: REGISTER.BPW |= REGISTER.CW; continue;
case INSTR_ORWRBPRD: REGISTER.BPW |= REGISTER.DW; continue;
case INSTR_ORWRBPR0: REGISTER.BPW |= REGISTER._0W; continue;
case INSTR_ORWRBPR1: REGISTER.BPW |= REGISTER._1W; continue;
case INSTR_ORWRBPR2: REGISTER.BPW |= REGISTER._2W; continue;
case INSTR_ORWRBPR3: REGISTER.BPW |= REGISTER._3W; continue;
case INSTR_ORWRBPR4: REGISTER.BPW |= REGISTER._4W; continue;
case INSTR_ORWRBPR5: REGISTER.BPW |= REGISTER._5W; continue;
case INSTR_ORWRBPR6: REGISTER.BPW |= REGISTER._6W; continue;
case INSTR_ORWRBPR7: REGISTER.BPW |= REGISTER._7W; continue;
case INSTR_ORWRBPR8: REGISTER.BPW |= REGISTER._8W; continue;
case INSTR_ORWRBPR9: REGISTER.BPW |= REGISTER._9W; continue;
case INSTR_ORWRBPR10: REGISTER.BPW |= REGISTER._10W; continue;
case INSTR_ORWRBPR11: REGISTER.BPW |= REGISTER._11W; continue;
case INSTR_ORWRBPR12: REGISTER.BPW |= REGISTER._12W; continue;
case INSTR_ORWRBPRIP: REGISTER.BPW |= REGISTER.IPW; continue;
case INSTR_ORWRBPRSP: REGISTER.BPW |= REGISTER.SPW; continue;
case INSTR_ORWRBPRBP: REGISTER.BPW |= REGISTER.BPW; continue;
case INSTR_ORBRAI: REGISTER.AB |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBRARA: REGISTER.AB |= REGISTER.AB; continue;
case INSTR_ORBRARB: REGISTER.AB |= REGISTER.BB; continue;
case INSTR_ORBRARC: REGISTER.AB |= REGISTER.CB; continue;
case INSTR_ORBRARD: REGISTER.AB |= REGISTER.DB; continue;
case INSTR_ORBRAR0: REGISTER.AB |= REGISTER._0B; continue;
case INSTR_ORBRAR1: REGISTER.AB |= REGISTER._1B; continue;
case INSTR_ORBRAR2: REGISTER.AB |= REGISTER._2B; continue;
case INSTR_ORBRAR3: REGISTER.AB |= REGISTER._3B; continue;
case INSTR_ORBRAR4: REGISTER.AB |= REGISTER._4B; continue;
case INSTR_ORBRAR5: REGISTER.AB |= REGISTER._5B; continue;
case INSTR_ORBRAR6: REGISTER.AB |= REGISTER._6B; continue;
case INSTR_ORBRAR7: REGISTER.AB |= REGISTER._7B; continue;
case INSTR_ORBRAR8: REGISTER.AB |= REGISTER._8B; continue;
case INSTR_ORBRAR9: REGISTER.AB |= REGISTER._9B; continue;
case INSTR_ORBRAR10: REGISTER.AB |= REGISTER._10B; continue;
case INSTR_ORBRAR11: REGISTER.AB |= REGISTER._11B; continue;
case INSTR_ORBRAR12: REGISTER.AB |= REGISTER._12B; continue;
case INSTR_ORBRARIP: REGISTER.AB |= REGISTER.IPB; continue;
case INSTR_ORBRARSP: REGISTER.AB |= REGISTER.SPB; continue;
case INSTR_ORBRARBP: REGISTER.AB |= REGISTER.BPB; continue;
case INSTR_ORBRBI: REGISTER.BB |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBRBRA: REGISTER.BB |= REGISTER.AB; continue;
case INSTR_ORBRBRB: REGISTER.BB |= REGISTER.BB; continue;
case INSTR_ORBRBRC: REGISTER.BB |= REGISTER.CB; continue;
case INSTR_ORBRBRD: REGISTER.BB |= REGISTER.DB; continue;
case INSTR_ORBRBR0: REGISTER.BB |= REGISTER._0B; continue;
case INSTR_ORBRBR1: REGISTER.BB |= REGISTER._1B; continue;
case INSTR_ORBRBR2: REGISTER.BB |= REGISTER._2B; continue;
case INSTR_ORBRBR3: REGISTER.BB |= REGISTER._3B; continue;
case INSTR_ORBRBR4: REGISTER.BB |= REGISTER._4B; continue;
case INSTR_ORBRBR5: REGISTER.BB |= REGISTER._5B; continue;
case INSTR_ORBRBR6: REGISTER.BB |= REGISTER._6B; continue;
case INSTR_ORBRBR7: REGISTER.BB |= REGISTER._7B; continue;
case INSTR_ORBRBR8: REGISTER.BB |= REGISTER._8B; continue;
case INSTR_ORBRBR9: REGISTER.BB |= REGISTER._9B; continue;
case INSTR_ORBRBR10: REGISTER.BB |= REGISTER._10B; continue;
case INSTR_ORBRBR11: REGISTER.BB |= REGISTER._11B; continue;
case INSTR_ORBRBR12: REGISTER.BB |= REGISTER._12B; continue;
case INSTR_ORBRBRIP: REGISTER.BB |= REGISTER.IPB; continue;
case INSTR_ORBRBRSP: REGISTER.BB |= REGISTER.SPB; continue;
case INSTR_ORBRBRBP: REGISTER.BB |= REGISTER.BPB; continue;
case INSTR_ORBRCI: REGISTER.CB |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBRCRA: REGISTER.CB |= REGISTER.AB; continue;
case INSTR_ORBRCRB: REGISTER.CB |= REGISTER.BB; continue;
case INSTR_ORBRCRC: REGISTER.CB |= REGISTER.CB; continue;
case INSTR_ORBRCRD: REGISTER.CB |= REGISTER.DB; continue;
case INSTR_ORBRCR0: REGISTER.CB |= REGISTER._0B; continue;
case INSTR_ORBRCR1: REGISTER.CB |= REGISTER._1B; continue;
case INSTR_ORBRCR2: REGISTER.CB |= REGISTER._2B; continue;
case INSTR_ORBRCR3: REGISTER.CB |= REGISTER._3B; continue;
case INSTR_ORBRCR4: REGISTER.CB |= REGISTER._4B; continue;
case INSTR_ORBRCR5: REGISTER.CB |= REGISTER._5B; continue;
case INSTR_ORBRCR6: REGISTER.CB |= REGISTER._6B; continue;
case INSTR_ORBRCR7: REGISTER.CB |= REGISTER._7B; continue;
case INSTR_ORBRCR8: REGISTER.CB |= REGISTER._8B; continue;
case INSTR_ORBRCR9: REGISTER.CB |= REGISTER._9B; continue;
case INSTR_ORBRCR10: REGISTER.CB |= REGISTER._10B; continue;
case INSTR_ORBRCR11: REGISTER.CB |= REGISTER._11B; continue;
case INSTR_ORBRCR12: REGISTER.CB |= REGISTER._12B; continue;
case INSTR_ORBRCRIP: REGISTER.CB |= REGISTER.IPB; continue;
case INSTR_ORBRCRSP: REGISTER.CB |= REGISTER.SPB; continue;
case INSTR_ORBRCRBP: REGISTER.CB |= REGISTER.BPB; continue;
case INSTR_ORBRDI: REGISTER.DB |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBRDRA: REGISTER.DB |= REGISTER.AB; continue;
case INSTR_ORBRDRB: REGISTER.DB |= REGISTER.BB; continue;
case INSTR_ORBRDRC: REGISTER.DB |= REGISTER.CB; continue;
case INSTR_ORBRDRD: REGISTER.DB |= REGISTER.DB; continue;
case INSTR_ORBRDR0: REGISTER.DB |= REGISTER._0B; continue;
case INSTR_ORBRDR1: REGISTER.DB |= REGISTER._1B; continue;
case INSTR_ORBRDR2: REGISTER.DB |= REGISTER._2B; continue;
case INSTR_ORBRDR3: REGISTER.DB |= REGISTER._3B; continue;
case INSTR_ORBRDR4: REGISTER.DB |= REGISTER._4B; continue;
case INSTR_ORBRDR5: REGISTER.DB |= REGISTER._5B; continue;
case INSTR_ORBRDR6: REGISTER.DB |= REGISTER._6B; continue;
case INSTR_ORBRDR7: REGISTER.DB |= REGISTER._7B; continue;
case INSTR_ORBRDR8: REGISTER.DB |= REGISTER._8B; continue;
case INSTR_ORBRDR9: REGISTER.DB |= REGISTER._9B; continue;
case INSTR_ORBRDR10: REGISTER.DB |= REGISTER._10B; continue;
case INSTR_ORBRDR11: REGISTER.DB |= REGISTER._11B; continue;
case INSTR_ORBRDR12: REGISTER.DB |= REGISTER._12B; continue;
case INSTR_ORBRDRIP: REGISTER.DB |= REGISTER.IPB; continue;
case INSTR_ORBRDRSP: REGISTER.DB |= REGISTER.SPB; continue;
case INSTR_ORBRDRBP: REGISTER.DB |= REGISTER.BPB; continue;
case INSTR_ORBR0I: REGISTER._0B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR0RA: REGISTER._0B |= REGISTER.AB; continue;
case INSTR_ORBR0RB: REGISTER._0B |= REGISTER.BB; continue;
case INSTR_ORBR0RC: REGISTER._0B |= REGISTER.CB; continue;
case INSTR_ORBR0RD: REGISTER._0B |= REGISTER.DB; continue;
case INSTR_ORBR0R0: REGISTER._0B |= REGISTER._0B; continue;
case INSTR_ORBR0R1: REGISTER._0B |= REGISTER._1B; continue;
case INSTR_ORBR0R2: REGISTER._0B |= REGISTER._2B; continue;
case INSTR_ORBR0R3: REGISTER._0B |= REGISTER._3B; continue;
case INSTR_ORBR0R4: REGISTER._0B |= REGISTER._4B; continue;
case INSTR_ORBR0R5: REGISTER._0B |= REGISTER._5B; continue;
case INSTR_ORBR0R6: REGISTER._0B |= REGISTER._6B; continue;
case INSTR_ORBR0R7: REGISTER._0B |= REGISTER._7B; continue;
case INSTR_ORBR0R8: REGISTER._0B |= REGISTER._8B; continue;
case INSTR_ORBR0R9: REGISTER._0B |= REGISTER._9B; continue;
case INSTR_ORBR0R10: REGISTER._0B |= REGISTER._10B; continue;
case INSTR_ORBR0R11: REGISTER._0B |= REGISTER._11B; continue;
case INSTR_ORBR0R12: REGISTER._0B |= REGISTER._12B; continue;
case INSTR_ORBR0RIP: REGISTER._0B |= REGISTER.IPB; continue;
case INSTR_ORBR0RSP: REGISTER._0B |= REGISTER.SPB; continue;
case INSTR_ORBR0RBP: REGISTER._0B |= REGISTER.BPB; continue;
case INSTR_ORBR1I: REGISTER._1B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR1RA: REGISTER._1B |= REGISTER.AB; continue;
case INSTR_ORBR1RB: REGISTER._1B |= REGISTER.BB; continue;
case INSTR_ORBR1RC: REGISTER._1B |= REGISTER.CB; continue;
case INSTR_ORBR1RD: REGISTER._1B |= REGISTER.DB; continue;
case INSTR_ORBR1R0: REGISTER._1B |= REGISTER._0B; continue;
case INSTR_ORBR1R1: REGISTER._1B |= REGISTER._1B; continue;
case INSTR_ORBR1R2: REGISTER._1B |= REGISTER._2B; continue;
case INSTR_ORBR1R3: REGISTER._1B |= REGISTER._3B; continue;
case INSTR_ORBR1R4: REGISTER._1B |= REGISTER._4B; continue;
case INSTR_ORBR1R5: REGISTER._1B |= REGISTER._5B; continue;
case INSTR_ORBR1R6: REGISTER._1B |= REGISTER._6B; continue;
case INSTR_ORBR1R7: REGISTER._1B |= REGISTER._7B; continue;
case INSTR_ORBR1R8: REGISTER._1B |= REGISTER._8B; continue;
case INSTR_ORBR1R9: REGISTER._1B |= REGISTER._9B; continue;
case INSTR_ORBR1R10: REGISTER._1B |= REGISTER._10B; continue;
case INSTR_ORBR1R11: REGISTER._1B |= REGISTER._11B; continue;
case INSTR_ORBR1R12: REGISTER._1B |= REGISTER._12B; continue;
case INSTR_ORBR1RIP: REGISTER._1B |= REGISTER.IPB; continue;
case INSTR_ORBR1RSP: REGISTER._1B |= REGISTER.SPB; continue;
case INSTR_ORBR1RBP: REGISTER._1B |= REGISTER.BPB; continue;
case INSTR_ORBR2I: REGISTER._2B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR2RA: REGISTER._2B |= REGISTER.AB; continue;
case INSTR_ORBR2RB: REGISTER._2B |= REGISTER.BB; continue;
case INSTR_ORBR2RC: REGISTER._2B |= REGISTER.CB; continue;
case INSTR_ORBR2RD: REGISTER._2B |= REGISTER.DB; continue;
case INSTR_ORBR2R0: REGISTER._2B |= REGISTER._0B; continue;
case INSTR_ORBR2R1: REGISTER._2B |= REGISTER._1B; continue;
case INSTR_ORBR2R2: REGISTER._2B |= REGISTER._2B; continue;
case INSTR_ORBR2R3: REGISTER._2B |= REGISTER._3B; continue;
case INSTR_ORBR2R4: REGISTER._2B |= REGISTER._4B; continue;
case INSTR_ORBR2R5: REGISTER._2B |= REGISTER._5B; continue;
case INSTR_ORBR2R6: REGISTER._2B |= REGISTER._6B; continue;
case INSTR_ORBR2R7: REGISTER._2B |= REGISTER._7B; continue;
case INSTR_ORBR2R8: REGISTER._2B |= REGISTER._8B; continue;
case INSTR_ORBR2R9: REGISTER._2B |= REGISTER._9B; continue;
case INSTR_ORBR2R10: REGISTER._2B |= REGISTER._10B; continue;
case INSTR_ORBR2R11: REGISTER._2B |= REGISTER._11B; continue;
case INSTR_ORBR2R12: REGISTER._2B |= REGISTER._12B; continue;
case INSTR_ORBR2RIP: REGISTER._2B |= REGISTER.IPB; continue;
case INSTR_ORBR2RSP: REGISTER._2B |= REGISTER.SPB; continue;
case INSTR_ORBR2RBP: REGISTER._2B |= REGISTER.BPB; continue;
case INSTR_ORBR3I: REGISTER._3B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR3RA: REGISTER._3B |= REGISTER.AB; continue;
case INSTR_ORBR3RB: REGISTER._3B |= REGISTER.BB; continue;
case INSTR_ORBR3RC: REGISTER._3B |= REGISTER.CB; continue;
case INSTR_ORBR3RD: REGISTER._3B |= REGISTER.DB; continue;
case INSTR_ORBR3R0: REGISTER._3B |= REGISTER._0B; continue;
case INSTR_ORBR3R1: REGISTER._3B |= REGISTER._1B; continue;
case INSTR_ORBR3R2: REGISTER._3B |= REGISTER._2B; continue;
case INSTR_ORBR3R3: REGISTER._3B |= REGISTER._3B; continue;
case INSTR_ORBR3R4: REGISTER._3B |= REGISTER._4B; continue;
case INSTR_ORBR3R5: REGISTER._3B |= REGISTER._5B; continue;
case INSTR_ORBR3R6: REGISTER._3B |= REGISTER._6B; continue;
case INSTR_ORBR3R7: REGISTER._3B |= REGISTER._7B; continue;
case INSTR_ORBR3R8: REGISTER._3B |= REGISTER._8B; continue;
case INSTR_ORBR3R9: REGISTER._3B |= REGISTER._9B; continue;
case INSTR_ORBR3R10: REGISTER._3B |= REGISTER._10B; continue;
case INSTR_ORBR3R11: REGISTER._3B |= REGISTER._11B; continue;
case INSTR_ORBR3R12: REGISTER._3B |= REGISTER._12B; continue;
case INSTR_ORBR3RIP: REGISTER._3B |= REGISTER.IPB; continue;
case INSTR_ORBR3RSP: REGISTER._3B |= REGISTER.SPB; continue;
case INSTR_ORBR3RBP: REGISTER._3B |= REGISTER.BPB; continue;
case INSTR_ORBR4I: REGISTER._4B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR4RA: REGISTER._4B |= REGISTER.AB; continue;
case INSTR_ORBR4RB: REGISTER._4B |= REGISTER.BB; continue;
case INSTR_ORBR4RC: REGISTER._4B |= REGISTER.CB; continue;
case INSTR_ORBR4RD: REGISTER._4B |= REGISTER.DB; continue;
case INSTR_ORBR4R0: REGISTER._4B |= REGISTER._0B; continue;
case INSTR_ORBR4R1: REGISTER._4B |= REGISTER._1B; continue;
case INSTR_ORBR4R2: REGISTER._4B |= REGISTER._2B; continue;
case INSTR_ORBR4R3: REGISTER._4B |= REGISTER._3B; continue;
case INSTR_ORBR4R4: REGISTER._4B |= REGISTER._4B; continue;
case INSTR_ORBR4R5: REGISTER._4B |= REGISTER._5B; continue;
case INSTR_ORBR4R6: REGISTER._4B |= REGISTER._6B; continue;
case INSTR_ORBR4R7: REGISTER._4B |= REGISTER._7B; continue;
case INSTR_ORBR4R8: REGISTER._4B |= REGISTER._8B; continue;
case INSTR_ORBR4R9: REGISTER._4B |= REGISTER._9B; continue;
case INSTR_ORBR4R10: REGISTER._4B |= REGISTER._10B; continue;
case INSTR_ORBR4R11: REGISTER._4B |= REGISTER._11B; continue;
case INSTR_ORBR4R12: REGISTER._4B |= REGISTER._12B; continue;
case INSTR_ORBR4RIP: REGISTER._4B |= REGISTER.IPB; continue;
case INSTR_ORBR4RSP: REGISTER._4B |= REGISTER.SPB; continue;
case INSTR_ORBR4RBP: REGISTER._4B |= REGISTER.BPB; continue;
case INSTR_ORBR5I: REGISTER._5B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR5RA: REGISTER._5B |= REGISTER.AB; continue;
case INSTR_ORBR5RB: REGISTER._5B |= REGISTER.BB; continue;
case INSTR_ORBR5RC: REGISTER._5B |= REGISTER.CB; continue;
case INSTR_ORBR5RD: REGISTER._5B |= REGISTER.DB; continue;
case INSTR_ORBR5R0: REGISTER._5B |= REGISTER._0B; continue;
case INSTR_ORBR5R1: REGISTER._5B |= REGISTER._1B; continue;
case INSTR_ORBR5R2: REGISTER._5B |= REGISTER._2B; continue;
case INSTR_ORBR5R3: REGISTER._5B |= REGISTER._3B; continue;
case INSTR_ORBR5R4: REGISTER._5B |= REGISTER._4B; continue;
case INSTR_ORBR5R5: REGISTER._5B |= REGISTER._5B; continue;
case INSTR_ORBR5R6: REGISTER._5B |= REGISTER._6B; continue;
case INSTR_ORBR5R7: REGISTER._5B |= REGISTER._7B; continue;
case INSTR_ORBR5R8: REGISTER._5B |= REGISTER._8B; continue;
case INSTR_ORBR5R9: REGISTER._5B |= REGISTER._9B; continue;
case INSTR_ORBR5R10: REGISTER._5B |= REGISTER._10B; continue;
case INSTR_ORBR5R11: REGISTER._5B |= REGISTER._11B; continue;
case INSTR_ORBR5R12: REGISTER._5B |= REGISTER._12B; continue;
case INSTR_ORBR5RIP: REGISTER._5B |= REGISTER.IPB; continue;
case INSTR_ORBR5RSP: REGISTER._5B |= REGISTER.SPB; continue;
case INSTR_ORBR5RBP: REGISTER._5B |= REGISTER.BPB; continue;
case INSTR_ORBR6I: REGISTER._6B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR6RA: REGISTER._6B |= REGISTER.AB; continue;
case INSTR_ORBR6RB: REGISTER._6B |= REGISTER.BB; continue;
case INSTR_ORBR6RC: REGISTER._6B |= REGISTER.CB; continue;
case INSTR_ORBR6RD: REGISTER._6B |= REGISTER.DB; continue;
case INSTR_ORBR6R0: REGISTER._6B |= REGISTER._0B; continue;
case INSTR_ORBR6R1: REGISTER._6B |= REGISTER._1B; continue;
case INSTR_ORBR6R2: REGISTER._6B |= REGISTER._2B; continue;
case INSTR_ORBR6R3: REGISTER._6B |= REGISTER._3B; continue;
case INSTR_ORBR6R4: REGISTER._6B |= REGISTER._4B; continue;
case INSTR_ORBR6R5: REGISTER._6B |= REGISTER._5B; continue;
case INSTR_ORBR6R6: REGISTER._6B |= REGISTER._6B; continue;
case INSTR_ORBR6R7: REGISTER._6B |= REGISTER._7B; continue;
case INSTR_ORBR6R8: REGISTER._6B |= REGISTER._8B; continue;
case INSTR_ORBR6R9: REGISTER._6B |= REGISTER._9B; continue;
case INSTR_ORBR6R10: REGISTER._6B |= REGISTER._10B; continue;
case INSTR_ORBR6R11: REGISTER._6B |= REGISTER._11B; continue;
case INSTR_ORBR6R12: REGISTER._6B |= REGISTER._12B; continue;
case INSTR_ORBR6RIP: REGISTER._6B |= REGISTER.IPB; continue;
case INSTR_ORBR6RSP: REGISTER._6B |= REGISTER.SPB; continue;
case INSTR_ORBR6RBP: REGISTER._6B |= REGISTER.BPB; continue;
case INSTR_ORBR7I: REGISTER._7B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR7RA: REGISTER._7B |= REGISTER.AB; continue;
case INSTR_ORBR7RB: REGISTER._7B |= REGISTER.BB; continue;
case INSTR_ORBR7RC: REGISTER._7B |= REGISTER.CB; continue;
case INSTR_ORBR7RD: REGISTER._7B |= REGISTER.DB; continue;
case INSTR_ORBR7R0: REGISTER._7B |= REGISTER._0B; continue;
case INSTR_ORBR7R1: REGISTER._7B |= REGISTER._1B; continue;
case INSTR_ORBR7R2: REGISTER._7B |= REGISTER._2B; continue;
case INSTR_ORBR7R3: REGISTER._7B |= REGISTER._3B; continue;
case INSTR_ORBR7R4: REGISTER._7B |= REGISTER._4B; continue;
case INSTR_ORBR7R5: REGISTER._7B |= REGISTER._5B; continue;
case INSTR_ORBR7R6: REGISTER._7B |= REGISTER._6B; continue;
case INSTR_ORBR7R7: REGISTER._7B |= REGISTER._7B; continue;
case INSTR_ORBR7R8: REGISTER._7B |= REGISTER._8B; continue;
case INSTR_ORBR7R9: REGISTER._7B |= REGISTER._9B; continue;
case INSTR_ORBR7R10: REGISTER._7B |= REGISTER._10B; continue;
case INSTR_ORBR7R11: REGISTER._7B |= REGISTER._11B; continue;
case INSTR_ORBR7R12: REGISTER._7B |= REGISTER._12B; continue;
case INSTR_ORBR7RIP: REGISTER._7B |= REGISTER.IPB; continue;
case INSTR_ORBR7RSP: REGISTER._7B |= REGISTER.SPB; continue;
case INSTR_ORBR7RBP: REGISTER._7B |= REGISTER.BPB; continue;
case INSTR_ORBR8I: REGISTER._8B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR8RA: REGISTER._8B |= REGISTER.AB; continue;
case INSTR_ORBR8RB: REGISTER._8B |= REGISTER.BB; continue;
case INSTR_ORBR8RC: REGISTER._8B |= REGISTER.CB; continue;
case INSTR_ORBR8RD: REGISTER._8B |= REGISTER.DB; continue;
case INSTR_ORBR8R0: REGISTER._8B |= REGISTER._0B; continue;
case INSTR_ORBR8R1: REGISTER._8B |= REGISTER._1B; continue;
case INSTR_ORBR8R2: REGISTER._8B |= REGISTER._2B; continue;
case INSTR_ORBR8R3: REGISTER._8B |= REGISTER._3B; continue;
case INSTR_ORBR8R4: REGISTER._8B |= REGISTER._4B; continue;
case INSTR_ORBR8R5: REGISTER._8B |= REGISTER._5B; continue;
case INSTR_ORBR8R6: REGISTER._8B |= REGISTER._6B; continue;
case INSTR_ORBR8R7: REGISTER._8B |= REGISTER._7B; continue;
case INSTR_ORBR8R8: REGISTER._8B |= REGISTER._8B; continue;
case INSTR_ORBR8R9: REGISTER._8B |= REGISTER._9B; continue;
case INSTR_ORBR8R10: REGISTER._8B |= REGISTER._10B; continue;
case INSTR_ORBR8R11: REGISTER._8B |= REGISTER._11B; continue;
case INSTR_ORBR8R12: REGISTER._8B |= REGISTER._12B; continue;
case INSTR_ORBR8RIP: REGISTER._8B |= REGISTER.IPB; continue;
case INSTR_ORBR8RSP: REGISTER._8B |= REGISTER.SPB; continue;
case INSTR_ORBR8RBP: REGISTER._8B |= REGISTER.BPB; continue;
case INSTR_ORBR9I: REGISTER._9B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR9RA: REGISTER._9B |= REGISTER.AB; continue;
case INSTR_ORBR9RB: REGISTER._9B |= REGISTER.BB; continue;
case INSTR_ORBR9RC: REGISTER._9B |= REGISTER.CB; continue;
case INSTR_ORBR9RD: REGISTER._9B |= REGISTER.DB; continue;
case INSTR_ORBR9R0: REGISTER._9B |= REGISTER._0B; continue;
case INSTR_ORBR9R1: REGISTER._9B |= REGISTER._1B; continue;
case INSTR_ORBR9R2: REGISTER._9B |= REGISTER._2B; continue;
case INSTR_ORBR9R3: REGISTER._9B |= REGISTER._3B; continue;
case INSTR_ORBR9R4: REGISTER._9B |= REGISTER._4B; continue;
case INSTR_ORBR9R5: REGISTER._9B |= REGISTER._5B; continue;
case INSTR_ORBR9R6: REGISTER._9B |= REGISTER._6B; continue;
case INSTR_ORBR9R7: REGISTER._9B |= REGISTER._7B; continue;
case INSTR_ORBR9R8: REGISTER._9B |= REGISTER._8B; continue;
case INSTR_ORBR9R9: REGISTER._9B |= REGISTER._9B; continue;
case INSTR_ORBR9R10: REGISTER._9B |= REGISTER._10B; continue;
case INSTR_ORBR9R11: REGISTER._9B |= REGISTER._11B; continue;
case INSTR_ORBR9R12: REGISTER._9B |= REGISTER._12B; continue;
case INSTR_ORBR9RIP: REGISTER._9B |= REGISTER.IPB; continue;
case INSTR_ORBR9RSP: REGISTER._9B |= REGISTER.SPB; continue;
case INSTR_ORBR9RBP: REGISTER._9B |= REGISTER.BPB; continue;
case INSTR_ORBR10I: REGISTER._10B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR10RA: REGISTER._10B |= REGISTER.AB; continue;
case INSTR_ORBR10RB: REGISTER._10B |= REGISTER.BB; continue;
case INSTR_ORBR10RC: REGISTER._10B |= REGISTER.CB; continue;
case INSTR_ORBR10RD: REGISTER._10B |= REGISTER.DB; continue;
case INSTR_ORBR10R0: REGISTER._10B |= REGISTER._0B; continue;
case INSTR_ORBR10R1: REGISTER._10B |= REGISTER._1B; continue;
case INSTR_ORBR10R2: REGISTER._10B |= REGISTER._2B; continue;
case INSTR_ORBR10R3: REGISTER._10B |= REGISTER._3B; continue;
case INSTR_ORBR10R4: REGISTER._10B |= REGISTER._4B; continue;
case INSTR_ORBR10R5: REGISTER._10B |= REGISTER._5B; continue;
case INSTR_ORBR10R6: REGISTER._10B |= REGISTER._6B; continue;
case INSTR_ORBR10R7: REGISTER._10B |= REGISTER._7B; continue;
case INSTR_ORBR10R8: REGISTER._10B |= REGISTER._8B; continue;
case INSTR_ORBR10R9: REGISTER._10B |= REGISTER._9B; continue;
case INSTR_ORBR10R10: REGISTER._10B |= REGISTER._10B; continue;
case INSTR_ORBR10R11: REGISTER._10B |= REGISTER._11B; continue;
case INSTR_ORBR10R12: REGISTER._10B |= REGISTER._12B; continue;
case INSTR_ORBR10RIP: REGISTER._10B |= REGISTER.IPB; continue;
case INSTR_ORBR10RSP: REGISTER._10B |= REGISTER.SPB; continue;
case INSTR_ORBR10RBP: REGISTER._10B |= REGISTER.BPB; continue;
case INSTR_ORBR11I: REGISTER._11B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR11RA: REGISTER._11B |= REGISTER.AB; continue;
case INSTR_ORBR11RB: REGISTER._11B |= REGISTER.BB; continue;
case INSTR_ORBR11RC: REGISTER._11B |= REGISTER.CB; continue;
case INSTR_ORBR11RD: REGISTER._11B |= REGISTER.DB; continue;
case INSTR_ORBR11R0: REGISTER._11B |= REGISTER._0B; continue;
case INSTR_ORBR11R1: REGISTER._11B |= REGISTER._1B; continue;
case INSTR_ORBR11R2: REGISTER._11B |= REGISTER._2B; continue;
case INSTR_ORBR11R3: REGISTER._11B |= REGISTER._3B; continue;
case INSTR_ORBR11R4: REGISTER._11B |= REGISTER._4B; continue;
case INSTR_ORBR11R5: REGISTER._11B |= REGISTER._5B; continue;
case INSTR_ORBR11R6: REGISTER._11B |= REGISTER._6B; continue;
case INSTR_ORBR11R7: REGISTER._11B |= REGISTER._7B; continue;
case INSTR_ORBR11R8: REGISTER._11B |= REGISTER._8B; continue;
case INSTR_ORBR11R9: REGISTER._11B |= REGISTER._9B; continue;
case INSTR_ORBR11R10: REGISTER._11B |= REGISTER._10B; continue;
case INSTR_ORBR11R11: REGISTER._11B |= REGISTER._11B; continue;
case INSTR_ORBR11R12: REGISTER._11B |= REGISTER._12B; continue;
case INSTR_ORBR11RIP: REGISTER._11B |= REGISTER.IPB; continue;
case INSTR_ORBR11RSP: REGISTER._11B |= REGISTER.SPB; continue;
case INSTR_ORBR11RBP: REGISTER._11B |= REGISTER.BPB; continue;
case INSTR_ORBR12I: REGISTER._12B |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBR12RA: REGISTER._12B |= REGISTER.AB; continue;
case INSTR_ORBR12RB: REGISTER._12B |= REGISTER.BB; continue;
case INSTR_ORBR12RC: REGISTER._12B |= REGISTER.CB; continue;
case INSTR_ORBR12RD: REGISTER._12B |= REGISTER.DB; continue;
case INSTR_ORBR12R0: REGISTER._12B |= REGISTER._0B; continue;
case INSTR_ORBR12R1: REGISTER._12B |= REGISTER._1B; continue;
case INSTR_ORBR12R2: REGISTER._12B |= REGISTER._2B; continue;
case INSTR_ORBR12R3: REGISTER._12B |= REGISTER._3B; continue;
case INSTR_ORBR12R4: REGISTER._12B |= REGISTER._4B; continue;
case INSTR_ORBR12R5: REGISTER._12B |= REGISTER._5B; continue;
case INSTR_ORBR12R6: REGISTER._12B |= REGISTER._6B; continue;
case INSTR_ORBR12R7: REGISTER._12B |= REGISTER._7B; continue;
case INSTR_ORBR12R8: REGISTER._12B |= REGISTER._8B; continue;
case INSTR_ORBR12R9: REGISTER._12B |= REGISTER._9B; continue;
case INSTR_ORBR12R10: REGISTER._12B |= REGISTER._10B; continue;
case INSTR_ORBR12R11: REGISTER._12B |= REGISTER._11B; continue;
case INSTR_ORBR12R12: REGISTER._12B |= REGISTER._12B; continue;
case INSTR_ORBR12RIP: REGISTER._12B |= REGISTER.IPB; continue;
case INSTR_ORBR12RSP: REGISTER._12B |= REGISTER.SPB; continue;
case INSTR_ORBR12RBP: REGISTER._12B |= REGISTER.BPB; continue;
case INSTR_ORBRIPI: REGISTER.IPB |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBRIPRA: REGISTER.IPB |= REGISTER.AB; continue;
case INSTR_ORBRIPRB: REGISTER.IPB |= REGISTER.BB; continue;
case INSTR_ORBRIPRC: REGISTER.IPB |= REGISTER.CB; continue;
case INSTR_ORBRIPRD: REGISTER.IPB |= REGISTER.DB; continue;
case INSTR_ORBRIPR0: REGISTER.IPB |= REGISTER._0B; continue;
case INSTR_ORBRIPR1: REGISTER.IPB |= REGISTER._1B; continue;
case INSTR_ORBRIPR2: REGISTER.IPB |= REGISTER._2B; continue;
case INSTR_ORBRIPR3: REGISTER.IPB |= REGISTER._3B; continue;
case INSTR_ORBRIPR4: REGISTER.IPB |= REGISTER._4B; continue;
case INSTR_ORBRIPR5: REGISTER.IPB |= REGISTER._5B; continue;
case INSTR_ORBRIPR6: REGISTER.IPB |= REGISTER._6B; continue;
case INSTR_ORBRIPR7: REGISTER.IPB |= REGISTER._7B; continue;
case INSTR_ORBRIPR8: REGISTER.IPB |= REGISTER._8B; continue;
case INSTR_ORBRIPR9: REGISTER.IPB |= REGISTER._9B; continue;
case INSTR_ORBRIPR10: REGISTER.IPB |= REGISTER._10B; continue;
case INSTR_ORBRIPR11: REGISTER.IPB |= REGISTER._11B; continue;
case INSTR_ORBRIPR12: REGISTER.IPB |= REGISTER._12B; continue;
case INSTR_ORBRIPRIP: REGISTER.IPB |= REGISTER.IPB; continue;
case INSTR_ORBRIPRSP: REGISTER.IPB |= REGISTER.SPB; continue;
case INSTR_ORBRIPRBP: REGISTER.IPB |= REGISTER.BPB; continue;
case INSTR_ORBRSPI: REGISTER.SPB |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBRSPRA: REGISTER.SPB |= REGISTER.AB; continue;
case INSTR_ORBRSPRB: REGISTER.SPB |= REGISTER.BB; continue;
case INSTR_ORBRSPRC: REGISTER.SPB |= REGISTER.CB; continue;
case INSTR_ORBRSPRD: REGISTER.SPB |= REGISTER.DB; continue;
case INSTR_ORBRSPR0: REGISTER.SPB |= REGISTER._0B; continue;
case INSTR_ORBRSPR1: REGISTER.SPB |= REGISTER._1B; continue;
case INSTR_ORBRSPR2: REGISTER.SPB |= REGISTER._2B; continue;
case INSTR_ORBRSPR3: REGISTER.SPB |= REGISTER._3B; continue;
case INSTR_ORBRSPR4: REGISTER.SPB |= REGISTER._4B; continue;
case INSTR_ORBRSPR5: REGISTER.SPB |= REGISTER._5B; continue;
case INSTR_ORBRSPR6: REGISTER.SPB |= REGISTER._6B; continue;
case INSTR_ORBRSPR7: REGISTER.SPB |= REGISTER._7B; continue;
case INSTR_ORBRSPR8: REGISTER.SPB |= REGISTER._8B; continue;
case INSTR_ORBRSPR9: REGISTER.SPB |= REGISTER._9B; continue;
case INSTR_ORBRSPR10: REGISTER.SPB |= REGISTER._10B; continue;
case INSTR_ORBRSPR11: REGISTER.SPB |= REGISTER._11B; continue;
case INSTR_ORBRSPR12: REGISTER.SPB |= REGISTER._12B; continue;
case INSTR_ORBRSPRIP: REGISTER.SPB |= REGISTER.IPB; continue;
case INSTR_ORBRSPRSP: REGISTER.SPB |= REGISTER.SPB; continue;
case INSTR_ORBRSPRBP: REGISTER.SPB |= REGISTER.BPB; continue;
case INSTR_ORBRBPI: REGISTER.BPB |= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ORBRBPRA: REGISTER.BPB |= REGISTER.AB; continue;
case INSTR_ORBRBPRB: REGISTER.BPB |= REGISTER.BB; continue;
case INSTR_ORBRBPRC: REGISTER.BPB |= REGISTER.CB; continue;
case INSTR_ORBRBPRD: REGISTER.BPB |= REGISTER.DB; continue;
case INSTR_ORBRBPR0: REGISTER.BPB |= REGISTER._0B; continue;
case INSTR_ORBRBPR1: REGISTER.BPB |= REGISTER._1B; continue;
case INSTR_ORBRBPR2: REGISTER.BPB |= REGISTER._2B; continue;
case INSTR_ORBRBPR3: REGISTER.BPB |= REGISTER._3B; continue;
case INSTR_ORBRBPR4: REGISTER.BPB |= REGISTER._4B; continue;
case INSTR_ORBRBPR5: REGISTER.BPB |= REGISTER._5B; continue;
case INSTR_ORBRBPR6: REGISTER.BPB |= REGISTER._6B; continue;
case INSTR_ORBRBPR7: REGISTER.BPB |= REGISTER._7B; continue;
case INSTR_ORBRBPR8: REGISTER.BPB |= REGISTER._8B; continue;
case INSTR_ORBRBPR9: REGISTER.BPB |= REGISTER._9B; continue;
case INSTR_ORBRBPR10: REGISTER.BPB |= REGISTER._10B; continue;
case INSTR_ORBRBPR11: REGISTER.BPB |= REGISTER._11B; continue;
case INSTR_ORBRBPR12: REGISTER.BPB |= REGISTER._12B; continue;
case INSTR_ORBRBPRIP: REGISTER.BPB |= REGISTER.IPB; continue;
case INSTR_ORBRBPRSP: REGISTER.BPB |= REGISTER.SPB; continue;
case INSTR_ORBRBPRBP: REGISTER.BPB |= REGISTER.BPB; continue;
case INSTR_ANDQRAI: REGISTER.AQ &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQRARA: REGISTER.AQ &= REGISTER.AQ; continue;
case INSTR_ANDQRARB: REGISTER.AQ &= REGISTER.BQ; continue;
case INSTR_ANDQRARC: REGISTER.AQ &= REGISTER.CQ; continue;
case INSTR_ANDQRARD: REGISTER.AQ &= REGISTER.DQ; continue;
case INSTR_ANDQRAR0: REGISTER.AQ &= REGISTER._0Q; continue;
case INSTR_ANDQRAR1: REGISTER.AQ &= REGISTER._1Q; continue;
case INSTR_ANDQRAR2: REGISTER.AQ &= REGISTER._2Q; continue;
case INSTR_ANDQRAR3: REGISTER.AQ &= REGISTER._3Q; continue;
case INSTR_ANDQRAR4: REGISTER.AQ &= REGISTER._4Q; continue;
case INSTR_ANDQRAR5: REGISTER.AQ &= REGISTER._5Q; continue;
case INSTR_ANDQRAR6: REGISTER.AQ &= REGISTER._6Q; continue;
case INSTR_ANDQRAR7: REGISTER.AQ &= REGISTER._7Q; continue;
case INSTR_ANDQRAR8: REGISTER.AQ &= REGISTER._8Q; continue;
case INSTR_ANDQRAR9: REGISTER.AQ &= REGISTER._9Q; continue;
case INSTR_ANDQRAR10: REGISTER.AQ &= REGISTER._10Q; continue;
case INSTR_ANDQRAR11: REGISTER.AQ &= REGISTER._11Q; continue;
case INSTR_ANDQRAR12: REGISTER.AQ &= REGISTER._12Q; continue;
case INSTR_ANDQRARIP: REGISTER.AQ &= REGISTER.IPQ; continue;
case INSTR_ANDQRARSP: REGISTER.AQ &= REGISTER.SPQ; continue;
case INSTR_ANDQRARBP: REGISTER.AQ &= REGISTER.BPQ; continue;
case INSTR_ANDQRBI: REGISTER.BQ &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQRBRA: REGISTER.BQ &= REGISTER.AQ; continue;
case INSTR_ANDQRBRB: REGISTER.BQ &= REGISTER.BQ; continue;
case INSTR_ANDQRBRC: REGISTER.BQ &= REGISTER.CQ; continue;
case INSTR_ANDQRBRD: REGISTER.BQ &= REGISTER.DQ; continue;
case INSTR_ANDQRBR0: REGISTER.BQ &= REGISTER._0Q; continue;
case INSTR_ANDQRBR1: REGISTER.BQ &= REGISTER._1Q; continue;
case INSTR_ANDQRBR2: REGISTER.BQ &= REGISTER._2Q; continue;
case INSTR_ANDQRBR3: REGISTER.BQ &= REGISTER._3Q; continue;
case INSTR_ANDQRBR4: REGISTER.BQ &= REGISTER._4Q; continue;
case INSTR_ANDQRBR5: REGISTER.BQ &= REGISTER._5Q; continue;
case INSTR_ANDQRBR6: REGISTER.BQ &= REGISTER._6Q; continue;
case INSTR_ANDQRBR7: REGISTER.BQ &= REGISTER._7Q; continue;
case INSTR_ANDQRBR8: REGISTER.BQ &= REGISTER._8Q; continue;
case INSTR_ANDQRBR9: REGISTER.BQ &= REGISTER._9Q; continue;
case INSTR_ANDQRBR10: REGISTER.BQ &= REGISTER._10Q; continue;
case INSTR_ANDQRBR11: REGISTER.BQ &= REGISTER._11Q; continue;
case INSTR_ANDQRBR12: REGISTER.BQ &= REGISTER._12Q; continue;
case INSTR_ANDQRBRIP: REGISTER.BQ &= REGISTER.IPQ; continue;
case INSTR_ANDQRBRSP: REGISTER.BQ &= REGISTER.SPQ; continue;
case INSTR_ANDQRBRBP: REGISTER.BQ &= REGISTER.BPQ; continue;
case INSTR_ANDQRCI: REGISTER.CQ &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQRCRA: REGISTER.CQ &= REGISTER.AQ; continue;
case INSTR_ANDQRCRB: REGISTER.CQ &= REGISTER.BQ; continue;
case INSTR_ANDQRCRC: REGISTER.CQ &= REGISTER.CQ; continue;
case INSTR_ANDQRCRD: REGISTER.CQ &= REGISTER.DQ; continue;
case INSTR_ANDQRCR0: REGISTER.CQ &= REGISTER._0Q; continue;
case INSTR_ANDQRCR1: REGISTER.CQ &= REGISTER._1Q; continue;
case INSTR_ANDQRCR2: REGISTER.CQ &= REGISTER._2Q; continue;
case INSTR_ANDQRCR3: REGISTER.CQ &= REGISTER._3Q; continue;
case INSTR_ANDQRCR4: REGISTER.CQ &= REGISTER._4Q; continue;
case INSTR_ANDQRCR5: REGISTER.CQ &= REGISTER._5Q; continue;
case INSTR_ANDQRCR6: REGISTER.CQ &= REGISTER._6Q; continue;
case INSTR_ANDQRCR7: REGISTER.CQ &= REGISTER._7Q; continue;
case INSTR_ANDQRCR8: REGISTER.CQ &= REGISTER._8Q; continue;
case INSTR_ANDQRCR9: REGISTER.CQ &= REGISTER._9Q; continue;
case INSTR_ANDQRCR10: REGISTER.CQ &= REGISTER._10Q; continue;
case INSTR_ANDQRCR11: REGISTER.CQ &= REGISTER._11Q; continue;
case INSTR_ANDQRCR12: REGISTER.CQ &= REGISTER._12Q; continue;
case INSTR_ANDQRCRIP: REGISTER.CQ &= REGISTER.IPQ; continue;
case INSTR_ANDQRCRSP: REGISTER.CQ &= REGISTER.SPQ; continue;
case INSTR_ANDQRCRBP: REGISTER.CQ &= REGISTER.BPQ; continue;
case INSTR_ANDQRDI: REGISTER.DQ &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQRDRA: REGISTER.DQ &= REGISTER.AQ; continue;
case INSTR_ANDQRDRB: REGISTER.DQ &= REGISTER.BQ; continue;
case INSTR_ANDQRDRC: REGISTER.DQ &= REGISTER.CQ; continue;
case INSTR_ANDQRDRD: REGISTER.DQ &= REGISTER.DQ; continue;
case INSTR_ANDQRDR0: REGISTER.DQ &= REGISTER._0Q; continue;
case INSTR_ANDQRDR1: REGISTER.DQ &= REGISTER._1Q; continue;
case INSTR_ANDQRDR2: REGISTER.DQ &= REGISTER._2Q; continue;
case INSTR_ANDQRDR3: REGISTER.DQ &= REGISTER._3Q; continue;
case INSTR_ANDQRDR4: REGISTER.DQ &= REGISTER._4Q; continue;
case INSTR_ANDQRDR5: REGISTER.DQ &= REGISTER._5Q; continue;
case INSTR_ANDQRDR6: REGISTER.DQ &= REGISTER._6Q; continue;
case INSTR_ANDQRDR7: REGISTER.DQ &= REGISTER._7Q; continue;
case INSTR_ANDQRDR8: REGISTER.DQ &= REGISTER._8Q; continue;
case INSTR_ANDQRDR9: REGISTER.DQ &= REGISTER._9Q; continue;
case INSTR_ANDQRDR10: REGISTER.DQ &= REGISTER._10Q; continue;
case INSTR_ANDQRDR11: REGISTER.DQ &= REGISTER._11Q; continue;
case INSTR_ANDQRDR12: REGISTER.DQ &= REGISTER._12Q; continue;
case INSTR_ANDQRDRIP: REGISTER.DQ &= REGISTER.IPQ; continue;
case INSTR_ANDQRDRSP: REGISTER.DQ &= REGISTER.SPQ; continue;
case INSTR_ANDQRDRBP: REGISTER.DQ &= REGISTER.BPQ; continue;
case INSTR_ANDQR0I: REGISTER._0Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR0RA: REGISTER._0Q &= REGISTER.AQ; continue;
case INSTR_ANDQR0RB: REGISTER._0Q &= REGISTER.BQ; continue;
case INSTR_ANDQR0RC: REGISTER._0Q &= REGISTER.CQ; continue;
case INSTR_ANDQR0RD: REGISTER._0Q &= REGISTER.DQ; continue;
case INSTR_ANDQR0R0: REGISTER._0Q &= REGISTER._0Q; continue;
case INSTR_ANDQR0R1: REGISTER._0Q &= REGISTER._1Q; continue;
case INSTR_ANDQR0R2: REGISTER._0Q &= REGISTER._2Q; continue;
case INSTR_ANDQR0R3: REGISTER._0Q &= REGISTER._3Q; continue;
case INSTR_ANDQR0R4: REGISTER._0Q &= REGISTER._4Q; continue;
case INSTR_ANDQR0R5: REGISTER._0Q &= REGISTER._5Q; continue;
case INSTR_ANDQR0R6: REGISTER._0Q &= REGISTER._6Q; continue;
case INSTR_ANDQR0R7: REGISTER._0Q &= REGISTER._7Q; continue;
case INSTR_ANDQR0R8: REGISTER._0Q &= REGISTER._8Q; continue;
case INSTR_ANDQR0R9: REGISTER._0Q &= REGISTER._9Q; continue;
case INSTR_ANDQR0R10: REGISTER._0Q &= REGISTER._10Q; continue;
case INSTR_ANDQR0R11: REGISTER._0Q &= REGISTER._11Q; continue;
case INSTR_ANDQR0R12: REGISTER._0Q &= REGISTER._12Q; continue;
case INSTR_ANDQR0RIP: REGISTER._0Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR0RSP: REGISTER._0Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR0RBP: REGISTER._0Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR1I: REGISTER._1Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR1RA: REGISTER._1Q &= REGISTER.AQ; continue;
case INSTR_ANDQR1RB: REGISTER._1Q &= REGISTER.BQ; continue;
case INSTR_ANDQR1RC: REGISTER._1Q &= REGISTER.CQ; continue;
case INSTR_ANDQR1RD: REGISTER._1Q &= REGISTER.DQ; continue;
case INSTR_ANDQR1R0: REGISTER._1Q &= REGISTER._0Q; continue;
case INSTR_ANDQR1R1: REGISTER._1Q &= REGISTER._1Q; continue;
case INSTR_ANDQR1R2: REGISTER._1Q &= REGISTER._2Q; continue;
case INSTR_ANDQR1R3: REGISTER._1Q &= REGISTER._3Q; continue;
case INSTR_ANDQR1R4: REGISTER._1Q &= REGISTER._4Q; continue;
case INSTR_ANDQR1R5: REGISTER._1Q &= REGISTER._5Q; continue;
case INSTR_ANDQR1R6: REGISTER._1Q &= REGISTER._6Q; continue;
case INSTR_ANDQR1R7: REGISTER._1Q &= REGISTER._7Q; continue;
case INSTR_ANDQR1R8: REGISTER._1Q &= REGISTER._8Q; continue;
case INSTR_ANDQR1R9: REGISTER._1Q &= REGISTER._9Q; continue;
case INSTR_ANDQR1R10: REGISTER._1Q &= REGISTER._10Q; continue;
case INSTR_ANDQR1R11: REGISTER._1Q &= REGISTER._11Q; continue;
case INSTR_ANDQR1R12: REGISTER._1Q &= REGISTER._12Q; continue;
case INSTR_ANDQR1RIP: REGISTER._1Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR1RSP: REGISTER._1Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR1RBP: REGISTER._1Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR2I: REGISTER._2Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR2RA: REGISTER._2Q &= REGISTER.AQ; continue;
case INSTR_ANDQR2RB: REGISTER._2Q &= REGISTER.BQ; continue;
case INSTR_ANDQR2RC: REGISTER._2Q &= REGISTER.CQ; continue;
case INSTR_ANDQR2RD: REGISTER._2Q &= REGISTER.DQ; continue;
case INSTR_ANDQR2R0: REGISTER._2Q &= REGISTER._0Q; continue;
case INSTR_ANDQR2R1: REGISTER._2Q &= REGISTER._1Q; continue;
case INSTR_ANDQR2R2: REGISTER._2Q &= REGISTER._2Q; continue;
case INSTR_ANDQR2R3: REGISTER._2Q &= REGISTER._3Q; continue;
case INSTR_ANDQR2R4: REGISTER._2Q &= REGISTER._4Q; continue;
case INSTR_ANDQR2R5: REGISTER._2Q &= REGISTER._5Q; continue;
case INSTR_ANDQR2R6: REGISTER._2Q &= REGISTER._6Q; continue;
case INSTR_ANDQR2R7: REGISTER._2Q &= REGISTER._7Q; continue;
case INSTR_ANDQR2R8: REGISTER._2Q &= REGISTER._8Q; continue;
case INSTR_ANDQR2R9: REGISTER._2Q &= REGISTER._9Q; continue;
case INSTR_ANDQR2R10: REGISTER._2Q &= REGISTER._10Q; continue;
case INSTR_ANDQR2R11: REGISTER._2Q &= REGISTER._11Q; continue;
case INSTR_ANDQR2R12: REGISTER._2Q &= REGISTER._12Q; continue;
case INSTR_ANDQR2RIP: REGISTER._2Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR2RSP: REGISTER._2Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR2RBP: REGISTER._2Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR3I: REGISTER._3Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR3RA: REGISTER._3Q &= REGISTER.AQ; continue;
case INSTR_ANDQR3RB: REGISTER._3Q &= REGISTER.BQ; continue;
case INSTR_ANDQR3RC: REGISTER._3Q &= REGISTER.CQ; continue;
case INSTR_ANDQR3RD: REGISTER._3Q &= REGISTER.DQ; continue;
case INSTR_ANDQR3R0: REGISTER._3Q &= REGISTER._0Q; continue;
case INSTR_ANDQR3R1: REGISTER._3Q &= REGISTER._1Q; continue;
case INSTR_ANDQR3R2: REGISTER._3Q &= REGISTER._2Q; continue;
case INSTR_ANDQR3R3: REGISTER._3Q &= REGISTER._3Q; continue;
case INSTR_ANDQR3R4: REGISTER._3Q &= REGISTER._4Q; continue;
case INSTR_ANDQR3R5: REGISTER._3Q &= REGISTER._5Q; continue;
case INSTR_ANDQR3R6: REGISTER._3Q &= REGISTER._6Q; continue;
case INSTR_ANDQR3R7: REGISTER._3Q &= REGISTER._7Q; continue;
case INSTR_ANDQR3R8: REGISTER._3Q &= REGISTER._8Q; continue;
case INSTR_ANDQR3R9: REGISTER._3Q &= REGISTER._9Q; continue;
case INSTR_ANDQR3R10: REGISTER._3Q &= REGISTER._10Q; continue;
case INSTR_ANDQR3R11: REGISTER._3Q &= REGISTER._11Q; continue;
case INSTR_ANDQR3R12: REGISTER._3Q &= REGISTER._12Q; continue;
case INSTR_ANDQR3RIP: REGISTER._3Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR3RSP: REGISTER._3Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR3RBP: REGISTER._3Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR4I: REGISTER._4Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR4RA: REGISTER._4Q &= REGISTER.AQ; continue;
case INSTR_ANDQR4RB: REGISTER._4Q &= REGISTER.BQ; continue;
case INSTR_ANDQR4RC: REGISTER._4Q &= REGISTER.CQ; continue;
case INSTR_ANDQR4RD: REGISTER._4Q &= REGISTER.DQ; continue;
case INSTR_ANDQR4R0: REGISTER._4Q &= REGISTER._0Q; continue;
case INSTR_ANDQR4R1: REGISTER._4Q &= REGISTER._1Q; continue;
case INSTR_ANDQR4R2: REGISTER._4Q &= REGISTER._2Q; continue;
case INSTR_ANDQR4R3: REGISTER._4Q &= REGISTER._3Q; continue;
case INSTR_ANDQR4R4: REGISTER._4Q &= REGISTER._4Q; continue;
case INSTR_ANDQR4R5: REGISTER._4Q &= REGISTER._5Q; continue;
case INSTR_ANDQR4R6: REGISTER._4Q &= REGISTER._6Q; continue;
case INSTR_ANDQR4R7: REGISTER._4Q &= REGISTER._7Q; continue;
case INSTR_ANDQR4R8: REGISTER._4Q &= REGISTER._8Q; continue;
case INSTR_ANDQR4R9: REGISTER._4Q &= REGISTER._9Q; continue;
case INSTR_ANDQR4R10: REGISTER._4Q &= REGISTER._10Q; continue;
case INSTR_ANDQR4R11: REGISTER._4Q &= REGISTER._11Q; continue;
case INSTR_ANDQR4R12: REGISTER._4Q &= REGISTER._12Q; continue;
case INSTR_ANDQR4RIP: REGISTER._4Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR4RSP: REGISTER._4Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR4RBP: REGISTER._4Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR5I: REGISTER._5Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR5RA: REGISTER._5Q &= REGISTER.AQ; continue;
case INSTR_ANDQR5RB: REGISTER._5Q &= REGISTER.BQ; continue;
case INSTR_ANDQR5RC: REGISTER._5Q &= REGISTER.CQ; continue;
case INSTR_ANDQR5RD: REGISTER._5Q &= REGISTER.DQ; continue;
case INSTR_ANDQR5R0: REGISTER._5Q &= REGISTER._0Q; continue;
case INSTR_ANDQR5R1: REGISTER._5Q &= REGISTER._1Q; continue;
case INSTR_ANDQR5R2: REGISTER._5Q &= REGISTER._2Q; continue;
case INSTR_ANDQR5R3: REGISTER._5Q &= REGISTER._3Q; continue;
case INSTR_ANDQR5R4: REGISTER._5Q &= REGISTER._4Q; continue;
case INSTR_ANDQR5R5: REGISTER._5Q &= REGISTER._5Q; continue;
case INSTR_ANDQR5R6: REGISTER._5Q &= REGISTER._6Q; continue;
case INSTR_ANDQR5R7: REGISTER._5Q &= REGISTER._7Q; continue;
case INSTR_ANDQR5R8: REGISTER._5Q &= REGISTER._8Q; continue;
case INSTR_ANDQR5R9: REGISTER._5Q &= REGISTER._9Q; continue;
case INSTR_ANDQR5R10: REGISTER._5Q &= REGISTER._10Q; continue;
case INSTR_ANDQR5R11: REGISTER._5Q &= REGISTER._11Q; continue;
case INSTR_ANDQR5R12: REGISTER._5Q &= REGISTER._12Q; continue;
case INSTR_ANDQR5RIP: REGISTER._5Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR5RSP: REGISTER._5Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR5RBP: REGISTER._5Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR6I: REGISTER._6Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR6RA: REGISTER._6Q &= REGISTER.AQ; continue;
case INSTR_ANDQR6RB: REGISTER._6Q &= REGISTER.BQ; continue;
case INSTR_ANDQR6RC: REGISTER._6Q &= REGISTER.CQ; continue;
case INSTR_ANDQR6RD: REGISTER._6Q &= REGISTER.DQ; continue;
case INSTR_ANDQR6R0: REGISTER._6Q &= REGISTER._0Q; continue;
case INSTR_ANDQR6R1: REGISTER._6Q &= REGISTER._1Q; continue;
case INSTR_ANDQR6R2: REGISTER._6Q &= REGISTER._2Q; continue;
case INSTR_ANDQR6R3: REGISTER._6Q &= REGISTER._3Q; continue;
case INSTR_ANDQR6R4: REGISTER._6Q &= REGISTER._4Q; continue;
case INSTR_ANDQR6R5: REGISTER._6Q &= REGISTER._5Q; continue;
case INSTR_ANDQR6R6: REGISTER._6Q &= REGISTER._6Q; continue;
case INSTR_ANDQR6R7: REGISTER._6Q &= REGISTER._7Q; continue;
case INSTR_ANDQR6R8: REGISTER._6Q &= REGISTER._8Q; continue;
case INSTR_ANDQR6R9: REGISTER._6Q &= REGISTER._9Q; continue;
case INSTR_ANDQR6R10: REGISTER._6Q &= REGISTER._10Q; continue;
case INSTR_ANDQR6R11: REGISTER._6Q &= REGISTER._11Q; continue;
case INSTR_ANDQR6R12: REGISTER._6Q &= REGISTER._12Q; continue;
case INSTR_ANDQR6RIP: REGISTER._6Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR6RSP: REGISTER._6Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR6RBP: REGISTER._6Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR7I: REGISTER._7Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR7RA: REGISTER._7Q &= REGISTER.AQ; continue;
case INSTR_ANDQR7RB: REGISTER._7Q &= REGISTER.BQ; continue;
case INSTR_ANDQR7RC: REGISTER._7Q &= REGISTER.CQ; continue;
case INSTR_ANDQR7RD: REGISTER._7Q &= REGISTER.DQ; continue;
case INSTR_ANDQR7R0: REGISTER._7Q &= REGISTER._0Q; continue;
case INSTR_ANDQR7R1: REGISTER._7Q &= REGISTER._1Q; continue;
case INSTR_ANDQR7R2: REGISTER._7Q &= REGISTER._2Q; continue;
case INSTR_ANDQR7R3: REGISTER._7Q &= REGISTER._3Q; continue;
case INSTR_ANDQR7R4: REGISTER._7Q &= REGISTER._4Q; continue;
case INSTR_ANDQR7R5: REGISTER._7Q &= REGISTER._5Q; continue;
case INSTR_ANDQR7R6: REGISTER._7Q &= REGISTER._6Q; continue;
case INSTR_ANDQR7R7: REGISTER._7Q &= REGISTER._7Q; continue;
case INSTR_ANDQR7R8: REGISTER._7Q &= REGISTER._8Q; continue;
case INSTR_ANDQR7R9: REGISTER._7Q &= REGISTER._9Q; continue;
case INSTR_ANDQR7R10: REGISTER._7Q &= REGISTER._10Q; continue;
case INSTR_ANDQR7R11: REGISTER._7Q &= REGISTER._11Q; continue;
case INSTR_ANDQR7R12: REGISTER._7Q &= REGISTER._12Q; continue;
case INSTR_ANDQR7RIP: REGISTER._7Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR7RSP: REGISTER._7Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR7RBP: REGISTER._7Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR8I: REGISTER._8Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR8RA: REGISTER._8Q &= REGISTER.AQ; continue;
case INSTR_ANDQR8RB: REGISTER._8Q &= REGISTER.BQ; continue;
case INSTR_ANDQR8RC: REGISTER._8Q &= REGISTER.CQ; continue;
case INSTR_ANDQR8RD: REGISTER._8Q &= REGISTER.DQ; continue;
case INSTR_ANDQR8R0: REGISTER._8Q &= REGISTER._0Q; continue;
case INSTR_ANDQR8R1: REGISTER._8Q &= REGISTER._1Q; continue;
case INSTR_ANDQR8R2: REGISTER._8Q &= REGISTER._2Q; continue;
case INSTR_ANDQR8R3: REGISTER._8Q &= REGISTER._3Q; continue;
case INSTR_ANDQR8R4: REGISTER._8Q &= REGISTER._4Q; continue;
case INSTR_ANDQR8R5: REGISTER._8Q &= REGISTER._5Q; continue;
case INSTR_ANDQR8R6: REGISTER._8Q &= REGISTER._6Q; continue;
case INSTR_ANDQR8R7: REGISTER._8Q &= REGISTER._7Q; continue;
case INSTR_ANDQR8R8: REGISTER._8Q &= REGISTER._8Q; continue;
case INSTR_ANDQR8R9: REGISTER._8Q &= REGISTER._9Q; continue;
case INSTR_ANDQR8R10: REGISTER._8Q &= REGISTER._10Q; continue;
case INSTR_ANDQR8R11: REGISTER._8Q &= REGISTER._11Q; continue;
case INSTR_ANDQR8R12: REGISTER._8Q &= REGISTER._12Q; continue;
case INSTR_ANDQR8RIP: REGISTER._8Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR8RSP: REGISTER._8Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR8RBP: REGISTER._8Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR9I: REGISTER._9Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR9RA: REGISTER._9Q &= REGISTER.AQ; continue;
case INSTR_ANDQR9RB: REGISTER._9Q &= REGISTER.BQ; continue;
case INSTR_ANDQR9RC: REGISTER._9Q &= REGISTER.CQ; continue;
case INSTR_ANDQR9RD: REGISTER._9Q &= REGISTER.DQ; continue;
case INSTR_ANDQR9R0: REGISTER._9Q &= REGISTER._0Q; continue;
case INSTR_ANDQR9R1: REGISTER._9Q &= REGISTER._1Q; continue;
case INSTR_ANDQR9R2: REGISTER._9Q &= REGISTER._2Q; continue;
case INSTR_ANDQR9R3: REGISTER._9Q &= REGISTER._3Q; continue;
case INSTR_ANDQR9R4: REGISTER._9Q &= REGISTER._4Q; continue;
case INSTR_ANDQR9R5: REGISTER._9Q &= REGISTER._5Q; continue;
case INSTR_ANDQR9R6: REGISTER._9Q &= REGISTER._6Q; continue;
case INSTR_ANDQR9R7: REGISTER._9Q &= REGISTER._7Q; continue;
case INSTR_ANDQR9R8: REGISTER._9Q &= REGISTER._8Q; continue;
case INSTR_ANDQR9R9: REGISTER._9Q &= REGISTER._9Q; continue;
case INSTR_ANDQR9R10: REGISTER._9Q &= REGISTER._10Q; continue;
case INSTR_ANDQR9R11: REGISTER._9Q &= REGISTER._11Q; continue;
case INSTR_ANDQR9R12: REGISTER._9Q &= REGISTER._12Q; continue;
case INSTR_ANDQR9RIP: REGISTER._9Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR9RSP: REGISTER._9Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR9RBP: REGISTER._9Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR10I: REGISTER._10Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR10RA: REGISTER._10Q &= REGISTER.AQ; continue;
case INSTR_ANDQR10RB: REGISTER._10Q &= REGISTER.BQ; continue;
case INSTR_ANDQR10RC: REGISTER._10Q &= REGISTER.CQ; continue;
case INSTR_ANDQR10RD: REGISTER._10Q &= REGISTER.DQ; continue;
case INSTR_ANDQR10R0: REGISTER._10Q &= REGISTER._0Q; continue;
case INSTR_ANDQR10R1: REGISTER._10Q &= REGISTER._1Q; continue;
case INSTR_ANDQR10R2: REGISTER._10Q &= REGISTER._2Q; continue;
case INSTR_ANDQR10R3: REGISTER._10Q &= REGISTER._3Q; continue;
case INSTR_ANDQR10R4: REGISTER._10Q &= REGISTER._4Q; continue;
case INSTR_ANDQR10R5: REGISTER._10Q &= REGISTER._5Q; continue;
case INSTR_ANDQR10R6: REGISTER._10Q &= REGISTER._6Q; continue;
case INSTR_ANDQR10R7: REGISTER._10Q &= REGISTER._7Q; continue;
case INSTR_ANDQR10R8: REGISTER._10Q &= REGISTER._8Q; continue;
case INSTR_ANDQR10R9: REGISTER._10Q &= REGISTER._9Q; continue;
case INSTR_ANDQR10R10: REGISTER._10Q &= REGISTER._10Q; continue;
case INSTR_ANDQR10R11: REGISTER._10Q &= REGISTER._11Q; continue;
case INSTR_ANDQR10R12: REGISTER._10Q &= REGISTER._12Q; continue;
case INSTR_ANDQR10RIP: REGISTER._10Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR10RSP: REGISTER._10Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR10RBP: REGISTER._10Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR11I: REGISTER._11Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR11RA: REGISTER._11Q &= REGISTER.AQ; continue;
case INSTR_ANDQR11RB: REGISTER._11Q &= REGISTER.BQ; continue;
case INSTR_ANDQR11RC: REGISTER._11Q &= REGISTER.CQ; continue;
case INSTR_ANDQR11RD: REGISTER._11Q &= REGISTER.DQ; continue;
case INSTR_ANDQR11R0: REGISTER._11Q &= REGISTER._0Q; continue;
case INSTR_ANDQR11R1: REGISTER._11Q &= REGISTER._1Q; continue;
case INSTR_ANDQR11R2: REGISTER._11Q &= REGISTER._2Q; continue;
case INSTR_ANDQR11R3: REGISTER._11Q &= REGISTER._3Q; continue;
case INSTR_ANDQR11R4: REGISTER._11Q &= REGISTER._4Q; continue;
case INSTR_ANDQR11R5: REGISTER._11Q &= REGISTER._5Q; continue;
case INSTR_ANDQR11R6: REGISTER._11Q &= REGISTER._6Q; continue;
case INSTR_ANDQR11R7: REGISTER._11Q &= REGISTER._7Q; continue;
case INSTR_ANDQR11R8: REGISTER._11Q &= REGISTER._8Q; continue;
case INSTR_ANDQR11R9: REGISTER._11Q &= REGISTER._9Q; continue;
case INSTR_ANDQR11R10: REGISTER._11Q &= REGISTER._10Q; continue;
case INSTR_ANDQR11R11: REGISTER._11Q &= REGISTER._11Q; continue;
case INSTR_ANDQR11R12: REGISTER._11Q &= REGISTER._12Q; continue;
case INSTR_ANDQR11RIP: REGISTER._11Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR11RSP: REGISTER._11Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR11RBP: REGISTER._11Q &= REGISTER.BPQ; continue;
case INSTR_ANDQR12I: REGISTER._12Q &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQR12RA: REGISTER._12Q &= REGISTER.AQ; continue;
case INSTR_ANDQR12RB: REGISTER._12Q &= REGISTER.BQ; continue;
case INSTR_ANDQR12RC: REGISTER._12Q &= REGISTER.CQ; continue;
case INSTR_ANDQR12RD: REGISTER._12Q &= REGISTER.DQ; continue;
case INSTR_ANDQR12R0: REGISTER._12Q &= REGISTER._0Q; continue;
case INSTR_ANDQR12R1: REGISTER._12Q &= REGISTER._1Q; continue;
case INSTR_ANDQR12R2: REGISTER._12Q &= REGISTER._2Q; continue;
case INSTR_ANDQR12R3: REGISTER._12Q &= REGISTER._3Q; continue;
case INSTR_ANDQR12R4: REGISTER._12Q &= REGISTER._4Q; continue;
case INSTR_ANDQR12R5: REGISTER._12Q &= REGISTER._5Q; continue;
case INSTR_ANDQR12R6: REGISTER._12Q &= REGISTER._6Q; continue;
case INSTR_ANDQR12R7: REGISTER._12Q &= REGISTER._7Q; continue;
case INSTR_ANDQR12R8: REGISTER._12Q &= REGISTER._8Q; continue;
case INSTR_ANDQR12R9: REGISTER._12Q &= REGISTER._9Q; continue;
case INSTR_ANDQR12R10: REGISTER._12Q &= REGISTER._10Q; continue;
case INSTR_ANDQR12R11: REGISTER._12Q &= REGISTER._11Q; continue;
case INSTR_ANDQR12R12: REGISTER._12Q &= REGISTER._12Q; continue;
case INSTR_ANDQR12RIP: REGISTER._12Q &= REGISTER.IPQ; continue;
case INSTR_ANDQR12RSP: REGISTER._12Q &= REGISTER.SPQ; continue;
case INSTR_ANDQR12RBP: REGISTER._12Q &= REGISTER.BPQ; continue;
case INSTR_ANDQRIPI: REGISTER.IPQ &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQRIPRA: REGISTER.IPQ &= REGISTER.AQ; continue;
case INSTR_ANDQRIPRB: REGISTER.IPQ &= REGISTER.BQ; continue;
case INSTR_ANDQRIPRC: REGISTER.IPQ &= REGISTER.CQ; continue;
case INSTR_ANDQRIPRD: REGISTER.IPQ &= REGISTER.DQ; continue;
case INSTR_ANDQRIPR0: REGISTER.IPQ &= REGISTER._0Q; continue;
case INSTR_ANDQRIPR1: REGISTER.IPQ &= REGISTER._1Q; continue;
case INSTR_ANDQRIPR2: REGISTER.IPQ &= REGISTER._2Q; continue;
case INSTR_ANDQRIPR3: REGISTER.IPQ &= REGISTER._3Q; continue;
case INSTR_ANDQRIPR4: REGISTER.IPQ &= REGISTER._4Q; continue;
case INSTR_ANDQRIPR5: REGISTER.IPQ &= REGISTER._5Q; continue;
case INSTR_ANDQRIPR6: REGISTER.IPQ &= REGISTER._6Q; continue;
case INSTR_ANDQRIPR7: REGISTER.IPQ &= REGISTER._7Q; continue;
case INSTR_ANDQRIPR8: REGISTER.IPQ &= REGISTER._8Q; continue;
case INSTR_ANDQRIPR9: REGISTER.IPQ &= REGISTER._9Q; continue;
case INSTR_ANDQRIPR10: REGISTER.IPQ &= REGISTER._10Q; continue;
case INSTR_ANDQRIPR11: REGISTER.IPQ &= REGISTER._11Q; continue;
case INSTR_ANDQRIPR12: REGISTER.IPQ &= REGISTER._12Q; continue;
case INSTR_ANDQRIPRIP: REGISTER.IPQ &= REGISTER.IPQ; continue;
case INSTR_ANDQRIPRSP: REGISTER.IPQ &= REGISTER.SPQ; continue;
case INSTR_ANDQRIPRBP: REGISTER.IPQ &= REGISTER.BPQ; continue;
case INSTR_ANDQRSPI: REGISTER.SPQ &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQRSPRA: REGISTER.SPQ &= REGISTER.AQ; continue;
case INSTR_ANDQRSPRB: REGISTER.SPQ &= REGISTER.BQ; continue;
case INSTR_ANDQRSPRC: REGISTER.SPQ &= REGISTER.CQ; continue;
case INSTR_ANDQRSPRD: REGISTER.SPQ &= REGISTER.DQ; continue;
case INSTR_ANDQRSPR0: REGISTER.SPQ &= REGISTER._0Q; continue;
case INSTR_ANDQRSPR1: REGISTER.SPQ &= REGISTER._1Q; continue;
case INSTR_ANDQRSPR2: REGISTER.SPQ &= REGISTER._2Q; continue;
case INSTR_ANDQRSPR3: REGISTER.SPQ &= REGISTER._3Q; continue;
case INSTR_ANDQRSPR4: REGISTER.SPQ &= REGISTER._4Q; continue;
case INSTR_ANDQRSPR5: REGISTER.SPQ &= REGISTER._5Q; continue;
case INSTR_ANDQRSPR6: REGISTER.SPQ &= REGISTER._6Q; continue;
case INSTR_ANDQRSPR7: REGISTER.SPQ &= REGISTER._7Q; continue;
case INSTR_ANDQRSPR8: REGISTER.SPQ &= REGISTER._8Q; continue;
case INSTR_ANDQRSPR9: REGISTER.SPQ &= REGISTER._9Q; continue;
case INSTR_ANDQRSPR10: REGISTER.SPQ &= REGISTER._10Q; continue;
case INSTR_ANDQRSPR11: REGISTER.SPQ &= REGISTER._11Q; continue;
case INSTR_ANDQRSPR12: REGISTER.SPQ &= REGISTER._12Q; continue;
case INSTR_ANDQRSPRIP: REGISTER.SPQ &= REGISTER.IPQ; continue;
case INSTR_ANDQRSPRSP: REGISTER.SPQ &= REGISTER.SPQ; continue;
case INSTR_ANDQRSPRBP: REGISTER.SPQ &= REGISTER.BPQ; continue;
case INSTR_ANDQRBPI: REGISTER.BPQ &= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_ANDQRBPRA: REGISTER.BPQ &= REGISTER.AQ; continue;
case INSTR_ANDQRBPRB: REGISTER.BPQ &= REGISTER.BQ; continue;
case INSTR_ANDQRBPRC: REGISTER.BPQ &= REGISTER.CQ; continue;
case INSTR_ANDQRBPRD: REGISTER.BPQ &= REGISTER.DQ; continue;
case INSTR_ANDQRBPR0: REGISTER.BPQ &= REGISTER._0Q; continue;
case INSTR_ANDQRBPR1: REGISTER.BPQ &= REGISTER._1Q; continue;
case INSTR_ANDQRBPR2: REGISTER.BPQ &= REGISTER._2Q; continue;
case INSTR_ANDQRBPR3: REGISTER.BPQ &= REGISTER._3Q; continue;
case INSTR_ANDQRBPR4: REGISTER.BPQ &= REGISTER._4Q; continue;
case INSTR_ANDQRBPR5: REGISTER.BPQ &= REGISTER._5Q; continue;
case INSTR_ANDQRBPR6: REGISTER.BPQ &= REGISTER._6Q; continue;
case INSTR_ANDQRBPR7: REGISTER.BPQ &= REGISTER._7Q; continue;
case INSTR_ANDQRBPR8: REGISTER.BPQ &= REGISTER._8Q; continue;
case INSTR_ANDQRBPR9: REGISTER.BPQ &= REGISTER._9Q; continue;
case INSTR_ANDQRBPR10: REGISTER.BPQ &= REGISTER._10Q; continue;
case INSTR_ANDQRBPR11: REGISTER.BPQ &= REGISTER._11Q; continue;
case INSTR_ANDQRBPR12: REGISTER.BPQ &= REGISTER._12Q; continue;
case INSTR_ANDQRBPRIP: REGISTER.BPQ &= REGISTER.IPQ; continue;
case INSTR_ANDQRBPRSP: REGISTER.BPQ &= REGISTER.SPQ; continue;
case INSTR_ANDQRBPRBP: REGISTER.BPQ &= REGISTER.BPQ; continue;
case INSTR_ANDWRAI: REGISTER.AW &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWRARA: REGISTER.AW &= REGISTER.AW; continue;
case INSTR_ANDWRARB: REGISTER.AW &= REGISTER.BW; continue;
case INSTR_ANDWRARC: REGISTER.AW &= REGISTER.CW; continue;
case INSTR_ANDWRARD: REGISTER.AW &= REGISTER.DW; continue;
case INSTR_ANDWRAR0: REGISTER.AW &= REGISTER._0W; continue;
case INSTR_ANDWRAR1: REGISTER.AW &= REGISTER._1W; continue;
case INSTR_ANDWRAR2: REGISTER.AW &= REGISTER._2W; continue;
case INSTR_ANDWRAR3: REGISTER.AW &= REGISTER._3W; continue;
case INSTR_ANDWRAR4: REGISTER.AW &= REGISTER._4W; continue;
case INSTR_ANDWRAR5: REGISTER.AW &= REGISTER._5W; continue;
case INSTR_ANDWRAR6: REGISTER.AW &= REGISTER._6W; continue;
case INSTR_ANDWRAR7: REGISTER.AW &= REGISTER._7W; continue;
case INSTR_ANDWRAR8: REGISTER.AW &= REGISTER._8W; continue;
case INSTR_ANDWRAR9: REGISTER.AW &= REGISTER._9W; continue;
case INSTR_ANDWRAR10: REGISTER.AW &= REGISTER._10W; continue;
case INSTR_ANDWRAR11: REGISTER.AW &= REGISTER._11W; continue;
case INSTR_ANDWRAR12: REGISTER.AW &= REGISTER._12W; continue;
case INSTR_ANDWRARIP: REGISTER.AW &= REGISTER.IPW; continue;
case INSTR_ANDWRARSP: REGISTER.AW &= REGISTER.SPW; continue;
case INSTR_ANDWRARBP: REGISTER.AW &= REGISTER.BPW; continue;
case INSTR_ANDWRBI: REGISTER.BW &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWRBRA: REGISTER.BW &= REGISTER.AW; continue;
case INSTR_ANDWRBRB: REGISTER.BW &= REGISTER.BW; continue;
case INSTR_ANDWRBRC: REGISTER.BW &= REGISTER.CW; continue;
case INSTR_ANDWRBRD: REGISTER.BW &= REGISTER.DW; continue;
case INSTR_ANDWRBR0: REGISTER.BW &= REGISTER._0W; continue;
case INSTR_ANDWRBR1: REGISTER.BW &= REGISTER._1W; continue;
case INSTR_ANDWRBR2: REGISTER.BW &= REGISTER._2W; continue;
case INSTR_ANDWRBR3: REGISTER.BW &= REGISTER._3W; continue;
case INSTR_ANDWRBR4: REGISTER.BW &= REGISTER._4W; continue;
case INSTR_ANDWRBR5: REGISTER.BW &= REGISTER._5W; continue;
case INSTR_ANDWRBR6: REGISTER.BW &= REGISTER._6W; continue;
case INSTR_ANDWRBR7: REGISTER.BW &= REGISTER._7W; continue;
case INSTR_ANDWRBR8: REGISTER.BW &= REGISTER._8W; continue;
case INSTR_ANDWRBR9: REGISTER.BW &= REGISTER._9W; continue;
case INSTR_ANDWRBR10: REGISTER.BW &= REGISTER._10W; continue;
case INSTR_ANDWRBR11: REGISTER.BW &= REGISTER._11W; continue;
case INSTR_ANDWRBR12: REGISTER.BW &= REGISTER._12W; continue;
case INSTR_ANDWRBRIP: REGISTER.BW &= REGISTER.IPW; continue;
case INSTR_ANDWRBRSP: REGISTER.BW &= REGISTER.SPW; continue;
case INSTR_ANDWRBRBP: REGISTER.BW &= REGISTER.BPW; continue;
case INSTR_ANDWRCI: REGISTER.CW &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWRCRA: REGISTER.CW &= REGISTER.AW; continue;
case INSTR_ANDWRCRB: REGISTER.CW &= REGISTER.BW; continue;
case INSTR_ANDWRCRC: REGISTER.CW &= REGISTER.CW; continue;
case INSTR_ANDWRCRD: REGISTER.CW &= REGISTER.DW; continue;
case INSTR_ANDWRCR0: REGISTER.CW &= REGISTER._0W; continue;
case INSTR_ANDWRCR1: REGISTER.CW &= REGISTER._1W; continue;
case INSTR_ANDWRCR2: REGISTER.CW &= REGISTER._2W; continue;
case INSTR_ANDWRCR3: REGISTER.CW &= REGISTER._3W; continue;
case INSTR_ANDWRCR4: REGISTER.CW &= REGISTER._4W; continue;
case INSTR_ANDWRCR5: REGISTER.CW &= REGISTER._5W; continue;
case INSTR_ANDWRCR6: REGISTER.CW &= REGISTER._6W; continue;
case INSTR_ANDWRCR7: REGISTER.CW &= REGISTER._7W; continue;
case INSTR_ANDWRCR8: REGISTER.CW &= REGISTER._8W; continue;
case INSTR_ANDWRCR9: REGISTER.CW &= REGISTER._9W; continue;
case INSTR_ANDWRCR10: REGISTER.CW &= REGISTER._10W; continue;
case INSTR_ANDWRCR11: REGISTER.CW &= REGISTER._11W; continue;
case INSTR_ANDWRCR12: REGISTER.CW &= REGISTER._12W; continue;
case INSTR_ANDWRCRIP: REGISTER.CW &= REGISTER.IPW; continue;
case INSTR_ANDWRCRSP: REGISTER.CW &= REGISTER.SPW; continue;
case INSTR_ANDWRCRBP: REGISTER.CW &= REGISTER.BPW; continue;
case INSTR_ANDWRDI: REGISTER.DW &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWRDRA: REGISTER.DW &= REGISTER.AW; continue;
case INSTR_ANDWRDRB: REGISTER.DW &= REGISTER.BW; continue;
case INSTR_ANDWRDRC: REGISTER.DW &= REGISTER.CW; continue;
case INSTR_ANDWRDRD: REGISTER.DW &= REGISTER.DW; continue;
case INSTR_ANDWRDR0: REGISTER.DW &= REGISTER._0W; continue;
case INSTR_ANDWRDR1: REGISTER.DW &= REGISTER._1W; continue;
case INSTR_ANDWRDR2: REGISTER.DW &= REGISTER._2W; continue;
case INSTR_ANDWRDR3: REGISTER.DW &= REGISTER._3W; continue;
case INSTR_ANDWRDR4: REGISTER.DW &= REGISTER._4W; continue;
case INSTR_ANDWRDR5: REGISTER.DW &= REGISTER._5W; continue;
case INSTR_ANDWRDR6: REGISTER.DW &= REGISTER._6W; continue;
case INSTR_ANDWRDR7: REGISTER.DW &= REGISTER._7W; continue;
case INSTR_ANDWRDR8: REGISTER.DW &= REGISTER._8W; continue;
case INSTR_ANDWRDR9: REGISTER.DW &= REGISTER._9W; continue;
case INSTR_ANDWRDR10: REGISTER.DW &= REGISTER._10W; continue;
case INSTR_ANDWRDR11: REGISTER.DW &= REGISTER._11W; continue;
case INSTR_ANDWRDR12: REGISTER.DW &= REGISTER._12W; continue;
case INSTR_ANDWRDRIP: REGISTER.DW &= REGISTER.IPW; continue;
case INSTR_ANDWRDRSP: REGISTER.DW &= REGISTER.SPW; continue;
case INSTR_ANDWRDRBP: REGISTER.DW &= REGISTER.BPW; continue;
case INSTR_ANDWR0I: REGISTER._0W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR0RA: REGISTER._0W &= REGISTER.AW; continue;
case INSTR_ANDWR0RB: REGISTER._0W &= REGISTER.BW; continue;
case INSTR_ANDWR0RC: REGISTER._0W &= REGISTER.CW; continue;
case INSTR_ANDWR0RD: REGISTER._0W &= REGISTER.DW; continue;
case INSTR_ANDWR0R0: REGISTER._0W &= REGISTER._0W; continue;
case INSTR_ANDWR0R1: REGISTER._0W &= REGISTER._1W; continue;
case INSTR_ANDWR0R2: REGISTER._0W &= REGISTER._2W; continue;
case INSTR_ANDWR0R3: REGISTER._0W &= REGISTER._3W; continue;
case INSTR_ANDWR0R4: REGISTER._0W &= REGISTER._4W; continue;
case INSTR_ANDWR0R5: REGISTER._0W &= REGISTER._5W; continue;
case INSTR_ANDWR0R6: REGISTER._0W &= REGISTER._6W; continue;
case INSTR_ANDWR0R7: REGISTER._0W &= REGISTER._7W; continue;
case INSTR_ANDWR0R8: REGISTER._0W &= REGISTER._8W; continue;
case INSTR_ANDWR0R9: REGISTER._0W &= REGISTER._9W; continue;
case INSTR_ANDWR0R10: REGISTER._0W &= REGISTER._10W; continue;
case INSTR_ANDWR0R11: REGISTER._0W &= REGISTER._11W; continue;
case INSTR_ANDWR0R12: REGISTER._0W &= REGISTER._12W; continue;
case INSTR_ANDWR0RIP: REGISTER._0W &= REGISTER.IPW; continue;
case INSTR_ANDWR0RSP: REGISTER._0W &= REGISTER.SPW; continue;
case INSTR_ANDWR0RBP: REGISTER._0W &= REGISTER.BPW; continue;
case INSTR_ANDWR1I: REGISTER._1W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR1RA: REGISTER._1W &= REGISTER.AW; continue;
case INSTR_ANDWR1RB: REGISTER._1W &= REGISTER.BW; continue;
case INSTR_ANDWR1RC: REGISTER._1W &= REGISTER.CW; continue;
case INSTR_ANDWR1RD: REGISTER._1W &= REGISTER.DW; continue;
case INSTR_ANDWR1R0: REGISTER._1W &= REGISTER._0W; continue;
case INSTR_ANDWR1R1: REGISTER._1W &= REGISTER._1W; continue;
case INSTR_ANDWR1R2: REGISTER._1W &= REGISTER._2W; continue;
case INSTR_ANDWR1R3: REGISTER._1W &= REGISTER._3W; continue;
case INSTR_ANDWR1R4: REGISTER._1W &= REGISTER._4W; continue;
case INSTR_ANDWR1R5: REGISTER._1W &= REGISTER._5W; continue;
case INSTR_ANDWR1R6: REGISTER._1W &= REGISTER._6W; continue;
case INSTR_ANDWR1R7: REGISTER._1W &= REGISTER._7W; continue;
case INSTR_ANDWR1R8: REGISTER._1W &= REGISTER._8W; continue;
case INSTR_ANDWR1R9: REGISTER._1W &= REGISTER._9W; continue;
case INSTR_ANDWR1R10: REGISTER._1W &= REGISTER._10W; continue;
case INSTR_ANDWR1R11: REGISTER._1W &= REGISTER._11W; continue;
case INSTR_ANDWR1R12: REGISTER._1W &= REGISTER._12W; continue;
case INSTR_ANDWR1RIP: REGISTER._1W &= REGISTER.IPW; continue;
case INSTR_ANDWR1RSP: REGISTER._1W &= REGISTER.SPW; continue;
case INSTR_ANDWR1RBP: REGISTER._1W &= REGISTER.BPW; continue;
case INSTR_ANDWR2I: REGISTER._2W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR2RA: REGISTER._2W &= REGISTER.AW; continue;
case INSTR_ANDWR2RB: REGISTER._2W &= REGISTER.BW; continue;
case INSTR_ANDWR2RC: REGISTER._2W &= REGISTER.CW; continue;
case INSTR_ANDWR2RD: REGISTER._2W &= REGISTER.DW; continue;
case INSTR_ANDWR2R0: REGISTER._2W &= REGISTER._0W; continue;
case INSTR_ANDWR2R1: REGISTER._2W &= REGISTER._1W; continue;
case INSTR_ANDWR2R2: REGISTER._2W &= REGISTER._2W; continue;
case INSTR_ANDWR2R3: REGISTER._2W &= REGISTER._3W; continue;
case INSTR_ANDWR2R4: REGISTER._2W &= REGISTER._4W; continue;
case INSTR_ANDWR2R5: REGISTER._2W &= REGISTER._5W; continue;
case INSTR_ANDWR2R6: REGISTER._2W &= REGISTER._6W; continue;
case INSTR_ANDWR2R7: REGISTER._2W &= REGISTER._7W; continue;
case INSTR_ANDWR2R8: REGISTER._2W &= REGISTER._8W; continue;
case INSTR_ANDWR2R9: REGISTER._2W &= REGISTER._9W; continue;
case INSTR_ANDWR2R10: REGISTER._2W &= REGISTER._10W; continue;
case INSTR_ANDWR2R11: REGISTER._2W &= REGISTER._11W; continue;
case INSTR_ANDWR2R12: REGISTER._2W &= REGISTER._12W; continue;
case INSTR_ANDWR2RIP: REGISTER._2W &= REGISTER.IPW; continue;
case INSTR_ANDWR2RSP: REGISTER._2W &= REGISTER.SPW; continue;
case INSTR_ANDWR2RBP: REGISTER._2W &= REGISTER.BPW; continue;
case INSTR_ANDWR3I: REGISTER._3W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR3RA: REGISTER._3W &= REGISTER.AW; continue;
case INSTR_ANDWR3RB: REGISTER._3W &= REGISTER.BW; continue;
case INSTR_ANDWR3RC: REGISTER._3W &= REGISTER.CW; continue;
case INSTR_ANDWR3RD: REGISTER._3W &= REGISTER.DW; continue;
case INSTR_ANDWR3R0: REGISTER._3W &= REGISTER._0W; continue;
case INSTR_ANDWR3R1: REGISTER._3W &= REGISTER._1W; continue;
case INSTR_ANDWR3R2: REGISTER._3W &= REGISTER._2W; continue;
case INSTR_ANDWR3R3: REGISTER._3W &= REGISTER._3W; continue;
case INSTR_ANDWR3R4: REGISTER._3W &= REGISTER._4W; continue;
case INSTR_ANDWR3R5: REGISTER._3W &= REGISTER._5W; continue;
case INSTR_ANDWR3R6: REGISTER._3W &= REGISTER._6W; continue;
case INSTR_ANDWR3R7: REGISTER._3W &= REGISTER._7W; continue;
case INSTR_ANDWR3R8: REGISTER._3W &= REGISTER._8W; continue;
case INSTR_ANDWR3R9: REGISTER._3W &= REGISTER._9W; continue;
case INSTR_ANDWR3R10: REGISTER._3W &= REGISTER._10W; continue;
case INSTR_ANDWR3R11: REGISTER._3W &= REGISTER._11W; continue;
case INSTR_ANDWR3R12: REGISTER._3W &= REGISTER._12W; continue;
case INSTR_ANDWR3RIP: REGISTER._3W &= REGISTER.IPW; continue;
case INSTR_ANDWR3RSP: REGISTER._3W &= REGISTER.SPW; continue;
case INSTR_ANDWR3RBP: REGISTER._3W &= REGISTER.BPW; continue;
case INSTR_ANDWR4I: REGISTER._4W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR4RA: REGISTER._4W &= REGISTER.AW; continue;
case INSTR_ANDWR4RB: REGISTER._4W &= REGISTER.BW; continue;
case INSTR_ANDWR4RC: REGISTER._4W &= REGISTER.CW; continue;
case INSTR_ANDWR4RD: REGISTER._4W &= REGISTER.DW; continue;
case INSTR_ANDWR4R0: REGISTER._4W &= REGISTER._0W; continue;
case INSTR_ANDWR4R1: REGISTER._4W &= REGISTER._1W; continue;
case INSTR_ANDWR4R2: REGISTER._4W &= REGISTER._2W; continue;
case INSTR_ANDWR4R3: REGISTER._4W &= REGISTER._3W; continue;
case INSTR_ANDWR4R4: REGISTER._4W &= REGISTER._4W; continue;
case INSTR_ANDWR4R5: REGISTER._4W &= REGISTER._5W; continue;
case INSTR_ANDWR4R6: REGISTER._4W &= REGISTER._6W; continue;
case INSTR_ANDWR4R7: REGISTER._4W &= REGISTER._7W; continue;
case INSTR_ANDWR4R8: REGISTER._4W &= REGISTER._8W; continue;
case INSTR_ANDWR4R9: REGISTER._4W &= REGISTER._9W; continue;
case INSTR_ANDWR4R10: REGISTER._4W &= REGISTER._10W; continue;
case INSTR_ANDWR4R11: REGISTER._4W &= REGISTER._11W; continue;
case INSTR_ANDWR4R12: REGISTER._4W &= REGISTER._12W; continue;
case INSTR_ANDWR4RIP: REGISTER._4W &= REGISTER.IPW; continue;
case INSTR_ANDWR4RSP: REGISTER._4W &= REGISTER.SPW; continue;
case INSTR_ANDWR4RBP: REGISTER._4W &= REGISTER.BPW; continue;
case INSTR_ANDWR5I: REGISTER._5W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR5RA: REGISTER._5W &= REGISTER.AW; continue;
case INSTR_ANDWR5RB: REGISTER._5W &= REGISTER.BW; continue;
case INSTR_ANDWR5RC: REGISTER._5W &= REGISTER.CW; continue;
case INSTR_ANDWR5RD: REGISTER._5W &= REGISTER.DW; continue;
case INSTR_ANDWR5R0: REGISTER._5W &= REGISTER._0W; continue;
case INSTR_ANDWR5R1: REGISTER._5W &= REGISTER._1W; continue;
case INSTR_ANDWR5R2: REGISTER._5W &= REGISTER._2W; continue;
case INSTR_ANDWR5R3: REGISTER._5W &= REGISTER._3W; continue;
case INSTR_ANDWR5R4: REGISTER._5W &= REGISTER._4W; continue;
case INSTR_ANDWR5R5: REGISTER._5W &= REGISTER._5W; continue;
case INSTR_ANDWR5R6: REGISTER._5W &= REGISTER._6W; continue;
case INSTR_ANDWR5R7: REGISTER._5W &= REGISTER._7W; continue;
case INSTR_ANDWR5R8: REGISTER._5W &= REGISTER._8W; continue;
case INSTR_ANDWR5R9: REGISTER._5W &= REGISTER._9W; continue;
case INSTR_ANDWR5R10: REGISTER._5W &= REGISTER._10W; continue;
case INSTR_ANDWR5R11: REGISTER._5W &= REGISTER._11W; continue;
case INSTR_ANDWR5R12: REGISTER._5W &= REGISTER._12W; continue;
case INSTR_ANDWR5RIP: REGISTER._5W &= REGISTER.IPW; continue;
case INSTR_ANDWR5RSP: REGISTER._5W &= REGISTER.SPW; continue;
case INSTR_ANDWR5RBP: REGISTER._5W &= REGISTER.BPW; continue;
case INSTR_ANDWR6I: REGISTER._6W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR6RA: REGISTER._6W &= REGISTER.AW; continue;
case INSTR_ANDWR6RB: REGISTER._6W &= REGISTER.BW; continue;
case INSTR_ANDWR6RC: REGISTER._6W &= REGISTER.CW; continue;
case INSTR_ANDWR6RD: REGISTER._6W &= REGISTER.DW; continue;
case INSTR_ANDWR6R0: REGISTER._6W &= REGISTER._0W; continue;
case INSTR_ANDWR6R1: REGISTER._6W &= REGISTER._1W; continue;
case INSTR_ANDWR6R2: REGISTER._6W &= REGISTER._2W; continue;
case INSTR_ANDWR6R3: REGISTER._6W &= REGISTER._3W; continue;
case INSTR_ANDWR6R4: REGISTER._6W &= REGISTER._4W; continue;
case INSTR_ANDWR6R5: REGISTER._6W &= REGISTER._5W; continue;
case INSTR_ANDWR6R6: REGISTER._6W &= REGISTER._6W; continue;
case INSTR_ANDWR6R7: REGISTER._6W &= REGISTER._7W; continue;
case INSTR_ANDWR6R8: REGISTER._6W &= REGISTER._8W; continue;
case INSTR_ANDWR6R9: REGISTER._6W &= REGISTER._9W; continue;
case INSTR_ANDWR6R10: REGISTER._6W &= REGISTER._10W; continue;
case INSTR_ANDWR6R11: REGISTER._6W &= REGISTER._11W; continue;
case INSTR_ANDWR6R12: REGISTER._6W &= REGISTER._12W; continue;
case INSTR_ANDWR6RIP: REGISTER._6W &= REGISTER.IPW; continue;
case INSTR_ANDWR6RSP: REGISTER._6W &= REGISTER.SPW; continue;
case INSTR_ANDWR6RBP: REGISTER._6W &= REGISTER.BPW; continue;
case INSTR_ANDWR7I: REGISTER._7W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR7RA: REGISTER._7W &= REGISTER.AW; continue;
case INSTR_ANDWR7RB: REGISTER._7W &= REGISTER.BW; continue;
case INSTR_ANDWR7RC: REGISTER._7W &= REGISTER.CW; continue;
case INSTR_ANDWR7RD: REGISTER._7W &= REGISTER.DW; continue;
case INSTR_ANDWR7R0: REGISTER._7W &= REGISTER._0W; continue;
case INSTR_ANDWR7R1: REGISTER._7W &= REGISTER._1W; continue;
case INSTR_ANDWR7R2: REGISTER._7W &= REGISTER._2W; continue;
case INSTR_ANDWR7R3: REGISTER._7W &= REGISTER._3W; continue;
case INSTR_ANDWR7R4: REGISTER._7W &= REGISTER._4W; continue;
case INSTR_ANDWR7R5: REGISTER._7W &= REGISTER._5W; continue;
case INSTR_ANDWR7R6: REGISTER._7W &= REGISTER._6W; continue;
case INSTR_ANDWR7R7: REGISTER._7W &= REGISTER._7W; continue;
case INSTR_ANDWR7R8: REGISTER._7W &= REGISTER._8W; continue;
case INSTR_ANDWR7R9: REGISTER._7W &= REGISTER._9W; continue;
case INSTR_ANDWR7R10: REGISTER._7W &= REGISTER._10W; continue;
case INSTR_ANDWR7R11: REGISTER._7W &= REGISTER._11W; continue;
case INSTR_ANDWR7R12: REGISTER._7W &= REGISTER._12W; continue;
case INSTR_ANDWR7RIP: REGISTER._7W &= REGISTER.IPW; continue;
case INSTR_ANDWR7RSP: REGISTER._7W &= REGISTER.SPW; continue;
case INSTR_ANDWR7RBP: REGISTER._7W &= REGISTER.BPW; continue;
case INSTR_ANDWR8I: REGISTER._8W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR8RA: REGISTER._8W &= REGISTER.AW; continue;
case INSTR_ANDWR8RB: REGISTER._8W &= REGISTER.BW; continue;
case INSTR_ANDWR8RC: REGISTER._8W &= REGISTER.CW; continue;
case INSTR_ANDWR8RD: REGISTER._8W &= REGISTER.DW; continue;
case INSTR_ANDWR8R0: REGISTER._8W &= REGISTER._0W; continue;
case INSTR_ANDWR8R1: REGISTER._8W &= REGISTER._1W; continue;
case INSTR_ANDWR8R2: REGISTER._8W &= REGISTER._2W; continue;
case INSTR_ANDWR8R3: REGISTER._8W &= REGISTER._3W; continue;
case INSTR_ANDWR8R4: REGISTER._8W &= REGISTER._4W; continue;
case INSTR_ANDWR8R5: REGISTER._8W &= REGISTER._5W; continue;
case INSTR_ANDWR8R6: REGISTER._8W &= REGISTER._6W; continue;
case INSTR_ANDWR8R7: REGISTER._8W &= REGISTER._7W; continue;
case INSTR_ANDWR8R8: REGISTER._8W &= REGISTER._8W; continue;
case INSTR_ANDWR8R9: REGISTER._8W &= REGISTER._9W; continue;
case INSTR_ANDWR8R10: REGISTER._8W &= REGISTER._10W; continue;
case INSTR_ANDWR8R11: REGISTER._8W &= REGISTER._11W; continue;
case INSTR_ANDWR8R12: REGISTER._8W &= REGISTER._12W; continue;
case INSTR_ANDWR8RIP: REGISTER._8W &= REGISTER.IPW; continue;
case INSTR_ANDWR8RSP: REGISTER._8W &= REGISTER.SPW; continue;
case INSTR_ANDWR8RBP: REGISTER._8W &= REGISTER.BPW; continue;
case INSTR_ANDWR9I: REGISTER._9W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR9RA: REGISTER._9W &= REGISTER.AW; continue;
case INSTR_ANDWR9RB: REGISTER._9W &= REGISTER.BW; continue;
case INSTR_ANDWR9RC: REGISTER._9W &= REGISTER.CW; continue;
case INSTR_ANDWR9RD: REGISTER._9W &= REGISTER.DW; continue;
case INSTR_ANDWR9R0: REGISTER._9W &= REGISTER._0W; continue;
case INSTR_ANDWR9R1: REGISTER._9W &= REGISTER._1W; continue;
case INSTR_ANDWR9R2: REGISTER._9W &= REGISTER._2W; continue;
case INSTR_ANDWR9R3: REGISTER._9W &= REGISTER._3W; continue;
case INSTR_ANDWR9R4: REGISTER._9W &= REGISTER._4W; continue;
case INSTR_ANDWR9R5: REGISTER._9W &= REGISTER._5W; continue;
case INSTR_ANDWR9R6: REGISTER._9W &= REGISTER._6W; continue;
case INSTR_ANDWR9R7: REGISTER._9W &= REGISTER._7W; continue;
case INSTR_ANDWR9R8: REGISTER._9W &= REGISTER._8W; continue;
case INSTR_ANDWR9R9: REGISTER._9W &= REGISTER._9W; continue;
case INSTR_ANDWR9R10: REGISTER._9W &= REGISTER._10W; continue;
case INSTR_ANDWR9R11: REGISTER._9W &= REGISTER._11W; continue;
case INSTR_ANDWR9R12: REGISTER._9W &= REGISTER._12W; continue;
case INSTR_ANDWR9RIP: REGISTER._9W &= REGISTER.IPW; continue;
case INSTR_ANDWR9RSP: REGISTER._9W &= REGISTER.SPW; continue;
case INSTR_ANDWR9RBP: REGISTER._9W &= REGISTER.BPW; continue;
case INSTR_ANDWR10I: REGISTER._10W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR10RA: REGISTER._10W &= REGISTER.AW; continue;
case INSTR_ANDWR10RB: REGISTER._10W &= REGISTER.BW; continue;
case INSTR_ANDWR10RC: REGISTER._10W &= REGISTER.CW; continue;
case INSTR_ANDWR10RD: REGISTER._10W &= REGISTER.DW; continue;
case INSTR_ANDWR10R0: REGISTER._10W &= REGISTER._0W; continue;
case INSTR_ANDWR10R1: REGISTER._10W &= REGISTER._1W; continue;
case INSTR_ANDWR10R2: REGISTER._10W &= REGISTER._2W; continue;
case INSTR_ANDWR10R3: REGISTER._10W &= REGISTER._3W; continue;
case INSTR_ANDWR10R4: REGISTER._10W &= REGISTER._4W; continue;
case INSTR_ANDWR10R5: REGISTER._10W &= REGISTER._5W; continue;
case INSTR_ANDWR10R6: REGISTER._10W &= REGISTER._6W; continue;
case INSTR_ANDWR10R7: REGISTER._10W &= REGISTER._7W; continue;
case INSTR_ANDWR10R8: REGISTER._10W &= REGISTER._8W; continue;
case INSTR_ANDWR10R9: REGISTER._10W &= REGISTER._9W; continue;
case INSTR_ANDWR10R10: REGISTER._10W &= REGISTER._10W; continue;
case INSTR_ANDWR10R11: REGISTER._10W &= REGISTER._11W; continue;
case INSTR_ANDWR10R12: REGISTER._10W &= REGISTER._12W; continue;
case INSTR_ANDWR10RIP: REGISTER._10W &= REGISTER.IPW; continue;
case INSTR_ANDWR10RSP: REGISTER._10W &= REGISTER.SPW; continue;
case INSTR_ANDWR10RBP: REGISTER._10W &= REGISTER.BPW; continue;
case INSTR_ANDWR11I: REGISTER._11W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR11RA: REGISTER._11W &= REGISTER.AW; continue;
case INSTR_ANDWR11RB: REGISTER._11W &= REGISTER.BW; continue;
case INSTR_ANDWR11RC: REGISTER._11W &= REGISTER.CW; continue;
case INSTR_ANDWR11RD: REGISTER._11W &= REGISTER.DW; continue;
case INSTR_ANDWR11R0: REGISTER._11W &= REGISTER._0W; continue;
case INSTR_ANDWR11R1: REGISTER._11W &= REGISTER._1W; continue;
case INSTR_ANDWR11R2: REGISTER._11W &= REGISTER._2W; continue;
case INSTR_ANDWR11R3: REGISTER._11W &= REGISTER._3W; continue;
case INSTR_ANDWR11R4: REGISTER._11W &= REGISTER._4W; continue;
case INSTR_ANDWR11R5: REGISTER._11W &= REGISTER._5W; continue;
case INSTR_ANDWR11R6: REGISTER._11W &= REGISTER._6W; continue;
case INSTR_ANDWR11R7: REGISTER._11W &= REGISTER._7W; continue;
case INSTR_ANDWR11R8: REGISTER._11W &= REGISTER._8W; continue;
case INSTR_ANDWR11R9: REGISTER._11W &= REGISTER._9W; continue;
case INSTR_ANDWR11R10: REGISTER._11W &= REGISTER._10W; continue;
case INSTR_ANDWR11R11: REGISTER._11W &= REGISTER._11W; continue;
case INSTR_ANDWR11R12: REGISTER._11W &= REGISTER._12W; continue;
case INSTR_ANDWR11RIP: REGISTER._11W &= REGISTER.IPW; continue;
case INSTR_ANDWR11RSP: REGISTER._11W &= REGISTER.SPW; continue;
case INSTR_ANDWR11RBP: REGISTER._11W &= REGISTER.BPW; continue;
case INSTR_ANDWR12I: REGISTER._12W &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWR12RA: REGISTER._12W &= REGISTER.AW; continue;
case INSTR_ANDWR12RB: REGISTER._12W &= REGISTER.BW; continue;
case INSTR_ANDWR12RC: REGISTER._12W &= REGISTER.CW; continue;
case INSTR_ANDWR12RD: REGISTER._12W &= REGISTER.DW; continue;
case INSTR_ANDWR12R0: REGISTER._12W &= REGISTER._0W; continue;
case INSTR_ANDWR12R1: REGISTER._12W &= REGISTER._1W; continue;
case INSTR_ANDWR12R2: REGISTER._12W &= REGISTER._2W; continue;
case INSTR_ANDWR12R3: REGISTER._12W &= REGISTER._3W; continue;
case INSTR_ANDWR12R4: REGISTER._12W &= REGISTER._4W; continue;
case INSTR_ANDWR12R5: REGISTER._12W &= REGISTER._5W; continue;
case INSTR_ANDWR12R6: REGISTER._12W &= REGISTER._6W; continue;
case INSTR_ANDWR12R7: REGISTER._12W &= REGISTER._7W; continue;
case INSTR_ANDWR12R8: REGISTER._12W &= REGISTER._8W; continue;
case INSTR_ANDWR12R9: REGISTER._12W &= REGISTER._9W; continue;
case INSTR_ANDWR12R10: REGISTER._12W &= REGISTER._10W; continue;
case INSTR_ANDWR12R11: REGISTER._12W &= REGISTER._11W; continue;
case INSTR_ANDWR12R12: REGISTER._12W &= REGISTER._12W; continue;
case INSTR_ANDWR12RIP: REGISTER._12W &= REGISTER.IPW; continue;
case INSTR_ANDWR12RSP: REGISTER._12W &= REGISTER.SPW; continue;
case INSTR_ANDWR12RBP: REGISTER._12W &= REGISTER.BPW; continue;
case INSTR_ANDWRIPI: REGISTER.IPW &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWRIPRA: REGISTER.IPW &= REGISTER.AW; continue;
case INSTR_ANDWRIPRB: REGISTER.IPW &= REGISTER.BW; continue;
case INSTR_ANDWRIPRC: REGISTER.IPW &= REGISTER.CW; continue;
case INSTR_ANDWRIPRD: REGISTER.IPW &= REGISTER.DW; continue;
case INSTR_ANDWRIPR0: REGISTER.IPW &= REGISTER._0W; continue;
case INSTR_ANDWRIPR1: REGISTER.IPW &= REGISTER._1W; continue;
case INSTR_ANDWRIPR2: REGISTER.IPW &= REGISTER._2W; continue;
case INSTR_ANDWRIPR3: REGISTER.IPW &= REGISTER._3W; continue;
case INSTR_ANDWRIPR4: REGISTER.IPW &= REGISTER._4W; continue;
case INSTR_ANDWRIPR5: REGISTER.IPW &= REGISTER._5W; continue;
case INSTR_ANDWRIPR6: REGISTER.IPW &= REGISTER._6W; continue;
case INSTR_ANDWRIPR7: REGISTER.IPW &= REGISTER._7W; continue;
case INSTR_ANDWRIPR8: REGISTER.IPW &= REGISTER._8W; continue;
case INSTR_ANDWRIPR9: REGISTER.IPW &= REGISTER._9W; continue;
case INSTR_ANDWRIPR10: REGISTER.IPW &= REGISTER._10W; continue;
case INSTR_ANDWRIPR11: REGISTER.IPW &= REGISTER._11W; continue;
case INSTR_ANDWRIPR12: REGISTER.IPW &= REGISTER._12W; continue;
case INSTR_ANDWRIPRIP: REGISTER.IPW &= REGISTER.IPW; continue;
case INSTR_ANDWRIPRSP: REGISTER.IPW &= REGISTER.SPW; continue;
case INSTR_ANDWRIPRBP: REGISTER.IPW &= REGISTER.BPW; continue;
case INSTR_ANDWRSPI: REGISTER.SPW &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWRSPRA: REGISTER.SPW &= REGISTER.AW; continue;
case INSTR_ANDWRSPRB: REGISTER.SPW &= REGISTER.BW; continue;
case INSTR_ANDWRSPRC: REGISTER.SPW &= REGISTER.CW; continue;
case INSTR_ANDWRSPRD: REGISTER.SPW &= REGISTER.DW; continue;
case INSTR_ANDWRSPR0: REGISTER.SPW &= REGISTER._0W; continue;
case INSTR_ANDWRSPR1: REGISTER.SPW &= REGISTER._1W; continue;
case INSTR_ANDWRSPR2: REGISTER.SPW &= REGISTER._2W; continue;
case INSTR_ANDWRSPR3: REGISTER.SPW &= REGISTER._3W; continue;
case INSTR_ANDWRSPR4: REGISTER.SPW &= REGISTER._4W; continue;
case INSTR_ANDWRSPR5: REGISTER.SPW &= REGISTER._5W; continue;
case INSTR_ANDWRSPR6: REGISTER.SPW &= REGISTER._6W; continue;
case INSTR_ANDWRSPR7: REGISTER.SPW &= REGISTER._7W; continue;
case INSTR_ANDWRSPR8: REGISTER.SPW &= REGISTER._8W; continue;
case INSTR_ANDWRSPR9: REGISTER.SPW &= REGISTER._9W; continue;
case INSTR_ANDWRSPR10: REGISTER.SPW &= REGISTER._10W; continue;
case INSTR_ANDWRSPR11: REGISTER.SPW &= REGISTER._11W; continue;
case INSTR_ANDWRSPR12: REGISTER.SPW &= REGISTER._12W; continue;
case INSTR_ANDWRSPRIP: REGISTER.SPW &= REGISTER.IPW; continue;
case INSTR_ANDWRSPRSP: REGISTER.SPW &= REGISTER.SPW; continue;
case INSTR_ANDWRSPRBP: REGISTER.SPW &= REGISTER.BPW; continue;
case INSTR_ANDWRBPI: REGISTER.BPW &= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_ANDWRBPRA: REGISTER.BPW &= REGISTER.AW; continue;
case INSTR_ANDWRBPRB: REGISTER.BPW &= REGISTER.BW; continue;
case INSTR_ANDWRBPRC: REGISTER.BPW &= REGISTER.CW; continue;
case INSTR_ANDWRBPRD: REGISTER.BPW &= REGISTER.DW; continue;
case INSTR_ANDWRBPR0: REGISTER.BPW &= REGISTER._0W; continue;
case INSTR_ANDWRBPR1: REGISTER.BPW &= REGISTER._1W; continue;
case INSTR_ANDWRBPR2: REGISTER.BPW &= REGISTER._2W; continue;
case INSTR_ANDWRBPR3: REGISTER.BPW &= REGISTER._3W; continue;
case INSTR_ANDWRBPR4: REGISTER.BPW &= REGISTER._4W; continue;
case INSTR_ANDWRBPR5: REGISTER.BPW &= REGISTER._5W; continue;
case INSTR_ANDWRBPR6: REGISTER.BPW &= REGISTER._6W; continue;
case INSTR_ANDWRBPR7: REGISTER.BPW &= REGISTER._7W; continue;
case INSTR_ANDWRBPR8: REGISTER.BPW &= REGISTER._8W; continue;
case INSTR_ANDWRBPR9: REGISTER.BPW &= REGISTER._9W; continue;
case INSTR_ANDWRBPR10: REGISTER.BPW &= REGISTER._10W; continue;
case INSTR_ANDWRBPR11: REGISTER.BPW &= REGISTER._11W; continue;
case INSTR_ANDWRBPR12: REGISTER.BPW &= REGISTER._12W; continue;
case INSTR_ANDWRBPRIP: REGISTER.BPW &= REGISTER.IPW; continue;
case INSTR_ANDWRBPRSP: REGISTER.BPW &= REGISTER.SPW; continue;
case INSTR_ANDWRBPRBP: REGISTER.BPW &= REGISTER.BPW; continue;
case INSTR_ANDBRAI: REGISTER.AB &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBRARA: REGISTER.AB &= REGISTER.AB; continue;
case INSTR_ANDBRARB: REGISTER.AB &= REGISTER.BB; continue;
case INSTR_ANDBRARC: REGISTER.AB &= REGISTER.CB; continue;
case INSTR_ANDBRARD: REGISTER.AB &= REGISTER.DB; continue;
case INSTR_ANDBRAR0: REGISTER.AB &= REGISTER._0B; continue;
case INSTR_ANDBRAR1: REGISTER.AB &= REGISTER._1B; continue;
case INSTR_ANDBRAR2: REGISTER.AB &= REGISTER._2B; continue;
case INSTR_ANDBRAR3: REGISTER.AB &= REGISTER._3B; continue;
case INSTR_ANDBRAR4: REGISTER.AB &= REGISTER._4B; continue;
case INSTR_ANDBRAR5: REGISTER.AB &= REGISTER._5B; continue;
case INSTR_ANDBRAR6: REGISTER.AB &= REGISTER._6B; continue;
case INSTR_ANDBRAR7: REGISTER.AB &= REGISTER._7B; continue;
case INSTR_ANDBRAR8: REGISTER.AB &= REGISTER._8B; continue;
case INSTR_ANDBRAR9: REGISTER.AB &= REGISTER._9B; continue;
case INSTR_ANDBRAR10: REGISTER.AB &= REGISTER._10B; continue;
case INSTR_ANDBRAR11: REGISTER.AB &= REGISTER._11B; continue;
case INSTR_ANDBRAR12: REGISTER.AB &= REGISTER._12B; continue;
case INSTR_ANDBRARIP: REGISTER.AB &= REGISTER.IPB; continue;
case INSTR_ANDBRARSP: REGISTER.AB &= REGISTER.SPB; continue;
case INSTR_ANDBRARBP: REGISTER.AB &= REGISTER.BPB; continue;
case INSTR_ANDBRBI: REGISTER.BB &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBRBRA: REGISTER.BB &= REGISTER.AB; continue;
case INSTR_ANDBRBRB: REGISTER.BB &= REGISTER.BB; continue;
case INSTR_ANDBRBRC: REGISTER.BB &= REGISTER.CB; continue;
case INSTR_ANDBRBRD: REGISTER.BB &= REGISTER.DB; continue;
case INSTR_ANDBRBR0: REGISTER.BB &= REGISTER._0B; continue;
case INSTR_ANDBRBR1: REGISTER.BB &= REGISTER._1B; continue;
case INSTR_ANDBRBR2: REGISTER.BB &= REGISTER._2B; continue;
case INSTR_ANDBRBR3: REGISTER.BB &= REGISTER._3B; continue;
case INSTR_ANDBRBR4: REGISTER.BB &= REGISTER._4B; continue;
case INSTR_ANDBRBR5: REGISTER.BB &= REGISTER._5B; continue;
case INSTR_ANDBRBR6: REGISTER.BB &= REGISTER._6B; continue;
case INSTR_ANDBRBR7: REGISTER.BB &= REGISTER._7B; continue;
case INSTR_ANDBRBR8: REGISTER.BB &= REGISTER._8B; continue;
case INSTR_ANDBRBR9: REGISTER.BB &= REGISTER._9B; continue;
case INSTR_ANDBRBR10: REGISTER.BB &= REGISTER._10B; continue;
case INSTR_ANDBRBR11: REGISTER.BB &= REGISTER._11B; continue;
case INSTR_ANDBRBR12: REGISTER.BB &= REGISTER._12B; continue;
case INSTR_ANDBRBRIP: REGISTER.BB &= REGISTER.IPB; continue;
case INSTR_ANDBRBRSP: REGISTER.BB &= REGISTER.SPB; continue;
case INSTR_ANDBRBRBP: REGISTER.BB &= REGISTER.BPB; continue;
case INSTR_ANDBRCI: REGISTER.CB &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBRCRA: REGISTER.CB &= REGISTER.AB; continue;
case INSTR_ANDBRCRB: REGISTER.CB &= REGISTER.BB; continue;
case INSTR_ANDBRCRC: REGISTER.CB &= REGISTER.CB; continue;
case INSTR_ANDBRCRD: REGISTER.CB &= REGISTER.DB; continue;
case INSTR_ANDBRCR0: REGISTER.CB &= REGISTER._0B; continue;
case INSTR_ANDBRCR1: REGISTER.CB &= REGISTER._1B; continue;
case INSTR_ANDBRCR2: REGISTER.CB &= REGISTER._2B; continue;
case INSTR_ANDBRCR3: REGISTER.CB &= REGISTER._3B; continue;
case INSTR_ANDBRCR4: REGISTER.CB &= REGISTER._4B; continue;
case INSTR_ANDBRCR5: REGISTER.CB &= REGISTER._5B; continue;
case INSTR_ANDBRCR6: REGISTER.CB &= REGISTER._6B; continue;
case INSTR_ANDBRCR7: REGISTER.CB &= REGISTER._7B; continue;
case INSTR_ANDBRCR8: REGISTER.CB &= REGISTER._8B; continue;
case INSTR_ANDBRCR9: REGISTER.CB &= REGISTER._9B; continue;
case INSTR_ANDBRCR10: REGISTER.CB &= REGISTER._10B; continue;
case INSTR_ANDBRCR11: REGISTER.CB &= REGISTER._11B; continue;
case INSTR_ANDBRCR12: REGISTER.CB &= REGISTER._12B; continue;
case INSTR_ANDBRCRIP: REGISTER.CB &= REGISTER.IPB; continue;
case INSTR_ANDBRCRSP: REGISTER.CB &= REGISTER.SPB; continue;
case INSTR_ANDBRCRBP: REGISTER.CB &= REGISTER.BPB; continue;
case INSTR_ANDBRDI: REGISTER.DB &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBRDRA: REGISTER.DB &= REGISTER.AB; continue;
case INSTR_ANDBRDRB: REGISTER.DB &= REGISTER.BB; continue;
case INSTR_ANDBRDRC: REGISTER.DB &= REGISTER.CB; continue;
case INSTR_ANDBRDRD: REGISTER.DB &= REGISTER.DB; continue;
case INSTR_ANDBRDR0: REGISTER.DB &= REGISTER._0B; continue;
case INSTR_ANDBRDR1: REGISTER.DB &= REGISTER._1B; continue;
case INSTR_ANDBRDR2: REGISTER.DB &= REGISTER._2B; continue;
case INSTR_ANDBRDR3: REGISTER.DB &= REGISTER._3B; continue;
case INSTR_ANDBRDR4: REGISTER.DB &= REGISTER._4B; continue;
case INSTR_ANDBRDR5: REGISTER.DB &= REGISTER._5B; continue;
case INSTR_ANDBRDR6: REGISTER.DB &= REGISTER._6B; continue;
case INSTR_ANDBRDR7: REGISTER.DB &= REGISTER._7B; continue;
case INSTR_ANDBRDR8: REGISTER.DB &= REGISTER._8B; continue;
case INSTR_ANDBRDR9: REGISTER.DB &= REGISTER._9B; continue;
case INSTR_ANDBRDR10: REGISTER.DB &= REGISTER._10B; continue;
case INSTR_ANDBRDR11: REGISTER.DB &= REGISTER._11B; continue;
case INSTR_ANDBRDR12: REGISTER.DB &= REGISTER._12B; continue;
case INSTR_ANDBRDRIP: REGISTER.DB &= REGISTER.IPB; continue;
case INSTR_ANDBRDRSP: REGISTER.DB &= REGISTER.SPB; continue;
case INSTR_ANDBRDRBP: REGISTER.DB &= REGISTER.BPB; continue;
case INSTR_ANDBR0I: REGISTER._0B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR0RA: REGISTER._0B &= REGISTER.AB; continue;
case INSTR_ANDBR0RB: REGISTER._0B &= REGISTER.BB; continue;
case INSTR_ANDBR0RC: REGISTER._0B &= REGISTER.CB; continue;
case INSTR_ANDBR0RD: REGISTER._0B &= REGISTER.DB; continue;
case INSTR_ANDBR0R0: REGISTER._0B &= REGISTER._0B; continue;
case INSTR_ANDBR0R1: REGISTER._0B &= REGISTER._1B; continue;
case INSTR_ANDBR0R2: REGISTER._0B &= REGISTER._2B; continue;
case INSTR_ANDBR0R3: REGISTER._0B &= REGISTER._3B; continue;
case INSTR_ANDBR0R4: REGISTER._0B &= REGISTER._4B; continue;
case INSTR_ANDBR0R5: REGISTER._0B &= REGISTER._5B; continue;
case INSTR_ANDBR0R6: REGISTER._0B &= REGISTER._6B; continue;
case INSTR_ANDBR0R7: REGISTER._0B &= REGISTER._7B; continue;
case INSTR_ANDBR0R8: REGISTER._0B &= REGISTER._8B; continue;
case INSTR_ANDBR0R9: REGISTER._0B &= REGISTER._9B; continue;
case INSTR_ANDBR0R10: REGISTER._0B &= REGISTER._10B; continue;
case INSTR_ANDBR0R11: REGISTER._0B &= REGISTER._11B; continue;
case INSTR_ANDBR0R12: REGISTER._0B &= REGISTER._12B; continue;
case INSTR_ANDBR0RIP: REGISTER._0B &= REGISTER.IPB; continue;
case INSTR_ANDBR0RSP: REGISTER._0B &= REGISTER.SPB; continue;
case INSTR_ANDBR0RBP: REGISTER._0B &= REGISTER.BPB; continue;
case INSTR_ANDBR1I: REGISTER._1B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR1RA: REGISTER._1B &= REGISTER.AB; continue;
case INSTR_ANDBR1RB: REGISTER._1B &= REGISTER.BB; continue;
case INSTR_ANDBR1RC: REGISTER._1B &= REGISTER.CB; continue;
case INSTR_ANDBR1RD: REGISTER._1B &= REGISTER.DB; continue;
case INSTR_ANDBR1R0: REGISTER._1B &= REGISTER._0B; continue;
case INSTR_ANDBR1R1: REGISTER._1B &= REGISTER._1B; continue;
case INSTR_ANDBR1R2: REGISTER._1B &= REGISTER._2B; continue;
case INSTR_ANDBR1R3: REGISTER._1B &= REGISTER._3B; continue;
case INSTR_ANDBR1R4: REGISTER._1B &= REGISTER._4B; continue;
case INSTR_ANDBR1R5: REGISTER._1B &= REGISTER._5B; continue;
case INSTR_ANDBR1R6: REGISTER._1B &= REGISTER._6B; continue;
case INSTR_ANDBR1R7: REGISTER._1B &= REGISTER._7B; continue;
case INSTR_ANDBR1R8: REGISTER._1B &= REGISTER._8B; continue;
case INSTR_ANDBR1R9: REGISTER._1B &= REGISTER._9B; continue;
case INSTR_ANDBR1R10: REGISTER._1B &= REGISTER._10B; continue;
case INSTR_ANDBR1R11: REGISTER._1B &= REGISTER._11B; continue;
case INSTR_ANDBR1R12: REGISTER._1B &= REGISTER._12B; continue;
case INSTR_ANDBR1RIP: REGISTER._1B &= REGISTER.IPB; continue;
case INSTR_ANDBR1RSP: REGISTER._1B &= REGISTER.SPB; continue;
case INSTR_ANDBR1RBP: REGISTER._1B &= REGISTER.BPB; continue;
case INSTR_ANDBR2I: REGISTER._2B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR2RA: REGISTER._2B &= REGISTER.AB; continue;
case INSTR_ANDBR2RB: REGISTER._2B &= REGISTER.BB; continue;
case INSTR_ANDBR2RC: REGISTER._2B &= REGISTER.CB; continue;
case INSTR_ANDBR2RD: REGISTER._2B &= REGISTER.DB; continue;
case INSTR_ANDBR2R0: REGISTER._2B &= REGISTER._0B; continue;
case INSTR_ANDBR2R1: REGISTER._2B &= REGISTER._1B; continue;
case INSTR_ANDBR2R2: REGISTER._2B &= REGISTER._2B; continue;
case INSTR_ANDBR2R3: REGISTER._2B &= REGISTER._3B; continue;
case INSTR_ANDBR2R4: REGISTER._2B &= REGISTER._4B; continue;
case INSTR_ANDBR2R5: REGISTER._2B &= REGISTER._5B; continue;
case INSTR_ANDBR2R6: REGISTER._2B &= REGISTER._6B; continue;
case INSTR_ANDBR2R7: REGISTER._2B &= REGISTER._7B; continue;
case INSTR_ANDBR2R8: REGISTER._2B &= REGISTER._8B; continue;
case INSTR_ANDBR2R9: REGISTER._2B &= REGISTER._9B; continue;
case INSTR_ANDBR2R10: REGISTER._2B &= REGISTER._10B; continue;
case INSTR_ANDBR2R11: REGISTER._2B &= REGISTER._11B; continue;
case INSTR_ANDBR2R12: REGISTER._2B &= REGISTER._12B; continue;
case INSTR_ANDBR2RIP: REGISTER._2B &= REGISTER.IPB; continue;
case INSTR_ANDBR2RSP: REGISTER._2B &= REGISTER.SPB; continue;
case INSTR_ANDBR2RBP: REGISTER._2B &= REGISTER.BPB; continue;
case INSTR_ANDBR3I: REGISTER._3B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR3RA: REGISTER._3B &= REGISTER.AB; continue;
case INSTR_ANDBR3RB: REGISTER._3B &= REGISTER.BB; continue;
case INSTR_ANDBR3RC: REGISTER._3B &= REGISTER.CB; continue;
case INSTR_ANDBR3RD: REGISTER._3B &= REGISTER.DB; continue;
case INSTR_ANDBR3R0: REGISTER._3B &= REGISTER._0B; continue;
case INSTR_ANDBR3R1: REGISTER._3B &= REGISTER._1B; continue;
case INSTR_ANDBR3R2: REGISTER._3B &= REGISTER._2B; continue;
case INSTR_ANDBR3R3: REGISTER._3B &= REGISTER._3B; continue;
case INSTR_ANDBR3R4: REGISTER._3B &= REGISTER._4B; continue;
case INSTR_ANDBR3R5: REGISTER._3B &= REGISTER._5B; continue;
case INSTR_ANDBR3R6: REGISTER._3B &= REGISTER._6B; continue;
case INSTR_ANDBR3R7: REGISTER._3B &= REGISTER._7B; continue;
case INSTR_ANDBR3R8: REGISTER._3B &= REGISTER._8B; continue;
case INSTR_ANDBR3R9: REGISTER._3B &= REGISTER._9B; continue;
case INSTR_ANDBR3R10: REGISTER._3B &= REGISTER._10B; continue;
case INSTR_ANDBR3R11: REGISTER._3B &= REGISTER._11B; continue;
case INSTR_ANDBR3R12: REGISTER._3B &= REGISTER._12B; continue;
case INSTR_ANDBR3RIP: REGISTER._3B &= REGISTER.IPB; continue;
case INSTR_ANDBR3RSP: REGISTER._3B &= REGISTER.SPB; continue;
case INSTR_ANDBR3RBP: REGISTER._3B &= REGISTER.BPB; continue;
case INSTR_ANDBR4I: REGISTER._4B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR4RA: REGISTER._4B &= REGISTER.AB; continue;
case INSTR_ANDBR4RB: REGISTER._4B &= REGISTER.BB; continue;
case INSTR_ANDBR4RC: REGISTER._4B &= REGISTER.CB; continue;
case INSTR_ANDBR4RD: REGISTER._4B &= REGISTER.DB; continue;
case INSTR_ANDBR4R0: REGISTER._4B &= REGISTER._0B; continue;
case INSTR_ANDBR4R1: REGISTER._4B &= REGISTER._1B; continue;
case INSTR_ANDBR4R2: REGISTER._4B &= REGISTER._2B; continue;
case INSTR_ANDBR4R3: REGISTER._4B &= REGISTER._3B; continue;
case INSTR_ANDBR4R4: REGISTER._4B &= REGISTER._4B; continue;
case INSTR_ANDBR4R5: REGISTER._4B &= REGISTER._5B; continue;
case INSTR_ANDBR4R6: REGISTER._4B &= REGISTER._6B; continue;
case INSTR_ANDBR4R7: REGISTER._4B &= REGISTER._7B; continue;
case INSTR_ANDBR4R8: REGISTER._4B &= REGISTER._8B; continue;
case INSTR_ANDBR4R9: REGISTER._4B &= REGISTER._9B; continue;
case INSTR_ANDBR4R10: REGISTER._4B &= REGISTER._10B; continue;
case INSTR_ANDBR4R11: REGISTER._4B &= REGISTER._11B; continue;
case INSTR_ANDBR4R12: REGISTER._4B &= REGISTER._12B; continue;
case INSTR_ANDBR4RIP: REGISTER._4B &= REGISTER.IPB; continue;
case INSTR_ANDBR4RSP: REGISTER._4B &= REGISTER.SPB; continue;
case INSTR_ANDBR4RBP: REGISTER._4B &= REGISTER.BPB; continue;
case INSTR_ANDBR5I: REGISTER._5B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR5RA: REGISTER._5B &= REGISTER.AB; continue;
case INSTR_ANDBR5RB: REGISTER._5B &= REGISTER.BB; continue;
case INSTR_ANDBR5RC: REGISTER._5B &= REGISTER.CB; continue;
case INSTR_ANDBR5RD: REGISTER._5B &= REGISTER.DB; continue;
case INSTR_ANDBR5R0: REGISTER._5B &= REGISTER._0B; continue;
case INSTR_ANDBR5R1: REGISTER._5B &= REGISTER._1B; continue;
case INSTR_ANDBR5R2: REGISTER._5B &= REGISTER._2B; continue;
case INSTR_ANDBR5R3: REGISTER._5B &= REGISTER._3B; continue;
case INSTR_ANDBR5R4: REGISTER._5B &= REGISTER._4B; continue;
case INSTR_ANDBR5R5: REGISTER._5B &= REGISTER._5B; continue;
case INSTR_ANDBR5R6: REGISTER._5B &= REGISTER._6B; continue;
case INSTR_ANDBR5R7: REGISTER._5B &= REGISTER._7B; continue;
case INSTR_ANDBR5R8: REGISTER._5B &= REGISTER._8B; continue;
case INSTR_ANDBR5R9: REGISTER._5B &= REGISTER._9B; continue;
case INSTR_ANDBR5R10: REGISTER._5B &= REGISTER._10B; continue;
case INSTR_ANDBR5R11: REGISTER._5B &= REGISTER._11B; continue;
case INSTR_ANDBR5R12: REGISTER._5B &= REGISTER._12B; continue;
case INSTR_ANDBR5RIP: REGISTER._5B &= REGISTER.IPB; continue;
case INSTR_ANDBR5RSP: REGISTER._5B &= REGISTER.SPB; continue;
case INSTR_ANDBR5RBP: REGISTER._5B &= REGISTER.BPB; continue;
case INSTR_ANDBR6I: REGISTER._6B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR6RA: REGISTER._6B &= REGISTER.AB; continue;
case INSTR_ANDBR6RB: REGISTER._6B &= REGISTER.BB; continue;
case INSTR_ANDBR6RC: REGISTER._6B &= REGISTER.CB; continue;
case INSTR_ANDBR6RD: REGISTER._6B &= REGISTER.DB; continue;
case INSTR_ANDBR6R0: REGISTER._6B &= REGISTER._0B; continue;
case INSTR_ANDBR6R1: REGISTER._6B &= REGISTER._1B; continue;
case INSTR_ANDBR6R2: REGISTER._6B &= REGISTER._2B; continue;
case INSTR_ANDBR6R3: REGISTER._6B &= REGISTER._3B; continue;
case INSTR_ANDBR6R4: REGISTER._6B &= REGISTER._4B; continue;
case INSTR_ANDBR6R5: REGISTER._6B &= REGISTER._5B; continue;
case INSTR_ANDBR6R6: REGISTER._6B &= REGISTER._6B; continue;
case INSTR_ANDBR6R7: REGISTER._6B &= REGISTER._7B; continue;
case INSTR_ANDBR6R8: REGISTER._6B &= REGISTER._8B; continue;
case INSTR_ANDBR6R9: REGISTER._6B &= REGISTER._9B; continue;
case INSTR_ANDBR6R10: REGISTER._6B &= REGISTER._10B; continue;
case INSTR_ANDBR6R11: REGISTER._6B &= REGISTER._11B; continue;
case INSTR_ANDBR6R12: REGISTER._6B &= REGISTER._12B; continue;
case INSTR_ANDBR6RIP: REGISTER._6B &= REGISTER.IPB; continue;
case INSTR_ANDBR6RSP: REGISTER._6B &= REGISTER.SPB; continue;
case INSTR_ANDBR6RBP: REGISTER._6B &= REGISTER.BPB; continue;
case INSTR_ANDBR7I: REGISTER._7B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR7RA: REGISTER._7B &= REGISTER.AB; continue;
case INSTR_ANDBR7RB: REGISTER._7B &= REGISTER.BB; continue;
case INSTR_ANDBR7RC: REGISTER._7B &= REGISTER.CB; continue;
case INSTR_ANDBR7RD: REGISTER._7B &= REGISTER.DB; continue;
case INSTR_ANDBR7R0: REGISTER._7B &= REGISTER._0B; continue;
case INSTR_ANDBR7R1: REGISTER._7B &= REGISTER._1B; continue;
case INSTR_ANDBR7R2: REGISTER._7B &= REGISTER._2B; continue;
case INSTR_ANDBR7R3: REGISTER._7B &= REGISTER._3B; continue;
case INSTR_ANDBR7R4: REGISTER._7B &= REGISTER._4B; continue;
case INSTR_ANDBR7R5: REGISTER._7B &= REGISTER._5B; continue;
case INSTR_ANDBR7R6: REGISTER._7B &= REGISTER._6B; continue;
case INSTR_ANDBR7R7: REGISTER._7B &= REGISTER._7B; continue;
case INSTR_ANDBR7R8: REGISTER._7B &= REGISTER._8B; continue;
case INSTR_ANDBR7R9: REGISTER._7B &= REGISTER._9B; continue;
case INSTR_ANDBR7R10: REGISTER._7B &= REGISTER._10B; continue;
case INSTR_ANDBR7R11: REGISTER._7B &= REGISTER._11B; continue;
case INSTR_ANDBR7R12: REGISTER._7B &= REGISTER._12B; continue;
case INSTR_ANDBR7RIP: REGISTER._7B &= REGISTER.IPB; continue;
case INSTR_ANDBR7RSP: REGISTER._7B &= REGISTER.SPB; continue;
case INSTR_ANDBR7RBP: REGISTER._7B &= REGISTER.BPB; continue;
case INSTR_ANDBR8I: REGISTER._8B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR8RA: REGISTER._8B &= REGISTER.AB; continue;
case INSTR_ANDBR8RB: REGISTER._8B &= REGISTER.BB; continue;
case INSTR_ANDBR8RC: REGISTER._8B &= REGISTER.CB; continue;
case INSTR_ANDBR8RD: REGISTER._8B &= REGISTER.DB; continue;
case INSTR_ANDBR8R0: REGISTER._8B &= REGISTER._0B; continue;
case INSTR_ANDBR8R1: REGISTER._8B &= REGISTER._1B; continue;
case INSTR_ANDBR8R2: REGISTER._8B &= REGISTER._2B; continue;
case INSTR_ANDBR8R3: REGISTER._8B &= REGISTER._3B; continue;
case INSTR_ANDBR8R4: REGISTER._8B &= REGISTER._4B; continue;
case INSTR_ANDBR8R5: REGISTER._8B &= REGISTER._5B; continue;
case INSTR_ANDBR8R6: REGISTER._8B &= REGISTER._6B; continue;
case INSTR_ANDBR8R7: REGISTER._8B &= REGISTER._7B; continue;
case INSTR_ANDBR8R8: REGISTER._8B &= REGISTER._8B; continue;
case INSTR_ANDBR8R9: REGISTER._8B &= REGISTER._9B; continue;
case INSTR_ANDBR8R10: REGISTER._8B &= REGISTER._10B; continue;
case INSTR_ANDBR8R11: REGISTER._8B &= REGISTER._11B; continue;
case INSTR_ANDBR8R12: REGISTER._8B &= REGISTER._12B; continue;
case INSTR_ANDBR8RIP: REGISTER._8B &= REGISTER.IPB; continue;
case INSTR_ANDBR8RSP: REGISTER._8B &= REGISTER.SPB; continue;
case INSTR_ANDBR8RBP: REGISTER._8B &= REGISTER.BPB; continue;
case INSTR_ANDBR9I: REGISTER._9B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR9RA: REGISTER._9B &= REGISTER.AB; continue;
case INSTR_ANDBR9RB: REGISTER._9B &= REGISTER.BB; continue;
case INSTR_ANDBR9RC: REGISTER._9B &= REGISTER.CB; continue;
case INSTR_ANDBR9RD: REGISTER._9B &= REGISTER.DB; continue;
case INSTR_ANDBR9R0: REGISTER._9B &= REGISTER._0B; continue;
case INSTR_ANDBR9R1: REGISTER._9B &= REGISTER._1B; continue;
case INSTR_ANDBR9R2: REGISTER._9B &= REGISTER._2B; continue;
case INSTR_ANDBR9R3: REGISTER._9B &= REGISTER._3B; continue;
case INSTR_ANDBR9R4: REGISTER._9B &= REGISTER._4B; continue;
case INSTR_ANDBR9R5: REGISTER._9B &= REGISTER._5B; continue;
case INSTR_ANDBR9R6: REGISTER._9B &= REGISTER._6B; continue;
case INSTR_ANDBR9R7: REGISTER._9B &= REGISTER._7B; continue;
case INSTR_ANDBR9R8: REGISTER._9B &= REGISTER._8B; continue;
case INSTR_ANDBR9R9: REGISTER._9B &= REGISTER._9B; continue;
case INSTR_ANDBR9R10: REGISTER._9B &= REGISTER._10B; continue;
case INSTR_ANDBR9R11: REGISTER._9B &= REGISTER._11B; continue;
case INSTR_ANDBR9R12: REGISTER._9B &= REGISTER._12B; continue;
case INSTR_ANDBR9RIP: REGISTER._9B &= REGISTER.IPB; continue;
case INSTR_ANDBR9RSP: REGISTER._9B &= REGISTER.SPB; continue;
case INSTR_ANDBR9RBP: REGISTER._9B &= REGISTER.BPB; continue;
case INSTR_ANDBR10I: REGISTER._10B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR10RA: REGISTER._10B &= REGISTER.AB; continue;
case INSTR_ANDBR10RB: REGISTER._10B &= REGISTER.BB; continue;
case INSTR_ANDBR10RC: REGISTER._10B &= REGISTER.CB; continue;
case INSTR_ANDBR10RD: REGISTER._10B &= REGISTER.DB; continue;
case INSTR_ANDBR10R0: REGISTER._10B &= REGISTER._0B; continue;
case INSTR_ANDBR10R1: REGISTER._10B &= REGISTER._1B; continue;
case INSTR_ANDBR10R2: REGISTER._10B &= REGISTER._2B; continue;
case INSTR_ANDBR10R3: REGISTER._10B &= REGISTER._3B; continue;
case INSTR_ANDBR10R4: REGISTER._10B &= REGISTER._4B; continue;
case INSTR_ANDBR10R5: REGISTER._10B &= REGISTER._5B; continue;
case INSTR_ANDBR10R6: REGISTER._10B &= REGISTER._6B; continue;
case INSTR_ANDBR10R7: REGISTER._10B &= REGISTER._7B; continue;
case INSTR_ANDBR10R8: REGISTER._10B &= REGISTER._8B; continue;
case INSTR_ANDBR10R9: REGISTER._10B &= REGISTER._9B; continue;
case INSTR_ANDBR10R10: REGISTER._10B &= REGISTER._10B; continue;
case INSTR_ANDBR10R11: REGISTER._10B &= REGISTER._11B; continue;
case INSTR_ANDBR10R12: REGISTER._10B &= REGISTER._12B; continue;
case INSTR_ANDBR10RIP: REGISTER._10B &= REGISTER.IPB; continue;
case INSTR_ANDBR10RSP: REGISTER._10B &= REGISTER.SPB; continue;
case INSTR_ANDBR10RBP: REGISTER._10B &= REGISTER.BPB; continue;
case INSTR_ANDBR11I: REGISTER._11B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR11RA: REGISTER._11B &= REGISTER.AB; continue;
case INSTR_ANDBR11RB: REGISTER._11B &= REGISTER.BB; continue;
case INSTR_ANDBR11RC: REGISTER._11B &= REGISTER.CB; continue;
case INSTR_ANDBR11RD: REGISTER._11B &= REGISTER.DB; continue;
case INSTR_ANDBR11R0: REGISTER._11B &= REGISTER._0B; continue;
case INSTR_ANDBR11R1: REGISTER._11B &= REGISTER._1B; continue;
case INSTR_ANDBR11R2: REGISTER._11B &= REGISTER._2B; continue;
case INSTR_ANDBR11R3: REGISTER._11B &= REGISTER._3B; continue;
case INSTR_ANDBR11R4: REGISTER._11B &= REGISTER._4B; continue;
case INSTR_ANDBR11R5: REGISTER._11B &= REGISTER._5B; continue;
case INSTR_ANDBR11R6: REGISTER._11B &= REGISTER._6B; continue;
case INSTR_ANDBR11R7: REGISTER._11B &= REGISTER._7B; continue;
case INSTR_ANDBR11R8: REGISTER._11B &= REGISTER._8B; continue;
case INSTR_ANDBR11R9: REGISTER._11B &= REGISTER._9B; continue;
case INSTR_ANDBR11R10: REGISTER._11B &= REGISTER._10B; continue;
case INSTR_ANDBR11R11: REGISTER._11B &= REGISTER._11B; continue;
case INSTR_ANDBR11R12: REGISTER._11B &= REGISTER._12B; continue;
case INSTR_ANDBR11RIP: REGISTER._11B &= REGISTER.IPB; continue;
case INSTR_ANDBR11RSP: REGISTER._11B &= REGISTER.SPB; continue;
case INSTR_ANDBR11RBP: REGISTER._11B &= REGISTER.BPB; continue;
case INSTR_ANDBR12I: REGISTER._12B &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBR12RA: REGISTER._12B &= REGISTER.AB; continue;
case INSTR_ANDBR12RB: REGISTER._12B &= REGISTER.BB; continue;
case INSTR_ANDBR12RC: REGISTER._12B &= REGISTER.CB; continue;
case INSTR_ANDBR12RD: REGISTER._12B &= REGISTER.DB; continue;
case INSTR_ANDBR12R0: REGISTER._12B &= REGISTER._0B; continue;
case INSTR_ANDBR12R1: REGISTER._12B &= REGISTER._1B; continue;
case INSTR_ANDBR12R2: REGISTER._12B &= REGISTER._2B; continue;
case INSTR_ANDBR12R3: REGISTER._12B &= REGISTER._3B; continue;
case INSTR_ANDBR12R4: REGISTER._12B &= REGISTER._4B; continue;
case INSTR_ANDBR12R5: REGISTER._12B &= REGISTER._5B; continue;
case INSTR_ANDBR12R6: REGISTER._12B &= REGISTER._6B; continue;
case INSTR_ANDBR12R7: REGISTER._12B &= REGISTER._7B; continue;
case INSTR_ANDBR12R8: REGISTER._12B &= REGISTER._8B; continue;
case INSTR_ANDBR12R9: REGISTER._12B &= REGISTER._9B; continue;
case INSTR_ANDBR12R10: REGISTER._12B &= REGISTER._10B; continue;
case INSTR_ANDBR12R11: REGISTER._12B &= REGISTER._11B; continue;
case INSTR_ANDBR12R12: REGISTER._12B &= REGISTER._12B; continue;
case INSTR_ANDBR12RIP: REGISTER._12B &= REGISTER.IPB; continue;
case INSTR_ANDBR12RSP: REGISTER._12B &= REGISTER.SPB; continue;
case INSTR_ANDBR12RBP: REGISTER._12B &= REGISTER.BPB; continue;
case INSTR_ANDBRIPI: REGISTER.IPB &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBRIPRA: REGISTER.IPB &= REGISTER.AB; continue;
case INSTR_ANDBRIPRB: REGISTER.IPB &= REGISTER.BB; continue;
case INSTR_ANDBRIPRC: REGISTER.IPB &= REGISTER.CB; continue;
case INSTR_ANDBRIPRD: REGISTER.IPB &= REGISTER.DB; continue;
case INSTR_ANDBRIPR0: REGISTER.IPB &= REGISTER._0B; continue;
case INSTR_ANDBRIPR1: REGISTER.IPB &= REGISTER._1B; continue;
case INSTR_ANDBRIPR2: REGISTER.IPB &= REGISTER._2B; continue;
case INSTR_ANDBRIPR3: REGISTER.IPB &= REGISTER._3B; continue;
case INSTR_ANDBRIPR4: REGISTER.IPB &= REGISTER._4B; continue;
case INSTR_ANDBRIPR5: REGISTER.IPB &= REGISTER._5B; continue;
case INSTR_ANDBRIPR6: REGISTER.IPB &= REGISTER._6B; continue;
case INSTR_ANDBRIPR7: REGISTER.IPB &= REGISTER._7B; continue;
case INSTR_ANDBRIPR8: REGISTER.IPB &= REGISTER._8B; continue;
case INSTR_ANDBRIPR9: REGISTER.IPB &= REGISTER._9B; continue;
case INSTR_ANDBRIPR10: REGISTER.IPB &= REGISTER._10B; continue;
case INSTR_ANDBRIPR11: REGISTER.IPB &= REGISTER._11B; continue;
case INSTR_ANDBRIPR12: REGISTER.IPB &= REGISTER._12B; continue;
case INSTR_ANDBRIPRIP: REGISTER.IPB &= REGISTER.IPB; continue;
case INSTR_ANDBRIPRSP: REGISTER.IPB &= REGISTER.SPB; continue;
case INSTR_ANDBRIPRBP: REGISTER.IPB &= REGISTER.BPB; continue;
case INSTR_ANDBRSPI: REGISTER.SPB &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBRSPRA: REGISTER.SPB &= REGISTER.AB; continue;
case INSTR_ANDBRSPRB: REGISTER.SPB &= REGISTER.BB; continue;
case INSTR_ANDBRSPRC: REGISTER.SPB &= REGISTER.CB; continue;
case INSTR_ANDBRSPRD: REGISTER.SPB &= REGISTER.DB; continue;
case INSTR_ANDBRSPR0: REGISTER.SPB &= REGISTER._0B; continue;
case INSTR_ANDBRSPR1: REGISTER.SPB &= REGISTER._1B; continue;
case INSTR_ANDBRSPR2: REGISTER.SPB &= REGISTER._2B; continue;
case INSTR_ANDBRSPR3: REGISTER.SPB &= REGISTER._3B; continue;
case INSTR_ANDBRSPR4: REGISTER.SPB &= REGISTER._4B; continue;
case INSTR_ANDBRSPR5: REGISTER.SPB &= REGISTER._5B; continue;
case INSTR_ANDBRSPR6: REGISTER.SPB &= REGISTER._6B; continue;
case INSTR_ANDBRSPR7: REGISTER.SPB &= REGISTER._7B; continue;
case INSTR_ANDBRSPR8: REGISTER.SPB &= REGISTER._8B; continue;
case INSTR_ANDBRSPR9: REGISTER.SPB &= REGISTER._9B; continue;
case INSTR_ANDBRSPR10: REGISTER.SPB &= REGISTER._10B; continue;
case INSTR_ANDBRSPR11: REGISTER.SPB &= REGISTER._11B; continue;
case INSTR_ANDBRSPR12: REGISTER.SPB &= REGISTER._12B; continue;
case INSTR_ANDBRSPRIP: REGISTER.SPB &= REGISTER.IPB; continue;
case INSTR_ANDBRSPRSP: REGISTER.SPB &= REGISTER.SPB; continue;
case INSTR_ANDBRSPRBP: REGISTER.SPB &= REGISTER.BPB; continue;
case INSTR_ANDBRBPI: REGISTER.BPB &= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_ANDBRBPRA: REGISTER.BPB &= REGISTER.AB; continue;
case INSTR_ANDBRBPRB: REGISTER.BPB &= REGISTER.BB; continue;
case INSTR_ANDBRBPRC: REGISTER.BPB &= REGISTER.CB; continue;
case INSTR_ANDBRBPRD: REGISTER.BPB &= REGISTER.DB; continue;
case INSTR_ANDBRBPR0: REGISTER.BPB &= REGISTER._0B; continue;
case INSTR_ANDBRBPR1: REGISTER.BPB &= REGISTER._1B; continue;
case INSTR_ANDBRBPR2: REGISTER.BPB &= REGISTER._2B; continue;
case INSTR_ANDBRBPR3: REGISTER.BPB &= REGISTER._3B; continue;
case INSTR_ANDBRBPR4: REGISTER.BPB &= REGISTER._4B; continue;
case INSTR_ANDBRBPR5: REGISTER.BPB &= REGISTER._5B; continue;
case INSTR_ANDBRBPR6: REGISTER.BPB &= REGISTER._6B; continue;
case INSTR_ANDBRBPR7: REGISTER.BPB &= REGISTER._7B; continue;
case INSTR_ANDBRBPR8: REGISTER.BPB &= REGISTER._8B; continue;
case INSTR_ANDBRBPR9: REGISTER.BPB &= REGISTER._9B; continue;
case INSTR_ANDBRBPR10: REGISTER.BPB &= REGISTER._10B; continue;
case INSTR_ANDBRBPR11: REGISTER.BPB &= REGISTER._11B; continue;
case INSTR_ANDBRBPR12: REGISTER.BPB &= REGISTER._12B; continue;
case INSTR_ANDBRBPRIP: REGISTER.BPB &= REGISTER.IPB; continue;
case INSTR_ANDBRBPRSP: REGISTER.BPB &= REGISTER.SPB; continue;
case INSTR_ANDBRBPRBP: REGISTER.BPB &= REGISTER.BPB; continue;
case INSTR_XORQRAI: REGISTER.AQ ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQRARA: REGISTER.AQ = 0; continue;
case INSTR_XORQRARB: REGISTER.AQ ^= REGISTER.BQ; continue;
case INSTR_XORQRARC: REGISTER.AQ ^= REGISTER.CQ; continue;
case INSTR_XORQRARD: REGISTER.AQ ^= REGISTER.DQ; continue;
case INSTR_XORQRAR0: REGISTER.AQ ^= REGISTER._0Q; continue;
case INSTR_XORQRAR1: REGISTER.AQ ^= REGISTER._1Q; continue;
case INSTR_XORQRAR2: REGISTER.AQ ^= REGISTER._2Q; continue;
case INSTR_XORQRAR3: REGISTER.AQ ^= REGISTER._3Q; continue;
case INSTR_XORQRAR4: REGISTER.AQ ^= REGISTER._4Q; continue;
case INSTR_XORQRAR5: REGISTER.AQ ^= REGISTER._5Q; continue;
case INSTR_XORQRAR6: REGISTER.AQ ^= REGISTER._6Q; continue;
case INSTR_XORQRAR7: REGISTER.AQ ^= REGISTER._7Q; continue;
case INSTR_XORQRAR8: REGISTER.AQ ^= REGISTER._8Q; continue;
case INSTR_XORQRAR9: REGISTER.AQ ^= REGISTER._9Q; continue;
case INSTR_XORQRAR10: REGISTER.AQ ^= REGISTER._10Q; continue;
case INSTR_XORQRAR11: REGISTER.AQ ^= REGISTER._11Q; continue;
case INSTR_XORQRAR12: REGISTER.AQ ^= REGISTER._12Q; continue;
case INSTR_XORQRARIP: REGISTER.AQ ^= REGISTER.IPQ; continue;
case INSTR_XORQRARSP: REGISTER.AQ ^= REGISTER.SPQ; continue;
case INSTR_XORQRARBP: REGISTER.AQ ^= REGISTER.BPQ; continue;
case INSTR_XORQRBI: REGISTER.BQ ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQRBRA: REGISTER.BQ ^= REGISTER.AQ; continue;
case INSTR_XORQRBRB: REGISTER.BQ = 0; continue;
case INSTR_XORQRBRC: REGISTER.BQ ^= REGISTER.CQ; continue;
case INSTR_XORQRBRD: REGISTER.BQ ^= REGISTER.DQ; continue;
case INSTR_XORQRBR0: REGISTER.BQ ^= REGISTER._0Q; continue;
case INSTR_XORQRBR1: REGISTER.BQ ^= REGISTER._1Q; continue;
case INSTR_XORQRBR2: REGISTER.BQ ^= REGISTER._2Q; continue;
case INSTR_XORQRBR3: REGISTER.BQ ^= REGISTER._3Q; continue;
case INSTR_XORQRBR4: REGISTER.BQ ^= REGISTER._4Q; continue;
case INSTR_XORQRBR5: REGISTER.BQ ^= REGISTER._5Q; continue;
case INSTR_XORQRBR6: REGISTER.BQ ^= REGISTER._6Q; continue;
case INSTR_XORQRBR7: REGISTER.BQ ^= REGISTER._7Q; continue;
case INSTR_XORQRBR8: REGISTER.BQ ^= REGISTER._8Q; continue;
case INSTR_XORQRBR9: REGISTER.BQ ^= REGISTER._9Q; continue;
case INSTR_XORQRBR10: REGISTER.BQ ^= REGISTER._10Q; continue;
case INSTR_XORQRBR11: REGISTER.BQ ^= REGISTER._11Q; continue;
case INSTR_XORQRBR12: REGISTER.BQ ^= REGISTER._12Q; continue;
case INSTR_XORQRBRIP: REGISTER.BQ ^= REGISTER.IPQ; continue;
case INSTR_XORQRBRSP: REGISTER.BQ ^= REGISTER.SPQ; continue;
case INSTR_XORQRBRBP: REGISTER.BQ ^= REGISTER.BPQ; continue;
case INSTR_XORQRCI: REGISTER.CQ ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQRCRA: REGISTER.CQ ^= REGISTER.AQ; continue;
case INSTR_XORQRCRB: REGISTER.CQ ^= REGISTER.BQ; continue;
case INSTR_XORQRCRC: REGISTER.CQ = 0; continue;
case INSTR_XORQRCRD: REGISTER.CQ ^= REGISTER.DQ; continue;
case INSTR_XORQRCR0: REGISTER.CQ ^= REGISTER._0Q; continue;
case INSTR_XORQRCR1: REGISTER.CQ ^= REGISTER._1Q; continue;
case INSTR_XORQRCR2: REGISTER.CQ ^= REGISTER._2Q; continue;
case INSTR_XORQRCR3: REGISTER.CQ ^= REGISTER._3Q; continue;
case INSTR_XORQRCR4: REGISTER.CQ ^= REGISTER._4Q; continue;
case INSTR_XORQRCR5: REGISTER.CQ ^= REGISTER._5Q; continue;
case INSTR_XORQRCR6: REGISTER.CQ ^= REGISTER._6Q; continue;
case INSTR_XORQRCR7: REGISTER.CQ ^= REGISTER._7Q; continue;
case INSTR_XORQRCR8: REGISTER.CQ ^= REGISTER._8Q; continue;
case INSTR_XORQRCR9: REGISTER.CQ ^= REGISTER._9Q; continue;
case INSTR_XORQRCR10: REGISTER.CQ ^= REGISTER._10Q; continue;
case INSTR_XORQRCR11: REGISTER.CQ ^= REGISTER._11Q; continue;
case INSTR_XORQRCR12: REGISTER.CQ ^= REGISTER._12Q; continue;
case INSTR_XORQRCRIP: REGISTER.CQ ^= REGISTER.IPQ; continue;
case INSTR_XORQRCRSP: REGISTER.CQ ^= REGISTER.SPQ; continue;
case INSTR_XORQRCRBP: REGISTER.CQ ^= REGISTER.BPQ; continue;
case INSTR_XORQRDI: REGISTER.DQ ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQRDRA: REGISTER.DQ ^= REGISTER.AQ; continue;
case INSTR_XORQRDRB: REGISTER.DQ ^= REGISTER.BQ; continue;
case INSTR_XORQRDRC: REGISTER.DQ ^= REGISTER.CQ; continue;
case INSTR_XORQRDRD: REGISTER.DQ = 0; continue;
case INSTR_XORQRDR0: REGISTER.DQ ^= REGISTER._0Q; continue;
case INSTR_XORQRDR1: REGISTER.DQ ^= REGISTER._1Q; continue;
case INSTR_XORQRDR2: REGISTER.DQ ^= REGISTER._2Q; continue;
case INSTR_XORQRDR3: REGISTER.DQ ^= REGISTER._3Q; continue;
case INSTR_XORQRDR4: REGISTER.DQ ^= REGISTER._4Q; continue;
case INSTR_XORQRDR5: REGISTER.DQ ^= REGISTER._5Q; continue;
case INSTR_XORQRDR6: REGISTER.DQ ^= REGISTER._6Q; continue;
case INSTR_XORQRDR7: REGISTER.DQ ^= REGISTER._7Q; continue;
case INSTR_XORQRDR8: REGISTER.DQ ^= REGISTER._8Q; continue;
case INSTR_XORQRDR9: REGISTER.DQ ^= REGISTER._9Q; continue;
case INSTR_XORQRDR10: REGISTER.DQ ^= REGISTER._10Q; continue;
case INSTR_XORQRDR11: REGISTER.DQ ^= REGISTER._11Q; continue;
case INSTR_XORQRDR12: REGISTER.DQ ^= REGISTER._12Q; continue;
case INSTR_XORQRDRIP: REGISTER.DQ ^= REGISTER.IPQ; continue;
case INSTR_XORQRDRSP: REGISTER.DQ ^= REGISTER.SPQ; continue;
case INSTR_XORQRDRBP: REGISTER.DQ ^= REGISTER.BPQ; continue;
case INSTR_XORQR0I: REGISTER._0Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR0RA: REGISTER._0Q ^= REGISTER.AQ; continue;
case INSTR_XORQR0RB: REGISTER._0Q ^= REGISTER.BQ; continue;
case INSTR_XORQR0RC: REGISTER._0Q ^= REGISTER.CQ; continue;
case INSTR_XORQR0RD: REGISTER._0Q ^= REGISTER.DQ; continue;
case INSTR_XORQR0R0: REGISTER._0Q = 0; continue;
case INSTR_XORQR0R1: REGISTER._0Q ^= REGISTER._1Q; continue;
case INSTR_XORQR0R2: REGISTER._0Q ^= REGISTER._2Q; continue;
case INSTR_XORQR0R3: REGISTER._0Q ^= REGISTER._3Q; continue;
case INSTR_XORQR0R4: REGISTER._0Q ^= REGISTER._4Q; continue;
case INSTR_XORQR0R5: REGISTER._0Q ^= REGISTER._5Q; continue;
case INSTR_XORQR0R6: REGISTER._0Q ^= REGISTER._6Q; continue;
case INSTR_XORQR0R7: REGISTER._0Q ^= REGISTER._7Q; continue;
case INSTR_XORQR0R8: REGISTER._0Q ^= REGISTER._8Q; continue;
case INSTR_XORQR0R9: REGISTER._0Q ^= REGISTER._9Q; continue;
case INSTR_XORQR0R10: REGISTER._0Q ^= REGISTER._10Q; continue;
case INSTR_XORQR0R11: REGISTER._0Q ^= REGISTER._11Q; continue;
case INSTR_XORQR0R12: REGISTER._0Q ^= REGISTER._12Q; continue;
case INSTR_XORQR0RIP: REGISTER._0Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR0RSP: REGISTER._0Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR0RBP: REGISTER._0Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR1I: REGISTER._1Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR1RA: REGISTER._1Q ^= REGISTER.AQ; continue;
case INSTR_XORQR1RB: REGISTER._1Q ^= REGISTER.BQ; continue;
case INSTR_XORQR1RC: REGISTER._1Q ^= REGISTER.CQ; continue;
case INSTR_XORQR1RD: REGISTER._1Q ^= REGISTER.DQ; continue;
case INSTR_XORQR1R0: REGISTER._1Q ^= REGISTER._0Q; continue;
case INSTR_XORQR1R1: REGISTER._1Q = 0; continue;
case INSTR_XORQR1R2: REGISTER._1Q ^= REGISTER._2Q; continue;
case INSTR_XORQR1R3: REGISTER._1Q ^= REGISTER._3Q; continue;
case INSTR_XORQR1R4: REGISTER._1Q ^= REGISTER._4Q; continue;
case INSTR_XORQR1R5: REGISTER._1Q ^= REGISTER._5Q; continue;
case INSTR_XORQR1R6: REGISTER._1Q ^= REGISTER._6Q; continue;
case INSTR_XORQR1R7: REGISTER._1Q ^= REGISTER._7Q; continue;
case INSTR_XORQR1R8: REGISTER._1Q ^= REGISTER._8Q; continue;
case INSTR_XORQR1R9: REGISTER._1Q ^= REGISTER._9Q; continue;
case INSTR_XORQR1R10: REGISTER._1Q ^= REGISTER._10Q; continue;
case INSTR_XORQR1R11: REGISTER._1Q ^= REGISTER._11Q; continue;
case INSTR_XORQR1R12: REGISTER._1Q ^= REGISTER._12Q; continue;
case INSTR_XORQR1RIP: REGISTER._1Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR1RSP: REGISTER._1Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR1RBP: REGISTER._1Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR2I: REGISTER._2Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR2RA: REGISTER._2Q ^= REGISTER.AQ; continue;
case INSTR_XORQR2RB: REGISTER._2Q ^= REGISTER.BQ; continue;
case INSTR_XORQR2RC: REGISTER._2Q ^= REGISTER.CQ; continue;
case INSTR_XORQR2RD: REGISTER._2Q ^= REGISTER.DQ; continue;
case INSTR_XORQR2R0: REGISTER._2Q ^= REGISTER._0Q; continue;
case INSTR_XORQR2R1: REGISTER._2Q ^= REGISTER._1Q; continue;
case INSTR_XORQR2R2: REGISTER._2Q = 0; continue;
case INSTR_XORQR2R3: REGISTER._2Q ^= REGISTER._3Q; continue;
case INSTR_XORQR2R4: REGISTER._2Q ^= REGISTER._4Q; continue;
case INSTR_XORQR2R5: REGISTER._2Q ^= REGISTER._5Q; continue;
case INSTR_XORQR2R6: REGISTER._2Q ^= REGISTER._6Q; continue;
case INSTR_XORQR2R7: REGISTER._2Q ^= REGISTER._7Q; continue;
case INSTR_XORQR2R8: REGISTER._2Q ^= REGISTER._8Q; continue;
case INSTR_XORQR2R9: REGISTER._2Q ^= REGISTER._9Q; continue;
case INSTR_XORQR2R10: REGISTER._2Q ^= REGISTER._10Q; continue;
case INSTR_XORQR2R11: REGISTER._2Q ^= REGISTER._11Q; continue;
case INSTR_XORQR2R12: REGISTER._2Q ^= REGISTER._12Q; continue;
case INSTR_XORQR2RIP: REGISTER._2Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR2RSP: REGISTER._2Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR2RBP: REGISTER._2Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR3I: REGISTER._3Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR3RA: REGISTER._3Q ^= REGISTER.AQ; continue;
case INSTR_XORQR3RB: REGISTER._3Q ^= REGISTER.BQ; continue;
case INSTR_XORQR3RC: REGISTER._3Q ^= REGISTER.CQ; continue;
case INSTR_XORQR3RD: REGISTER._3Q ^= REGISTER.DQ; continue;
case INSTR_XORQR3R0: REGISTER._3Q ^= REGISTER._0Q; continue;
case INSTR_XORQR3R1: REGISTER._3Q ^= REGISTER._1Q; continue;
case INSTR_XORQR3R2: REGISTER._3Q ^= REGISTER._2Q; continue;
case INSTR_XORQR3R3: REGISTER._3Q = 0; continue;
case INSTR_XORQR3R4: REGISTER._3Q ^= REGISTER._4Q; continue;
case INSTR_XORQR3R5: REGISTER._3Q ^= REGISTER._5Q; continue;
case INSTR_XORQR3R6: REGISTER._3Q ^= REGISTER._6Q; continue;
case INSTR_XORQR3R7: REGISTER._3Q ^= REGISTER._7Q; continue;
case INSTR_XORQR3R8: REGISTER._3Q ^= REGISTER._8Q; continue;
case INSTR_XORQR3R9: REGISTER._3Q ^= REGISTER._9Q; continue;
case INSTR_XORQR3R10: REGISTER._3Q ^= REGISTER._10Q; continue;
case INSTR_XORQR3R11: REGISTER._3Q ^= REGISTER._11Q; continue;
case INSTR_XORQR3R12: REGISTER._3Q ^= REGISTER._12Q; continue;
case INSTR_XORQR3RIP: REGISTER._3Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR3RSP: REGISTER._3Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR3RBP: REGISTER._3Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR4I: REGISTER._4Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR4RA: REGISTER._4Q ^= REGISTER.AQ; continue;
case INSTR_XORQR4RB: REGISTER._4Q ^= REGISTER.BQ; continue;
case INSTR_XORQR4RC: REGISTER._4Q ^= REGISTER.CQ; continue;
case INSTR_XORQR4RD: REGISTER._4Q ^= REGISTER.DQ; continue;
case INSTR_XORQR4R0: REGISTER._4Q ^= REGISTER._0Q; continue;
case INSTR_XORQR4R1: REGISTER._4Q ^= REGISTER._1Q; continue;
case INSTR_XORQR4R2: REGISTER._4Q ^= REGISTER._2Q; continue;
case INSTR_XORQR4R3: REGISTER._4Q ^= REGISTER._3Q; continue;
case INSTR_XORQR4R4: REGISTER._4Q = 0; continue;
case INSTR_XORQR4R5: REGISTER._4Q ^= REGISTER._5Q; continue;
case INSTR_XORQR4R6: REGISTER._4Q ^= REGISTER._6Q; continue;
case INSTR_XORQR4R7: REGISTER._4Q ^= REGISTER._7Q; continue;
case INSTR_XORQR4R8: REGISTER._4Q ^= REGISTER._8Q; continue;
case INSTR_XORQR4R9: REGISTER._4Q ^= REGISTER._9Q; continue;
case INSTR_XORQR4R10: REGISTER._4Q ^= REGISTER._10Q; continue;
case INSTR_XORQR4R11: REGISTER._4Q ^= REGISTER._11Q; continue;
case INSTR_XORQR4R12: REGISTER._4Q ^= REGISTER._12Q; continue;
case INSTR_XORQR4RIP: REGISTER._4Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR4RSP: REGISTER._4Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR4RBP: REGISTER._4Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR5I: REGISTER._5Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR5RA: REGISTER._5Q ^= REGISTER.AQ; continue;
case INSTR_XORQR5RB: REGISTER._5Q ^= REGISTER.BQ; continue;
case INSTR_XORQR5RC: REGISTER._5Q ^= REGISTER.CQ; continue;
case INSTR_XORQR5RD: REGISTER._5Q ^= REGISTER.DQ; continue;
case INSTR_XORQR5R0: REGISTER._5Q ^= REGISTER._0Q; continue;
case INSTR_XORQR5R1: REGISTER._5Q ^= REGISTER._1Q; continue;
case INSTR_XORQR5R2: REGISTER._5Q ^= REGISTER._2Q; continue;
case INSTR_XORQR5R3: REGISTER._5Q ^= REGISTER._3Q; continue;
case INSTR_XORQR5R4: REGISTER._5Q ^= REGISTER._4Q; continue;
case INSTR_XORQR5R5: REGISTER._5Q = 0; continue;
case INSTR_XORQR5R6: REGISTER._5Q ^= REGISTER._6Q; continue;
case INSTR_XORQR5R7: REGISTER._5Q ^= REGISTER._7Q; continue;
case INSTR_XORQR5R8: REGISTER._5Q ^= REGISTER._8Q; continue;
case INSTR_XORQR5R9: REGISTER._5Q ^= REGISTER._9Q; continue;
case INSTR_XORQR5R10: REGISTER._5Q ^= REGISTER._10Q; continue;
case INSTR_XORQR5R11: REGISTER._5Q ^= REGISTER._11Q; continue;
case INSTR_XORQR5R12: REGISTER._5Q ^= REGISTER._12Q; continue;
case INSTR_XORQR5RIP: REGISTER._5Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR5RSP: REGISTER._5Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR5RBP: REGISTER._5Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR6I: REGISTER._6Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR6RA: REGISTER._6Q ^= REGISTER.AQ; continue;
case INSTR_XORQR6RB: REGISTER._6Q ^= REGISTER.BQ; continue;
case INSTR_XORQR6RC: REGISTER._6Q ^= REGISTER.CQ; continue;
case INSTR_XORQR6RD: REGISTER._6Q ^= REGISTER.DQ; continue;
case INSTR_XORQR6R0: REGISTER._6Q ^= REGISTER._0Q; continue;
case INSTR_XORQR6R1: REGISTER._6Q ^= REGISTER._1Q; continue;
case INSTR_XORQR6R2: REGISTER._6Q ^= REGISTER._2Q; continue;
case INSTR_XORQR6R3: REGISTER._6Q ^= REGISTER._3Q; continue;
case INSTR_XORQR6R4: REGISTER._6Q ^= REGISTER._4Q; continue;
case INSTR_XORQR6R5: REGISTER._6Q ^= REGISTER._5Q; continue;
case INSTR_XORQR6R6: REGISTER._6Q = 0; continue;
case INSTR_XORQR6R7: REGISTER._6Q ^= REGISTER._7Q; continue;
case INSTR_XORQR6R8: REGISTER._6Q ^= REGISTER._8Q; continue;
case INSTR_XORQR6R9: REGISTER._6Q ^= REGISTER._9Q; continue;
case INSTR_XORQR6R10: REGISTER._6Q ^= REGISTER._10Q; continue;
case INSTR_XORQR6R11: REGISTER._6Q ^= REGISTER._11Q; continue;
case INSTR_XORQR6R12: REGISTER._6Q ^= REGISTER._12Q; continue;
case INSTR_XORQR6RIP: REGISTER._6Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR6RSP: REGISTER._6Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR6RBP: REGISTER._6Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR7I: REGISTER._7Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR7RA: REGISTER._7Q ^= REGISTER.AQ; continue;
case INSTR_XORQR7RB: REGISTER._7Q ^= REGISTER.BQ; continue;
case INSTR_XORQR7RC: REGISTER._7Q ^= REGISTER.CQ; continue;
case INSTR_XORQR7RD: REGISTER._7Q ^= REGISTER.DQ; continue;
case INSTR_XORQR7R0: REGISTER._7Q ^= REGISTER._0Q; continue;
case INSTR_XORQR7R1: REGISTER._7Q ^= REGISTER._1Q; continue;
case INSTR_XORQR7R2: REGISTER._7Q ^= REGISTER._2Q; continue;
case INSTR_XORQR7R3: REGISTER._7Q ^= REGISTER._3Q; continue;
case INSTR_XORQR7R4: REGISTER._7Q ^= REGISTER._4Q; continue;
case INSTR_XORQR7R5: REGISTER._7Q ^= REGISTER._5Q; continue;
case INSTR_XORQR7R6: REGISTER._7Q ^= REGISTER._6Q; continue;
case INSTR_XORQR7R7: REGISTER._7Q = 0; continue;
case INSTR_XORQR7R8: REGISTER._7Q ^= REGISTER._8Q; continue;
case INSTR_XORQR7R9: REGISTER._7Q ^= REGISTER._9Q; continue;
case INSTR_XORQR7R10: REGISTER._7Q ^= REGISTER._10Q; continue;
case INSTR_XORQR7R11: REGISTER._7Q ^= REGISTER._11Q; continue;
case INSTR_XORQR7R12: REGISTER._7Q ^= REGISTER._12Q; continue;
case INSTR_XORQR7RIP: REGISTER._7Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR7RSP: REGISTER._7Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR7RBP: REGISTER._7Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR8I: REGISTER._8Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR8RA: REGISTER._8Q ^= REGISTER.AQ; continue;
case INSTR_XORQR8RB: REGISTER._8Q ^= REGISTER.BQ; continue;
case INSTR_XORQR8RC: REGISTER._8Q ^= REGISTER.CQ; continue;
case INSTR_XORQR8RD: REGISTER._8Q ^= REGISTER.DQ; continue;
case INSTR_XORQR8R0: REGISTER._8Q ^= REGISTER._0Q; continue;
case INSTR_XORQR8R1: REGISTER._8Q ^= REGISTER._1Q; continue;
case INSTR_XORQR8R2: REGISTER._8Q ^= REGISTER._2Q; continue;
case INSTR_XORQR8R3: REGISTER._8Q ^= REGISTER._3Q; continue;
case INSTR_XORQR8R4: REGISTER._8Q ^= REGISTER._4Q; continue;
case INSTR_XORQR8R5: REGISTER._8Q ^= REGISTER._5Q; continue;
case INSTR_XORQR8R6: REGISTER._8Q ^= REGISTER._6Q; continue;
case INSTR_XORQR8R7: REGISTER._8Q ^= REGISTER._7Q; continue;
case INSTR_XORQR8R8: REGISTER._8Q = 0; continue;
case INSTR_XORQR8R9: REGISTER._8Q ^= REGISTER._9Q; continue;
case INSTR_XORQR8R10: REGISTER._8Q ^= REGISTER._10Q; continue;
case INSTR_XORQR8R11: REGISTER._8Q ^= REGISTER._11Q; continue;
case INSTR_XORQR8R12: REGISTER._8Q ^= REGISTER._12Q; continue;
case INSTR_XORQR8RIP: REGISTER._8Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR8RSP: REGISTER._8Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR8RBP: REGISTER._8Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR9I: REGISTER._9Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR9RA: REGISTER._9Q ^= REGISTER.AQ; continue;
case INSTR_XORQR9RB: REGISTER._9Q ^= REGISTER.BQ; continue;
case INSTR_XORQR9RC: REGISTER._9Q ^= REGISTER.CQ; continue;
case INSTR_XORQR9RD: REGISTER._9Q ^= REGISTER.DQ; continue;
case INSTR_XORQR9R0: REGISTER._9Q ^= REGISTER._0Q; continue;
case INSTR_XORQR9R1: REGISTER._9Q ^= REGISTER._1Q; continue;
case INSTR_XORQR9R2: REGISTER._9Q ^= REGISTER._2Q; continue;
case INSTR_XORQR9R3: REGISTER._9Q ^= REGISTER._3Q; continue;
case INSTR_XORQR9R4: REGISTER._9Q ^= REGISTER._4Q; continue;
case INSTR_XORQR9R5: REGISTER._9Q ^= REGISTER._5Q; continue;
case INSTR_XORQR9R6: REGISTER._9Q ^= REGISTER._6Q; continue;
case INSTR_XORQR9R7: REGISTER._9Q ^= REGISTER._7Q; continue;
case INSTR_XORQR9R8: REGISTER._9Q ^= REGISTER._8Q; continue;
case INSTR_XORQR9R9: REGISTER._9Q = 0; continue;
case INSTR_XORQR9R10: REGISTER._9Q ^= REGISTER._10Q; continue;
case INSTR_XORQR9R11: REGISTER._9Q ^= REGISTER._11Q; continue;
case INSTR_XORQR9R12: REGISTER._9Q ^= REGISTER._12Q; continue;
case INSTR_XORQR9RIP: REGISTER._9Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR9RSP: REGISTER._9Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR9RBP: REGISTER._9Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR10I: REGISTER._10Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR10RA: REGISTER._10Q ^= REGISTER.AQ; continue;
case INSTR_XORQR10RB: REGISTER._10Q ^= REGISTER.BQ; continue;
case INSTR_XORQR10RC: REGISTER._10Q ^= REGISTER.CQ; continue;
case INSTR_XORQR10RD: REGISTER._10Q ^= REGISTER.DQ; continue;
case INSTR_XORQR10R0: REGISTER._10Q ^= REGISTER._0Q; continue;
case INSTR_XORQR10R1: REGISTER._10Q ^= REGISTER._1Q; continue;
case INSTR_XORQR10R2: REGISTER._10Q ^= REGISTER._2Q; continue;
case INSTR_XORQR10R3: REGISTER._10Q ^= REGISTER._3Q; continue;
case INSTR_XORQR10R4: REGISTER._10Q ^= REGISTER._4Q; continue;
case INSTR_XORQR10R5: REGISTER._10Q ^= REGISTER._5Q; continue;
case INSTR_XORQR10R6: REGISTER._10Q ^= REGISTER._6Q; continue;
case INSTR_XORQR10R7: REGISTER._10Q ^= REGISTER._7Q; continue;
case INSTR_XORQR10R8: REGISTER._10Q ^= REGISTER._8Q; continue;
case INSTR_XORQR10R9: REGISTER._10Q ^= REGISTER._9Q; continue;
case INSTR_XORQR10R10: REGISTER._10Q = 0; continue;
case INSTR_XORQR10R11: REGISTER._10Q ^= REGISTER._11Q; continue;
case INSTR_XORQR10R12: REGISTER._10Q ^= REGISTER._12Q; continue;
case INSTR_XORQR10RIP: REGISTER._10Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR10RSP: REGISTER._10Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR10RBP: REGISTER._10Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR11I: REGISTER._11Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR11RA: REGISTER._11Q ^= REGISTER.AQ; continue;
case INSTR_XORQR11RB: REGISTER._11Q ^= REGISTER.BQ; continue;
case INSTR_XORQR11RC: REGISTER._11Q ^= REGISTER.CQ; continue;
case INSTR_XORQR11RD: REGISTER._11Q ^= REGISTER.DQ; continue;
case INSTR_XORQR11R0: REGISTER._11Q ^= REGISTER._0Q; continue;
case INSTR_XORQR11R1: REGISTER._11Q ^= REGISTER._1Q; continue;
case INSTR_XORQR11R2: REGISTER._11Q ^= REGISTER._2Q; continue;
case INSTR_XORQR11R3: REGISTER._11Q ^= REGISTER._3Q; continue;
case INSTR_XORQR11R4: REGISTER._11Q ^= REGISTER._4Q; continue;
case INSTR_XORQR11R5: REGISTER._11Q ^= REGISTER._5Q; continue;
case INSTR_XORQR11R6: REGISTER._11Q ^= REGISTER._6Q; continue;
case INSTR_XORQR11R7: REGISTER._11Q ^= REGISTER._7Q; continue;
case INSTR_XORQR11R8: REGISTER._11Q ^= REGISTER._8Q; continue;
case INSTR_XORQR11R9: REGISTER._11Q ^= REGISTER._9Q; continue;
case INSTR_XORQR11R10: REGISTER._11Q ^= REGISTER._10Q; continue;
case INSTR_XORQR11R11: REGISTER._11Q = 0; continue;
case INSTR_XORQR11R12: REGISTER._11Q ^= REGISTER._12Q; continue;
case INSTR_XORQR11RIP: REGISTER._11Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR11RSP: REGISTER._11Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR11RBP: REGISTER._11Q ^= REGISTER.BPQ; continue;
case INSTR_XORQR12I: REGISTER._12Q ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQR12RA: REGISTER._12Q ^= REGISTER.AQ; continue;
case INSTR_XORQR12RB: REGISTER._12Q ^= REGISTER.BQ; continue;
case INSTR_XORQR12RC: REGISTER._12Q ^= REGISTER.CQ; continue;
case INSTR_XORQR12RD: REGISTER._12Q ^= REGISTER.DQ; continue;
case INSTR_XORQR12R0: REGISTER._12Q ^= REGISTER._0Q; continue;
case INSTR_XORQR12R1: REGISTER._12Q ^= REGISTER._1Q; continue;
case INSTR_XORQR12R2: REGISTER._12Q ^= REGISTER._2Q; continue;
case INSTR_XORQR12R3: REGISTER._12Q ^= REGISTER._3Q; continue;
case INSTR_XORQR12R4: REGISTER._12Q ^= REGISTER._4Q; continue;
case INSTR_XORQR12R5: REGISTER._12Q ^= REGISTER._5Q; continue;
case INSTR_XORQR12R6: REGISTER._12Q ^= REGISTER._6Q; continue;
case INSTR_XORQR12R7: REGISTER._12Q ^= REGISTER._7Q; continue;
case INSTR_XORQR12R8: REGISTER._12Q ^= REGISTER._8Q; continue;
case INSTR_XORQR12R9: REGISTER._12Q ^= REGISTER._9Q; continue;
case INSTR_XORQR12R10: REGISTER._12Q ^= REGISTER._10Q; continue;
case INSTR_XORQR12R11: REGISTER._12Q ^= REGISTER._11Q; continue;
case INSTR_XORQR12R12: REGISTER._12Q = 0; continue;
case INSTR_XORQR12RIP: REGISTER._12Q ^= REGISTER.IPQ; continue;
case INSTR_XORQR12RSP: REGISTER._12Q ^= REGISTER.SPQ; continue;
case INSTR_XORQR12RBP: REGISTER._12Q ^= REGISTER.BPQ; continue;
case INSTR_XORQRIPI: REGISTER.IPQ ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQRIPRA: REGISTER.IPQ ^= REGISTER.AQ; continue;
case INSTR_XORQRIPRB: REGISTER.IPQ ^= REGISTER.BQ; continue;
case INSTR_XORQRIPRC: REGISTER.IPQ ^= REGISTER.CQ; continue;
case INSTR_XORQRIPRD: REGISTER.IPQ ^= REGISTER.DQ; continue;
case INSTR_XORQRIPR0: REGISTER.IPQ ^= REGISTER._0Q; continue;
case INSTR_XORQRIPR1: REGISTER.IPQ ^= REGISTER._1Q; continue;
case INSTR_XORQRIPR2: REGISTER.IPQ ^= REGISTER._2Q; continue;
case INSTR_XORQRIPR3: REGISTER.IPQ ^= REGISTER._3Q; continue;
case INSTR_XORQRIPR4: REGISTER.IPQ ^= REGISTER._4Q; continue;
case INSTR_XORQRIPR5: REGISTER.IPQ ^= REGISTER._5Q; continue;
case INSTR_XORQRIPR6: REGISTER.IPQ ^= REGISTER._6Q; continue;
case INSTR_XORQRIPR7: REGISTER.IPQ ^= REGISTER._7Q; continue;
case INSTR_XORQRIPR8: REGISTER.IPQ ^= REGISTER._8Q; continue;
case INSTR_XORQRIPR9: REGISTER.IPQ ^= REGISTER._9Q; continue;
case INSTR_XORQRIPR10: REGISTER.IPQ ^= REGISTER._10Q; continue;
case INSTR_XORQRIPR11: REGISTER.IPQ ^= REGISTER._11Q; continue;
case INSTR_XORQRIPR12: REGISTER.IPQ ^= REGISTER._12Q; continue;
case INSTR_XORQRIPRIP: REGISTER.IPQ = 0; continue;
case INSTR_XORQRIPRSP: REGISTER.IPQ ^= REGISTER.SPQ; continue;
case INSTR_XORQRIPRBP: REGISTER.IPQ ^= REGISTER.BPQ; continue;
case INSTR_XORQRSPI: REGISTER.SPQ ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQRSPRA: REGISTER.SPQ ^= REGISTER.AQ; continue;
case INSTR_XORQRSPRB: REGISTER.SPQ ^= REGISTER.BQ; continue;
case INSTR_XORQRSPRC: REGISTER.SPQ ^= REGISTER.CQ; continue;
case INSTR_XORQRSPRD: REGISTER.SPQ ^= REGISTER.DQ; continue;
case INSTR_XORQRSPR0: REGISTER.SPQ ^= REGISTER._0Q; continue;
case INSTR_XORQRSPR1: REGISTER.SPQ ^= REGISTER._1Q; continue;
case INSTR_XORQRSPR2: REGISTER.SPQ ^= REGISTER._2Q; continue;
case INSTR_XORQRSPR3: REGISTER.SPQ ^= REGISTER._3Q; continue;
case INSTR_XORQRSPR4: REGISTER.SPQ ^= REGISTER._4Q; continue;
case INSTR_XORQRSPR5: REGISTER.SPQ ^= REGISTER._5Q; continue;
case INSTR_XORQRSPR6: REGISTER.SPQ ^= REGISTER._6Q; continue;
case INSTR_XORQRSPR7: REGISTER.SPQ ^= REGISTER._7Q; continue;
case INSTR_XORQRSPR8: REGISTER.SPQ ^= REGISTER._8Q; continue;
case INSTR_XORQRSPR9: REGISTER.SPQ ^= REGISTER._9Q; continue;
case INSTR_XORQRSPR10: REGISTER.SPQ ^= REGISTER._10Q; continue;
case INSTR_XORQRSPR11: REGISTER.SPQ ^= REGISTER._11Q; continue;
case INSTR_XORQRSPR12: REGISTER.SPQ ^= REGISTER._12Q; continue;
case INSTR_XORQRSPRIP: REGISTER.SPQ ^= REGISTER.IPQ; continue;
case INSTR_XORQRSPRSP: REGISTER.SPQ = 0; continue;
case INSTR_XORQRSPRBP: REGISTER.SPQ ^= REGISTER.BPQ; continue;
case INSTR_XORQRBPI: REGISTER.BPQ ^= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_XORQRBPRA: REGISTER.BPQ ^= REGISTER.AQ; continue;
case INSTR_XORQRBPRB: REGISTER.BPQ ^= REGISTER.BQ; continue;
case INSTR_XORQRBPRC: REGISTER.BPQ ^= REGISTER.CQ; continue;
case INSTR_XORQRBPRD: REGISTER.BPQ ^= REGISTER.DQ; continue;
case INSTR_XORQRBPR0: REGISTER.BPQ ^= REGISTER._0Q; continue;
case INSTR_XORQRBPR1: REGISTER.BPQ ^= REGISTER._1Q; continue;
case INSTR_XORQRBPR2: REGISTER.BPQ ^= REGISTER._2Q; continue;
case INSTR_XORQRBPR3: REGISTER.BPQ ^= REGISTER._3Q; continue;
case INSTR_XORQRBPR4: REGISTER.BPQ ^= REGISTER._4Q; continue;
case INSTR_XORQRBPR5: REGISTER.BPQ ^= REGISTER._5Q; continue;
case INSTR_XORQRBPR6: REGISTER.BPQ ^= REGISTER._6Q; continue;
case INSTR_XORQRBPR7: REGISTER.BPQ ^= REGISTER._7Q; continue;
case INSTR_XORQRBPR8: REGISTER.BPQ ^= REGISTER._8Q; continue;
case INSTR_XORQRBPR9: REGISTER.BPQ ^= REGISTER._9Q; continue;
case INSTR_XORQRBPR10: REGISTER.BPQ ^= REGISTER._10Q; continue;
case INSTR_XORQRBPR11: REGISTER.BPQ ^= REGISTER._11Q; continue;
case INSTR_XORQRBPR12: REGISTER.BPQ ^= REGISTER._12Q; continue;
case INSTR_XORQRBPRIP: REGISTER.BPQ ^= REGISTER.IPQ; continue;
case INSTR_XORQRBPRSP: REGISTER.BPQ ^= REGISTER.SPQ; continue;
case INSTR_XORQRBPRBP: REGISTER.BPQ = 0; continue;
case INSTR_XORWRAI: REGISTER.AW ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWRARA: REGISTER.AW ^= REGISTER.AW; continue;
case INSTR_XORWRARB: REGISTER.AW ^= REGISTER.BW; continue;
case INSTR_XORWRARC: REGISTER.AW ^= REGISTER.CW; continue;
case INSTR_XORWRARD: REGISTER.AW ^= REGISTER.DW; continue;
case INSTR_XORWRAR0: REGISTER.AW ^= REGISTER._0W; continue;
case INSTR_XORWRAR1: REGISTER.AW ^= REGISTER._1W; continue;
case INSTR_XORWRAR2: REGISTER.AW ^= REGISTER._2W; continue;
case INSTR_XORWRAR3: REGISTER.AW ^= REGISTER._3W; continue;
case INSTR_XORWRAR4: REGISTER.AW ^= REGISTER._4W; continue;
case INSTR_XORWRAR5: REGISTER.AW ^= REGISTER._5W; continue;
case INSTR_XORWRAR6: REGISTER.AW ^= REGISTER._6W; continue;
case INSTR_XORWRAR7: REGISTER.AW ^= REGISTER._7W; continue;
case INSTR_XORWRAR8: REGISTER.AW ^= REGISTER._8W; continue;
case INSTR_XORWRAR9: REGISTER.AW ^= REGISTER._9W; continue;
case INSTR_XORWRAR10: REGISTER.AW ^= REGISTER._10W; continue;
case INSTR_XORWRAR11: REGISTER.AW ^= REGISTER._11W; continue;
case INSTR_XORWRAR12: REGISTER.AW ^= REGISTER._12W; continue;
case INSTR_XORWRARIP: REGISTER.AW ^= REGISTER.IPW; continue;
case INSTR_XORWRARSP: REGISTER.AW ^= REGISTER.SPW; continue;
case INSTR_XORWRARBP: REGISTER.AW ^= REGISTER.BPW; continue;
case INSTR_XORWRBI: REGISTER.BW ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWRBRA: REGISTER.BW ^= REGISTER.AW; continue;
case INSTR_XORWRBRB: REGISTER.BW ^= REGISTER.BW; continue;
case INSTR_XORWRBRC: REGISTER.BW ^= REGISTER.CW; continue;
case INSTR_XORWRBRD: REGISTER.BW ^= REGISTER.DW; continue;
case INSTR_XORWRBR0: REGISTER.BW ^= REGISTER._0W; continue;
case INSTR_XORWRBR1: REGISTER.BW ^= REGISTER._1W; continue;
case INSTR_XORWRBR2: REGISTER.BW ^= REGISTER._2W; continue;
case INSTR_XORWRBR3: REGISTER.BW ^= REGISTER._3W; continue;
case INSTR_XORWRBR4: REGISTER.BW ^= REGISTER._4W; continue;
case INSTR_XORWRBR5: REGISTER.BW ^= REGISTER._5W; continue;
case INSTR_XORWRBR6: REGISTER.BW ^= REGISTER._6W; continue;
case INSTR_XORWRBR7: REGISTER.BW ^= REGISTER._7W; continue;
case INSTR_XORWRBR8: REGISTER.BW ^= REGISTER._8W; continue;
case INSTR_XORWRBR9: REGISTER.BW ^= REGISTER._9W; continue;
case INSTR_XORWRBR10: REGISTER.BW ^= REGISTER._10W; continue;
case INSTR_XORWRBR11: REGISTER.BW ^= REGISTER._11W; continue;
case INSTR_XORWRBR12: REGISTER.BW ^= REGISTER._12W; continue;
case INSTR_XORWRBRIP: REGISTER.BW ^= REGISTER.IPW; continue;
case INSTR_XORWRBRSP: REGISTER.BW ^= REGISTER.SPW; continue;
case INSTR_XORWRBRBP: REGISTER.BW ^= REGISTER.BPW; continue;
case INSTR_XORWRCI: REGISTER.CW ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWRCRA: REGISTER.CW ^= REGISTER.AW; continue;
case INSTR_XORWRCRB: REGISTER.CW ^= REGISTER.BW; continue;
case INSTR_XORWRCRC: REGISTER.CW ^= REGISTER.CW; continue;
case INSTR_XORWRCRD: REGISTER.CW ^= REGISTER.DW; continue;
case INSTR_XORWRCR0: REGISTER.CW ^= REGISTER._0W; continue;
case INSTR_XORWRCR1: REGISTER.CW ^= REGISTER._1W; continue;
case INSTR_XORWRCR2: REGISTER.CW ^= REGISTER._2W; continue;
case INSTR_XORWRCR3: REGISTER.CW ^= REGISTER._3W; continue;
case INSTR_XORWRCR4: REGISTER.CW ^= REGISTER._4W; continue;
case INSTR_XORWRCR5: REGISTER.CW ^= REGISTER._5W; continue;
case INSTR_XORWRCR6: REGISTER.CW ^= REGISTER._6W; continue;
case INSTR_XORWRCR7: REGISTER.CW ^= REGISTER._7W; continue;
case INSTR_XORWRCR8: REGISTER.CW ^= REGISTER._8W; continue;
case INSTR_XORWRCR9: REGISTER.CW ^= REGISTER._9W; continue;
case INSTR_XORWRCR10: REGISTER.CW ^= REGISTER._10W; continue;
case INSTR_XORWRCR11: REGISTER.CW ^= REGISTER._11W; continue;
case INSTR_XORWRCR12: REGISTER.CW ^= REGISTER._12W; continue;
case INSTR_XORWRCRIP: REGISTER.CW ^= REGISTER.IPW; continue;
case INSTR_XORWRCRSP: REGISTER.CW ^= REGISTER.SPW; continue;
case INSTR_XORWRCRBP: REGISTER.CW ^= REGISTER.BPW; continue;
case INSTR_XORWRDI: REGISTER.DW ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWRDRA: REGISTER.DW ^= REGISTER.AW; continue;
case INSTR_XORWRDRB: REGISTER.DW ^= REGISTER.BW; continue;
case INSTR_XORWRDRC: REGISTER.DW ^= REGISTER.CW; continue;
case INSTR_XORWRDRD: REGISTER.DW ^= REGISTER.DW; continue;
case INSTR_XORWRDR0: REGISTER.DW ^= REGISTER._0W; continue;
case INSTR_XORWRDR1: REGISTER.DW ^= REGISTER._1W; continue;
case INSTR_XORWRDR2: REGISTER.DW ^= REGISTER._2W; continue;
case INSTR_XORWRDR3: REGISTER.DW ^= REGISTER._3W; continue;
case INSTR_XORWRDR4: REGISTER.DW ^= REGISTER._4W; continue;
case INSTR_XORWRDR5: REGISTER.DW ^= REGISTER._5W; continue;
case INSTR_XORWRDR6: REGISTER.DW ^= REGISTER._6W; continue;
case INSTR_XORWRDR7: REGISTER.DW ^= REGISTER._7W; continue;
case INSTR_XORWRDR8: REGISTER.DW ^= REGISTER._8W; continue;
case INSTR_XORWRDR9: REGISTER.DW ^= REGISTER._9W; continue;
case INSTR_XORWRDR10: REGISTER.DW ^= REGISTER._10W; continue;
case INSTR_XORWRDR11: REGISTER.DW ^= REGISTER._11W; continue;
case INSTR_XORWRDR12: REGISTER.DW ^= REGISTER._12W; continue;
case INSTR_XORWRDRIP: REGISTER.DW ^= REGISTER.IPW; continue;
case INSTR_XORWRDRSP: REGISTER.DW ^= REGISTER.SPW; continue;
case INSTR_XORWRDRBP: REGISTER.DW ^= REGISTER.BPW; continue;
case INSTR_XORWR0I: REGISTER._0W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR0RA: REGISTER._0W ^= REGISTER.AW; continue;
case INSTR_XORWR0RB: REGISTER._0W ^= REGISTER.BW; continue;
case INSTR_XORWR0RC: REGISTER._0W ^= REGISTER.CW; continue;
case INSTR_XORWR0RD: REGISTER._0W ^= REGISTER.DW; continue;
case INSTR_XORWR0R0: REGISTER._0W ^= REGISTER._0W; continue;
case INSTR_XORWR0R1: REGISTER._0W ^= REGISTER._1W; continue;
case INSTR_XORWR0R2: REGISTER._0W ^= REGISTER._2W; continue;
case INSTR_XORWR0R3: REGISTER._0W ^= REGISTER._3W; continue;
case INSTR_XORWR0R4: REGISTER._0W ^= REGISTER._4W; continue;
case INSTR_XORWR0R5: REGISTER._0W ^= REGISTER._5W; continue;
case INSTR_XORWR0R6: REGISTER._0W ^= REGISTER._6W; continue;
case INSTR_XORWR0R7: REGISTER._0W ^= REGISTER._7W; continue;
case INSTR_XORWR0R8: REGISTER._0W ^= REGISTER._8W; continue;
case INSTR_XORWR0R9: REGISTER._0W ^= REGISTER._9W; continue;
case INSTR_XORWR0R10: REGISTER._0W ^= REGISTER._10W; continue;
case INSTR_XORWR0R11: REGISTER._0W ^= REGISTER._11W; continue;
case INSTR_XORWR0R12: REGISTER._0W ^= REGISTER._12W; continue;
case INSTR_XORWR0RIP: REGISTER._0W ^= REGISTER.IPW; continue;
case INSTR_XORWR0RSP: REGISTER._0W ^= REGISTER.SPW; continue;
case INSTR_XORWR0RBP: REGISTER._0W ^= REGISTER.BPW; continue;
case INSTR_XORWR1I: REGISTER._1W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR1RA: REGISTER._1W ^= REGISTER.AW; continue;
case INSTR_XORWR1RB: REGISTER._1W ^= REGISTER.BW; continue;
case INSTR_XORWR1RC: REGISTER._1W ^= REGISTER.CW; continue;
case INSTR_XORWR1RD: REGISTER._1W ^= REGISTER.DW; continue;
case INSTR_XORWR1R0: REGISTER._1W ^= REGISTER._0W; continue;
case INSTR_XORWR1R1: REGISTER._1W ^= REGISTER._1W; continue;
case INSTR_XORWR1R2: REGISTER._1W ^= REGISTER._2W; continue;
case INSTR_XORWR1R3: REGISTER._1W ^= REGISTER._3W; continue;
case INSTR_XORWR1R4: REGISTER._1W ^= REGISTER._4W; continue;
case INSTR_XORWR1R5: REGISTER._1W ^= REGISTER._5W; continue;
case INSTR_XORWR1R6: REGISTER._1W ^= REGISTER._6W; continue;
case INSTR_XORWR1R7: REGISTER._1W ^= REGISTER._7W; continue;
case INSTR_XORWR1R8: REGISTER._1W ^= REGISTER._8W; continue;
case INSTR_XORWR1R9: REGISTER._1W ^= REGISTER._9W; continue;
case INSTR_XORWR1R10: REGISTER._1W ^= REGISTER._10W; continue;
case INSTR_XORWR1R11: REGISTER._1W ^= REGISTER._11W; continue;
case INSTR_XORWR1R12: REGISTER._1W ^= REGISTER._12W; continue;
case INSTR_XORWR1RIP: REGISTER._1W ^= REGISTER.IPW; continue;
case INSTR_XORWR1RSP: REGISTER._1W ^= REGISTER.SPW; continue;
case INSTR_XORWR1RBP: REGISTER._1W ^= REGISTER.BPW; continue;
case INSTR_XORWR2I: REGISTER._2W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR2RA: REGISTER._2W ^= REGISTER.AW; continue;
case INSTR_XORWR2RB: REGISTER._2W ^= REGISTER.BW; continue;
case INSTR_XORWR2RC: REGISTER._2W ^= REGISTER.CW; continue;
case INSTR_XORWR2RD: REGISTER._2W ^= REGISTER.DW; continue;
case INSTR_XORWR2R0: REGISTER._2W ^= REGISTER._0W; continue;
case INSTR_XORWR2R1: REGISTER._2W ^= REGISTER._1W; continue;
case INSTR_XORWR2R2: REGISTER._2W ^= REGISTER._2W; continue;
case INSTR_XORWR2R3: REGISTER._2W ^= REGISTER._3W; continue;
case INSTR_XORWR2R4: REGISTER._2W ^= REGISTER._4W; continue;
case INSTR_XORWR2R5: REGISTER._2W ^= REGISTER._5W; continue;
case INSTR_XORWR2R6: REGISTER._2W ^= REGISTER._6W; continue;
case INSTR_XORWR2R7: REGISTER._2W ^= REGISTER._7W; continue;
case INSTR_XORWR2R8: REGISTER._2W ^= REGISTER._8W; continue;
case INSTR_XORWR2R9: REGISTER._2W ^= REGISTER._9W; continue;
case INSTR_XORWR2R10: REGISTER._2W ^= REGISTER._10W; continue;
case INSTR_XORWR2R11: REGISTER._2W ^= REGISTER._11W; continue;
case INSTR_XORWR2R12: REGISTER._2W ^= REGISTER._12W; continue;
case INSTR_XORWR2RIP: REGISTER._2W ^= REGISTER.IPW; continue;
case INSTR_XORWR2RSP: REGISTER._2W ^= REGISTER.SPW; continue;
case INSTR_XORWR2RBP: REGISTER._2W ^= REGISTER.BPW; continue;
case INSTR_XORWR3I: REGISTER._3W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR3RA: REGISTER._3W ^= REGISTER.AW; continue;
case INSTR_XORWR3RB: REGISTER._3W ^= REGISTER.BW; continue;
case INSTR_XORWR3RC: REGISTER._3W ^= REGISTER.CW; continue;
case INSTR_XORWR3RD: REGISTER._3W ^= REGISTER.DW; continue;
case INSTR_XORWR3R0: REGISTER._3W ^= REGISTER._0W; continue;
case INSTR_XORWR3R1: REGISTER._3W ^= REGISTER._1W; continue;
case INSTR_XORWR3R2: REGISTER._3W ^= REGISTER._2W; continue;
case INSTR_XORWR3R3: REGISTER._3W ^= REGISTER._3W; continue;
case INSTR_XORWR3R4: REGISTER._3W ^= REGISTER._4W; continue;
case INSTR_XORWR3R5: REGISTER._3W ^= REGISTER._5W; continue;
case INSTR_XORWR3R6: REGISTER._3W ^= REGISTER._6W; continue;
case INSTR_XORWR3R7: REGISTER._3W ^= REGISTER._7W; continue;
case INSTR_XORWR3R8: REGISTER._3W ^= REGISTER._8W; continue;
case INSTR_XORWR3R9: REGISTER._3W ^= REGISTER._9W; continue;
case INSTR_XORWR3R10: REGISTER._3W ^= REGISTER._10W; continue;
case INSTR_XORWR3R11: REGISTER._3W ^= REGISTER._11W; continue;
case INSTR_XORWR3R12: REGISTER._3W ^= REGISTER._12W; continue;
case INSTR_XORWR3RIP: REGISTER._3W ^= REGISTER.IPW; continue;
case INSTR_XORWR3RSP: REGISTER._3W ^= REGISTER.SPW; continue;
case INSTR_XORWR3RBP: REGISTER._3W ^= REGISTER.BPW; continue;
case INSTR_XORWR4I: REGISTER._4W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR4RA: REGISTER._4W ^= REGISTER.AW; continue;
case INSTR_XORWR4RB: REGISTER._4W ^= REGISTER.BW; continue;
case INSTR_XORWR4RC: REGISTER._4W ^= REGISTER.CW; continue;
case INSTR_XORWR4RD: REGISTER._4W ^= REGISTER.DW; continue;
case INSTR_XORWR4R0: REGISTER._4W ^= REGISTER._0W; continue;
case INSTR_XORWR4R1: REGISTER._4W ^= REGISTER._1W; continue;
case INSTR_XORWR4R2: REGISTER._4W ^= REGISTER._2W; continue;
case INSTR_XORWR4R3: REGISTER._4W ^= REGISTER._3W; continue;
case INSTR_XORWR4R4: REGISTER._4W ^= REGISTER._4W; continue;
case INSTR_XORWR4R5: REGISTER._4W ^= REGISTER._5W; continue;
case INSTR_XORWR4R6: REGISTER._4W ^= REGISTER._6W; continue;
case INSTR_XORWR4R7: REGISTER._4W ^= REGISTER._7W; continue;
case INSTR_XORWR4R8: REGISTER._4W ^= REGISTER._8W; continue;
case INSTR_XORWR4R9: REGISTER._4W ^= REGISTER._9W; continue;
case INSTR_XORWR4R10: REGISTER._4W ^= REGISTER._10W; continue;
case INSTR_XORWR4R11: REGISTER._4W ^= REGISTER._11W; continue;
case INSTR_XORWR4R12: REGISTER._4W ^= REGISTER._12W; continue;
case INSTR_XORWR4RIP: REGISTER._4W ^= REGISTER.IPW; continue;
case INSTR_XORWR4RSP: REGISTER._4W ^= REGISTER.SPW; continue;
case INSTR_XORWR4RBP: REGISTER._4W ^= REGISTER.BPW; continue;
case INSTR_XORWR5I: REGISTER._5W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR5RA: REGISTER._5W ^= REGISTER.AW; continue;
case INSTR_XORWR5RB: REGISTER._5W ^= REGISTER.BW; continue;
case INSTR_XORWR5RC: REGISTER._5W ^= REGISTER.CW; continue;
case INSTR_XORWR5RD: REGISTER._5W ^= REGISTER.DW; continue;
case INSTR_XORWR5R0: REGISTER._5W ^= REGISTER._0W; continue;
case INSTR_XORWR5R1: REGISTER._5W ^= REGISTER._1W; continue;
case INSTR_XORWR5R2: REGISTER._5W ^= REGISTER._2W; continue;
case INSTR_XORWR5R3: REGISTER._5W ^= REGISTER._3W; continue;
case INSTR_XORWR5R4: REGISTER._5W ^= REGISTER._4W; continue;
case INSTR_XORWR5R5: REGISTER._5W ^= REGISTER._5W; continue;
case INSTR_XORWR5R6: REGISTER._5W ^= REGISTER._6W; continue;
case INSTR_XORWR5R7: REGISTER._5W ^= REGISTER._7W; continue;
case INSTR_XORWR5R8: REGISTER._5W ^= REGISTER._8W; continue;
case INSTR_XORWR5R9: REGISTER._5W ^= REGISTER._9W; continue;
case INSTR_XORWR5R10: REGISTER._5W ^= REGISTER._10W; continue;
case INSTR_XORWR5R11: REGISTER._5W ^= REGISTER._11W; continue;
case INSTR_XORWR5R12: REGISTER._5W ^= REGISTER._12W; continue;
case INSTR_XORWR5RIP: REGISTER._5W ^= REGISTER.IPW; continue;
case INSTR_XORWR5RSP: REGISTER._5W ^= REGISTER.SPW; continue;
case INSTR_XORWR5RBP: REGISTER._5W ^= REGISTER.BPW; continue;
case INSTR_XORWR6I: REGISTER._6W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR6RA: REGISTER._6W ^= REGISTER.AW; continue;
case INSTR_XORWR6RB: REGISTER._6W ^= REGISTER.BW; continue;
case INSTR_XORWR6RC: REGISTER._6W ^= REGISTER.CW; continue;
case INSTR_XORWR6RD: REGISTER._6W ^= REGISTER.DW; continue;
case INSTR_XORWR6R0: REGISTER._6W ^= REGISTER._0W; continue;
case INSTR_XORWR6R1: REGISTER._6W ^= REGISTER._1W; continue;
case INSTR_XORWR6R2: REGISTER._6W ^= REGISTER._2W; continue;
case INSTR_XORWR6R3: REGISTER._6W ^= REGISTER._3W; continue;
case INSTR_XORWR6R4: REGISTER._6W ^= REGISTER._4W; continue;
case INSTR_XORWR6R5: REGISTER._6W ^= REGISTER._5W; continue;
case INSTR_XORWR6R6: REGISTER._6W ^= REGISTER._6W; continue;
case INSTR_XORWR6R7: REGISTER._6W ^= REGISTER._7W; continue;
case INSTR_XORWR6R8: REGISTER._6W ^= REGISTER._8W; continue;
case INSTR_XORWR6R9: REGISTER._6W ^= REGISTER._9W; continue;
case INSTR_XORWR6R10: REGISTER._6W ^= REGISTER._10W; continue;
case INSTR_XORWR6R11: REGISTER._6W ^= REGISTER._11W; continue;
case INSTR_XORWR6R12: REGISTER._6W ^= REGISTER._12W; continue;
case INSTR_XORWR6RIP: REGISTER._6W ^= REGISTER.IPW; continue;
case INSTR_XORWR6RSP: REGISTER._6W ^= REGISTER.SPW; continue;
case INSTR_XORWR6RBP: REGISTER._6W ^= REGISTER.BPW; continue;
case INSTR_XORWR7I: REGISTER._7W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR7RA: REGISTER._7W ^= REGISTER.AW; continue;
case INSTR_XORWR7RB: REGISTER._7W ^= REGISTER.BW; continue;
case INSTR_XORWR7RC: REGISTER._7W ^= REGISTER.CW; continue;
case INSTR_XORWR7RD: REGISTER._7W ^= REGISTER.DW; continue;
case INSTR_XORWR7R0: REGISTER._7W ^= REGISTER._0W; continue;
case INSTR_XORWR7R1: REGISTER._7W ^= REGISTER._1W; continue;
case INSTR_XORWR7R2: REGISTER._7W ^= REGISTER._2W; continue;
case INSTR_XORWR7R3: REGISTER._7W ^= REGISTER._3W; continue;
case INSTR_XORWR7R4: REGISTER._7W ^= REGISTER._4W; continue;
case INSTR_XORWR7R5: REGISTER._7W ^= REGISTER._5W; continue;
case INSTR_XORWR7R6: REGISTER._7W ^= REGISTER._6W; continue;
case INSTR_XORWR7R7: REGISTER._7W ^= REGISTER._7W; continue;
case INSTR_XORWR7R8: REGISTER._7W ^= REGISTER._8W; continue;
case INSTR_XORWR7R9: REGISTER._7W ^= REGISTER._9W; continue;
case INSTR_XORWR7R10: REGISTER._7W ^= REGISTER._10W; continue;
case INSTR_XORWR7R11: REGISTER._7W ^= REGISTER._11W; continue;
case INSTR_XORWR7R12: REGISTER._7W ^= REGISTER._12W; continue;
case INSTR_XORWR7RIP: REGISTER._7W ^= REGISTER.IPW; continue;
case INSTR_XORWR7RSP: REGISTER._7W ^= REGISTER.SPW; continue;
case INSTR_XORWR7RBP: REGISTER._7W ^= REGISTER.BPW; continue;
case INSTR_XORWR8I: REGISTER._8W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR8RA: REGISTER._8W ^= REGISTER.AW; continue;
case INSTR_XORWR8RB: REGISTER._8W ^= REGISTER.BW; continue;
case INSTR_XORWR8RC: REGISTER._8W ^= REGISTER.CW; continue;
case INSTR_XORWR8RD: REGISTER._8W ^= REGISTER.DW; continue;
case INSTR_XORWR8R0: REGISTER._8W ^= REGISTER._0W; continue;
case INSTR_XORWR8R1: REGISTER._8W ^= REGISTER._1W; continue;
case INSTR_XORWR8R2: REGISTER._8W ^= REGISTER._2W; continue;
case INSTR_XORWR8R3: REGISTER._8W ^= REGISTER._3W; continue;
case INSTR_XORWR8R4: REGISTER._8W ^= REGISTER._4W; continue;
case INSTR_XORWR8R5: REGISTER._8W ^= REGISTER._5W; continue;
case INSTR_XORWR8R6: REGISTER._8W ^= REGISTER._6W; continue;
case INSTR_XORWR8R7: REGISTER._8W ^= REGISTER._7W; continue;
case INSTR_XORWR8R8: REGISTER._8W ^= REGISTER._8W; continue;
case INSTR_XORWR8R9: REGISTER._8W ^= REGISTER._9W; continue;
case INSTR_XORWR8R10: REGISTER._8W ^= REGISTER._10W; continue;
case INSTR_XORWR8R11: REGISTER._8W ^= REGISTER._11W; continue;
case INSTR_XORWR8R12: REGISTER._8W ^= REGISTER._12W; continue;
case INSTR_XORWR8RIP: REGISTER._8W ^= REGISTER.IPW; continue;
case INSTR_XORWR8RSP: REGISTER._8W ^= REGISTER.SPW; continue;
case INSTR_XORWR8RBP: REGISTER._8W ^= REGISTER.BPW; continue;
case INSTR_XORWR9I: REGISTER._9W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR9RA: REGISTER._9W ^= REGISTER.AW; continue;
case INSTR_XORWR9RB: REGISTER._9W ^= REGISTER.BW; continue;
case INSTR_XORWR9RC: REGISTER._9W ^= REGISTER.CW; continue;
case INSTR_XORWR9RD: REGISTER._9W ^= REGISTER.DW; continue;
case INSTR_XORWR9R0: REGISTER._9W ^= REGISTER._0W; continue;
case INSTR_XORWR9R1: REGISTER._9W ^= REGISTER._1W; continue;
case INSTR_XORWR9R2: REGISTER._9W ^= REGISTER._2W; continue;
case INSTR_XORWR9R3: REGISTER._9W ^= REGISTER._3W; continue;
case INSTR_XORWR9R4: REGISTER._9W ^= REGISTER._4W; continue;
case INSTR_XORWR9R5: REGISTER._9W ^= REGISTER._5W; continue;
case INSTR_XORWR9R6: REGISTER._9W ^= REGISTER._6W; continue;
case INSTR_XORWR9R7: REGISTER._9W ^= REGISTER._7W; continue;
case INSTR_XORWR9R8: REGISTER._9W ^= REGISTER._8W; continue;
case INSTR_XORWR9R9: REGISTER._9W ^= REGISTER._9W; continue;
case INSTR_XORWR9R10: REGISTER._9W ^= REGISTER._10W; continue;
case INSTR_XORWR9R11: REGISTER._9W ^= REGISTER._11W; continue;
case INSTR_XORWR9R12: REGISTER._9W ^= REGISTER._12W; continue;
case INSTR_XORWR9RIP: REGISTER._9W ^= REGISTER.IPW; continue;
case INSTR_XORWR9RSP: REGISTER._9W ^= REGISTER.SPW; continue;
case INSTR_XORWR9RBP: REGISTER._9W ^= REGISTER.BPW; continue;
case INSTR_XORWR10I: REGISTER._10W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR10RA: REGISTER._10W ^= REGISTER.AW; continue;
case INSTR_XORWR10RB: REGISTER._10W ^= REGISTER.BW; continue;
case INSTR_XORWR10RC: REGISTER._10W ^= REGISTER.CW; continue;
case INSTR_XORWR10RD: REGISTER._10W ^= REGISTER.DW; continue;
case INSTR_XORWR10R0: REGISTER._10W ^= REGISTER._0W; continue;
case INSTR_XORWR10R1: REGISTER._10W ^= REGISTER._1W; continue;
case INSTR_XORWR10R2: REGISTER._10W ^= REGISTER._2W; continue;
case INSTR_XORWR10R3: REGISTER._10W ^= REGISTER._3W; continue;
case INSTR_XORWR10R4: REGISTER._10W ^= REGISTER._4W; continue;
case INSTR_XORWR10R5: REGISTER._10W ^= REGISTER._5W; continue;
case INSTR_XORWR10R6: REGISTER._10W ^= REGISTER._6W; continue;
case INSTR_XORWR10R7: REGISTER._10W ^= REGISTER._7W; continue;
case INSTR_XORWR10R8: REGISTER._10W ^= REGISTER._8W; continue;
case INSTR_XORWR10R9: REGISTER._10W ^= REGISTER._9W; continue;
case INSTR_XORWR10R10: REGISTER._10W ^= REGISTER._10W; continue;
case INSTR_XORWR10R11: REGISTER._10W ^= REGISTER._11W; continue;
case INSTR_XORWR10R12: REGISTER._10W ^= REGISTER._12W; continue;
case INSTR_XORWR10RIP: REGISTER._10W ^= REGISTER.IPW; continue;
case INSTR_XORWR10RSP: REGISTER._10W ^= REGISTER.SPW; continue;
case INSTR_XORWR10RBP: REGISTER._10W ^= REGISTER.BPW; continue;
case INSTR_XORWR11I: REGISTER._11W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR11RA: REGISTER._11W ^= REGISTER.AW; continue;
case INSTR_XORWR11RB: REGISTER._11W ^= REGISTER.BW; continue;
case INSTR_XORWR11RC: REGISTER._11W ^= REGISTER.CW; continue;
case INSTR_XORWR11RD: REGISTER._11W ^= REGISTER.DW; continue;
case INSTR_XORWR11R0: REGISTER._11W ^= REGISTER._0W; continue;
case INSTR_XORWR11R1: REGISTER._11W ^= REGISTER._1W; continue;
case INSTR_XORWR11R2: REGISTER._11W ^= REGISTER._2W; continue;
case INSTR_XORWR11R3: REGISTER._11W ^= REGISTER._3W; continue;
case INSTR_XORWR11R4: REGISTER._11W ^= REGISTER._4W; continue;
case INSTR_XORWR11R5: REGISTER._11W ^= REGISTER._5W; continue;
case INSTR_XORWR11R6: REGISTER._11W ^= REGISTER._6W; continue;
case INSTR_XORWR11R7: REGISTER._11W ^= REGISTER._7W; continue;
case INSTR_XORWR11R8: REGISTER._11W ^= REGISTER._8W; continue;
case INSTR_XORWR11R9: REGISTER._11W ^= REGISTER._9W; continue;
case INSTR_XORWR11R10: REGISTER._11W ^= REGISTER._10W; continue;
case INSTR_XORWR11R11: REGISTER._11W ^= REGISTER._11W; continue;
case INSTR_XORWR11R12: REGISTER._11W ^= REGISTER._12W; continue;
case INSTR_XORWR11RIP: REGISTER._11W ^= REGISTER.IPW; continue;
case INSTR_XORWR11RSP: REGISTER._11W ^= REGISTER.SPW; continue;
case INSTR_XORWR11RBP: REGISTER._11W ^= REGISTER.BPW; continue;
case INSTR_XORWR12I: REGISTER._12W ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWR12RA: REGISTER._12W ^= REGISTER.AW; continue;
case INSTR_XORWR12RB: REGISTER._12W ^= REGISTER.BW; continue;
case INSTR_XORWR12RC: REGISTER._12W ^= REGISTER.CW; continue;
case INSTR_XORWR12RD: REGISTER._12W ^= REGISTER.DW; continue;
case INSTR_XORWR12R0: REGISTER._12W ^= REGISTER._0W; continue;
case INSTR_XORWR12R1: REGISTER._12W ^= REGISTER._1W; continue;
case INSTR_XORWR12R2: REGISTER._12W ^= REGISTER._2W; continue;
case INSTR_XORWR12R3: REGISTER._12W ^= REGISTER._3W; continue;
case INSTR_XORWR12R4: REGISTER._12W ^= REGISTER._4W; continue;
case INSTR_XORWR12R5: REGISTER._12W ^= REGISTER._5W; continue;
case INSTR_XORWR12R6: REGISTER._12W ^= REGISTER._6W; continue;
case INSTR_XORWR12R7: REGISTER._12W ^= REGISTER._7W; continue;
case INSTR_XORWR12R8: REGISTER._12W ^= REGISTER._8W; continue;
case INSTR_XORWR12R9: REGISTER._12W ^= REGISTER._9W; continue;
case INSTR_XORWR12R10: REGISTER._12W ^= REGISTER._10W; continue;
case INSTR_XORWR12R11: REGISTER._12W ^= REGISTER._11W; continue;
case INSTR_XORWR12R12: REGISTER._12W ^= REGISTER._12W; continue;
case INSTR_XORWR12RIP: REGISTER._12W ^= REGISTER.IPW; continue;
case INSTR_XORWR12RSP: REGISTER._12W ^= REGISTER.SPW; continue;
case INSTR_XORWR12RBP: REGISTER._12W ^= REGISTER.BPW; continue;
case INSTR_XORWRIPI: REGISTER.IPW ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWRIPRA: REGISTER.IPW ^= REGISTER.AW; continue;
case INSTR_XORWRIPRB: REGISTER.IPW ^= REGISTER.BW; continue;
case INSTR_XORWRIPRC: REGISTER.IPW ^= REGISTER.CW; continue;
case INSTR_XORWRIPRD: REGISTER.IPW ^= REGISTER.DW; continue;
case INSTR_XORWRIPR0: REGISTER.IPW ^= REGISTER._0W; continue;
case INSTR_XORWRIPR1: REGISTER.IPW ^= REGISTER._1W; continue;
case INSTR_XORWRIPR2: REGISTER.IPW ^= REGISTER._2W; continue;
case INSTR_XORWRIPR3: REGISTER.IPW ^= REGISTER._3W; continue;
case INSTR_XORWRIPR4: REGISTER.IPW ^= REGISTER._4W; continue;
case INSTR_XORWRIPR5: REGISTER.IPW ^= REGISTER._5W; continue;
case INSTR_XORWRIPR6: REGISTER.IPW ^= REGISTER._6W; continue;
case INSTR_XORWRIPR7: REGISTER.IPW ^= REGISTER._7W; continue;
case INSTR_XORWRIPR8: REGISTER.IPW ^= REGISTER._8W; continue;
case INSTR_XORWRIPR9: REGISTER.IPW ^= REGISTER._9W; continue;
case INSTR_XORWRIPR10: REGISTER.IPW ^= REGISTER._10W; continue;
case INSTR_XORWRIPR11: REGISTER.IPW ^= REGISTER._11W; continue;
case INSTR_XORWRIPR12: REGISTER.IPW ^= REGISTER._12W; continue;
case INSTR_XORWRIPRIP: REGISTER.IPW ^= REGISTER.IPW; continue;
case INSTR_XORWRIPRSP: REGISTER.IPW ^= REGISTER.SPW; continue;
case INSTR_XORWRIPRBP: REGISTER.IPW ^= REGISTER.BPW; continue;
case INSTR_XORWRSPI: REGISTER.SPW ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWRSPRA: REGISTER.SPW ^= REGISTER.AW; continue;
case INSTR_XORWRSPRB: REGISTER.SPW ^= REGISTER.BW; continue;
case INSTR_XORWRSPRC: REGISTER.SPW ^= REGISTER.CW; continue;
case INSTR_XORWRSPRD: REGISTER.SPW ^= REGISTER.DW; continue;
case INSTR_XORWRSPR0: REGISTER.SPW ^= REGISTER._0W; continue;
case INSTR_XORWRSPR1: REGISTER.SPW ^= REGISTER._1W; continue;
case INSTR_XORWRSPR2: REGISTER.SPW ^= REGISTER._2W; continue;
case INSTR_XORWRSPR3: REGISTER.SPW ^= REGISTER._3W; continue;
case INSTR_XORWRSPR4: REGISTER.SPW ^= REGISTER._4W; continue;
case INSTR_XORWRSPR5: REGISTER.SPW ^= REGISTER._5W; continue;
case INSTR_XORWRSPR6: REGISTER.SPW ^= REGISTER._6W; continue;
case INSTR_XORWRSPR7: REGISTER.SPW ^= REGISTER._7W; continue;
case INSTR_XORWRSPR8: REGISTER.SPW ^= REGISTER._8W; continue;
case INSTR_XORWRSPR9: REGISTER.SPW ^= REGISTER._9W; continue;
case INSTR_XORWRSPR10: REGISTER.SPW ^= REGISTER._10W; continue;
case INSTR_XORWRSPR11: REGISTER.SPW ^= REGISTER._11W; continue;
case INSTR_XORWRSPR12: REGISTER.SPW ^= REGISTER._12W; continue;
case INSTR_XORWRSPRIP: REGISTER.SPW ^= REGISTER.IPW; continue;
case INSTR_XORWRSPRSP: REGISTER.SPW ^= REGISTER.SPW; continue;
case INSTR_XORWRSPRBP: REGISTER.SPW ^= REGISTER.BPW; continue;
case INSTR_XORWRBPI: REGISTER.BPW ^= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_XORWRBPRA: REGISTER.BPW ^= REGISTER.AW; continue;
case INSTR_XORWRBPRB: REGISTER.BPW ^= REGISTER.BW; continue;
case INSTR_XORWRBPRC: REGISTER.BPW ^= REGISTER.CW; continue;
case INSTR_XORWRBPRD: REGISTER.BPW ^= REGISTER.DW; continue;
case INSTR_XORWRBPR0: REGISTER.BPW ^= REGISTER._0W; continue;
case INSTR_XORWRBPR1: REGISTER.BPW ^= REGISTER._1W; continue;
case INSTR_XORWRBPR2: REGISTER.BPW ^= REGISTER._2W; continue;
case INSTR_XORWRBPR3: REGISTER.BPW ^= REGISTER._3W; continue;
case INSTR_XORWRBPR4: REGISTER.BPW ^= REGISTER._4W; continue;
case INSTR_XORWRBPR5: REGISTER.BPW ^= REGISTER._5W; continue;
case INSTR_XORWRBPR6: REGISTER.BPW ^= REGISTER._6W; continue;
case INSTR_XORWRBPR7: REGISTER.BPW ^= REGISTER._7W; continue;
case INSTR_XORWRBPR8: REGISTER.BPW ^= REGISTER._8W; continue;
case INSTR_XORWRBPR9: REGISTER.BPW ^= REGISTER._9W; continue;
case INSTR_XORWRBPR10: REGISTER.BPW ^= REGISTER._10W; continue;
case INSTR_XORWRBPR11: REGISTER.BPW ^= REGISTER._11W; continue;
case INSTR_XORWRBPR12: REGISTER.BPW ^= REGISTER._12W; continue;
case INSTR_XORWRBPRIP: REGISTER.BPW ^= REGISTER.IPW; continue;
case INSTR_XORWRBPRSP: REGISTER.BPW ^= REGISTER.SPW; continue;
case INSTR_XORWRBPRBP: REGISTER.BPW ^= REGISTER.BPW; continue;
case INSTR_XORBRAI: REGISTER.AB ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBRARA: REGISTER.AB ^= REGISTER.AB; continue;
case INSTR_XORBRARB: REGISTER.AB ^= REGISTER.BB; continue;
case INSTR_XORBRARC: REGISTER.AB ^= REGISTER.CB; continue;
case INSTR_XORBRARD: REGISTER.AB ^= REGISTER.DB; continue;
case INSTR_XORBRAR0: REGISTER.AB ^= REGISTER._0B; continue;
case INSTR_XORBRAR1: REGISTER.AB ^= REGISTER._1B; continue;
case INSTR_XORBRAR2: REGISTER.AB ^= REGISTER._2B; continue;
case INSTR_XORBRAR3: REGISTER.AB ^= REGISTER._3B; continue;
case INSTR_XORBRAR4: REGISTER.AB ^= REGISTER._4B; continue;
case INSTR_XORBRAR5: REGISTER.AB ^= REGISTER._5B; continue;
case INSTR_XORBRAR6: REGISTER.AB ^= REGISTER._6B; continue;
case INSTR_XORBRAR7: REGISTER.AB ^= REGISTER._7B; continue;
case INSTR_XORBRAR8: REGISTER.AB ^= REGISTER._8B; continue;
case INSTR_XORBRAR9: REGISTER.AB ^= REGISTER._9B; continue;
case INSTR_XORBRAR10: REGISTER.AB ^= REGISTER._10B; continue;
case INSTR_XORBRAR11: REGISTER.AB ^= REGISTER._11B; continue;
case INSTR_XORBRAR12: REGISTER.AB ^= REGISTER._12B; continue;
case INSTR_XORBRARIP: REGISTER.AB ^= REGISTER.IPB; continue;
case INSTR_XORBRARSP: REGISTER.AB ^= REGISTER.SPB; continue;
case INSTR_XORBRARBP: REGISTER.AB ^= REGISTER.BPB; continue;
case INSTR_XORBRBI: REGISTER.BB ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBRBRA: REGISTER.BB ^= REGISTER.AB; continue;
case INSTR_XORBRBRB: REGISTER.BB ^= REGISTER.BB; continue;
case INSTR_XORBRBRC: REGISTER.BB ^= REGISTER.CB; continue;
case INSTR_XORBRBRD: REGISTER.BB ^= REGISTER.DB; continue;
case INSTR_XORBRBR0: REGISTER.BB ^= REGISTER._0B; continue;
case INSTR_XORBRBR1: REGISTER.BB ^= REGISTER._1B; continue;
case INSTR_XORBRBR2: REGISTER.BB ^= REGISTER._2B; continue;
case INSTR_XORBRBR3: REGISTER.BB ^= REGISTER._3B; continue;
case INSTR_XORBRBR4: REGISTER.BB ^= REGISTER._4B; continue;
case INSTR_XORBRBR5: REGISTER.BB ^= REGISTER._5B; continue;
case INSTR_XORBRBR6: REGISTER.BB ^= REGISTER._6B; continue;
case INSTR_XORBRBR7: REGISTER.BB ^= REGISTER._7B; continue;
case INSTR_XORBRBR8: REGISTER.BB ^= REGISTER._8B; continue;
case INSTR_XORBRBR9: REGISTER.BB ^= REGISTER._9B; continue;
case INSTR_XORBRBR10: REGISTER.BB ^= REGISTER._10B; continue;
case INSTR_XORBRBR11: REGISTER.BB ^= REGISTER._11B; continue;
case INSTR_XORBRBR12: REGISTER.BB ^= REGISTER._12B; continue;
case INSTR_XORBRBRIP: REGISTER.BB ^= REGISTER.IPB; continue;
case INSTR_XORBRBRSP: REGISTER.BB ^= REGISTER.SPB; continue;
case INSTR_XORBRBRBP: REGISTER.BB ^= REGISTER.BPB; continue;
case INSTR_XORBRCI: REGISTER.CB ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBRCRA: REGISTER.CB ^= REGISTER.AB; continue;
case INSTR_XORBRCRB: REGISTER.CB ^= REGISTER.BB; continue;
case INSTR_XORBRCRC: REGISTER.CB ^= REGISTER.CB; continue;
case INSTR_XORBRCRD: REGISTER.CB ^= REGISTER.DB; continue;
case INSTR_XORBRCR0: REGISTER.CB ^= REGISTER._0B; continue;
case INSTR_XORBRCR1: REGISTER.CB ^= REGISTER._1B; continue;
case INSTR_XORBRCR2: REGISTER.CB ^= REGISTER._2B; continue;
case INSTR_XORBRCR3: REGISTER.CB ^= REGISTER._3B; continue;
case INSTR_XORBRCR4: REGISTER.CB ^= REGISTER._4B; continue;
case INSTR_XORBRCR5: REGISTER.CB ^= REGISTER._5B; continue;
case INSTR_XORBRCR6: REGISTER.CB ^= REGISTER._6B; continue;
case INSTR_XORBRCR7: REGISTER.CB ^= REGISTER._7B; continue;
case INSTR_XORBRCR8: REGISTER.CB ^= REGISTER._8B; continue;
case INSTR_XORBRCR9: REGISTER.CB ^= REGISTER._9B; continue;
case INSTR_XORBRCR10: REGISTER.CB ^= REGISTER._10B; continue;
case INSTR_XORBRCR11: REGISTER.CB ^= REGISTER._11B; continue;
case INSTR_XORBRCR12: REGISTER.CB ^= REGISTER._12B; continue;
case INSTR_XORBRCRIP: REGISTER.CB ^= REGISTER.IPB; continue;
case INSTR_XORBRCRSP: REGISTER.CB ^= REGISTER.SPB; continue;
case INSTR_XORBRCRBP: REGISTER.CB ^= REGISTER.BPB; continue;
case INSTR_XORBRDI: REGISTER.DB ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBRDRA: REGISTER.DB ^= REGISTER.AB; continue;
case INSTR_XORBRDRB: REGISTER.DB ^= REGISTER.BB; continue;
case INSTR_XORBRDRC: REGISTER.DB ^= REGISTER.CB; continue;
case INSTR_XORBRDRD: REGISTER.DB ^= REGISTER.DB; continue;
case INSTR_XORBRDR0: REGISTER.DB ^= REGISTER._0B; continue;
case INSTR_XORBRDR1: REGISTER.DB ^= REGISTER._1B; continue;
case INSTR_XORBRDR2: REGISTER.DB ^= REGISTER._2B; continue;
case INSTR_XORBRDR3: REGISTER.DB ^= REGISTER._3B; continue;
case INSTR_XORBRDR4: REGISTER.DB ^= REGISTER._4B; continue;
case INSTR_XORBRDR5: REGISTER.DB ^= REGISTER._5B; continue;
case INSTR_XORBRDR6: REGISTER.DB ^= REGISTER._6B; continue;
case INSTR_XORBRDR7: REGISTER.DB ^= REGISTER._7B; continue;
case INSTR_XORBRDR8: REGISTER.DB ^= REGISTER._8B; continue;
case INSTR_XORBRDR9: REGISTER.DB ^= REGISTER._9B; continue;
case INSTR_XORBRDR10: REGISTER.DB ^= REGISTER._10B; continue;
case INSTR_XORBRDR11: REGISTER.DB ^= REGISTER._11B; continue;
case INSTR_XORBRDR12: REGISTER.DB ^= REGISTER._12B; continue;
case INSTR_XORBRDRIP: REGISTER.DB ^= REGISTER.IPB; continue;
case INSTR_XORBRDRSP: REGISTER.DB ^= REGISTER.SPB; continue;
case INSTR_XORBRDRBP: REGISTER.DB ^= REGISTER.BPB; continue;
case INSTR_XORBR0I: REGISTER._0B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR0RA: REGISTER._0B ^= REGISTER.AB; continue;
case INSTR_XORBR0RB: REGISTER._0B ^= REGISTER.BB; continue;
case INSTR_XORBR0RC: REGISTER._0B ^= REGISTER.CB; continue;
case INSTR_XORBR0RD: REGISTER._0B ^= REGISTER.DB; continue;
case INSTR_XORBR0R0: REGISTER._0B ^= REGISTER._0B; continue;
case INSTR_XORBR0R1: REGISTER._0B ^= REGISTER._1B; continue;
case INSTR_XORBR0R2: REGISTER._0B ^= REGISTER._2B; continue;
case INSTR_XORBR0R3: REGISTER._0B ^= REGISTER._3B; continue;
case INSTR_XORBR0R4: REGISTER._0B ^= REGISTER._4B; continue;
case INSTR_XORBR0R5: REGISTER._0B ^= REGISTER._5B; continue;
case INSTR_XORBR0R6: REGISTER._0B ^= REGISTER._6B; continue;
case INSTR_XORBR0R7: REGISTER._0B ^= REGISTER._7B; continue;
case INSTR_XORBR0R8: REGISTER._0B ^= REGISTER._8B; continue;
case INSTR_XORBR0R9: REGISTER._0B ^= REGISTER._9B; continue;
case INSTR_XORBR0R10: REGISTER._0B ^= REGISTER._10B; continue;
case INSTR_XORBR0R11: REGISTER._0B ^= REGISTER._11B; continue;
case INSTR_XORBR0R12: REGISTER._0B ^= REGISTER._12B; continue;
case INSTR_XORBR0RIP: REGISTER._0B ^= REGISTER.IPB; continue;
case INSTR_XORBR0RSP: REGISTER._0B ^= REGISTER.SPB; continue;
case INSTR_XORBR0RBP: REGISTER._0B ^= REGISTER.BPB; continue;
case INSTR_XORBR1I: REGISTER._1B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR1RA: REGISTER._1B ^= REGISTER.AB; continue;
case INSTR_XORBR1RB: REGISTER._1B ^= REGISTER.BB; continue;
case INSTR_XORBR1RC: REGISTER._1B ^= REGISTER.CB; continue;
case INSTR_XORBR1RD: REGISTER._1B ^= REGISTER.DB; continue;
case INSTR_XORBR1R0: REGISTER._1B ^= REGISTER._0B; continue;
case INSTR_XORBR1R1: REGISTER._1B ^= REGISTER._1B; continue;
case INSTR_XORBR1R2: REGISTER._1B ^= REGISTER._2B; continue;
case INSTR_XORBR1R3: REGISTER._1B ^= REGISTER._3B; continue;
case INSTR_XORBR1R4: REGISTER._1B ^= REGISTER._4B; continue;
case INSTR_XORBR1R5: REGISTER._1B ^= REGISTER._5B; continue;
case INSTR_XORBR1R6: REGISTER._1B ^= REGISTER._6B; continue;
case INSTR_XORBR1R7: REGISTER._1B ^= REGISTER._7B; continue;
case INSTR_XORBR1R8: REGISTER._1B ^= REGISTER._8B; continue;
case INSTR_XORBR1R9: REGISTER._1B ^= REGISTER._9B; continue;
case INSTR_XORBR1R10: REGISTER._1B ^= REGISTER._10B; continue;
case INSTR_XORBR1R11: REGISTER._1B ^= REGISTER._11B; continue;
case INSTR_XORBR1R12: REGISTER._1B ^= REGISTER._12B; continue;
case INSTR_XORBR1RIP: REGISTER._1B ^= REGISTER.IPB; continue;
case INSTR_XORBR1RSP: REGISTER._1B ^= REGISTER.SPB; continue;
case INSTR_XORBR1RBP: REGISTER._1B ^= REGISTER.BPB; continue;
case INSTR_XORBR2I: REGISTER._2B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR2RA: REGISTER._2B ^= REGISTER.AB; continue;
case INSTR_XORBR2RB: REGISTER._2B ^= REGISTER.BB; continue;
case INSTR_XORBR2RC: REGISTER._2B ^= REGISTER.CB; continue;
case INSTR_XORBR2RD: REGISTER._2B ^= REGISTER.DB; continue;
case INSTR_XORBR2R0: REGISTER._2B ^= REGISTER._0B; continue;
case INSTR_XORBR2R1: REGISTER._2B ^= REGISTER._1B; continue;
case INSTR_XORBR2R2: REGISTER._2B ^= REGISTER._2B; continue;
case INSTR_XORBR2R3: REGISTER._2B ^= REGISTER._3B; continue;
case INSTR_XORBR2R4: REGISTER._2B ^= REGISTER._4B; continue;
case INSTR_XORBR2R5: REGISTER._2B ^= REGISTER._5B; continue;
case INSTR_XORBR2R6: REGISTER._2B ^= REGISTER._6B; continue;
case INSTR_XORBR2R7: REGISTER._2B ^= REGISTER._7B; continue;
case INSTR_XORBR2R8: REGISTER._2B ^= REGISTER._8B; continue;
case INSTR_XORBR2R9: REGISTER._2B ^= REGISTER._9B; continue;
case INSTR_XORBR2R10: REGISTER._2B ^= REGISTER._10B; continue;
case INSTR_XORBR2R11: REGISTER._2B ^= REGISTER._11B; continue;
case INSTR_XORBR2R12: REGISTER._2B ^= REGISTER._12B; continue;
case INSTR_XORBR2RIP: REGISTER._2B ^= REGISTER.IPB; continue;
case INSTR_XORBR2RSP: REGISTER._2B ^= REGISTER.SPB; continue;
case INSTR_XORBR2RBP: REGISTER._2B ^= REGISTER.BPB; continue;
case INSTR_XORBR3I: REGISTER._3B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR3RA: REGISTER._3B ^= REGISTER.AB; continue;
case INSTR_XORBR3RB: REGISTER._3B ^= REGISTER.BB; continue;
case INSTR_XORBR3RC: REGISTER._3B ^= REGISTER.CB; continue;
case INSTR_XORBR3RD: REGISTER._3B ^= REGISTER.DB; continue;
case INSTR_XORBR3R0: REGISTER._3B ^= REGISTER._0B; continue;
case INSTR_XORBR3R1: REGISTER._3B ^= REGISTER._1B; continue;
case INSTR_XORBR3R2: REGISTER._3B ^= REGISTER._2B; continue;
case INSTR_XORBR3R3: REGISTER._3B ^= REGISTER._3B; continue;
case INSTR_XORBR3R4: REGISTER._3B ^= REGISTER._4B; continue;
case INSTR_XORBR3R5: REGISTER._3B ^= REGISTER._5B; continue;
case INSTR_XORBR3R6: REGISTER._3B ^= REGISTER._6B; continue;
case INSTR_XORBR3R7: REGISTER._3B ^= REGISTER._7B; continue;
case INSTR_XORBR3R8: REGISTER._3B ^= REGISTER._8B; continue;
case INSTR_XORBR3R9: REGISTER._3B ^= REGISTER._9B; continue;
case INSTR_XORBR3R10: REGISTER._3B ^= REGISTER._10B; continue;
case INSTR_XORBR3R11: REGISTER._3B ^= REGISTER._11B; continue;
case INSTR_XORBR3R12: REGISTER._3B ^= REGISTER._12B; continue;
case INSTR_XORBR3RIP: REGISTER._3B ^= REGISTER.IPB; continue;
case INSTR_XORBR3RSP: REGISTER._3B ^= REGISTER.SPB; continue;
case INSTR_XORBR3RBP: REGISTER._3B ^= REGISTER.BPB; continue;
case INSTR_XORBR4I: REGISTER._4B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR4RA: REGISTER._4B ^= REGISTER.AB; continue;
case INSTR_XORBR4RB: REGISTER._4B ^= REGISTER.BB; continue;
case INSTR_XORBR4RC: REGISTER._4B ^= REGISTER.CB; continue;
case INSTR_XORBR4RD: REGISTER._4B ^= REGISTER.DB; continue;
case INSTR_XORBR4R0: REGISTER._4B ^= REGISTER._0B; continue;
case INSTR_XORBR4R1: REGISTER._4B ^= REGISTER._1B; continue;
case INSTR_XORBR4R2: REGISTER._4B ^= REGISTER._2B; continue;
case INSTR_XORBR4R3: REGISTER._4B ^= REGISTER._3B; continue;
case INSTR_XORBR4R4: REGISTER._4B ^= REGISTER._4B; continue;
case INSTR_XORBR4R5: REGISTER._4B ^= REGISTER._5B; continue;
case INSTR_XORBR4R6: REGISTER._4B ^= REGISTER._6B; continue;
case INSTR_XORBR4R7: REGISTER._4B ^= REGISTER._7B; continue;
case INSTR_XORBR4R8: REGISTER._4B ^= REGISTER._8B; continue;
case INSTR_XORBR4R9: REGISTER._4B ^= REGISTER._9B; continue;
case INSTR_XORBR4R10: REGISTER._4B ^= REGISTER._10B; continue;
case INSTR_XORBR4R11: REGISTER._4B ^= REGISTER._11B; continue;
case INSTR_XORBR4R12: REGISTER._4B ^= REGISTER._12B; continue;
case INSTR_XORBR4RIP: REGISTER._4B ^= REGISTER.IPB; continue;
case INSTR_XORBR4RSP: REGISTER._4B ^= REGISTER.SPB; continue;
case INSTR_XORBR4RBP: REGISTER._4B ^= REGISTER.BPB; continue;
case INSTR_XORBR5I: REGISTER._5B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR5RA: REGISTER._5B ^= REGISTER.AB; continue;
case INSTR_XORBR5RB: REGISTER._5B ^= REGISTER.BB; continue;
case INSTR_XORBR5RC: REGISTER._5B ^= REGISTER.CB; continue;
case INSTR_XORBR5RD: REGISTER._5B ^= REGISTER.DB; continue;
case INSTR_XORBR5R0: REGISTER._5B ^= REGISTER._0B; continue;
case INSTR_XORBR5R1: REGISTER._5B ^= REGISTER._1B; continue;
case INSTR_XORBR5R2: REGISTER._5B ^= REGISTER._2B; continue;
case INSTR_XORBR5R3: REGISTER._5B ^= REGISTER._3B; continue;
case INSTR_XORBR5R4: REGISTER._5B ^= REGISTER._4B; continue;
case INSTR_XORBR5R5: REGISTER._5B ^= REGISTER._5B; continue;
case INSTR_XORBR5R6: REGISTER._5B ^= REGISTER._6B; continue;
case INSTR_XORBR5R7: REGISTER._5B ^= REGISTER._7B; continue;
case INSTR_XORBR5R8: REGISTER._5B ^= REGISTER._8B; continue;
case INSTR_XORBR5R9: REGISTER._5B ^= REGISTER._9B; continue;
case INSTR_XORBR5R10: REGISTER._5B ^= REGISTER._10B; continue;
case INSTR_XORBR5R11: REGISTER._5B ^= REGISTER._11B; continue;
case INSTR_XORBR5R12: REGISTER._5B ^= REGISTER._12B; continue;
case INSTR_XORBR5RIP: REGISTER._5B ^= REGISTER.IPB; continue;
case INSTR_XORBR5RSP: REGISTER._5B ^= REGISTER.SPB; continue;
case INSTR_XORBR5RBP: REGISTER._5B ^= REGISTER.BPB; continue;
case INSTR_XORBR6I: REGISTER._6B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR6RA: REGISTER._6B ^= REGISTER.AB; continue;
case INSTR_XORBR6RB: REGISTER._6B ^= REGISTER.BB; continue;
case INSTR_XORBR6RC: REGISTER._6B ^= REGISTER.CB; continue;
case INSTR_XORBR6RD: REGISTER._6B ^= REGISTER.DB; continue;
case INSTR_XORBR6R0: REGISTER._6B ^= REGISTER._0B; continue;
case INSTR_XORBR6R1: REGISTER._6B ^= REGISTER._1B; continue;
case INSTR_XORBR6R2: REGISTER._6B ^= REGISTER._2B; continue;
case INSTR_XORBR6R3: REGISTER._6B ^= REGISTER._3B; continue;
case INSTR_XORBR6R4: REGISTER._6B ^= REGISTER._4B; continue;
case INSTR_XORBR6R5: REGISTER._6B ^= REGISTER._5B; continue;
case INSTR_XORBR6R6: REGISTER._6B ^= REGISTER._6B; continue;
case INSTR_XORBR6R7: REGISTER._6B ^= REGISTER._7B; continue;
case INSTR_XORBR6R8: REGISTER._6B ^= REGISTER._8B; continue;
case INSTR_XORBR6R9: REGISTER._6B ^= REGISTER._9B; continue;
case INSTR_XORBR6R10: REGISTER._6B ^= REGISTER._10B; continue;
case INSTR_XORBR6R11: REGISTER._6B ^= REGISTER._11B; continue;
case INSTR_XORBR6R12: REGISTER._6B ^= REGISTER._12B; continue;
case INSTR_XORBR6RIP: REGISTER._6B ^= REGISTER.IPB; continue;
case INSTR_XORBR6RSP: REGISTER._6B ^= REGISTER.SPB; continue;
case INSTR_XORBR6RBP: REGISTER._6B ^= REGISTER.BPB; continue;
case INSTR_XORBR7I: REGISTER._7B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR7RA: REGISTER._7B ^= REGISTER.AB; continue;
case INSTR_XORBR7RB: REGISTER._7B ^= REGISTER.BB; continue;
case INSTR_XORBR7RC: REGISTER._7B ^= REGISTER.CB; continue;
case INSTR_XORBR7RD: REGISTER._7B ^= REGISTER.DB; continue;
case INSTR_XORBR7R0: REGISTER._7B ^= REGISTER._0B; continue;
case INSTR_XORBR7R1: REGISTER._7B ^= REGISTER._1B; continue;
case INSTR_XORBR7R2: REGISTER._7B ^= REGISTER._2B; continue;
case INSTR_XORBR7R3: REGISTER._7B ^= REGISTER._3B; continue;
case INSTR_XORBR7R4: REGISTER._7B ^= REGISTER._4B; continue;
case INSTR_XORBR7R5: REGISTER._7B ^= REGISTER._5B; continue;
case INSTR_XORBR7R6: REGISTER._7B ^= REGISTER._6B; continue;
case INSTR_XORBR7R7: REGISTER._7B ^= REGISTER._7B; continue;
case INSTR_XORBR7R8: REGISTER._7B ^= REGISTER._8B; continue;
case INSTR_XORBR7R9: REGISTER._7B ^= REGISTER._9B; continue;
case INSTR_XORBR7R10: REGISTER._7B ^= REGISTER._10B; continue;
case INSTR_XORBR7R11: REGISTER._7B ^= REGISTER._11B; continue;
case INSTR_XORBR7R12: REGISTER._7B ^= REGISTER._12B; continue;
case INSTR_XORBR7RIP: REGISTER._7B ^= REGISTER.IPB; continue;
case INSTR_XORBR7RSP: REGISTER._7B ^= REGISTER.SPB; continue;
case INSTR_XORBR7RBP: REGISTER._7B ^= REGISTER.BPB; continue;
case INSTR_XORBR8I: REGISTER._8B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR8RA: REGISTER._8B ^= REGISTER.AB; continue;
case INSTR_XORBR8RB: REGISTER._8B ^= REGISTER.BB; continue;
case INSTR_XORBR8RC: REGISTER._8B ^= REGISTER.CB; continue;
case INSTR_XORBR8RD: REGISTER._8B ^= REGISTER.DB; continue;
case INSTR_XORBR8R0: REGISTER._8B ^= REGISTER._0B; continue;
case INSTR_XORBR8R1: REGISTER._8B ^= REGISTER._1B; continue;
case INSTR_XORBR8R2: REGISTER._8B ^= REGISTER._2B; continue;
case INSTR_XORBR8R3: REGISTER._8B ^= REGISTER._3B; continue;
case INSTR_XORBR8R4: REGISTER._8B ^= REGISTER._4B; continue;
case INSTR_XORBR8R5: REGISTER._8B ^= REGISTER._5B; continue;
case INSTR_XORBR8R6: REGISTER._8B ^= REGISTER._6B; continue;
case INSTR_XORBR8R7: REGISTER._8B ^= REGISTER._7B; continue;
case INSTR_XORBR8R8: REGISTER._8B ^= REGISTER._8B; continue;
case INSTR_XORBR8R9: REGISTER._8B ^= REGISTER._9B; continue;
case INSTR_XORBR8R10: REGISTER._8B ^= REGISTER._10B; continue;
case INSTR_XORBR8R11: REGISTER._8B ^= REGISTER._11B; continue;
case INSTR_XORBR8R12: REGISTER._8B ^= REGISTER._12B; continue;
case INSTR_XORBR8RIP: REGISTER._8B ^= REGISTER.IPB; continue;
case INSTR_XORBR8RSP: REGISTER._8B ^= REGISTER.SPB; continue;
case INSTR_XORBR8RBP: REGISTER._8B ^= REGISTER.BPB; continue;
case INSTR_XORBR9I: REGISTER._9B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR9RA: REGISTER._9B ^= REGISTER.AB; continue;
case INSTR_XORBR9RB: REGISTER._9B ^= REGISTER.BB; continue;
case INSTR_XORBR9RC: REGISTER._9B ^= REGISTER.CB; continue;
case INSTR_XORBR9RD: REGISTER._9B ^= REGISTER.DB; continue;
case INSTR_XORBR9R0: REGISTER._9B ^= REGISTER._0B; continue;
case INSTR_XORBR9R1: REGISTER._9B ^= REGISTER._1B; continue;
case INSTR_XORBR9R2: REGISTER._9B ^= REGISTER._2B; continue;
case INSTR_XORBR9R3: REGISTER._9B ^= REGISTER._3B; continue;
case INSTR_XORBR9R4: REGISTER._9B ^= REGISTER._4B; continue;
case INSTR_XORBR9R5: REGISTER._9B ^= REGISTER._5B; continue;
case INSTR_XORBR9R6: REGISTER._9B ^= REGISTER._6B; continue;
case INSTR_XORBR9R7: REGISTER._9B ^= REGISTER._7B; continue;
case INSTR_XORBR9R8: REGISTER._9B ^= REGISTER._8B; continue;
case INSTR_XORBR9R9: REGISTER._9B ^= REGISTER._9B; continue;
case INSTR_XORBR9R10: REGISTER._9B ^= REGISTER._10B; continue;
case INSTR_XORBR9R11: REGISTER._9B ^= REGISTER._11B; continue;
case INSTR_XORBR9R12: REGISTER._9B ^= REGISTER._12B; continue;
case INSTR_XORBR9RIP: REGISTER._9B ^= REGISTER.IPB; continue;
case INSTR_XORBR9RSP: REGISTER._9B ^= REGISTER.SPB; continue;
case INSTR_XORBR9RBP: REGISTER._9B ^= REGISTER.BPB; continue;
case INSTR_XORBR10I: REGISTER._10B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR10RA: REGISTER._10B ^= REGISTER.AB; continue;
case INSTR_XORBR10RB: REGISTER._10B ^= REGISTER.BB; continue;
case INSTR_XORBR10RC: REGISTER._10B ^= REGISTER.CB; continue;
case INSTR_XORBR10RD: REGISTER._10B ^= REGISTER.DB; continue;
case INSTR_XORBR10R0: REGISTER._10B ^= REGISTER._0B; continue;
case INSTR_XORBR10R1: REGISTER._10B ^= REGISTER._1B; continue;
case INSTR_XORBR10R2: REGISTER._10B ^= REGISTER._2B; continue;
case INSTR_XORBR10R3: REGISTER._10B ^= REGISTER._3B; continue;
case INSTR_XORBR10R4: REGISTER._10B ^= REGISTER._4B; continue;
case INSTR_XORBR10R5: REGISTER._10B ^= REGISTER._5B; continue;
case INSTR_XORBR10R6: REGISTER._10B ^= REGISTER._6B; continue;
case INSTR_XORBR10R7: REGISTER._10B ^= REGISTER._7B; continue;
case INSTR_XORBR10R8: REGISTER._10B ^= REGISTER._8B; continue;
case INSTR_XORBR10R9: REGISTER._10B ^= REGISTER._9B; continue;
case INSTR_XORBR10R10: REGISTER._10B ^= REGISTER._10B; continue;
case INSTR_XORBR10R11: REGISTER._10B ^= REGISTER._11B; continue;
case INSTR_XORBR10R12: REGISTER._10B ^= REGISTER._12B; continue;
case INSTR_XORBR10RIP: REGISTER._10B ^= REGISTER.IPB; continue;
case INSTR_XORBR10RSP: REGISTER._10B ^= REGISTER.SPB; continue;
case INSTR_XORBR10RBP: REGISTER._10B ^= REGISTER.BPB; continue;
case INSTR_XORBR11I: REGISTER._11B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR11RA: REGISTER._11B ^= REGISTER.AB; continue;
case INSTR_XORBR11RB: REGISTER._11B ^= REGISTER.BB; continue;
case INSTR_XORBR11RC: REGISTER._11B ^= REGISTER.CB; continue;
case INSTR_XORBR11RD: REGISTER._11B ^= REGISTER.DB; continue;
case INSTR_XORBR11R0: REGISTER._11B ^= REGISTER._0B; continue;
case INSTR_XORBR11R1: REGISTER._11B ^= REGISTER._1B; continue;
case INSTR_XORBR11R2: REGISTER._11B ^= REGISTER._2B; continue;
case INSTR_XORBR11R3: REGISTER._11B ^= REGISTER._3B; continue;
case INSTR_XORBR11R4: REGISTER._11B ^= REGISTER._4B; continue;
case INSTR_XORBR11R5: REGISTER._11B ^= REGISTER._5B; continue;
case INSTR_XORBR11R6: REGISTER._11B ^= REGISTER._6B; continue;
case INSTR_XORBR11R7: REGISTER._11B ^= REGISTER._7B; continue;
case INSTR_XORBR11R8: REGISTER._11B ^= REGISTER._8B; continue;
case INSTR_XORBR11R9: REGISTER._11B ^= REGISTER._9B; continue;
case INSTR_XORBR11R10: REGISTER._11B ^= REGISTER._10B; continue;
case INSTR_XORBR11R11: REGISTER._11B ^= REGISTER._11B; continue;
case INSTR_XORBR11R12: REGISTER._11B ^= REGISTER._12B; continue;
case INSTR_XORBR11RIP: REGISTER._11B ^= REGISTER.IPB; continue;
case INSTR_XORBR11RSP: REGISTER._11B ^= REGISTER.SPB; continue;
case INSTR_XORBR11RBP: REGISTER._11B ^= REGISTER.BPB; continue;
case INSTR_XORBR12I: REGISTER._12B ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBR12RA: REGISTER._12B ^= REGISTER.AB; continue;
case INSTR_XORBR12RB: REGISTER._12B ^= REGISTER.BB; continue;
case INSTR_XORBR12RC: REGISTER._12B ^= REGISTER.CB; continue;
case INSTR_XORBR12RD: REGISTER._12B ^= REGISTER.DB; continue;
case INSTR_XORBR12R0: REGISTER._12B ^= REGISTER._0B; continue;
case INSTR_XORBR12R1: REGISTER._12B ^= REGISTER._1B; continue;
case INSTR_XORBR12R2: REGISTER._12B ^= REGISTER._2B; continue;
case INSTR_XORBR12R3: REGISTER._12B ^= REGISTER._3B; continue;
case INSTR_XORBR12R4: REGISTER._12B ^= REGISTER._4B; continue;
case INSTR_XORBR12R5: REGISTER._12B ^= REGISTER._5B; continue;
case INSTR_XORBR12R6: REGISTER._12B ^= REGISTER._6B; continue;
case INSTR_XORBR12R7: REGISTER._12B ^= REGISTER._7B; continue;
case INSTR_XORBR12R8: REGISTER._12B ^= REGISTER._8B; continue;
case INSTR_XORBR12R9: REGISTER._12B ^= REGISTER._9B; continue;
case INSTR_XORBR12R10: REGISTER._12B ^= REGISTER._10B; continue;
case INSTR_XORBR12R11: REGISTER._12B ^= REGISTER._11B; continue;
case INSTR_XORBR12R12: REGISTER._12B ^= REGISTER._12B; continue;
case INSTR_XORBR12RIP: REGISTER._12B ^= REGISTER.IPB; continue;
case INSTR_XORBR12RSP: REGISTER._12B ^= REGISTER.SPB; continue;
case INSTR_XORBR12RBP: REGISTER._12B ^= REGISTER.BPB; continue;
case INSTR_XORBRIPI: REGISTER.IPB ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBRIPRA: REGISTER.IPB ^= REGISTER.AB; continue;
case INSTR_XORBRIPRB: REGISTER.IPB ^= REGISTER.BB; continue;
case INSTR_XORBRIPRC: REGISTER.IPB ^= REGISTER.CB; continue;
case INSTR_XORBRIPRD: REGISTER.IPB ^= REGISTER.DB; continue;
case INSTR_XORBRIPR0: REGISTER.IPB ^= REGISTER._0B; continue;
case INSTR_XORBRIPR1: REGISTER.IPB ^= REGISTER._1B; continue;
case INSTR_XORBRIPR2: REGISTER.IPB ^= REGISTER._2B; continue;
case INSTR_XORBRIPR3: REGISTER.IPB ^= REGISTER._3B; continue;
case INSTR_XORBRIPR4: REGISTER.IPB ^= REGISTER._4B; continue;
case INSTR_XORBRIPR5: REGISTER.IPB ^= REGISTER._5B; continue;
case INSTR_XORBRIPR6: REGISTER.IPB ^= REGISTER._6B; continue;
case INSTR_XORBRIPR7: REGISTER.IPB ^= REGISTER._7B; continue;
case INSTR_XORBRIPR8: REGISTER.IPB ^= REGISTER._8B; continue;
case INSTR_XORBRIPR9: REGISTER.IPB ^= REGISTER._9B; continue;
case INSTR_XORBRIPR10: REGISTER.IPB ^= REGISTER._10B; continue;
case INSTR_XORBRIPR11: REGISTER.IPB ^= REGISTER._11B; continue;
case INSTR_XORBRIPR12: REGISTER.IPB ^= REGISTER._12B; continue;
case INSTR_XORBRIPRIP: REGISTER.IPB ^= REGISTER.IPB; continue;
case INSTR_XORBRIPRSP: REGISTER.IPB ^= REGISTER.SPB; continue;
case INSTR_XORBRIPRBP: REGISTER.IPB ^= REGISTER.BPB; continue;
case INSTR_XORBRSPI: REGISTER.SPB ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBRSPRA: REGISTER.SPB ^= REGISTER.AB; continue;
case INSTR_XORBRSPRB: REGISTER.SPB ^= REGISTER.BB; continue;
case INSTR_XORBRSPRC: REGISTER.SPB ^= REGISTER.CB; continue;
case INSTR_XORBRSPRD: REGISTER.SPB ^= REGISTER.DB; continue;
case INSTR_XORBRSPR0: REGISTER.SPB ^= REGISTER._0B; continue;
case INSTR_XORBRSPR1: REGISTER.SPB ^= REGISTER._1B; continue;
case INSTR_XORBRSPR2: REGISTER.SPB ^= REGISTER._2B; continue;
case INSTR_XORBRSPR3: REGISTER.SPB ^= REGISTER._3B; continue;
case INSTR_XORBRSPR4: REGISTER.SPB ^= REGISTER._4B; continue;
case INSTR_XORBRSPR5: REGISTER.SPB ^= REGISTER._5B; continue;
case INSTR_XORBRSPR6: REGISTER.SPB ^= REGISTER._6B; continue;
case INSTR_XORBRSPR7: REGISTER.SPB ^= REGISTER._7B; continue;
case INSTR_XORBRSPR8: REGISTER.SPB ^= REGISTER._8B; continue;
case INSTR_XORBRSPR9: REGISTER.SPB ^= REGISTER._9B; continue;
case INSTR_XORBRSPR10: REGISTER.SPB ^= REGISTER._10B; continue;
case INSTR_XORBRSPR11: REGISTER.SPB ^= REGISTER._11B; continue;
case INSTR_XORBRSPR12: REGISTER.SPB ^= REGISTER._12B; continue;
case INSTR_XORBRSPRIP: REGISTER.SPB ^= REGISTER.IPB; continue;
case INSTR_XORBRSPRSP: REGISTER.SPB ^= REGISTER.SPB; continue;
case INSTR_XORBRSPRBP: REGISTER.SPB ^= REGISTER.BPB; continue;
case INSTR_XORBRBPI: REGISTER.BPB ^= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_XORBRBPRA: REGISTER.BPB ^= REGISTER.AB; continue;
case INSTR_XORBRBPRB: REGISTER.BPB ^= REGISTER.BB; continue;
case INSTR_XORBRBPRC: REGISTER.BPB ^= REGISTER.CB; continue;
case INSTR_XORBRBPRD: REGISTER.BPB ^= REGISTER.DB; continue;
case INSTR_XORBRBPR0: REGISTER.BPB ^= REGISTER._0B; continue;
case INSTR_XORBRBPR1: REGISTER.BPB ^= REGISTER._1B; continue;
case INSTR_XORBRBPR2: REGISTER.BPB ^= REGISTER._2B; continue;
case INSTR_XORBRBPR3: REGISTER.BPB ^= REGISTER._3B; continue;
case INSTR_XORBRBPR4: REGISTER.BPB ^= REGISTER._4B; continue;
case INSTR_XORBRBPR5: REGISTER.BPB ^= REGISTER._5B; continue;
case INSTR_XORBRBPR6: REGISTER.BPB ^= REGISTER._6B; continue;
case INSTR_XORBRBPR7: REGISTER.BPB ^= REGISTER._7B; continue;
case INSTR_XORBRBPR8: REGISTER.BPB ^= REGISTER._8B; continue;
case INSTR_XORBRBPR9: REGISTER.BPB ^= REGISTER._9B; continue;
case INSTR_XORBRBPR10: REGISTER.BPB ^= REGISTER._10B; continue;
case INSTR_XORBRBPR11: REGISTER.BPB ^= REGISTER._11B; continue;
case INSTR_XORBRBPR12: REGISTER.BPB ^= REGISTER._12B; continue;
case INSTR_XORBRBPRIP: REGISTER.BPB ^= REGISTER.IPB; continue;
case INSTR_XORBRBPRSP: REGISTER.BPB ^= REGISTER.SPB; continue;
case INSTR_XORBRBPRBP: REGISTER.BPB ^= REGISTER.BPB; continue;
case INSTR_RSHQRAI: REGISTER.AQ >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQRARA: REGISTER.AQ >>= REGISTER.AQ; continue;
case INSTR_RSHQRARB: REGISTER.AQ >>= REGISTER.BQ; continue;
case INSTR_RSHQRARC: REGISTER.AQ >>= REGISTER.CQ; continue;
case INSTR_RSHQRARD: REGISTER.AQ >>= REGISTER.DQ; continue;
case INSTR_RSHQRAR0: REGISTER.AQ >>= REGISTER._0Q; continue;
case INSTR_RSHQRAR1: REGISTER.AQ >>= REGISTER._1Q; continue;
case INSTR_RSHQRAR2: REGISTER.AQ >>= REGISTER._2Q; continue;
case INSTR_RSHQRAR3: REGISTER.AQ >>= REGISTER._3Q; continue;
case INSTR_RSHQRAR4: REGISTER.AQ >>= REGISTER._4Q; continue;
case INSTR_RSHQRAR5: REGISTER.AQ >>= REGISTER._5Q; continue;
case INSTR_RSHQRAR6: REGISTER.AQ >>= REGISTER._6Q; continue;
case INSTR_RSHQRAR7: REGISTER.AQ >>= REGISTER._7Q; continue;
case INSTR_RSHQRAR8: REGISTER.AQ >>= REGISTER._8Q; continue;
case INSTR_RSHQRAR9: REGISTER.AQ >>= REGISTER._9Q; continue;
case INSTR_RSHQRAR10: REGISTER.AQ >>= REGISTER._10Q; continue;
case INSTR_RSHQRAR11: REGISTER.AQ >>= REGISTER._11Q; continue;
case INSTR_RSHQRAR12: REGISTER.AQ >>= REGISTER._12Q; continue;
case INSTR_RSHQRARIP: REGISTER.AQ >>= REGISTER.IPQ; continue;
case INSTR_RSHQRARSP: REGISTER.AQ >>= REGISTER.SPQ; continue;
case INSTR_RSHQRARBP: REGISTER.AQ >>= REGISTER.BPQ; continue;
case INSTR_RSHQRBI: REGISTER.BQ >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQRBRA: REGISTER.BQ >>= REGISTER.AQ; continue;
case INSTR_RSHQRBRB: REGISTER.BQ >>= REGISTER.BQ; continue;
case INSTR_RSHQRBRC: REGISTER.BQ >>= REGISTER.CQ; continue;
case INSTR_RSHQRBRD: REGISTER.BQ >>= REGISTER.DQ; continue;
case INSTR_RSHQRBR0: REGISTER.BQ >>= REGISTER._0Q; continue;
case INSTR_RSHQRBR1: REGISTER.BQ >>= REGISTER._1Q; continue;
case INSTR_RSHQRBR2: REGISTER.BQ >>= REGISTER._2Q; continue;
case INSTR_RSHQRBR3: REGISTER.BQ >>= REGISTER._3Q; continue;
case INSTR_RSHQRBR4: REGISTER.BQ >>= REGISTER._4Q; continue;
case INSTR_RSHQRBR5: REGISTER.BQ >>= REGISTER._5Q; continue;
case INSTR_RSHQRBR6: REGISTER.BQ >>= REGISTER._6Q; continue;
case INSTR_RSHQRBR7: REGISTER.BQ >>= REGISTER._7Q; continue;
case INSTR_RSHQRBR8: REGISTER.BQ >>= REGISTER._8Q; continue;
case INSTR_RSHQRBR9: REGISTER.BQ >>= REGISTER._9Q; continue;
case INSTR_RSHQRBR10: REGISTER.BQ >>= REGISTER._10Q; continue;
case INSTR_RSHQRBR11: REGISTER.BQ >>= REGISTER._11Q; continue;
case INSTR_RSHQRBR12: REGISTER.BQ >>= REGISTER._12Q; continue;
case INSTR_RSHQRBRIP: REGISTER.BQ >>= REGISTER.IPQ; continue;
case INSTR_RSHQRBRSP: REGISTER.BQ >>= REGISTER.SPQ; continue;
case INSTR_RSHQRBRBP: REGISTER.BQ >>= REGISTER.BPQ; continue;
case INSTR_RSHQRCI: REGISTER.CQ >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQRCRA: REGISTER.CQ >>= REGISTER.AQ; continue;
case INSTR_RSHQRCRB: REGISTER.CQ >>= REGISTER.BQ; continue;
case INSTR_RSHQRCRC: REGISTER.CQ >>= REGISTER.CQ; continue;
case INSTR_RSHQRCRD: REGISTER.CQ >>= REGISTER.DQ; continue;
case INSTR_RSHQRCR0: REGISTER.CQ >>= REGISTER._0Q; continue;
case INSTR_RSHQRCR1: REGISTER.CQ >>= REGISTER._1Q; continue;
case INSTR_RSHQRCR2: REGISTER.CQ >>= REGISTER._2Q; continue;
case INSTR_RSHQRCR3: REGISTER.CQ >>= REGISTER._3Q; continue;
case INSTR_RSHQRCR4: REGISTER.CQ >>= REGISTER._4Q; continue;
case INSTR_RSHQRCR5: REGISTER.CQ >>= REGISTER._5Q; continue;
case INSTR_RSHQRCR6: REGISTER.CQ >>= REGISTER._6Q; continue;
case INSTR_RSHQRCR7: REGISTER.CQ >>= REGISTER._7Q; continue;
case INSTR_RSHQRCR8: REGISTER.CQ >>= REGISTER._8Q; continue;
case INSTR_RSHQRCR9: REGISTER.CQ >>= REGISTER._9Q; continue;
case INSTR_RSHQRCR10: REGISTER.CQ >>= REGISTER._10Q; continue;
case INSTR_RSHQRCR11: REGISTER.CQ >>= REGISTER._11Q; continue;
case INSTR_RSHQRCR12: REGISTER.CQ >>= REGISTER._12Q; continue;
case INSTR_RSHQRCRIP: REGISTER.CQ >>= REGISTER.IPQ; continue;
case INSTR_RSHQRCRSP: REGISTER.CQ >>= REGISTER.SPQ; continue;
case INSTR_RSHQRCRBP: REGISTER.CQ >>= REGISTER.BPQ; continue;
case INSTR_RSHQRDI: REGISTER.DQ >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQRDRA: REGISTER.DQ >>= REGISTER.AQ; continue;
case INSTR_RSHQRDRB: REGISTER.DQ >>= REGISTER.BQ; continue;
case INSTR_RSHQRDRC: REGISTER.DQ >>= REGISTER.CQ; continue;
case INSTR_RSHQRDRD: REGISTER.DQ >>= REGISTER.DQ; continue;
case INSTR_RSHQRDR0: REGISTER.DQ >>= REGISTER._0Q; continue;
case INSTR_RSHQRDR1: REGISTER.DQ >>= REGISTER._1Q; continue;
case INSTR_RSHQRDR2: REGISTER.DQ >>= REGISTER._2Q; continue;
case INSTR_RSHQRDR3: REGISTER.DQ >>= REGISTER._3Q; continue;
case INSTR_RSHQRDR4: REGISTER.DQ >>= REGISTER._4Q; continue;
case INSTR_RSHQRDR5: REGISTER.DQ >>= REGISTER._5Q; continue;
case INSTR_RSHQRDR6: REGISTER.DQ >>= REGISTER._6Q; continue;
case INSTR_RSHQRDR7: REGISTER.DQ >>= REGISTER._7Q; continue;
case INSTR_RSHQRDR8: REGISTER.DQ >>= REGISTER._8Q; continue;
case INSTR_RSHQRDR9: REGISTER.DQ >>= REGISTER._9Q; continue;
case INSTR_RSHQRDR10: REGISTER.DQ >>= REGISTER._10Q; continue;
case INSTR_RSHQRDR11: REGISTER.DQ >>= REGISTER._11Q; continue;
case INSTR_RSHQRDR12: REGISTER.DQ >>= REGISTER._12Q; continue;
case INSTR_RSHQRDRIP: REGISTER.DQ >>= REGISTER.IPQ; continue;
case INSTR_RSHQRDRSP: REGISTER.DQ >>= REGISTER.SPQ; continue;
case INSTR_RSHQRDRBP: REGISTER.DQ >>= REGISTER.BPQ; continue;
case INSTR_RSHQR0I: REGISTER._0Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR0RA: REGISTER._0Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR0RB: REGISTER._0Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR0RC: REGISTER._0Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR0RD: REGISTER._0Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR0R0: REGISTER._0Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR0R1: REGISTER._0Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR0R2: REGISTER._0Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR0R3: REGISTER._0Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR0R4: REGISTER._0Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR0R5: REGISTER._0Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR0R6: REGISTER._0Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR0R7: REGISTER._0Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR0R8: REGISTER._0Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR0R9: REGISTER._0Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR0R10: REGISTER._0Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR0R11: REGISTER._0Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR0R12: REGISTER._0Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR0RIP: REGISTER._0Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR0RSP: REGISTER._0Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR0RBP: REGISTER._0Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR1I: REGISTER._1Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR1RA: REGISTER._1Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR1RB: REGISTER._1Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR1RC: REGISTER._1Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR1RD: REGISTER._1Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR1R0: REGISTER._1Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR1R1: REGISTER._1Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR1R2: REGISTER._1Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR1R3: REGISTER._1Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR1R4: REGISTER._1Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR1R5: REGISTER._1Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR1R6: REGISTER._1Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR1R7: REGISTER._1Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR1R8: REGISTER._1Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR1R9: REGISTER._1Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR1R10: REGISTER._1Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR1R11: REGISTER._1Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR1R12: REGISTER._1Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR1RIP: REGISTER._1Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR1RSP: REGISTER._1Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR1RBP: REGISTER._1Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR2I: REGISTER._2Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR2RA: REGISTER._2Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR2RB: REGISTER._2Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR2RC: REGISTER._2Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR2RD: REGISTER._2Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR2R0: REGISTER._2Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR2R1: REGISTER._2Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR2R2: REGISTER._2Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR2R3: REGISTER._2Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR2R4: REGISTER._2Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR2R5: REGISTER._2Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR2R6: REGISTER._2Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR2R7: REGISTER._2Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR2R8: REGISTER._2Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR2R9: REGISTER._2Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR2R10: REGISTER._2Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR2R11: REGISTER._2Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR2R12: REGISTER._2Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR2RIP: REGISTER._2Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR2RSP: REGISTER._2Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR2RBP: REGISTER._2Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR3I: REGISTER._3Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR3RA: REGISTER._3Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR3RB: REGISTER._3Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR3RC: REGISTER._3Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR3RD: REGISTER._3Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR3R0: REGISTER._3Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR3R1: REGISTER._3Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR3R2: REGISTER._3Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR3R3: REGISTER._3Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR3R4: REGISTER._3Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR3R5: REGISTER._3Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR3R6: REGISTER._3Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR3R7: REGISTER._3Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR3R8: REGISTER._3Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR3R9: REGISTER._3Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR3R10: REGISTER._3Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR3R11: REGISTER._3Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR3R12: REGISTER._3Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR3RIP: REGISTER._3Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR3RSP: REGISTER._3Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR3RBP: REGISTER._3Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR4I: REGISTER._4Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR4RA: REGISTER._4Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR4RB: REGISTER._4Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR4RC: REGISTER._4Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR4RD: REGISTER._4Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR4R0: REGISTER._4Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR4R1: REGISTER._4Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR4R2: REGISTER._4Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR4R3: REGISTER._4Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR4R4: REGISTER._4Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR4R5: REGISTER._4Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR4R6: REGISTER._4Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR4R7: REGISTER._4Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR4R8: REGISTER._4Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR4R9: REGISTER._4Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR4R10: REGISTER._4Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR4R11: REGISTER._4Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR4R12: REGISTER._4Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR4RIP: REGISTER._4Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR4RSP: REGISTER._4Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR4RBP: REGISTER._4Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR5I: REGISTER._5Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR5RA: REGISTER._5Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR5RB: REGISTER._5Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR5RC: REGISTER._5Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR5RD: REGISTER._5Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR5R0: REGISTER._5Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR5R1: REGISTER._5Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR5R2: REGISTER._5Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR5R3: REGISTER._5Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR5R4: REGISTER._5Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR5R5: REGISTER._5Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR5R6: REGISTER._5Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR5R7: REGISTER._5Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR5R8: REGISTER._5Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR5R9: REGISTER._5Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR5R10: REGISTER._5Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR5R11: REGISTER._5Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR5R12: REGISTER._5Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR5RIP: REGISTER._5Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR5RSP: REGISTER._5Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR5RBP: REGISTER._5Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR6I: REGISTER._6Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR6RA: REGISTER._6Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR6RB: REGISTER._6Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR6RC: REGISTER._6Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR6RD: REGISTER._6Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR6R0: REGISTER._6Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR6R1: REGISTER._6Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR6R2: REGISTER._6Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR6R3: REGISTER._6Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR6R4: REGISTER._6Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR6R5: REGISTER._6Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR6R6: REGISTER._6Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR6R7: REGISTER._6Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR6R8: REGISTER._6Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR6R9: REGISTER._6Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR6R10: REGISTER._6Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR6R11: REGISTER._6Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR6R12: REGISTER._6Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR6RIP: REGISTER._6Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR6RSP: REGISTER._6Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR6RBP: REGISTER._6Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR7I: REGISTER._7Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR7RA: REGISTER._7Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR7RB: REGISTER._7Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR7RC: REGISTER._7Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR7RD: REGISTER._7Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR7R0: REGISTER._7Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR7R1: REGISTER._7Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR7R2: REGISTER._7Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR7R3: REGISTER._7Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR7R4: REGISTER._7Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR7R5: REGISTER._7Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR7R6: REGISTER._7Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR7R7: REGISTER._7Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR7R8: REGISTER._7Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR7R9: REGISTER._7Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR7R10: REGISTER._7Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR7R11: REGISTER._7Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR7R12: REGISTER._7Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR7RIP: REGISTER._7Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR7RSP: REGISTER._7Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR7RBP: REGISTER._7Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR8I: REGISTER._8Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR8RA: REGISTER._8Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR8RB: REGISTER._8Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR8RC: REGISTER._8Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR8RD: REGISTER._8Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR8R0: REGISTER._8Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR8R1: REGISTER._8Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR8R2: REGISTER._8Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR8R3: REGISTER._8Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR8R4: REGISTER._8Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR8R5: REGISTER._8Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR8R6: REGISTER._8Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR8R7: REGISTER._8Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR8R8: REGISTER._8Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR8R9: REGISTER._8Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR8R10: REGISTER._8Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR8R11: REGISTER._8Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR8R12: REGISTER._8Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR8RIP: REGISTER._8Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR8RSP: REGISTER._8Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR8RBP: REGISTER._8Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR9I: REGISTER._9Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR9RA: REGISTER._9Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR9RB: REGISTER._9Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR9RC: REGISTER._9Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR9RD: REGISTER._9Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR9R0: REGISTER._9Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR9R1: REGISTER._9Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR9R2: REGISTER._9Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR9R3: REGISTER._9Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR9R4: REGISTER._9Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR9R5: REGISTER._9Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR9R6: REGISTER._9Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR9R7: REGISTER._9Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR9R8: REGISTER._9Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR9R9: REGISTER._9Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR9R10: REGISTER._9Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR9R11: REGISTER._9Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR9R12: REGISTER._9Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR9RIP: REGISTER._9Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR9RSP: REGISTER._9Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR9RBP: REGISTER._9Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR10I: REGISTER._10Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR10RA: REGISTER._10Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR10RB: REGISTER._10Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR10RC: REGISTER._10Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR10RD: REGISTER._10Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR10R0: REGISTER._10Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR10R1: REGISTER._10Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR10R2: REGISTER._10Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR10R3: REGISTER._10Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR10R4: REGISTER._10Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR10R5: REGISTER._10Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR10R6: REGISTER._10Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR10R7: REGISTER._10Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR10R8: REGISTER._10Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR10R9: REGISTER._10Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR10R10: REGISTER._10Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR10R11: REGISTER._10Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR10R12: REGISTER._10Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR10RIP: REGISTER._10Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR10RSP: REGISTER._10Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR10RBP: REGISTER._10Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR11I: REGISTER._11Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR11RA: REGISTER._11Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR11RB: REGISTER._11Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR11RC: REGISTER._11Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR11RD: REGISTER._11Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR11R0: REGISTER._11Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR11R1: REGISTER._11Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR11R2: REGISTER._11Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR11R3: REGISTER._11Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR11R4: REGISTER._11Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR11R5: REGISTER._11Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR11R6: REGISTER._11Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR11R7: REGISTER._11Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR11R8: REGISTER._11Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR11R9: REGISTER._11Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR11R10: REGISTER._11Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR11R11: REGISTER._11Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR11R12: REGISTER._11Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR11RIP: REGISTER._11Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR11RSP: REGISTER._11Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR11RBP: REGISTER._11Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQR12I: REGISTER._12Q >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQR12RA: REGISTER._12Q >>= REGISTER.AQ; continue;
case INSTR_RSHQR12RB: REGISTER._12Q >>= REGISTER.BQ; continue;
case INSTR_RSHQR12RC: REGISTER._12Q >>= REGISTER.CQ; continue;
case INSTR_RSHQR12RD: REGISTER._12Q >>= REGISTER.DQ; continue;
case INSTR_RSHQR12R0: REGISTER._12Q >>= REGISTER._0Q; continue;
case INSTR_RSHQR12R1: REGISTER._12Q >>= REGISTER._1Q; continue;
case INSTR_RSHQR12R2: REGISTER._12Q >>= REGISTER._2Q; continue;
case INSTR_RSHQR12R3: REGISTER._12Q >>= REGISTER._3Q; continue;
case INSTR_RSHQR12R4: REGISTER._12Q >>= REGISTER._4Q; continue;
case INSTR_RSHQR12R5: REGISTER._12Q >>= REGISTER._5Q; continue;
case INSTR_RSHQR12R6: REGISTER._12Q >>= REGISTER._6Q; continue;
case INSTR_RSHQR12R7: REGISTER._12Q >>= REGISTER._7Q; continue;
case INSTR_RSHQR12R8: REGISTER._12Q >>= REGISTER._8Q; continue;
case INSTR_RSHQR12R9: REGISTER._12Q >>= REGISTER._9Q; continue;
case INSTR_RSHQR12R10: REGISTER._12Q >>= REGISTER._10Q; continue;
case INSTR_RSHQR12R11: REGISTER._12Q >>= REGISTER._11Q; continue;
case INSTR_RSHQR12R12: REGISTER._12Q >>= REGISTER._12Q; continue;
case INSTR_RSHQR12RIP: REGISTER._12Q >>= REGISTER.IPQ; continue;
case INSTR_RSHQR12RSP: REGISTER._12Q >>= REGISTER.SPQ; continue;
case INSTR_RSHQR12RBP: REGISTER._12Q >>= REGISTER.BPQ; continue;
case INSTR_RSHQRIPI: REGISTER.IPQ >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQRIPRA: REGISTER.IPQ >>= REGISTER.AQ; continue;
case INSTR_RSHQRIPRB: REGISTER.IPQ >>= REGISTER.BQ; continue;
case INSTR_RSHQRIPRC: REGISTER.IPQ >>= REGISTER.CQ; continue;
case INSTR_RSHQRIPRD: REGISTER.IPQ >>= REGISTER.DQ; continue;
case INSTR_RSHQRIPR0: REGISTER.IPQ >>= REGISTER._0Q; continue;
case INSTR_RSHQRIPR1: REGISTER.IPQ >>= REGISTER._1Q; continue;
case INSTR_RSHQRIPR2: REGISTER.IPQ >>= REGISTER._2Q; continue;
case INSTR_RSHQRIPR3: REGISTER.IPQ >>= REGISTER._3Q; continue;
case INSTR_RSHQRIPR4: REGISTER.IPQ >>= REGISTER._4Q; continue;
case INSTR_RSHQRIPR5: REGISTER.IPQ >>= REGISTER._5Q; continue;
case INSTR_RSHQRIPR6: REGISTER.IPQ >>= REGISTER._6Q; continue;
case INSTR_RSHQRIPR7: REGISTER.IPQ >>= REGISTER._7Q; continue;
case INSTR_RSHQRIPR8: REGISTER.IPQ >>= REGISTER._8Q; continue;
case INSTR_RSHQRIPR9: REGISTER.IPQ >>= REGISTER._9Q; continue;
case INSTR_RSHQRIPR10: REGISTER.IPQ >>= REGISTER._10Q; continue;
case INSTR_RSHQRIPR11: REGISTER.IPQ >>= REGISTER._11Q; continue;
case INSTR_RSHQRIPR12: REGISTER.IPQ >>= REGISTER._12Q; continue;
case INSTR_RSHQRIPRIP: REGISTER.IPQ >>= REGISTER.IPQ; continue;
case INSTR_RSHQRIPRSP: REGISTER.IPQ >>= REGISTER.SPQ; continue;
case INSTR_RSHQRIPRBP: REGISTER.IPQ >>= REGISTER.BPQ; continue;
case INSTR_RSHQRSPI: REGISTER.SPQ >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQRSPRA: REGISTER.SPQ >>= REGISTER.AQ; continue;
case INSTR_RSHQRSPRB: REGISTER.SPQ >>= REGISTER.BQ; continue;
case INSTR_RSHQRSPRC: REGISTER.SPQ >>= REGISTER.CQ; continue;
case INSTR_RSHQRSPRD: REGISTER.SPQ >>= REGISTER.DQ; continue;
case INSTR_RSHQRSPR0: REGISTER.SPQ >>= REGISTER._0Q; continue;
case INSTR_RSHQRSPR1: REGISTER.SPQ >>= REGISTER._1Q; continue;
case INSTR_RSHQRSPR2: REGISTER.SPQ >>= REGISTER._2Q; continue;
case INSTR_RSHQRSPR3: REGISTER.SPQ >>= REGISTER._3Q; continue;
case INSTR_RSHQRSPR4: REGISTER.SPQ >>= REGISTER._4Q; continue;
case INSTR_RSHQRSPR5: REGISTER.SPQ >>= REGISTER._5Q; continue;
case INSTR_RSHQRSPR6: REGISTER.SPQ >>= REGISTER._6Q; continue;
case INSTR_RSHQRSPR7: REGISTER.SPQ >>= REGISTER._7Q; continue;
case INSTR_RSHQRSPR8: REGISTER.SPQ >>= REGISTER._8Q; continue;
case INSTR_RSHQRSPR9: REGISTER.SPQ >>= REGISTER._9Q; continue;
case INSTR_RSHQRSPR10: REGISTER.SPQ >>= REGISTER._10Q; continue;
case INSTR_RSHQRSPR11: REGISTER.SPQ >>= REGISTER._11Q; continue;
case INSTR_RSHQRSPR12: REGISTER.SPQ >>= REGISTER._12Q; continue;
case INSTR_RSHQRSPRIP: REGISTER.SPQ >>= REGISTER.IPQ; continue;
case INSTR_RSHQRSPRSP: REGISTER.SPQ >>= REGISTER.SPQ; continue;
case INSTR_RSHQRSPRBP: REGISTER.SPQ >>= REGISTER.BPQ; continue;
case INSTR_RSHQRBPI: REGISTER.BPQ >>= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_RSHQRBPRA: REGISTER.BPQ >>= REGISTER.AQ; continue;
case INSTR_RSHQRBPRB: REGISTER.BPQ >>= REGISTER.BQ; continue;
case INSTR_RSHQRBPRC: REGISTER.BPQ >>= REGISTER.CQ; continue;
case INSTR_RSHQRBPRD: REGISTER.BPQ >>= REGISTER.DQ; continue;
case INSTR_RSHQRBPR0: REGISTER.BPQ >>= REGISTER._0Q; continue;
case INSTR_RSHQRBPR1: REGISTER.BPQ >>= REGISTER._1Q; continue;
case INSTR_RSHQRBPR2: REGISTER.BPQ >>= REGISTER._2Q; continue;
case INSTR_RSHQRBPR3: REGISTER.BPQ >>= REGISTER._3Q; continue;
case INSTR_RSHQRBPR4: REGISTER.BPQ >>= REGISTER._4Q; continue;
case INSTR_RSHQRBPR5: REGISTER.BPQ >>= REGISTER._5Q; continue;
case INSTR_RSHQRBPR6: REGISTER.BPQ >>= REGISTER._6Q; continue;
case INSTR_RSHQRBPR7: REGISTER.BPQ >>= REGISTER._7Q; continue;
case INSTR_RSHQRBPR8: REGISTER.BPQ >>= REGISTER._8Q; continue;
case INSTR_RSHQRBPR9: REGISTER.BPQ >>= REGISTER._9Q; continue;
case INSTR_RSHQRBPR10: REGISTER.BPQ >>= REGISTER._10Q; continue;
case INSTR_RSHQRBPR11: REGISTER.BPQ >>= REGISTER._11Q; continue;
case INSTR_RSHQRBPR12: REGISTER.BPQ >>= REGISTER._12Q; continue;
case INSTR_RSHQRBPRIP: REGISTER.BPQ >>= REGISTER.IPQ; continue;
case INSTR_RSHQRBPRSP: REGISTER.BPQ >>= REGISTER.SPQ; continue;
case INSTR_RSHQRBPRBP: REGISTER.BPQ >>= REGISTER.BPQ; continue;
case INSTR_RSHWRAI: REGISTER.AW >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWRARA: REGISTER.AW >>= REGISTER.AW; continue;
case INSTR_RSHWRARB: REGISTER.AW >>= REGISTER.BW; continue;
case INSTR_RSHWRARC: REGISTER.AW >>= REGISTER.CW; continue;
case INSTR_RSHWRARD: REGISTER.AW >>= REGISTER.DW; continue;
case INSTR_RSHWRAR0: REGISTER.AW >>= REGISTER._0W; continue;
case INSTR_RSHWRAR1: REGISTER.AW >>= REGISTER._1W; continue;
case INSTR_RSHWRAR2: REGISTER.AW >>= REGISTER._2W; continue;
case INSTR_RSHWRAR3: REGISTER.AW >>= REGISTER._3W; continue;
case INSTR_RSHWRAR4: REGISTER.AW >>= REGISTER._4W; continue;
case INSTR_RSHWRAR5: REGISTER.AW >>= REGISTER._5W; continue;
case INSTR_RSHWRAR6: REGISTER.AW >>= REGISTER._6W; continue;
case INSTR_RSHWRAR7: REGISTER.AW >>= REGISTER._7W; continue;
case INSTR_RSHWRAR8: REGISTER.AW >>= REGISTER._8W; continue;
case INSTR_RSHWRAR9: REGISTER.AW >>= REGISTER._9W; continue;
case INSTR_RSHWRAR10: REGISTER.AW >>= REGISTER._10W; continue;
case INSTR_RSHWRAR11: REGISTER.AW >>= REGISTER._11W; continue;
case INSTR_RSHWRAR12: REGISTER.AW >>= REGISTER._12W; continue;
case INSTR_RSHWRARIP: REGISTER.AW >>= REGISTER.IPW; continue;
case INSTR_RSHWRARSP: REGISTER.AW >>= REGISTER.SPW; continue;
case INSTR_RSHWRARBP: REGISTER.AW >>= REGISTER.BPW; continue;
case INSTR_RSHWRBI: REGISTER.BW >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWRBRA: REGISTER.BW >>= REGISTER.AW; continue;
case INSTR_RSHWRBRB: REGISTER.BW >>= REGISTER.BW; continue;
case INSTR_RSHWRBRC: REGISTER.BW >>= REGISTER.CW; continue;
case INSTR_RSHWRBRD: REGISTER.BW >>= REGISTER.DW; continue;
case INSTR_RSHWRBR0: REGISTER.BW >>= REGISTER._0W; continue;
case INSTR_RSHWRBR1: REGISTER.BW >>= REGISTER._1W; continue;
case INSTR_RSHWRBR2: REGISTER.BW >>= REGISTER._2W; continue;
case INSTR_RSHWRBR3: REGISTER.BW >>= REGISTER._3W; continue;
case INSTR_RSHWRBR4: REGISTER.BW >>= REGISTER._4W; continue;
case INSTR_RSHWRBR5: REGISTER.BW >>= REGISTER._5W; continue;
case INSTR_RSHWRBR6: REGISTER.BW >>= REGISTER._6W; continue;
case INSTR_RSHWRBR7: REGISTER.BW >>= REGISTER._7W; continue;
case INSTR_RSHWRBR8: REGISTER.BW >>= REGISTER._8W; continue;
case INSTR_RSHWRBR9: REGISTER.BW >>= REGISTER._9W; continue;
case INSTR_RSHWRBR10: REGISTER.BW >>= REGISTER._10W; continue;
case INSTR_RSHWRBR11: REGISTER.BW >>= REGISTER._11W; continue;
case INSTR_RSHWRBR12: REGISTER.BW >>= REGISTER._12W; continue;
case INSTR_RSHWRBRIP: REGISTER.BW >>= REGISTER.IPW; continue;
case INSTR_RSHWRBRSP: REGISTER.BW >>= REGISTER.SPW; continue;
case INSTR_RSHWRBRBP: REGISTER.BW >>= REGISTER.BPW; continue;
case INSTR_RSHWRCI: REGISTER.CW >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWRCRA: REGISTER.CW >>= REGISTER.AW; continue;
case INSTR_RSHWRCRB: REGISTER.CW >>= REGISTER.BW; continue;
case INSTR_RSHWRCRC: REGISTER.CW >>= REGISTER.CW; continue;
case INSTR_RSHWRCRD: REGISTER.CW >>= REGISTER.DW; continue;
case INSTR_RSHWRCR0: REGISTER.CW >>= REGISTER._0W; continue;
case INSTR_RSHWRCR1: REGISTER.CW >>= REGISTER._1W; continue;
case INSTR_RSHWRCR2: REGISTER.CW >>= REGISTER._2W; continue;
case INSTR_RSHWRCR3: REGISTER.CW >>= REGISTER._3W; continue;
case INSTR_RSHWRCR4: REGISTER.CW >>= REGISTER._4W; continue;
case INSTR_RSHWRCR5: REGISTER.CW >>= REGISTER._5W; continue;
case INSTR_RSHWRCR6: REGISTER.CW >>= REGISTER._6W; continue;
case INSTR_RSHWRCR7: REGISTER.CW >>= REGISTER._7W; continue;
case INSTR_RSHWRCR8: REGISTER.CW >>= REGISTER._8W; continue;
case INSTR_RSHWRCR9: REGISTER.CW >>= REGISTER._9W; continue;
case INSTR_RSHWRCR10: REGISTER.CW >>= REGISTER._10W; continue;
case INSTR_RSHWRCR11: REGISTER.CW >>= REGISTER._11W; continue;
case INSTR_RSHWRCR12: REGISTER.CW >>= REGISTER._12W; continue;
case INSTR_RSHWRCRIP: REGISTER.CW >>= REGISTER.IPW; continue;
case INSTR_RSHWRCRSP: REGISTER.CW >>= REGISTER.SPW; continue;
case INSTR_RSHWRCRBP: REGISTER.CW >>= REGISTER.BPW; continue;
case INSTR_RSHWRDI: REGISTER.DW >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWRDRA: REGISTER.DW >>= REGISTER.AW; continue;
case INSTR_RSHWRDRB: REGISTER.DW >>= REGISTER.BW; continue;
case INSTR_RSHWRDRC: REGISTER.DW >>= REGISTER.CW; continue;
case INSTR_RSHWRDRD: REGISTER.DW >>= REGISTER.DW; continue;
case INSTR_RSHWRDR0: REGISTER.DW >>= REGISTER._0W; continue;
case INSTR_RSHWRDR1: REGISTER.DW >>= REGISTER._1W; continue;
case INSTR_RSHWRDR2: REGISTER.DW >>= REGISTER._2W; continue;
case INSTR_RSHWRDR3: REGISTER.DW >>= REGISTER._3W; continue;
case INSTR_RSHWRDR4: REGISTER.DW >>= REGISTER._4W; continue;
case INSTR_RSHWRDR5: REGISTER.DW >>= REGISTER._5W; continue;
case INSTR_RSHWRDR6: REGISTER.DW >>= REGISTER._6W; continue;
case INSTR_RSHWRDR7: REGISTER.DW >>= REGISTER._7W; continue;
case INSTR_RSHWRDR8: REGISTER.DW >>= REGISTER._8W; continue;
case INSTR_RSHWRDR9: REGISTER.DW >>= REGISTER._9W; continue;
case INSTR_RSHWRDR10: REGISTER.DW >>= REGISTER._10W; continue;
case INSTR_RSHWRDR11: REGISTER.DW >>= REGISTER._11W; continue;
case INSTR_RSHWRDR12: REGISTER.DW >>= REGISTER._12W; continue;
case INSTR_RSHWRDRIP: REGISTER.DW >>= REGISTER.IPW; continue;
case INSTR_RSHWRDRSP: REGISTER.DW >>= REGISTER.SPW; continue;
case INSTR_RSHWRDRBP: REGISTER.DW >>= REGISTER.BPW; continue;
case INSTR_RSHWR0I: REGISTER._0W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR0RA: REGISTER._0W >>= REGISTER.AW; continue;
case INSTR_RSHWR0RB: REGISTER._0W >>= REGISTER.BW; continue;
case INSTR_RSHWR0RC: REGISTER._0W >>= REGISTER.CW; continue;
case INSTR_RSHWR0RD: REGISTER._0W >>= REGISTER.DW; continue;
case INSTR_RSHWR0R0: REGISTER._0W >>= REGISTER._0W; continue;
case INSTR_RSHWR0R1: REGISTER._0W >>= REGISTER._1W; continue;
case INSTR_RSHWR0R2: REGISTER._0W >>= REGISTER._2W; continue;
case INSTR_RSHWR0R3: REGISTER._0W >>= REGISTER._3W; continue;
case INSTR_RSHWR0R4: REGISTER._0W >>= REGISTER._4W; continue;
case INSTR_RSHWR0R5: REGISTER._0W >>= REGISTER._5W; continue;
case INSTR_RSHWR0R6: REGISTER._0W >>= REGISTER._6W; continue;
case INSTR_RSHWR0R7: REGISTER._0W >>= REGISTER._7W; continue;
case INSTR_RSHWR0R8: REGISTER._0W >>= REGISTER._8W; continue;
case INSTR_RSHWR0R9: REGISTER._0W >>= REGISTER._9W; continue;
case INSTR_RSHWR0R10: REGISTER._0W >>= REGISTER._10W; continue;
case INSTR_RSHWR0R11: REGISTER._0W >>= REGISTER._11W; continue;
case INSTR_RSHWR0R12: REGISTER._0W >>= REGISTER._12W; continue;
case INSTR_RSHWR0RIP: REGISTER._0W >>= REGISTER.IPW; continue;
case INSTR_RSHWR0RSP: REGISTER._0W >>= REGISTER.SPW; continue;
case INSTR_RSHWR0RBP: REGISTER._0W >>= REGISTER.BPW; continue;
case INSTR_RSHWR1I: REGISTER._1W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR1RA: REGISTER._1W >>= REGISTER.AW; continue;
case INSTR_RSHWR1RB: REGISTER._1W >>= REGISTER.BW; continue;
case INSTR_RSHWR1RC: REGISTER._1W >>= REGISTER.CW; continue;
case INSTR_RSHWR1RD: REGISTER._1W >>= REGISTER.DW; continue;
case INSTR_RSHWR1R0: REGISTER._1W >>= REGISTER._0W; continue;
case INSTR_RSHWR1R1: REGISTER._1W >>= REGISTER._1W; continue;
case INSTR_RSHWR1R2: REGISTER._1W >>= REGISTER._2W; continue;
case INSTR_RSHWR1R3: REGISTER._1W >>= REGISTER._3W; continue;
case INSTR_RSHWR1R4: REGISTER._1W >>= REGISTER._4W; continue;
case INSTR_RSHWR1R5: REGISTER._1W >>= REGISTER._5W; continue;
case INSTR_RSHWR1R6: REGISTER._1W >>= REGISTER._6W; continue;
case INSTR_RSHWR1R7: REGISTER._1W >>= REGISTER._7W; continue;
case INSTR_RSHWR1R8: REGISTER._1W >>= REGISTER._8W; continue;
case INSTR_RSHWR1R9: REGISTER._1W >>= REGISTER._9W; continue;
case INSTR_RSHWR1R10: REGISTER._1W >>= REGISTER._10W; continue;
case INSTR_RSHWR1R11: REGISTER._1W >>= REGISTER._11W; continue;
case INSTR_RSHWR1R12: REGISTER._1W >>= REGISTER._12W; continue;
case INSTR_RSHWR1RIP: REGISTER._1W >>= REGISTER.IPW; continue;
case INSTR_RSHWR1RSP: REGISTER._1W >>= REGISTER.SPW; continue;
case INSTR_RSHWR1RBP: REGISTER._1W >>= REGISTER.BPW; continue;
case INSTR_RSHWR2I: REGISTER._2W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR2RA: REGISTER._2W >>= REGISTER.AW; continue;
case INSTR_RSHWR2RB: REGISTER._2W >>= REGISTER.BW; continue;
case INSTR_RSHWR2RC: REGISTER._2W >>= REGISTER.CW; continue;
case INSTR_RSHWR2RD: REGISTER._2W >>= REGISTER.DW; continue;
case INSTR_RSHWR2R0: REGISTER._2W >>= REGISTER._0W; continue;
case INSTR_RSHWR2R1: REGISTER._2W >>= REGISTER._1W; continue;
case INSTR_RSHWR2R2: REGISTER._2W >>= REGISTER._2W; continue;
case INSTR_RSHWR2R3: REGISTER._2W >>= REGISTER._3W; continue;
case INSTR_RSHWR2R4: REGISTER._2W >>= REGISTER._4W; continue;
case INSTR_RSHWR2R5: REGISTER._2W >>= REGISTER._5W; continue;
case INSTR_RSHWR2R6: REGISTER._2W >>= REGISTER._6W; continue;
case INSTR_RSHWR2R7: REGISTER._2W >>= REGISTER._7W; continue;
case INSTR_RSHWR2R8: REGISTER._2W >>= REGISTER._8W; continue;
case INSTR_RSHWR2R9: REGISTER._2W >>= REGISTER._9W; continue;
case INSTR_RSHWR2R10: REGISTER._2W >>= REGISTER._10W; continue;
case INSTR_RSHWR2R11: REGISTER._2W >>= REGISTER._11W; continue;
case INSTR_RSHWR2R12: REGISTER._2W >>= REGISTER._12W; continue;
case INSTR_RSHWR2RIP: REGISTER._2W >>= REGISTER.IPW; continue;
case INSTR_RSHWR2RSP: REGISTER._2W >>= REGISTER.SPW; continue;
case INSTR_RSHWR2RBP: REGISTER._2W >>= REGISTER.BPW; continue;
case INSTR_RSHWR3I: REGISTER._3W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR3RA: REGISTER._3W >>= REGISTER.AW; continue;
case INSTR_RSHWR3RB: REGISTER._3W >>= REGISTER.BW; continue;
case INSTR_RSHWR3RC: REGISTER._3W >>= REGISTER.CW; continue;
case INSTR_RSHWR3RD: REGISTER._3W >>= REGISTER.DW; continue;
case INSTR_RSHWR3R0: REGISTER._3W >>= REGISTER._0W; continue;
case INSTR_RSHWR3R1: REGISTER._3W >>= REGISTER._1W; continue;
case INSTR_RSHWR3R2: REGISTER._3W >>= REGISTER._2W; continue;
case INSTR_RSHWR3R3: REGISTER._3W >>= REGISTER._3W; continue;
case INSTR_RSHWR3R4: REGISTER._3W >>= REGISTER._4W; continue;
case INSTR_RSHWR3R5: REGISTER._3W >>= REGISTER._5W; continue;
case INSTR_RSHWR3R6: REGISTER._3W >>= REGISTER._6W; continue;
case INSTR_RSHWR3R7: REGISTER._3W >>= REGISTER._7W; continue;
case INSTR_RSHWR3R8: REGISTER._3W >>= REGISTER._8W; continue;
case INSTR_RSHWR3R9: REGISTER._3W >>= REGISTER._9W; continue;
case INSTR_RSHWR3R10: REGISTER._3W >>= REGISTER._10W; continue;
case INSTR_RSHWR3R11: REGISTER._3W >>= REGISTER._11W; continue;
case INSTR_RSHWR3R12: REGISTER._3W >>= REGISTER._12W; continue;
case INSTR_RSHWR3RIP: REGISTER._3W >>= REGISTER.IPW; continue;
case INSTR_RSHWR3RSP: REGISTER._3W >>= REGISTER.SPW; continue;
case INSTR_RSHWR3RBP: REGISTER._3W >>= REGISTER.BPW; continue;
case INSTR_RSHWR4I: REGISTER._4W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR4RA: REGISTER._4W >>= REGISTER.AW; continue;
case INSTR_RSHWR4RB: REGISTER._4W >>= REGISTER.BW; continue;
case INSTR_RSHWR4RC: REGISTER._4W >>= REGISTER.CW; continue;
case INSTR_RSHWR4RD: REGISTER._4W >>= REGISTER.DW; continue;
case INSTR_RSHWR4R0: REGISTER._4W >>= REGISTER._0W; continue;
case INSTR_RSHWR4R1: REGISTER._4W >>= REGISTER._1W; continue;
case INSTR_RSHWR4R2: REGISTER._4W >>= REGISTER._2W; continue;
case INSTR_RSHWR4R3: REGISTER._4W >>= REGISTER._3W; continue;
case INSTR_RSHWR4R4: REGISTER._4W >>= REGISTER._4W; continue;
case INSTR_RSHWR4R5: REGISTER._4W >>= REGISTER._5W; continue;
case INSTR_RSHWR4R6: REGISTER._4W >>= REGISTER._6W; continue;
case INSTR_RSHWR4R7: REGISTER._4W >>= REGISTER._7W; continue;
case INSTR_RSHWR4R8: REGISTER._4W >>= REGISTER._8W; continue;
case INSTR_RSHWR4R9: REGISTER._4W >>= REGISTER._9W; continue;
case INSTR_RSHWR4R10: REGISTER._4W >>= REGISTER._10W; continue;
case INSTR_RSHWR4R11: REGISTER._4W >>= REGISTER._11W; continue;
case INSTR_RSHWR4R12: REGISTER._4W >>= REGISTER._12W; continue;
case INSTR_RSHWR4RIP: REGISTER._4W >>= REGISTER.IPW; continue;
case INSTR_RSHWR4RSP: REGISTER._4W >>= REGISTER.SPW; continue;
case INSTR_RSHWR4RBP: REGISTER._4W >>= REGISTER.BPW; continue;
case INSTR_RSHWR5I: REGISTER._5W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR5RA: REGISTER._5W >>= REGISTER.AW; continue;
case INSTR_RSHWR5RB: REGISTER._5W >>= REGISTER.BW; continue;
case INSTR_RSHWR5RC: REGISTER._5W >>= REGISTER.CW; continue;
case INSTR_RSHWR5RD: REGISTER._5W >>= REGISTER.DW; continue;
case INSTR_RSHWR5R0: REGISTER._5W >>= REGISTER._0W; continue;
case INSTR_RSHWR5R1: REGISTER._5W >>= REGISTER._1W; continue;
case INSTR_RSHWR5R2: REGISTER._5W >>= REGISTER._2W; continue;
case INSTR_RSHWR5R3: REGISTER._5W >>= REGISTER._3W; continue;
case INSTR_RSHWR5R4: REGISTER._5W >>= REGISTER._4W; continue;
case INSTR_RSHWR5R5: REGISTER._5W >>= REGISTER._5W; continue;
case INSTR_RSHWR5R6: REGISTER._5W >>= REGISTER._6W; continue;
case INSTR_RSHWR5R7: REGISTER._5W >>= REGISTER._7W; continue;
case INSTR_RSHWR5R8: REGISTER._5W >>= REGISTER._8W; continue;
case INSTR_RSHWR5R9: REGISTER._5W >>= REGISTER._9W; continue;
case INSTR_RSHWR5R10: REGISTER._5W >>= REGISTER._10W; continue;
case INSTR_RSHWR5R11: REGISTER._5W >>= REGISTER._11W; continue;
case INSTR_RSHWR5R12: REGISTER._5W >>= REGISTER._12W; continue;
case INSTR_RSHWR5RIP: REGISTER._5W >>= REGISTER.IPW; continue;
case INSTR_RSHWR5RSP: REGISTER._5W >>= REGISTER.SPW; continue;
case INSTR_RSHWR5RBP: REGISTER._5W >>= REGISTER.BPW; continue;
case INSTR_RSHWR6I: REGISTER._6W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR6RA: REGISTER._6W >>= REGISTER.AW; continue;
case INSTR_RSHWR6RB: REGISTER._6W >>= REGISTER.BW; continue;
case INSTR_RSHWR6RC: REGISTER._6W >>= REGISTER.CW; continue;
case INSTR_RSHWR6RD: REGISTER._6W >>= REGISTER.DW; continue;
case INSTR_RSHWR6R0: REGISTER._6W >>= REGISTER._0W; continue;
case INSTR_RSHWR6R1: REGISTER._6W >>= REGISTER._1W; continue;
case INSTR_RSHWR6R2: REGISTER._6W >>= REGISTER._2W; continue;
case INSTR_RSHWR6R3: REGISTER._6W >>= REGISTER._3W; continue;
case INSTR_RSHWR6R4: REGISTER._6W >>= REGISTER._4W; continue;
case INSTR_RSHWR6R5: REGISTER._6W >>= REGISTER._5W; continue;
case INSTR_RSHWR6R6: REGISTER._6W >>= REGISTER._6W; continue;
case INSTR_RSHWR6R7: REGISTER._6W >>= REGISTER._7W; continue;
case INSTR_RSHWR6R8: REGISTER._6W >>= REGISTER._8W; continue;
case INSTR_RSHWR6R9: REGISTER._6W >>= REGISTER._9W; continue;
case INSTR_RSHWR6R10: REGISTER._6W >>= REGISTER._10W; continue;
case INSTR_RSHWR6R11: REGISTER._6W >>= REGISTER._11W; continue;
case INSTR_RSHWR6R12: REGISTER._6W >>= REGISTER._12W; continue;
case INSTR_RSHWR6RIP: REGISTER._6W >>= REGISTER.IPW; continue;
case INSTR_RSHWR6RSP: REGISTER._6W >>= REGISTER.SPW; continue;
case INSTR_RSHWR6RBP: REGISTER._6W >>= REGISTER.BPW; continue;
case INSTR_RSHWR7I: REGISTER._7W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR7RA: REGISTER._7W >>= REGISTER.AW; continue;
case INSTR_RSHWR7RB: REGISTER._7W >>= REGISTER.BW; continue;
case INSTR_RSHWR7RC: REGISTER._7W >>= REGISTER.CW; continue;
case INSTR_RSHWR7RD: REGISTER._7W >>= REGISTER.DW; continue;
case INSTR_RSHWR7R0: REGISTER._7W >>= REGISTER._0W; continue;
case INSTR_RSHWR7R1: REGISTER._7W >>= REGISTER._1W; continue;
case INSTR_RSHWR7R2: REGISTER._7W >>= REGISTER._2W; continue;
case INSTR_RSHWR7R3: REGISTER._7W >>= REGISTER._3W; continue;
case INSTR_RSHWR7R4: REGISTER._7W >>= REGISTER._4W; continue;
case INSTR_RSHWR7R5: REGISTER._7W >>= REGISTER._5W; continue;
case INSTR_RSHWR7R6: REGISTER._7W >>= REGISTER._6W; continue;
case INSTR_RSHWR7R7: REGISTER._7W >>= REGISTER._7W; continue;
case INSTR_RSHWR7R8: REGISTER._7W >>= REGISTER._8W; continue;
case INSTR_RSHWR7R9: REGISTER._7W >>= REGISTER._9W; continue;
case INSTR_RSHWR7R10: REGISTER._7W >>= REGISTER._10W; continue;
case INSTR_RSHWR7R11: REGISTER._7W >>= REGISTER._11W; continue;
case INSTR_RSHWR7R12: REGISTER._7W >>= REGISTER._12W; continue;
case INSTR_RSHWR7RIP: REGISTER._7W >>= REGISTER.IPW; continue;
case INSTR_RSHWR7RSP: REGISTER._7W >>= REGISTER.SPW; continue;
case INSTR_RSHWR7RBP: REGISTER._7W >>= REGISTER.BPW; continue;
case INSTR_RSHWR8I: REGISTER._8W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR8RA: REGISTER._8W >>= REGISTER.AW; continue;
case INSTR_RSHWR8RB: REGISTER._8W >>= REGISTER.BW; continue;
case INSTR_RSHWR8RC: REGISTER._8W >>= REGISTER.CW; continue;
case INSTR_RSHWR8RD: REGISTER._8W >>= REGISTER.DW; continue;
case INSTR_RSHWR8R0: REGISTER._8W >>= REGISTER._0W; continue;
case INSTR_RSHWR8R1: REGISTER._8W >>= REGISTER._1W; continue;
case INSTR_RSHWR8R2: REGISTER._8W >>= REGISTER._2W; continue;
case INSTR_RSHWR8R3: REGISTER._8W >>= REGISTER._3W; continue;
case INSTR_RSHWR8R4: REGISTER._8W >>= REGISTER._4W; continue;
case INSTR_RSHWR8R5: REGISTER._8W >>= REGISTER._5W; continue;
case INSTR_RSHWR8R6: REGISTER._8W >>= REGISTER._6W; continue;
case INSTR_RSHWR8R7: REGISTER._8W >>= REGISTER._7W; continue;
case INSTR_RSHWR8R8: REGISTER._8W >>= REGISTER._8W; continue;
case INSTR_RSHWR8R9: REGISTER._8W >>= REGISTER._9W; continue;
case INSTR_RSHWR8R10: REGISTER._8W >>= REGISTER._10W; continue;
case INSTR_RSHWR8R11: REGISTER._8W >>= REGISTER._11W; continue;
case INSTR_RSHWR8R12: REGISTER._8W >>= REGISTER._12W; continue;
case INSTR_RSHWR8RIP: REGISTER._8W >>= REGISTER.IPW; continue;
case INSTR_RSHWR8RSP: REGISTER._8W >>= REGISTER.SPW; continue;
case INSTR_RSHWR8RBP: REGISTER._8W >>= REGISTER.BPW; continue;
case INSTR_RSHWR9I: REGISTER._9W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR9RA: REGISTER._9W >>= REGISTER.AW; continue;
case INSTR_RSHWR9RB: REGISTER._9W >>= REGISTER.BW; continue;
case INSTR_RSHWR9RC: REGISTER._9W >>= REGISTER.CW; continue;
case INSTR_RSHWR9RD: REGISTER._9W >>= REGISTER.DW; continue;
case INSTR_RSHWR9R0: REGISTER._9W >>= REGISTER._0W; continue;
case INSTR_RSHWR9R1: REGISTER._9W >>= REGISTER._1W; continue;
case INSTR_RSHWR9R2: REGISTER._9W >>= REGISTER._2W; continue;
case INSTR_RSHWR9R3: REGISTER._9W >>= REGISTER._3W; continue;
case INSTR_RSHWR9R4: REGISTER._9W >>= REGISTER._4W; continue;
case INSTR_RSHWR9R5: REGISTER._9W >>= REGISTER._5W; continue;
case INSTR_RSHWR9R6: REGISTER._9W >>= REGISTER._6W; continue;
case INSTR_RSHWR9R7: REGISTER._9W >>= REGISTER._7W; continue;
case INSTR_RSHWR9R8: REGISTER._9W >>= REGISTER._8W; continue;
case INSTR_RSHWR9R9: REGISTER._9W >>= REGISTER._9W; continue;
case INSTR_RSHWR9R10: REGISTER._9W >>= REGISTER._10W; continue;
case INSTR_RSHWR9R11: REGISTER._9W >>= REGISTER._11W; continue;
case INSTR_RSHWR9R12: REGISTER._9W >>= REGISTER._12W; continue;
case INSTR_RSHWR9RIP: REGISTER._9W >>= REGISTER.IPW; continue;
case INSTR_RSHWR9RSP: REGISTER._9W >>= REGISTER.SPW; continue;
case INSTR_RSHWR9RBP: REGISTER._9W >>= REGISTER.BPW; continue;
case INSTR_RSHWR10I: REGISTER._10W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR10RA: REGISTER._10W >>= REGISTER.AW; continue;
case INSTR_RSHWR10RB: REGISTER._10W >>= REGISTER.BW; continue;
case INSTR_RSHWR10RC: REGISTER._10W >>= REGISTER.CW; continue;
case INSTR_RSHWR10RD: REGISTER._10W >>= REGISTER.DW; continue;
case INSTR_RSHWR10R0: REGISTER._10W >>= REGISTER._0W; continue;
case INSTR_RSHWR10R1: REGISTER._10W >>= REGISTER._1W; continue;
case INSTR_RSHWR10R2: REGISTER._10W >>= REGISTER._2W; continue;
case INSTR_RSHWR10R3: REGISTER._10W >>= REGISTER._3W; continue;
case INSTR_RSHWR10R4: REGISTER._10W >>= REGISTER._4W; continue;
case INSTR_RSHWR10R5: REGISTER._10W >>= REGISTER._5W; continue;
case INSTR_RSHWR10R6: REGISTER._10W >>= REGISTER._6W; continue;
case INSTR_RSHWR10R7: REGISTER._10W >>= REGISTER._7W; continue;
case INSTR_RSHWR10R8: REGISTER._10W >>= REGISTER._8W; continue;
case INSTR_RSHWR10R9: REGISTER._10W >>= REGISTER._9W; continue;
case INSTR_RSHWR10R10: REGISTER._10W >>= REGISTER._10W; continue;
case INSTR_RSHWR10R11: REGISTER._10W >>= REGISTER._11W; continue;
case INSTR_RSHWR10R12: REGISTER._10W >>= REGISTER._12W; continue;
case INSTR_RSHWR10RIP: REGISTER._10W >>= REGISTER.IPW; continue;
case INSTR_RSHWR10RSP: REGISTER._10W >>= REGISTER.SPW; continue;
case INSTR_RSHWR10RBP: REGISTER._10W >>= REGISTER.BPW; continue;
case INSTR_RSHWR11I: REGISTER._11W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR11RA: REGISTER._11W >>= REGISTER.AW; continue;
case INSTR_RSHWR11RB: REGISTER._11W >>= REGISTER.BW; continue;
case INSTR_RSHWR11RC: REGISTER._11W >>= REGISTER.CW; continue;
case INSTR_RSHWR11RD: REGISTER._11W >>= REGISTER.DW; continue;
case INSTR_RSHWR11R0: REGISTER._11W >>= REGISTER._0W; continue;
case INSTR_RSHWR11R1: REGISTER._11W >>= REGISTER._1W; continue;
case INSTR_RSHWR11R2: REGISTER._11W >>= REGISTER._2W; continue;
case INSTR_RSHWR11R3: REGISTER._11W >>= REGISTER._3W; continue;
case INSTR_RSHWR11R4: REGISTER._11W >>= REGISTER._4W; continue;
case INSTR_RSHWR11R5: REGISTER._11W >>= REGISTER._5W; continue;
case INSTR_RSHWR11R6: REGISTER._11W >>= REGISTER._6W; continue;
case INSTR_RSHWR11R7: REGISTER._11W >>= REGISTER._7W; continue;
case INSTR_RSHWR11R8: REGISTER._11W >>= REGISTER._8W; continue;
case INSTR_RSHWR11R9: REGISTER._11W >>= REGISTER._9W; continue;
case INSTR_RSHWR11R10: REGISTER._11W >>= REGISTER._10W; continue;
case INSTR_RSHWR11R11: REGISTER._11W >>= REGISTER._11W; continue;
case INSTR_RSHWR11R12: REGISTER._11W >>= REGISTER._12W; continue;
case INSTR_RSHWR11RIP: REGISTER._11W >>= REGISTER.IPW; continue;
case INSTR_RSHWR11RSP: REGISTER._11W >>= REGISTER.SPW; continue;
case INSTR_RSHWR11RBP: REGISTER._11W >>= REGISTER.BPW; continue;
case INSTR_RSHWR12I: REGISTER._12W >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWR12RA: REGISTER._12W >>= REGISTER.AW; continue;
case INSTR_RSHWR12RB: REGISTER._12W >>= REGISTER.BW; continue;
case INSTR_RSHWR12RC: REGISTER._12W >>= REGISTER.CW; continue;
case INSTR_RSHWR12RD: REGISTER._12W >>= REGISTER.DW; continue;
case INSTR_RSHWR12R0: REGISTER._12W >>= REGISTER._0W; continue;
case INSTR_RSHWR12R1: REGISTER._12W >>= REGISTER._1W; continue;
case INSTR_RSHWR12R2: REGISTER._12W >>= REGISTER._2W; continue;
case INSTR_RSHWR12R3: REGISTER._12W >>= REGISTER._3W; continue;
case INSTR_RSHWR12R4: REGISTER._12W >>= REGISTER._4W; continue;
case INSTR_RSHWR12R5: REGISTER._12W >>= REGISTER._5W; continue;
case INSTR_RSHWR12R6: REGISTER._12W >>= REGISTER._6W; continue;
case INSTR_RSHWR12R7: REGISTER._12W >>= REGISTER._7W; continue;
case INSTR_RSHWR12R8: REGISTER._12W >>= REGISTER._8W; continue;
case INSTR_RSHWR12R9: REGISTER._12W >>= REGISTER._9W; continue;
case INSTR_RSHWR12R10: REGISTER._12W >>= REGISTER._10W; continue;
case INSTR_RSHWR12R11: REGISTER._12W >>= REGISTER._11W; continue;
case INSTR_RSHWR12R12: REGISTER._12W >>= REGISTER._12W; continue;
case INSTR_RSHWR12RIP: REGISTER._12W >>= REGISTER.IPW; continue;
case INSTR_RSHWR12RSP: REGISTER._12W >>= REGISTER.SPW; continue;
case INSTR_RSHWR12RBP: REGISTER._12W >>= REGISTER.BPW; continue;
case INSTR_RSHWRIPI: REGISTER.IPW >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWRIPRA: REGISTER.IPW >>= REGISTER.AW; continue;
case INSTR_RSHWRIPRB: REGISTER.IPW >>= REGISTER.BW; continue;
case INSTR_RSHWRIPRC: REGISTER.IPW >>= REGISTER.CW; continue;
case INSTR_RSHWRIPRD: REGISTER.IPW >>= REGISTER.DW; continue;
case INSTR_RSHWRIPR0: REGISTER.IPW >>= REGISTER._0W; continue;
case INSTR_RSHWRIPR1: REGISTER.IPW >>= REGISTER._1W; continue;
case INSTR_RSHWRIPR2: REGISTER.IPW >>= REGISTER._2W; continue;
case INSTR_RSHWRIPR3: REGISTER.IPW >>= REGISTER._3W; continue;
case INSTR_RSHWRIPR4: REGISTER.IPW >>= REGISTER._4W; continue;
case INSTR_RSHWRIPR5: REGISTER.IPW >>= REGISTER._5W; continue;
case INSTR_RSHWRIPR6: REGISTER.IPW >>= REGISTER._6W; continue;
case INSTR_RSHWRIPR7: REGISTER.IPW >>= REGISTER._7W; continue;
case INSTR_RSHWRIPR8: REGISTER.IPW >>= REGISTER._8W; continue;
case INSTR_RSHWRIPR9: REGISTER.IPW >>= REGISTER._9W; continue;
case INSTR_RSHWRIPR10: REGISTER.IPW >>= REGISTER._10W; continue;
case INSTR_RSHWRIPR11: REGISTER.IPW >>= REGISTER._11W; continue;
case INSTR_RSHWRIPR12: REGISTER.IPW >>= REGISTER._12W; continue;
case INSTR_RSHWRIPRIP: REGISTER.IPW >>= REGISTER.IPW; continue;
case INSTR_RSHWRIPRSP: REGISTER.IPW >>= REGISTER.SPW; continue;
case INSTR_RSHWRIPRBP: REGISTER.IPW >>= REGISTER.BPW; continue;
case INSTR_RSHWRSPI: REGISTER.SPW >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWRSPRA: REGISTER.SPW >>= REGISTER.AW; continue;
case INSTR_RSHWRSPRB: REGISTER.SPW >>= REGISTER.BW; continue;
case INSTR_RSHWRSPRC: REGISTER.SPW >>= REGISTER.CW; continue;
case INSTR_RSHWRSPRD: REGISTER.SPW >>= REGISTER.DW; continue;
case INSTR_RSHWRSPR0: REGISTER.SPW >>= REGISTER._0W; continue;
case INSTR_RSHWRSPR1: REGISTER.SPW >>= REGISTER._1W; continue;
case INSTR_RSHWRSPR2: REGISTER.SPW >>= REGISTER._2W; continue;
case INSTR_RSHWRSPR3: REGISTER.SPW >>= REGISTER._3W; continue;
case INSTR_RSHWRSPR4: REGISTER.SPW >>= REGISTER._4W; continue;
case INSTR_RSHWRSPR5: REGISTER.SPW >>= REGISTER._5W; continue;
case INSTR_RSHWRSPR6: REGISTER.SPW >>= REGISTER._6W; continue;
case INSTR_RSHWRSPR7: REGISTER.SPW >>= REGISTER._7W; continue;
case INSTR_RSHWRSPR8: REGISTER.SPW >>= REGISTER._8W; continue;
case INSTR_RSHWRSPR9: REGISTER.SPW >>= REGISTER._9W; continue;
case INSTR_RSHWRSPR10: REGISTER.SPW >>= REGISTER._10W; continue;
case INSTR_RSHWRSPR11: REGISTER.SPW >>= REGISTER._11W; continue;
case INSTR_RSHWRSPR12: REGISTER.SPW >>= REGISTER._12W; continue;
case INSTR_RSHWRSPRIP: REGISTER.SPW >>= REGISTER.IPW; continue;
case INSTR_RSHWRSPRSP: REGISTER.SPW >>= REGISTER.SPW; continue;
case INSTR_RSHWRSPRBP: REGISTER.SPW >>= REGISTER.BPW; continue;
case INSTR_RSHWRBPI: REGISTER.BPW >>= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_RSHWRBPRA: REGISTER.BPW >>= REGISTER.AW; continue;
case INSTR_RSHWRBPRB: REGISTER.BPW >>= REGISTER.BW; continue;
case INSTR_RSHWRBPRC: REGISTER.BPW >>= REGISTER.CW; continue;
case INSTR_RSHWRBPRD: REGISTER.BPW >>= REGISTER.DW; continue;
case INSTR_RSHWRBPR0: REGISTER.BPW >>= REGISTER._0W; continue;
case INSTR_RSHWRBPR1: REGISTER.BPW >>= REGISTER._1W; continue;
case INSTR_RSHWRBPR2: REGISTER.BPW >>= REGISTER._2W; continue;
case INSTR_RSHWRBPR3: REGISTER.BPW >>= REGISTER._3W; continue;
case INSTR_RSHWRBPR4: REGISTER.BPW >>= REGISTER._4W; continue;
case INSTR_RSHWRBPR5: REGISTER.BPW >>= REGISTER._5W; continue;
case INSTR_RSHWRBPR6: REGISTER.BPW >>= REGISTER._6W; continue;
case INSTR_RSHWRBPR7: REGISTER.BPW >>= REGISTER._7W; continue;
case INSTR_RSHWRBPR8: REGISTER.BPW >>= REGISTER._8W; continue;
case INSTR_RSHWRBPR9: REGISTER.BPW >>= REGISTER._9W; continue;
case INSTR_RSHWRBPR10: REGISTER.BPW >>= REGISTER._10W; continue;
case INSTR_RSHWRBPR11: REGISTER.BPW >>= REGISTER._11W; continue;
case INSTR_RSHWRBPR12: REGISTER.BPW >>= REGISTER._12W; continue;
case INSTR_RSHWRBPRIP: REGISTER.BPW >>= REGISTER.IPW; continue;
case INSTR_RSHWRBPRSP: REGISTER.BPW >>= REGISTER.SPW; continue;
case INSTR_RSHWRBPRBP: REGISTER.BPW >>= REGISTER.BPW; continue;
case INSTR_RSHBRAI: REGISTER.AB >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBRARA: REGISTER.AB >>= REGISTER.AB; continue;
case INSTR_RSHBRARB: REGISTER.AB >>= REGISTER.BB; continue;
case INSTR_RSHBRARC: REGISTER.AB >>= REGISTER.CB; continue;
case INSTR_RSHBRARD: REGISTER.AB >>= REGISTER.DB; continue;
case INSTR_RSHBRAR0: REGISTER.AB >>= REGISTER._0B; continue;
case INSTR_RSHBRAR1: REGISTER.AB >>= REGISTER._1B; continue;
case INSTR_RSHBRAR2: REGISTER.AB >>= REGISTER._2B; continue;
case INSTR_RSHBRAR3: REGISTER.AB >>= REGISTER._3B; continue;
case INSTR_RSHBRAR4: REGISTER.AB >>= REGISTER._4B; continue;
case INSTR_RSHBRAR5: REGISTER.AB >>= REGISTER._5B; continue;
case INSTR_RSHBRAR6: REGISTER.AB >>= REGISTER._6B; continue;
case INSTR_RSHBRAR7: REGISTER.AB >>= REGISTER._7B; continue;
case INSTR_RSHBRAR8: REGISTER.AB >>= REGISTER._8B; continue;
case INSTR_RSHBRAR9: REGISTER.AB >>= REGISTER._9B; continue;
case INSTR_RSHBRAR10: REGISTER.AB >>= REGISTER._10B; continue;
case INSTR_RSHBRAR11: REGISTER.AB >>= REGISTER._11B; continue;
case INSTR_RSHBRAR12: REGISTER.AB >>= REGISTER._12B; continue;
case INSTR_RSHBRARIP: REGISTER.AB >>= REGISTER.IPB; continue;
case INSTR_RSHBRARSP: REGISTER.AB >>= REGISTER.SPB; continue;
case INSTR_RSHBRARBP: REGISTER.AB >>= REGISTER.BPB; continue;
case INSTR_RSHBRBI: REGISTER.BB >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBRBRA: REGISTER.BB >>= REGISTER.AB; continue;
case INSTR_RSHBRBRB: REGISTER.BB >>= REGISTER.BB; continue;
case INSTR_RSHBRBRC: REGISTER.BB >>= REGISTER.CB; continue;
case INSTR_RSHBRBRD: REGISTER.BB >>= REGISTER.DB; continue;
case INSTR_RSHBRBR0: REGISTER.BB >>= REGISTER._0B; continue;
case INSTR_RSHBRBR1: REGISTER.BB >>= REGISTER._1B; continue;
case INSTR_RSHBRBR2: REGISTER.BB >>= REGISTER._2B; continue;
case INSTR_RSHBRBR3: REGISTER.BB >>= REGISTER._3B; continue;
case INSTR_RSHBRBR4: REGISTER.BB >>= REGISTER._4B; continue;
case INSTR_RSHBRBR5: REGISTER.BB >>= REGISTER._5B; continue;
case INSTR_RSHBRBR6: REGISTER.BB >>= REGISTER._6B; continue;
case INSTR_RSHBRBR7: REGISTER.BB >>= REGISTER._7B; continue;
case INSTR_RSHBRBR8: REGISTER.BB >>= REGISTER._8B; continue;
case INSTR_RSHBRBR9: REGISTER.BB >>= REGISTER._9B; continue;
case INSTR_RSHBRBR10: REGISTER.BB >>= REGISTER._10B; continue;
case INSTR_RSHBRBR11: REGISTER.BB >>= REGISTER._11B; continue;
case INSTR_RSHBRBR12: REGISTER.BB >>= REGISTER._12B; continue;
case INSTR_RSHBRBRIP: REGISTER.BB >>= REGISTER.IPB; continue;
case INSTR_RSHBRBRSP: REGISTER.BB >>= REGISTER.SPB; continue;
case INSTR_RSHBRBRBP: REGISTER.BB >>= REGISTER.BPB; continue;
case INSTR_RSHBRCI: REGISTER.CB >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBRCRA: REGISTER.CB >>= REGISTER.AB; continue;
case INSTR_RSHBRCRB: REGISTER.CB >>= REGISTER.BB; continue;
case INSTR_RSHBRCRC: REGISTER.CB >>= REGISTER.CB; continue;
case INSTR_RSHBRCRD: REGISTER.CB >>= REGISTER.DB; continue;
case INSTR_RSHBRCR0: REGISTER.CB >>= REGISTER._0B; continue;
case INSTR_RSHBRCR1: REGISTER.CB >>= REGISTER._1B; continue;
case INSTR_RSHBRCR2: REGISTER.CB >>= REGISTER._2B; continue;
case INSTR_RSHBRCR3: REGISTER.CB >>= REGISTER._3B; continue;
case INSTR_RSHBRCR4: REGISTER.CB >>= REGISTER._4B; continue;
case INSTR_RSHBRCR5: REGISTER.CB >>= REGISTER._5B; continue;
case INSTR_RSHBRCR6: REGISTER.CB >>= REGISTER._6B; continue;
case INSTR_RSHBRCR7: REGISTER.CB >>= REGISTER._7B; continue;
case INSTR_RSHBRCR8: REGISTER.CB >>= REGISTER._8B; continue;
case INSTR_RSHBRCR9: REGISTER.CB >>= REGISTER._9B; continue;
case INSTR_RSHBRCR10: REGISTER.CB >>= REGISTER._10B; continue;
case INSTR_RSHBRCR11: REGISTER.CB >>= REGISTER._11B; continue;
case INSTR_RSHBRCR12: REGISTER.CB >>= REGISTER._12B; continue;
case INSTR_RSHBRCRIP: REGISTER.CB >>= REGISTER.IPB; continue;
case INSTR_RSHBRCRSP: REGISTER.CB >>= REGISTER.SPB; continue;
case INSTR_RSHBRCRBP: REGISTER.CB >>= REGISTER.BPB; continue;
case INSTR_RSHBRDI: REGISTER.DB >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBRDRA: REGISTER.DB >>= REGISTER.AB; continue;
case INSTR_RSHBRDRB: REGISTER.DB >>= REGISTER.BB; continue;
case INSTR_RSHBRDRC: REGISTER.DB >>= REGISTER.CB; continue;
case INSTR_RSHBRDRD: REGISTER.DB >>= REGISTER.DB; continue;
case INSTR_RSHBRDR0: REGISTER.DB >>= REGISTER._0B; continue;
case INSTR_RSHBRDR1: REGISTER.DB >>= REGISTER._1B; continue;
case INSTR_RSHBRDR2: REGISTER.DB >>= REGISTER._2B; continue;
case INSTR_RSHBRDR3: REGISTER.DB >>= REGISTER._3B; continue;
case INSTR_RSHBRDR4: REGISTER.DB >>= REGISTER._4B; continue;
case INSTR_RSHBRDR5: REGISTER.DB >>= REGISTER._5B; continue;
case INSTR_RSHBRDR6: REGISTER.DB >>= REGISTER._6B; continue;
case INSTR_RSHBRDR7: REGISTER.DB >>= REGISTER._7B; continue;
case INSTR_RSHBRDR8: REGISTER.DB >>= REGISTER._8B; continue;
case INSTR_RSHBRDR9: REGISTER.DB >>= REGISTER._9B; continue;
case INSTR_RSHBRDR10: REGISTER.DB >>= REGISTER._10B; continue;
case INSTR_RSHBRDR11: REGISTER.DB >>= REGISTER._11B; continue;
case INSTR_RSHBRDR12: REGISTER.DB >>= REGISTER._12B; continue;
case INSTR_RSHBRDRIP: REGISTER.DB >>= REGISTER.IPB; continue;
case INSTR_RSHBRDRSP: REGISTER.DB >>= REGISTER.SPB; continue;
case INSTR_RSHBRDRBP: REGISTER.DB >>= REGISTER.BPB; continue;
case INSTR_RSHBR0I: REGISTER._0B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR0RA: REGISTER._0B >>= REGISTER.AB; continue;
case INSTR_RSHBR0RB: REGISTER._0B >>= REGISTER.BB; continue;
case INSTR_RSHBR0RC: REGISTER._0B >>= REGISTER.CB; continue;
case INSTR_RSHBR0RD: REGISTER._0B >>= REGISTER.DB; continue;
case INSTR_RSHBR0R0: REGISTER._0B >>= REGISTER._0B; continue;
case INSTR_RSHBR0R1: REGISTER._0B >>= REGISTER._1B; continue;
case INSTR_RSHBR0R2: REGISTER._0B >>= REGISTER._2B; continue;
case INSTR_RSHBR0R3: REGISTER._0B >>= REGISTER._3B; continue;
case INSTR_RSHBR0R4: REGISTER._0B >>= REGISTER._4B; continue;
case INSTR_RSHBR0R5: REGISTER._0B >>= REGISTER._5B; continue;
case INSTR_RSHBR0R6: REGISTER._0B >>= REGISTER._6B; continue;
case INSTR_RSHBR0R7: REGISTER._0B >>= REGISTER._7B; continue;
case INSTR_RSHBR0R8: REGISTER._0B >>= REGISTER._8B; continue;
case INSTR_RSHBR0R9: REGISTER._0B >>= REGISTER._9B; continue;
case INSTR_RSHBR0R10: REGISTER._0B >>= REGISTER._10B; continue;
case INSTR_RSHBR0R11: REGISTER._0B >>= REGISTER._11B; continue;
case INSTR_RSHBR0R12: REGISTER._0B >>= REGISTER._12B; continue;
case INSTR_RSHBR0RIP: REGISTER._0B >>= REGISTER.IPB; continue;
case INSTR_RSHBR0RSP: REGISTER._0B >>= REGISTER.SPB; continue;
case INSTR_RSHBR0RBP: REGISTER._0B >>= REGISTER.BPB; continue;
case INSTR_RSHBR1I: REGISTER._1B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR1RA: REGISTER._1B >>= REGISTER.AB; continue;
case INSTR_RSHBR1RB: REGISTER._1B >>= REGISTER.BB; continue;
case INSTR_RSHBR1RC: REGISTER._1B >>= REGISTER.CB; continue;
case INSTR_RSHBR1RD: REGISTER._1B >>= REGISTER.DB; continue;
case INSTR_RSHBR1R0: REGISTER._1B >>= REGISTER._0B; continue;
case INSTR_RSHBR1R1: REGISTER._1B >>= REGISTER._1B; continue;
case INSTR_RSHBR1R2: REGISTER._1B >>= REGISTER._2B; continue;
case INSTR_RSHBR1R3: REGISTER._1B >>= REGISTER._3B; continue;
case INSTR_RSHBR1R4: REGISTER._1B >>= REGISTER._4B; continue;
case INSTR_RSHBR1R5: REGISTER._1B >>= REGISTER._5B; continue;
case INSTR_RSHBR1R6: REGISTER._1B >>= REGISTER._6B; continue;
case INSTR_RSHBR1R7: REGISTER._1B >>= REGISTER._7B; continue;
case INSTR_RSHBR1R8: REGISTER._1B >>= REGISTER._8B; continue;
case INSTR_RSHBR1R9: REGISTER._1B >>= REGISTER._9B; continue;
case INSTR_RSHBR1R10: REGISTER._1B >>= REGISTER._10B; continue;
case INSTR_RSHBR1R11: REGISTER._1B >>= REGISTER._11B; continue;
case INSTR_RSHBR1R12: REGISTER._1B >>= REGISTER._12B; continue;
case INSTR_RSHBR1RIP: REGISTER._1B >>= REGISTER.IPB; continue;
case INSTR_RSHBR1RSP: REGISTER._1B >>= REGISTER.SPB; continue;
case INSTR_RSHBR1RBP: REGISTER._1B >>= REGISTER.BPB; continue;
case INSTR_RSHBR2I: REGISTER._2B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR2RA: REGISTER._2B >>= REGISTER.AB; continue;
case INSTR_RSHBR2RB: REGISTER._2B >>= REGISTER.BB; continue;
case INSTR_RSHBR2RC: REGISTER._2B >>= REGISTER.CB; continue;
case INSTR_RSHBR2RD: REGISTER._2B >>= REGISTER.DB; continue;
case INSTR_RSHBR2R0: REGISTER._2B >>= REGISTER._0B; continue;
case INSTR_RSHBR2R1: REGISTER._2B >>= REGISTER._1B; continue;
case INSTR_RSHBR2R2: REGISTER._2B >>= REGISTER._2B; continue;
case INSTR_RSHBR2R3: REGISTER._2B >>= REGISTER._3B; continue;
case INSTR_RSHBR2R4: REGISTER._2B >>= REGISTER._4B; continue;
case INSTR_RSHBR2R5: REGISTER._2B >>= REGISTER._5B; continue;
case INSTR_RSHBR2R6: REGISTER._2B >>= REGISTER._6B; continue;
case INSTR_RSHBR2R7: REGISTER._2B >>= REGISTER._7B; continue;
case INSTR_RSHBR2R8: REGISTER._2B >>= REGISTER._8B; continue;
case INSTR_RSHBR2R9: REGISTER._2B >>= REGISTER._9B; continue;
case INSTR_RSHBR2R10: REGISTER._2B >>= REGISTER._10B; continue;
case INSTR_RSHBR2R11: REGISTER._2B >>= REGISTER._11B; continue;
case INSTR_RSHBR2R12: REGISTER._2B >>= REGISTER._12B; continue;
case INSTR_RSHBR2RIP: REGISTER._2B >>= REGISTER.IPB; continue;
case INSTR_RSHBR2RSP: REGISTER._2B >>= REGISTER.SPB; continue;
case INSTR_RSHBR2RBP: REGISTER._2B >>= REGISTER.BPB; continue;
case INSTR_RSHBR3I: REGISTER._3B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR3RA: REGISTER._3B >>= REGISTER.AB; continue;
case INSTR_RSHBR3RB: REGISTER._3B >>= REGISTER.BB; continue;
case INSTR_RSHBR3RC: REGISTER._3B >>= REGISTER.CB; continue;
case INSTR_RSHBR3RD: REGISTER._3B >>= REGISTER.DB; continue;
case INSTR_RSHBR3R0: REGISTER._3B >>= REGISTER._0B; continue;
case INSTR_RSHBR3R1: REGISTER._3B >>= REGISTER._1B; continue;
case INSTR_RSHBR3R2: REGISTER._3B >>= REGISTER._2B; continue;
case INSTR_RSHBR3R3: REGISTER._3B >>= REGISTER._3B; continue;
case INSTR_RSHBR3R4: REGISTER._3B >>= REGISTER._4B; continue;
case INSTR_RSHBR3R5: REGISTER._3B >>= REGISTER._5B; continue;
case INSTR_RSHBR3R6: REGISTER._3B >>= REGISTER._6B; continue;
case INSTR_RSHBR3R7: REGISTER._3B >>= REGISTER._7B; continue;
case INSTR_RSHBR3R8: REGISTER._3B >>= REGISTER._8B; continue;
case INSTR_RSHBR3R9: REGISTER._3B >>= REGISTER._9B; continue;
case INSTR_RSHBR3R10: REGISTER._3B >>= REGISTER._10B; continue;
case INSTR_RSHBR3R11: REGISTER._3B >>= REGISTER._11B; continue;
case INSTR_RSHBR3R12: REGISTER._3B >>= REGISTER._12B; continue;
case INSTR_RSHBR3RIP: REGISTER._3B >>= REGISTER.IPB; continue;
case INSTR_RSHBR3RSP: REGISTER._3B >>= REGISTER.SPB; continue;
case INSTR_RSHBR3RBP: REGISTER._3B >>= REGISTER.BPB; continue;
case INSTR_RSHBR4I: REGISTER._4B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR4RA: REGISTER._4B >>= REGISTER.AB; continue;
case INSTR_RSHBR4RB: REGISTER._4B >>= REGISTER.BB; continue;
case INSTR_RSHBR4RC: REGISTER._4B >>= REGISTER.CB; continue;
case INSTR_RSHBR4RD: REGISTER._4B >>= REGISTER.DB; continue;
case INSTR_RSHBR4R0: REGISTER._4B >>= REGISTER._0B; continue;
case INSTR_RSHBR4R1: REGISTER._4B >>= REGISTER._1B; continue;
case INSTR_RSHBR4R2: REGISTER._4B >>= REGISTER._2B; continue;
case INSTR_RSHBR4R3: REGISTER._4B >>= REGISTER._3B; continue;
case INSTR_RSHBR4R4: REGISTER._4B >>= REGISTER._4B; continue;
case INSTR_RSHBR4R5: REGISTER._4B >>= REGISTER._5B; continue;
case INSTR_RSHBR4R6: REGISTER._4B >>= REGISTER._6B; continue;
case INSTR_RSHBR4R7: REGISTER._4B >>= REGISTER._7B; continue;
case INSTR_RSHBR4R8: REGISTER._4B >>= REGISTER._8B; continue;
case INSTR_RSHBR4R9: REGISTER._4B >>= REGISTER._9B; continue;
case INSTR_RSHBR4R10: REGISTER._4B >>= REGISTER._10B; continue;
case INSTR_RSHBR4R11: REGISTER._4B >>= REGISTER._11B; continue;
case INSTR_RSHBR4R12: REGISTER._4B >>= REGISTER._12B; continue;
case INSTR_RSHBR4RIP: REGISTER._4B >>= REGISTER.IPB; continue;
case INSTR_RSHBR4RSP: REGISTER._4B >>= REGISTER.SPB; continue;
case INSTR_RSHBR4RBP: REGISTER._4B >>= REGISTER.BPB; continue;
case INSTR_RSHBR5I: REGISTER._5B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR5RA: REGISTER._5B >>= REGISTER.AB; continue;
case INSTR_RSHBR5RB: REGISTER._5B >>= REGISTER.BB; continue;
case INSTR_RSHBR5RC: REGISTER._5B >>= REGISTER.CB; continue;
case INSTR_RSHBR5RD: REGISTER._5B >>= REGISTER.DB; continue;
case INSTR_RSHBR5R0: REGISTER._5B >>= REGISTER._0B; continue;
case INSTR_RSHBR5R1: REGISTER._5B >>= REGISTER._1B; continue;
case INSTR_RSHBR5R2: REGISTER._5B >>= REGISTER._2B; continue;
case INSTR_RSHBR5R3: REGISTER._5B >>= REGISTER._3B; continue;
case INSTR_RSHBR5R4: REGISTER._5B >>= REGISTER._4B; continue;
case INSTR_RSHBR5R5: REGISTER._5B >>= REGISTER._5B; continue;
case INSTR_RSHBR5R6: REGISTER._5B >>= REGISTER._6B; continue;
case INSTR_RSHBR5R7: REGISTER._5B >>= REGISTER._7B; continue;
case INSTR_RSHBR5R8: REGISTER._5B >>= REGISTER._8B; continue;
case INSTR_RSHBR5R9: REGISTER._5B >>= REGISTER._9B; continue;
case INSTR_RSHBR5R10: REGISTER._5B >>= REGISTER._10B; continue;
case INSTR_RSHBR5R11: REGISTER._5B >>= REGISTER._11B; continue;
case INSTR_RSHBR5R12: REGISTER._5B >>= REGISTER._12B; continue;
case INSTR_RSHBR5RIP: REGISTER._5B >>= REGISTER.IPB; continue;
case INSTR_RSHBR5RSP: REGISTER._5B >>= REGISTER.SPB; continue;
case INSTR_RSHBR5RBP: REGISTER._5B >>= REGISTER.BPB; continue;
case INSTR_RSHBR6I: REGISTER._6B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR6RA: REGISTER._6B >>= REGISTER.AB; continue;
case INSTR_RSHBR6RB: REGISTER._6B >>= REGISTER.BB; continue;
case INSTR_RSHBR6RC: REGISTER._6B >>= REGISTER.CB; continue;
case INSTR_RSHBR6RD: REGISTER._6B >>= REGISTER.DB; continue;
case INSTR_RSHBR6R0: REGISTER._6B >>= REGISTER._0B; continue;
case INSTR_RSHBR6R1: REGISTER._6B >>= REGISTER._1B; continue;
case INSTR_RSHBR6R2: REGISTER._6B >>= REGISTER._2B; continue;
case INSTR_RSHBR6R3: REGISTER._6B >>= REGISTER._3B; continue;
case INSTR_RSHBR6R4: REGISTER._6B >>= REGISTER._4B; continue;
case INSTR_RSHBR6R5: REGISTER._6B >>= REGISTER._5B; continue;
case INSTR_RSHBR6R6: REGISTER._6B >>= REGISTER._6B; continue;
case INSTR_RSHBR6R7: REGISTER._6B >>= REGISTER._7B; continue;
case INSTR_RSHBR6R8: REGISTER._6B >>= REGISTER._8B; continue;
case INSTR_RSHBR6R9: REGISTER._6B >>= REGISTER._9B; continue;
case INSTR_RSHBR6R10: REGISTER._6B >>= REGISTER._10B; continue;
case INSTR_RSHBR6R11: REGISTER._6B >>= REGISTER._11B; continue;
case INSTR_RSHBR6R12: REGISTER._6B >>= REGISTER._12B; continue;
case INSTR_RSHBR6RIP: REGISTER._6B >>= REGISTER.IPB; continue;
case INSTR_RSHBR6RSP: REGISTER._6B >>= REGISTER.SPB; continue;
case INSTR_RSHBR6RBP: REGISTER._6B >>= REGISTER.BPB; continue;
case INSTR_RSHBR7I: REGISTER._7B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR7RA: REGISTER._7B >>= REGISTER.AB; continue;
case INSTR_RSHBR7RB: REGISTER._7B >>= REGISTER.BB; continue;
case INSTR_RSHBR7RC: REGISTER._7B >>= REGISTER.CB; continue;
case INSTR_RSHBR7RD: REGISTER._7B >>= REGISTER.DB; continue;
case INSTR_RSHBR7R0: REGISTER._7B >>= REGISTER._0B; continue;
case INSTR_RSHBR7R1: REGISTER._7B >>= REGISTER._1B; continue;
case INSTR_RSHBR7R2: REGISTER._7B >>= REGISTER._2B; continue;
case INSTR_RSHBR7R3: REGISTER._7B >>= REGISTER._3B; continue;
case INSTR_RSHBR7R4: REGISTER._7B >>= REGISTER._4B; continue;
case INSTR_RSHBR7R5: REGISTER._7B >>= REGISTER._5B; continue;
case INSTR_RSHBR7R6: REGISTER._7B >>= REGISTER._6B; continue;
case INSTR_RSHBR7R7: REGISTER._7B >>= REGISTER._7B; continue;
case INSTR_RSHBR7R8: REGISTER._7B >>= REGISTER._8B; continue;
case INSTR_RSHBR7R9: REGISTER._7B >>= REGISTER._9B; continue;
case INSTR_RSHBR7R10: REGISTER._7B >>= REGISTER._10B; continue;
case INSTR_RSHBR7R11: REGISTER._7B >>= REGISTER._11B; continue;
case INSTR_RSHBR7R12: REGISTER._7B >>= REGISTER._12B; continue;
case INSTR_RSHBR7RIP: REGISTER._7B >>= REGISTER.IPB; continue;
case INSTR_RSHBR7RSP: REGISTER._7B >>= REGISTER.SPB; continue;
case INSTR_RSHBR7RBP: REGISTER._7B >>= REGISTER.BPB; continue;
case INSTR_RSHBR8I: REGISTER._8B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR8RA: REGISTER._8B >>= REGISTER.AB; continue;
case INSTR_RSHBR8RB: REGISTER._8B >>= REGISTER.BB; continue;
case INSTR_RSHBR8RC: REGISTER._8B >>= REGISTER.CB; continue;
case INSTR_RSHBR8RD: REGISTER._8B >>= REGISTER.DB; continue;
case INSTR_RSHBR8R0: REGISTER._8B >>= REGISTER._0B; continue;
case INSTR_RSHBR8R1: REGISTER._8B >>= REGISTER._1B; continue;
case INSTR_RSHBR8R2: REGISTER._8B >>= REGISTER._2B; continue;
case INSTR_RSHBR8R3: REGISTER._8B >>= REGISTER._3B; continue;
case INSTR_RSHBR8R4: REGISTER._8B >>= REGISTER._4B; continue;
case INSTR_RSHBR8R5: REGISTER._8B >>= REGISTER._5B; continue;
case INSTR_RSHBR8R6: REGISTER._8B >>= REGISTER._6B; continue;
case INSTR_RSHBR8R7: REGISTER._8B >>= REGISTER._7B; continue;
case INSTR_RSHBR8R8: REGISTER._8B >>= REGISTER._8B; continue;
case INSTR_RSHBR8R9: REGISTER._8B >>= REGISTER._9B; continue;
case INSTR_RSHBR8R10: REGISTER._8B >>= REGISTER._10B; continue;
case INSTR_RSHBR8R11: REGISTER._8B >>= REGISTER._11B; continue;
case INSTR_RSHBR8R12: REGISTER._8B >>= REGISTER._12B; continue;
case INSTR_RSHBR8RIP: REGISTER._8B >>= REGISTER.IPB; continue;
case INSTR_RSHBR8RSP: REGISTER._8B >>= REGISTER.SPB; continue;
case INSTR_RSHBR8RBP: REGISTER._8B >>= REGISTER.BPB; continue;
case INSTR_RSHBR9I: REGISTER._9B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR9RA: REGISTER._9B >>= REGISTER.AB; continue;
case INSTR_RSHBR9RB: REGISTER._9B >>= REGISTER.BB; continue;
case INSTR_RSHBR9RC: REGISTER._9B >>= REGISTER.CB; continue;
case INSTR_RSHBR9RD: REGISTER._9B >>= REGISTER.DB; continue;
case INSTR_RSHBR9R0: REGISTER._9B >>= REGISTER._0B; continue;
case INSTR_RSHBR9R1: REGISTER._9B >>= REGISTER._1B; continue;
case INSTR_RSHBR9R2: REGISTER._9B >>= REGISTER._2B; continue;
case INSTR_RSHBR9R3: REGISTER._9B >>= REGISTER._3B; continue;
case INSTR_RSHBR9R4: REGISTER._9B >>= REGISTER._4B; continue;
case INSTR_RSHBR9R5: REGISTER._9B >>= REGISTER._5B; continue;
case INSTR_RSHBR9R6: REGISTER._9B >>= REGISTER._6B; continue;
case INSTR_RSHBR9R7: REGISTER._9B >>= REGISTER._7B; continue;
case INSTR_RSHBR9R8: REGISTER._9B >>= REGISTER._8B; continue;
case INSTR_RSHBR9R9: REGISTER._9B >>= REGISTER._9B; continue;
case INSTR_RSHBR9R10: REGISTER._9B >>= REGISTER._10B; continue;
case INSTR_RSHBR9R11: REGISTER._9B >>= REGISTER._11B; continue;
case INSTR_RSHBR9R12: REGISTER._9B >>= REGISTER._12B; continue;
case INSTR_RSHBR9RIP: REGISTER._9B >>= REGISTER.IPB; continue;
case INSTR_RSHBR9RSP: REGISTER._9B >>= REGISTER.SPB; continue;
case INSTR_RSHBR9RBP: REGISTER._9B >>= REGISTER.BPB; continue;
case INSTR_RSHBR10I: REGISTER._10B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR10RA: REGISTER._10B >>= REGISTER.AB; continue;
case INSTR_RSHBR10RB: REGISTER._10B >>= REGISTER.BB; continue;
case INSTR_RSHBR10RC: REGISTER._10B >>= REGISTER.CB; continue;
case INSTR_RSHBR10RD: REGISTER._10B >>= REGISTER.DB; continue;
case INSTR_RSHBR10R0: REGISTER._10B >>= REGISTER._0B; continue;
case INSTR_RSHBR10R1: REGISTER._10B >>= REGISTER._1B; continue;
case INSTR_RSHBR10R2: REGISTER._10B >>= REGISTER._2B; continue;
case INSTR_RSHBR10R3: REGISTER._10B >>= REGISTER._3B; continue;
case INSTR_RSHBR10R4: REGISTER._10B >>= REGISTER._4B; continue;
case INSTR_RSHBR10R5: REGISTER._10B >>= REGISTER._5B; continue;
case INSTR_RSHBR10R6: REGISTER._10B >>= REGISTER._6B; continue;
case INSTR_RSHBR10R7: REGISTER._10B >>= REGISTER._7B; continue;
case INSTR_RSHBR10R8: REGISTER._10B >>= REGISTER._8B; continue;
case INSTR_RSHBR10R9: REGISTER._10B >>= REGISTER._9B; continue;
case INSTR_RSHBR10R10: REGISTER._10B >>= REGISTER._10B; continue;
case INSTR_RSHBR10R11: REGISTER._10B >>= REGISTER._11B; continue;
case INSTR_RSHBR10R12: REGISTER._10B >>= REGISTER._12B; continue;
case INSTR_RSHBR10RIP: REGISTER._10B >>= REGISTER.IPB; continue;
case INSTR_RSHBR10RSP: REGISTER._10B >>= REGISTER.SPB; continue;
case INSTR_RSHBR10RBP: REGISTER._10B >>= REGISTER.BPB; continue;
case INSTR_RSHBR11I: REGISTER._11B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR11RA: REGISTER._11B >>= REGISTER.AB; continue;
case INSTR_RSHBR11RB: REGISTER._11B >>= REGISTER.BB; continue;
case INSTR_RSHBR11RC: REGISTER._11B >>= REGISTER.CB; continue;
case INSTR_RSHBR11RD: REGISTER._11B >>= REGISTER.DB; continue;
case INSTR_RSHBR11R0: REGISTER._11B >>= REGISTER._0B; continue;
case INSTR_RSHBR11R1: REGISTER._11B >>= REGISTER._1B; continue;
case INSTR_RSHBR11R2: REGISTER._11B >>= REGISTER._2B; continue;
case INSTR_RSHBR11R3: REGISTER._11B >>= REGISTER._3B; continue;
case INSTR_RSHBR11R4: REGISTER._11B >>= REGISTER._4B; continue;
case INSTR_RSHBR11R5: REGISTER._11B >>= REGISTER._5B; continue;
case INSTR_RSHBR11R6: REGISTER._11B >>= REGISTER._6B; continue;
case INSTR_RSHBR11R7: REGISTER._11B >>= REGISTER._7B; continue;
case INSTR_RSHBR11R8: REGISTER._11B >>= REGISTER._8B; continue;
case INSTR_RSHBR11R9: REGISTER._11B >>= REGISTER._9B; continue;
case INSTR_RSHBR11R10: REGISTER._11B >>= REGISTER._10B; continue;
case INSTR_RSHBR11R11: REGISTER._11B >>= REGISTER._11B; continue;
case INSTR_RSHBR11R12: REGISTER._11B >>= REGISTER._12B; continue;
case INSTR_RSHBR11RIP: REGISTER._11B >>= REGISTER.IPB; continue;
case INSTR_RSHBR11RSP: REGISTER._11B >>= REGISTER.SPB; continue;
case INSTR_RSHBR11RBP: REGISTER._11B >>= REGISTER.BPB; continue;
case INSTR_RSHBR12I: REGISTER._12B >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBR12RA: REGISTER._12B >>= REGISTER.AB; continue;
case INSTR_RSHBR12RB: REGISTER._12B >>= REGISTER.BB; continue;
case INSTR_RSHBR12RC: REGISTER._12B >>= REGISTER.CB; continue;
case INSTR_RSHBR12RD: REGISTER._12B >>= REGISTER.DB; continue;
case INSTR_RSHBR12R0: REGISTER._12B >>= REGISTER._0B; continue;
case INSTR_RSHBR12R1: REGISTER._12B >>= REGISTER._1B; continue;
case INSTR_RSHBR12R2: REGISTER._12B >>= REGISTER._2B; continue;
case INSTR_RSHBR12R3: REGISTER._12B >>= REGISTER._3B; continue;
case INSTR_RSHBR12R4: REGISTER._12B >>= REGISTER._4B; continue;
case INSTR_RSHBR12R5: REGISTER._12B >>= REGISTER._5B; continue;
case INSTR_RSHBR12R6: REGISTER._12B >>= REGISTER._6B; continue;
case INSTR_RSHBR12R7: REGISTER._12B >>= REGISTER._7B; continue;
case INSTR_RSHBR12R8: REGISTER._12B >>= REGISTER._8B; continue;
case INSTR_RSHBR12R9: REGISTER._12B >>= REGISTER._9B; continue;
case INSTR_RSHBR12R10: REGISTER._12B >>= REGISTER._10B; continue;
case INSTR_RSHBR12R11: REGISTER._12B >>= REGISTER._11B; continue;
case INSTR_RSHBR12R12: REGISTER._12B >>= REGISTER._12B; continue;
case INSTR_RSHBR12RIP: REGISTER._12B >>= REGISTER.IPB; continue;
case INSTR_RSHBR12RSP: REGISTER._12B >>= REGISTER.SPB; continue;
case INSTR_RSHBR12RBP: REGISTER._12B >>= REGISTER.BPB; continue;
case INSTR_RSHBRIPI: REGISTER.IPB >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBRIPRA: REGISTER.IPB >>= REGISTER.AB; continue;
case INSTR_RSHBRIPRB: REGISTER.IPB >>= REGISTER.BB; continue;
case INSTR_RSHBRIPRC: REGISTER.IPB >>= REGISTER.CB; continue;
case INSTR_RSHBRIPRD: REGISTER.IPB >>= REGISTER.DB; continue;
case INSTR_RSHBRIPR0: REGISTER.IPB >>= REGISTER._0B; continue;
case INSTR_RSHBRIPR1: REGISTER.IPB >>= REGISTER._1B; continue;
case INSTR_RSHBRIPR2: REGISTER.IPB >>= REGISTER._2B; continue;
case INSTR_RSHBRIPR3: REGISTER.IPB >>= REGISTER._3B; continue;
case INSTR_RSHBRIPR4: REGISTER.IPB >>= REGISTER._4B; continue;
case INSTR_RSHBRIPR5: REGISTER.IPB >>= REGISTER._5B; continue;
case INSTR_RSHBRIPR6: REGISTER.IPB >>= REGISTER._6B; continue;
case INSTR_RSHBRIPR7: REGISTER.IPB >>= REGISTER._7B; continue;
case INSTR_RSHBRIPR8: REGISTER.IPB >>= REGISTER._8B; continue;
case INSTR_RSHBRIPR9: REGISTER.IPB >>= REGISTER._9B; continue;
case INSTR_RSHBRIPR10: REGISTER.IPB >>= REGISTER._10B; continue;
case INSTR_RSHBRIPR11: REGISTER.IPB >>= REGISTER._11B; continue;
case INSTR_RSHBRIPR12: REGISTER.IPB >>= REGISTER._12B; continue;
case INSTR_RSHBRIPRIP: REGISTER.IPB >>= REGISTER.IPB; continue;
case INSTR_RSHBRIPRSP: REGISTER.IPB >>= REGISTER.SPB; continue;
case INSTR_RSHBRIPRBP: REGISTER.IPB >>= REGISTER.BPB; continue;
case INSTR_RSHBRSPI: REGISTER.SPB >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBRSPRA: REGISTER.SPB >>= REGISTER.AB; continue;
case INSTR_RSHBRSPRB: REGISTER.SPB >>= REGISTER.BB; continue;
case INSTR_RSHBRSPRC: REGISTER.SPB >>= REGISTER.CB; continue;
case INSTR_RSHBRSPRD: REGISTER.SPB >>= REGISTER.DB; continue;
case INSTR_RSHBRSPR0: REGISTER.SPB >>= REGISTER._0B; continue;
case INSTR_RSHBRSPR1: REGISTER.SPB >>= REGISTER._1B; continue;
case INSTR_RSHBRSPR2: REGISTER.SPB >>= REGISTER._2B; continue;
case INSTR_RSHBRSPR3: REGISTER.SPB >>= REGISTER._3B; continue;
case INSTR_RSHBRSPR4: REGISTER.SPB >>= REGISTER._4B; continue;
case INSTR_RSHBRSPR5: REGISTER.SPB >>= REGISTER._5B; continue;
case INSTR_RSHBRSPR6: REGISTER.SPB >>= REGISTER._6B; continue;
case INSTR_RSHBRSPR7: REGISTER.SPB >>= REGISTER._7B; continue;
case INSTR_RSHBRSPR8: REGISTER.SPB >>= REGISTER._8B; continue;
case INSTR_RSHBRSPR9: REGISTER.SPB >>= REGISTER._9B; continue;
case INSTR_RSHBRSPR10: REGISTER.SPB >>= REGISTER._10B; continue;
case INSTR_RSHBRSPR11: REGISTER.SPB >>= REGISTER._11B; continue;
case INSTR_RSHBRSPR12: REGISTER.SPB >>= REGISTER._12B; continue;
case INSTR_RSHBRSPRIP: REGISTER.SPB >>= REGISTER.IPB; continue;
case INSTR_RSHBRSPRSP: REGISTER.SPB >>= REGISTER.SPB; continue;
case INSTR_RSHBRSPRBP: REGISTER.SPB >>= REGISTER.BPB; continue;
case INSTR_RSHBRBPI: REGISTER.BPB >>= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_RSHBRBPRA: REGISTER.BPB >>= REGISTER.AB; continue;
case INSTR_RSHBRBPRB: REGISTER.BPB >>= REGISTER.BB; continue;
case INSTR_RSHBRBPRC: REGISTER.BPB >>= REGISTER.CB; continue;
case INSTR_RSHBRBPRD: REGISTER.BPB >>= REGISTER.DB; continue;
case INSTR_RSHBRBPR0: REGISTER.BPB >>= REGISTER._0B; continue;
case INSTR_RSHBRBPR1: REGISTER.BPB >>= REGISTER._1B; continue;
case INSTR_RSHBRBPR2: REGISTER.BPB >>= REGISTER._2B; continue;
case INSTR_RSHBRBPR3: REGISTER.BPB >>= REGISTER._3B; continue;
case INSTR_RSHBRBPR4: REGISTER.BPB >>= REGISTER._4B; continue;
case INSTR_RSHBRBPR5: REGISTER.BPB >>= REGISTER._5B; continue;
case INSTR_RSHBRBPR6: REGISTER.BPB >>= REGISTER._6B; continue;
case INSTR_RSHBRBPR7: REGISTER.BPB >>= REGISTER._7B; continue;
case INSTR_RSHBRBPR8: REGISTER.BPB >>= REGISTER._8B; continue;
case INSTR_RSHBRBPR9: REGISTER.BPB >>= REGISTER._9B; continue;
case INSTR_RSHBRBPR10: REGISTER.BPB >>= REGISTER._10B; continue;
case INSTR_RSHBRBPR11: REGISTER.BPB >>= REGISTER._11B; continue;
case INSTR_RSHBRBPR12: REGISTER.BPB >>= REGISTER._12B; continue;
case INSTR_RSHBRBPRIP: REGISTER.BPB >>= REGISTER.IPB; continue;
case INSTR_RSHBRBPRSP: REGISTER.BPB >>= REGISTER.SPB; continue;
case INSTR_RSHBRBPRBP: REGISTER.BPB >>= REGISTER.BPB; continue;
case INSTR_LSHQRAI: REGISTER.AQ <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQRARA: REGISTER.AQ <<= REGISTER.AQ; continue;
case INSTR_LSHQRARB: REGISTER.AQ <<= REGISTER.BQ; continue;
case INSTR_LSHQRARC: REGISTER.AQ <<= REGISTER.CQ; continue;
case INSTR_LSHQRARD: REGISTER.AQ <<= REGISTER.DQ; continue;
case INSTR_LSHQRAR0: REGISTER.AQ <<= REGISTER._0Q; continue;
case INSTR_LSHQRAR1: REGISTER.AQ <<= REGISTER._1Q; continue;
case INSTR_LSHQRAR2: REGISTER.AQ <<= REGISTER._2Q; continue;
case INSTR_LSHQRAR3: REGISTER.AQ <<= REGISTER._3Q; continue;
case INSTR_LSHQRAR4: REGISTER.AQ <<= REGISTER._4Q; continue;
case INSTR_LSHQRAR5: REGISTER.AQ <<= REGISTER._5Q; continue;
case INSTR_LSHQRAR6: REGISTER.AQ <<= REGISTER._6Q; continue;
case INSTR_LSHQRAR7: REGISTER.AQ <<= REGISTER._7Q; continue;
case INSTR_LSHQRAR8: REGISTER.AQ <<= REGISTER._8Q; continue;
case INSTR_LSHQRAR9: REGISTER.AQ <<= REGISTER._9Q; continue;
case INSTR_LSHQRAR10: REGISTER.AQ <<= REGISTER._10Q; continue;
case INSTR_LSHQRAR11: REGISTER.AQ <<= REGISTER._11Q; continue;
case INSTR_LSHQRAR12: REGISTER.AQ <<= REGISTER._12Q; continue;
case INSTR_LSHQRARIP: REGISTER.AQ <<= REGISTER.IPQ; continue;
case INSTR_LSHQRARSP: REGISTER.AQ <<= REGISTER.SPQ; continue;
case INSTR_LSHQRARBP: REGISTER.AQ <<= REGISTER.BPQ; continue;
case INSTR_LSHQRBI: REGISTER.BQ <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQRBRA: REGISTER.BQ <<= REGISTER.AQ; continue;
case INSTR_LSHQRBRB: REGISTER.BQ <<= REGISTER.BQ; continue;
case INSTR_LSHQRBRC: REGISTER.BQ <<= REGISTER.CQ; continue;
case INSTR_LSHQRBRD: REGISTER.BQ <<= REGISTER.DQ; continue;
case INSTR_LSHQRBR0: REGISTER.BQ <<= REGISTER._0Q; continue;
case INSTR_LSHQRBR1: REGISTER.BQ <<= REGISTER._1Q; continue;
case INSTR_LSHQRBR2: REGISTER.BQ <<= REGISTER._2Q; continue;
case INSTR_LSHQRBR3: REGISTER.BQ <<= REGISTER._3Q; continue;
case INSTR_LSHQRBR4: REGISTER.BQ <<= REGISTER._4Q; continue;
case INSTR_LSHQRBR5: REGISTER.BQ <<= REGISTER._5Q; continue;
case INSTR_LSHQRBR6: REGISTER.BQ <<= REGISTER._6Q; continue;
case INSTR_LSHQRBR7: REGISTER.BQ <<= REGISTER._7Q; continue;
case INSTR_LSHQRBR8: REGISTER.BQ <<= REGISTER._8Q; continue;
case INSTR_LSHQRBR9: REGISTER.BQ <<= REGISTER._9Q; continue;
case INSTR_LSHQRBR10: REGISTER.BQ <<= REGISTER._10Q; continue;
case INSTR_LSHQRBR11: REGISTER.BQ <<= REGISTER._11Q; continue;
case INSTR_LSHQRBR12: REGISTER.BQ <<= REGISTER._12Q; continue;
case INSTR_LSHQRBRIP: REGISTER.BQ <<= REGISTER.IPQ; continue;
case INSTR_LSHQRBRSP: REGISTER.BQ <<= REGISTER.SPQ; continue;
case INSTR_LSHQRBRBP: REGISTER.BQ <<= REGISTER.BPQ; continue;
case INSTR_LSHQRCI: REGISTER.CQ <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQRCRA: REGISTER.CQ <<= REGISTER.AQ; continue;
case INSTR_LSHQRCRB: REGISTER.CQ <<= REGISTER.BQ; continue;
case INSTR_LSHQRCRC: REGISTER.CQ <<= REGISTER.CQ; continue;
case INSTR_LSHQRCRD: REGISTER.CQ <<= REGISTER.DQ; continue;
case INSTR_LSHQRCR0: REGISTER.CQ <<= REGISTER._0Q; continue;
case INSTR_LSHQRCR1: REGISTER.CQ <<= REGISTER._1Q; continue;
case INSTR_LSHQRCR2: REGISTER.CQ <<= REGISTER._2Q; continue;
case INSTR_LSHQRCR3: REGISTER.CQ <<= REGISTER._3Q; continue;
case INSTR_LSHQRCR4: REGISTER.CQ <<= REGISTER._4Q; continue;
case INSTR_LSHQRCR5: REGISTER.CQ <<= REGISTER._5Q; continue;
case INSTR_LSHQRCR6: REGISTER.CQ <<= REGISTER._6Q; continue;
case INSTR_LSHQRCR7: REGISTER.CQ <<= REGISTER._7Q; continue;
case INSTR_LSHQRCR8: REGISTER.CQ <<= REGISTER._8Q; continue;
case INSTR_LSHQRCR9: REGISTER.CQ <<= REGISTER._9Q; continue;
case INSTR_LSHQRCR10: REGISTER.CQ <<= REGISTER._10Q; continue;
case INSTR_LSHQRCR11: REGISTER.CQ <<= REGISTER._11Q; continue;
case INSTR_LSHQRCR12: REGISTER.CQ <<= REGISTER._12Q; continue;
case INSTR_LSHQRCRIP: REGISTER.CQ <<= REGISTER.IPQ; continue;
case INSTR_LSHQRCRSP: REGISTER.CQ <<= REGISTER.SPQ; continue;
case INSTR_LSHQRCRBP: REGISTER.CQ <<= REGISTER.BPQ; continue;
case INSTR_LSHQRDI: REGISTER.DQ <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQRDRA: REGISTER.DQ <<= REGISTER.AQ; continue;
case INSTR_LSHQRDRB: REGISTER.DQ <<= REGISTER.BQ; continue;
case INSTR_LSHQRDRC: REGISTER.DQ <<= REGISTER.CQ; continue;
case INSTR_LSHQRDRD: REGISTER.DQ <<= REGISTER.DQ; continue;
case INSTR_LSHQRDR0: REGISTER.DQ <<= REGISTER._0Q; continue;
case INSTR_LSHQRDR1: REGISTER.DQ <<= REGISTER._1Q; continue;
case INSTR_LSHQRDR2: REGISTER.DQ <<= REGISTER._2Q; continue;
case INSTR_LSHQRDR3: REGISTER.DQ <<= REGISTER._3Q; continue;
case INSTR_LSHQRDR4: REGISTER.DQ <<= REGISTER._4Q; continue;
case INSTR_LSHQRDR5: REGISTER.DQ <<= REGISTER._5Q; continue;
case INSTR_LSHQRDR6: REGISTER.DQ <<= REGISTER._6Q; continue;
case INSTR_LSHQRDR7: REGISTER.DQ <<= REGISTER._7Q; continue;
case INSTR_LSHQRDR8: REGISTER.DQ <<= REGISTER._8Q; continue;
case INSTR_LSHQRDR9: REGISTER.DQ <<= REGISTER._9Q; continue;
case INSTR_LSHQRDR10: REGISTER.DQ <<= REGISTER._10Q; continue;
case INSTR_LSHQRDR11: REGISTER.DQ <<= REGISTER._11Q; continue;
case INSTR_LSHQRDR12: REGISTER.DQ <<= REGISTER._12Q; continue;
case INSTR_LSHQRDRIP: REGISTER.DQ <<= REGISTER.IPQ; continue;
case INSTR_LSHQRDRSP: REGISTER.DQ <<= REGISTER.SPQ; continue;
case INSTR_LSHQRDRBP: REGISTER.DQ <<= REGISTER.BPQ; continue;
case INSTR_LSHQR0I: REGISTER._0Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR0RA: REGISTER._0Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR0RB: REGISTER._0Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR0RC: REGISTER._0Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR0RD: REGISTER._0Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR0R0: REGISTER._0Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR0R1: REGISTER._0Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR0R2: REGISTER._0Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR0R3: REGISTER._0Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR0R4: REGISTER._0Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR0R5: REGISTER._0Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR0R6: REGISTER._0Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR0R7: REGISTER._0Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR0R8: REGISTER._0Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR0R9: REGISTER._0Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR0R10: REGISTER._0Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR0R11: REGISTER._0Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR0R12: REGISTER._0Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR0RIP: REGISTER._0Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR0RSP: REGISTER._0Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR0RBP: REGISTER._0Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR1I: REGISTER._1Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR1RA: REGISTER._1Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR1RB: REGISTER._1Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR1RC: REGISTER._1Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR1RD: REGISTER._1Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR1R0: REGISTER._1Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR1R1: REGISTER._1Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR1R2: REGISTER._1Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR1R3: REGISTER._1Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR1R4: REGISTER._1Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR1R5: REGISTER._1Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR1R6: REGISTER._1Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR1R7: REGISTER._1Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR1R8: REGISTER._1Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR1R9: REGISTER._1Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR1R10: REGISTER._1Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR1R11: REGISTER._1Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR1R12: REGISTER._1Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR1RIP: REGISTER._1Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR1RSP: REGISTER._1Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR1RBP: REGISTER._1Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR2I: REGISTER._2Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR2RA: REGISTER._2Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR2RB: REGISTER._2Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR2RC: REGISTER._2Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR2RD: REGISTER._2Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR2R0: REGISTER._2Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR2R1: REGISTER._2Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR2R2: REGISTER._2Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR2R3: REGISTER._2Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR2R4: REGISTER._2Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR2R5: REGISTER._2Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR2R6: REGISTER._2Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR2R7: REGISTER._2Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR2R8: REGISTER._2Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR2R9: REGISTER._2Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR2R10: REGISTER._2Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR2R11: REGISTER._2Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR2R12: REGISTER._2Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR2RIP: REGISTER._2Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR2RSP: REGISTER._2Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR2RBP: REGISTER._2Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR3I: REGISTER._3Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR3RA: REGISTER._3Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR3RB: REGISTER._3Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR3RC: REGISTER._3Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR3RD: REGISTER._3Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR3R0: REGISTER._3Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR3R1: REGISTER._3Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR3R2: REGISTER._3Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR3R3: REGISTER._3Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR3R4: REGISTER._3Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR3R5: REGISTER._3Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR3R6: REGISTER._3Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR3R7: REGISTER._3Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR3R8: REGISTER._3Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR3R9: REGISTER._3Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR3R10: REGISTER._3Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR3R11: REGISTER._3Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR3R12: REGISTER._3Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR3RIP: REGISTER._3Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR3RSP: REGISTER._3Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR3RBP: REGISTER._3Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR4I: REGISTER._4Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR4RA: REGISTER._4Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR4RB: REGISTER._4Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR4RC: REGISTER._4Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR4RD: REGISTER._4Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR4R0: REGISTER._4Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR4R1: REGISTER._4Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR4R2: REGISTER._4Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR4R3: REGISTER._4Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR4R4: REGISTER._4Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR4R5: REGISTER._4Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR4R6: REGISTER._4Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR4R7: REGISTER._4Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR4R8: REGISTER._4Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR4R9: REGISTER._4Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR4R10: REGISTER._4Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR4R11: REGISTER._4Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR4R12: REGISTER._4Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR4RIP: REGISTER._4Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR4RSP: REGISTER._4Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR4RBP: REGISTER._4Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR5I: REGISTER._5Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR5RA: REGISTER._5Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR5RB: REGISTER._5Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR5RC: REGISTER._5Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR5RD: REGISTER._5Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR5R0: REGISTER._5Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR5R1: REGISTER._5Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR5R2: REGISTER._5Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR5R3: REGISTER._5Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR5R4: REGISTER._5Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR5R5: REGISTER._5Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR5R6: REGISTER._5Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR5R7: REGISTER._5Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR5R8: REGISTER._5Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR5R9: REGISTER._5Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR5R10: REGISTER._5Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR5R11: REGISTER._5Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR5R12: REGISTER._5Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR5RIP: REGISTER._5Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR5RSP: REGISTER._5Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR5RBP: REGISTER._5Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR6I: REGISTER._6Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR6RA: REGISTER._6Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR6RB: REGISTER._6Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR6RC: REGISTER._6Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR6RD: REGISTER._6Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR6R0: REGISTER._6Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR6R1: REGISTER._6Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR6R2: REGISTER._6Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR6R3: REGISTER._6Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR6R4: REGISTER._6Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR6R5: REGISTER._6Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR6R6: REGISTER._6Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR6R7: REGISTER._6Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR6R8: REGISTER._6Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR6R9: REGISTER._6Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR6R10: REGISTER._6Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR6R11: REGISTER._6Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR6R12: REGISTER._6Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR6RIP: REGISTER._6Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR6RSP: REGISTER._6Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR6RBP: REGISTER._6Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR7I: REGISTER._7Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR7RA: REGISTER._7Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR7RB: REGISTER._7Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR7RC: REGISTER._7Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR7RD: REGISTER._7Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR7R0: REGISTER._7Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR7R1: REGISTER._7Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR7R2: REGISTER._7Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR7R3: REGISTER._7Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR7R4: REGISTER._7Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR7R5: REGISTER._7Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR7R6: REGISTER._7Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR7R7: REGISTER._7Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR7R8: REGISTER._7Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR7R9: REGISTER._7Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR7R10: REGISTER._7Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR7R11: REGISTER._7Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR7R12: REGISTER._7Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR7RIP: REGISTER._7Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR7RSP: REGISTER._7Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR7RBP: REGISTER._7Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR8I: REGISTER._8Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR8RA: REGISTER._8Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR8RB: REGISTER._8Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR8RC: REGISTER._8Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR8RD: REGISTER._8Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR8R0: REGISTER._8Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR8R1: REGISTER._8Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR8R2: REGISTER._8Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR8R3: REGISTER._8Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR8R4: REGISTER._8Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR8R5: REGISTER._8Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR8R6: REGISTER._8Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR8R7: REGISTER._8Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR8R8: REGISTER._8Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR8R9: REGISTER._8Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR8R10: REGISTER._8Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR8R11: REGISTER._8Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR8R12: REGISTER._8Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR8RIP: REGISTER._8Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR8RSP: REGISTER._8Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR8RBP: REGISTER._8Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR9I: REGISTER._9Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR9RA: REGISTER._9Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR9RB: REGISTER._9Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR9RC: REGISTER._9Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR9RD: REGISTER._9Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR9R0: REGISTER._9Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR9R1: REGISTER._9Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR9R2: REGISTER._9Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR9R3: REGISTER._9Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR9R4: REGISTER._9Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR9R5: REGISTER._9Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR9R6: REGISTER._9Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR9R7: REGISTER._9Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR9R8: REGISTER._9Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR9R9: REGISTER._9Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR9R10: REGISTER._9Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR9R11: REGISTER._9Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR9R12: REGISTER._9Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR9RIP: REGISTER._9Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR9RSP: REGISTER._9Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR9RBP: REGISTER._9Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR10I: REGISTER._10Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR10RA: REGISTER._10Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR10RB: REGISTER._10Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR10RC: REGISTER._10Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR10RD: REGISTER._10Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR10R0: REGISTER._10Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR10R1: REGISTER._10Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR10R2: REGISTER._10Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR10R3: REGISTER._10Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR10R4: REGISTER._10Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR10R5: REGISTER._10Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR10R6: REGISTER._10Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR10R7: REGISTER._10Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR10R8: REGISTER._10Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR10R9: REGISTER._10Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR10R10: REGISTER._10Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR10R11: REGISTER._10Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR10R12: REGISTER._10Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR10RIP: REGISTER._10Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR10RSP: REGISTER._10Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR10RBP: REGISTER._10Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR11I: REGISTER._11Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR11RA: REGISTER._11Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR11RB: REGISTER._11Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR11RC: REGISTER._11Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR11RD: REGISTER._11Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR11R0: REGISTER._11Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR11R1: REGISTER._11Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR11R2: REGISTER._11Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR11R3: REGISTER._11Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR11R4: REGISTER._11Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR11R5: REGISTER._11Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR11R6: REGISTER._11Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR11R7: REGISTER._11Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR11R8: REGISTER._11Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR11R9: REGISTER._11Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR11R10: REGISTER._11Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR11R11: REGISTER._11Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR11R12: REGISTER._11Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR11RIP: REGISTER._11Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR11RSP: REGISTER._11Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR11RBP: REGISTER._11Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQR12I: REGISTER._12Q <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQR12RA: REGISTER._12Q <<= REGISTER.AQ; continue;
case INSTR_LSHQR12RB: REGISTER._12Q <<= REGISTER.BQ; continue;
case INSTR_LSHQR12RC: REGISTER._12Q <<= REGISTER.CQ; continue;
case INSTR_LSHQR12RD: REGISTER._12Q <<= REGISTER.DQ; continue;
case INSTR_LSHQR12R0: REGISTER._12Q <<= REGISTER._0Q; continue;
case INSTR_LSHQR12R1: REGISTER._12Q <<= REGISTER._1Q; continue;
case INSTR_LSHQR12R2: REGISTER._12Q <<= REGISTER._2Q; continue;
case INSTR_LSHQR12R3: REGISTER._12Q <<= REGISTER._3Q; continue;
case INSTR_LSHQR12R4: REGISTER._12Q <<= REGISTER._4Q; continue;
case INSTR_LSHQR12R5: REGISTER._12Q <<= REGISTER._5Q; continue;
case INSTR_LSHQR12R6: REGISTER._12Q <<= REGISTER._6Q; continue;
case INSTR_LSHQR12R7: REGISTER._12Q <<= REGISTER._7Q; continue;
case INSTR_LSHQR12R8: REGISTER._12Q <<= REGISTER._8Q; continue;
case INSTR_LSHQR12R9: REGISTER._12Q <<= REGISTER._9Q; continue;
case INSTR_LSHQR12R10: REGISTER._12Q <<= REGISTER._10Q; continue;
case INSTR_LSHQR12R11: REGISTER._12Q <<= REGISTER._11Q; continue;
case INSTR_LSHQR12R12: REGISTER._12Q <<= REGISTER._12Q; continue;
case INSTR_LSHQR12RIP: REGISTER._12Q <<= REGISTER.IPQ; continue;
case INSTR_LSHQR12RSP: REGISTER._12Q <<= REGISTER.SPQ; continue;
case INSTR_LSHQR12RBP: REGISTER._12Q <<= REGISTER.BPQ; continue;
case INSTR_LSHQRIPI: REGISTER.IPQ <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQRIPRA: REGISTER.IPQ <<= REGISTER.AQ; continue;
case INSTR_LSHQRIPRB: REGISTER.IPQ <<= REGISTER.BQ; continue;
case INSTR_LSHQRIPRC: REGISTER.IPQ <<= REGISTER.CQ; continue;
case INSTR_LSHQRIPRD: REGISTER.IPQ <<= REGISTER.DQ; continue;
case INSTR_LSHQRIPR0: REGISTER.IPQ <<= REGISTER._0Q; continue;
case INSTR_LSHQRIPR1: REGISTER.IPQ <<= REGISTER._1Q; continue;
case INSTR_LSHQRIPR2: REGISTER.IPQ <<= REGISTER._2Q; continue;
case INSTR_LSHQRIPR3: REGISTER.IPQ <<= REGISTER._3Q; continue;
case INSTR_LSHQRIPR4: REGISTER.IPQ <<= REGISTER._4Q; continue;
case INSTR_LSHQRIPR5: REGISTER.IPQ <<= REGISTER._5Q; continue;
case INSTR_LSHQRIPR6: REGISTER.IPQ <<= REGISTER._6Q; continue;
case INSTR_LSHQRIPR7: REGISTER.IPQ <<= REGISTER._7Q; continue;
case INSTR_LSHQRIPR8: REGISTER.IPQ <<= REGISTER._8Q; continue;
case INSTR_LSHQRIPR9: REGISTER.IPQ <<= REGISTER._9Q; continue;
case INSTR_LSHQRIPR10: REGISTER.IPQ <<= REGISTER._10Q; continue;
case INSTR_LSHQRIPR11: REGISTER.IPQ <<= REGISTER._11Q; continue;
case INSTR_LSHQRIPR12: REGISTER.IPQ <<= REGISTER._12Q; continue;
case INSTR_LSHQRIPRIP: REGISTER.IPQ <<= REGISTER.IPQ; continue;
case INSTR_LSHQRIPRSP: REGISTER.IPQ <<= REGISTER.SPQ; continue;
case INSTR_LSHQRIPRBP: REGISTER.IPQ <<= REGISTER.BPQ; continue;
case INSTR_LSHQRSPI: REGISTER.SPQ <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQRSPRA: REGISTER.SPQ <<= REGISTER.AQ; continue;
case INSTR_LSHQRSPRB: REGISTER.SPQ <<= REGISTER.BQ; continue;
case INSTR_LSHQRSPRC: REGISTER.SPQ <<= REGISTER.CQ; continue;
case INSTR_LSHQRSPRD: REGISTER.SPQ <<= REGISTER.DQ; continue;
case INSTR_LSHQRSPR0: REGISTER.SPQ <<= REGISTER._0Q; continue;
case INSTR_LSHQRSPR1: REGISTER.SPQ <<= REGISTER._1Q; continue;
case INSTR_LSHQRSPR2: REGISTER.SPQ <<= REGISTER._2Q; continue;
case INSTR_LSHQRSPR3: REGISTER.SPQ <<= REGISTER._3Q; continue;
case INSTR_LSHQRSPR4: REGISTER.SPQ <<= REGISTER._4Q; continue;
case INSTR_LSHQRSPR5: REGISTER.SPQ <<= REGISTER._5Q; continue;
case INSTR_LSHQRSPR6: REGISTER.SPQ <<= REGISTER._6Q; continue;
case INSTR_LSHQRSPR7: REGISTER.SPQ <<= REGISTER._7Q; continue;
case INSTR_LSHQRSPR8: REGISTER.SPQ <<= REGISTER._8Q; continue;
case INSTR_LSHQRSPR9: REGISTER.SPQ <<= REGISTER._9Q; continue;
case INSTR_LSHQRSPR10: REGISTER.SPQ <<= REGISTER._10Q; continue;
case INSTR_LSHQRSPR11: REGISTER.SPQ <<= REGISTER._11Q; continue;
case INSTR_LSHQRSPR12: REGISTER.SPQ <<= REGISTER._12Q; continue;
case INSTR_LSHQRSPRIP: REGISTER.SPQ <<= REGISTER.IPQ; continue;
case INSTR_LSHQRSPRSP: REGISTER.SPQ <<= REGISTER.SPQ; continue;
case INSTR_LSHQRSPRBP: REGISTER.SPQ <<= REGISTER.BPQ; continue;
case INSTR_LSHQRBPI: REGISTER.BPQ <<= *(int*) (RAM + REGISTER.IP); REGISTER.IP += 4; continue;
case INSTR_LSHQRBPRA: REGISTER.BPQ <<= REGISTER.AQ; continue;
case INSTR_LSHQRBPRB: REGISTER.BPQ <<= REGISTER.BQ; continue;
case INSTR_LSHQRBPRC: REGISTER.BPQ <<= REGISTER.CQ; continue;
case INSTR_LSHQRBPRD: REGISTER.BPQ <<= REGISTER.DQ; continue;
case INSTR_LSHQRBPR0: REGISTER.BPQ <<= REGISTER._0Q; continue;
case INSTR_LSHQRBPR1: REGISTER.BPQ <<= REGISTER._1Q; continue;
case INSTR_LSHQRBPR2: REGISTER.BPQ <<= REGISTER._2Q; continue;
case INSTR_LSHQRBPR3: REGISTER.BPQ <<= REGISTER._3Q; continue;
case INSTR_LSHQRBPR4: REGISTER.BPQ <<= REGISTER._4Q; continue;
case INSTR_LSHQRBPR5: REGISTER.BPQ <<= REGISTER._5Q; continue;
case INSTR_LSHQRBPR6: REGISTER.BPQ <<= REGISTER._6Q; continue;
case INSTR_LSHQRBPR7: REGISTER.BPQ <<= REGISTER._7Q; continue;
case INSTR_LSHQRBPR8: REGISTER.BPQ <<= REGISTER._8Q; continue;
case INSTR_LSHQRBPR9: REGISTER.BPQ <<= REGISTER._9Q; continue;
case INSTR_LSHQRBPR10: REGISTER.BPQ <<= REGISTER._10Q; continue;
case INSTR_LSHQRBPR11: REGISTER.BPQ <<= REGISTER._11Q; continue;
case INSTR_LSHQRBPR12: REGISTER.BPQ <<= REGISTER._12Q; continue;
case INSTR_LSHQRBPRIP: REGISTER.BPQ <<= REGISTER.IPQ; continue;
case INSTR_LSHQRBPRSP: REGISTER.BPQ <<= REGISTER.SPQ; continue;
case INSTR_LSHQRBPRBP: REGISTER.BPQ <<= REGISTER.BPQ; continue;
case INSTR_LSHWRAI: REGISTER.AW <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWRARA: REGISTER.AW <<= REGISTER.AW; continue;
case INSTR_LSHWRARB: REGISTER.AW <<= REGISTER.BW; continue;
case INSTR_LSHWRARC: REGISTER.AW <<= REGISTER.CW; continue;
case INSTR_LSHWRARD: REGISTER.AW <<= REGISTER.DW; continue;
case INSTR_LSHWRAR0: REGISTER.AW <<= REGISTER._0W; continue;
case INSTR_LSHWRAR1: REGISTER.AW <<= REGISTER._1W; continue;
case INSTR_LSHWRAR2: REGISTER.AW <<= REGISTER._2W; continue;
case INSTR_LSHWRAR3: REGISTER.AW <<= REGISTER._3W; continue;
case INSTR_LSHWRAR4: REGISTER.AW <<= REGISTER._4W; continue;
case INSTR_LSHWRAR5: REGISTER.AW <<= REGISTER._5W; continue;
case INSTR_LSHWRAR6: REGISTER.AW <<= REGISTER._6W; continue;
case INSTR_LSHWRAR7: REGISTER.AW <<= REGISTER._7W; continue;
case INSTR_LSHWRAR8: REGISTER.AW <<= REGISTER._8W; continue;
case INSTR_LSHWRAR9: REGISTER.AW <<= REGISTER._9W; continue;
case INSTR_LSHWRAR10: REGISTER.AW <<= REGISTER._10W; continue;
case INSTR_LSHWRAR11: REGISTER.AW <<= REGISTER._11W; continue;
case INSTR_LSHWRAR12: REGISTER.AW <<= REGISTER._12W; continue;
case INSTR_LSHWRARIP: REGISTER.AW <<= REGISTER.IPW; continue;
case INSTR_LSHWRARSP: REGISTER.AW <<= REGISTER.SPW; continue;
case INSTR_LSHWRARBP: REGISTER.AW <<= REGISTER.BPW; continue;
case INSTR_LSHWRBI: REGISTER.BW <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWRBRA: REGISTER.BW <<= REGISTER.AW; continue;
case INSTR_LSHWRBRB: REGISTER.BW <<= REGISTER.BW; continue;
case INSTR_LSHWRBRC: REGISTER.BW <<= REGISTER.CW; continue;
case INSTR_LSHWRBRD: REGISTER.BW <<= REGISTER.DW; continue;
case INSTR_LSHWRBR0: REGISTER.BW <<= REGISTER._0W; continue;
case INSTR_LSHWRBR1: REGISTER.BW <<= REGISTER._1W; continue;
case INSTR_LSHWRBR2: REGISTER.BW <<= REGISTER._2W; continue;
case INSTR_LSHWRBR3: REGISTER.BW <<= REGISTER._3W; continue;
case INSTR_LSHWRBR4: REGISTER.BW <<= REGISTER._4W; continue;
case INSTR_LSHWRBR5: REGISTER.BW <<= REGISTER._5W; continue;
case INSTR_LSHWRBR6: REGISTER.BW <<= REGISTER._6W; continue;
case INSTR_LSHWRBR7: REGISTER.BW <<= REGISTER._7W; continue;
case INSTR_LSHWRBR8: REGISTER.BW <<= REGISTER._8W; continue;
case INSTR_LSHWRBR9: REGISTER.BW <<= REGISTER._9W; continue;
case INSTR_LSHWRBR10: REGISTER.BW <<= REGISTER._10W; continue;
case INSTR_LSHWRBR11: REGISTER.BW <<= REGISTER._11W; continue;
case INSTR_LSHWRBR12: REGISTER.BW <<= REGISTER._12W; continue;
case INSTR_LSHWRBRIP: REGISTER.BW <<= REGISTER.IPW; continue;
case INSTR_LSHWRBRSP: REGISTER.BW <<= REGISTER.SPW; continue;
case INSTR_LSHWRBRBP: REGISTER.BW <<= REGISTER.BPW; continue;
case INSTR_LSHWRCI: REGISTER.CW <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWRCRA: REGISTER.CW <<= REGISTER.AW; continue;
case INSTR_LSHWRCRB: REGISTER.CW <<= REGISTER.BW; continue;
case INSTR_LSHWRCRC: REGISTER.CW <<= REGISTER.CW; continue;
case INSTR_LSHWRCRD: REGISTER.CW <<= REGISTER.DW; continue;
case INSTR_LSHWRCR0: REGISTER.CW <<= REGISTER._0W; continue;
case INSTR_LSHWRCR1: REGISTER.CW <<= REGISTER._1W; continue;
case INSTR_LSHWRCR2: REGISTER.CW <<= REGISTER._2W; continue;
case INSTR_LSHWRCR3: REGISTER.CW <<= REGISTER._3W; continue;
case INSTR_LSHWRCR4: REGISTER.CW <<= REGISTER._4W; continue;
case INSTR_LSHWRCR5: REGISTER.CW <<= REGISTER._5W; continue;
case INSTR_LSHWRCR6: REGISTER.CW <<= REGISTER._6W; continue;
case INSTR_LSHWRCR7: REGISTER.CW <<= REGISTER._7W; continue;
case INSTR_LSHWRCR8: REGISTER.CW <<= REGISTER._8W; continue;
case INSTR_LSHWRCR9: REGISTER.CW <<= REGISTER._9W; continue;
case INSTR_LSHWRCR10: REGISTER.CW <<= REGISTER._10W; continue;
case INSTR_LSHWRCR11: REGISTER.CW <<= REGISTER._11W; continue;
case INSTR_LSHWRCR12: REGISTER.CW <<= REGISTER._12W; continue;
case INSTR_LSHWRCRIP: REGISTER.CW <<= REGISTER.IPW; continue;
case INSTR_LSHWRCRSP: REGISTER.CW <<= REGISTER.SPW; continue;
case INSTR_LSHWRCRBP: REGISTER.CW <<= REGISTER.BPW; continue;
case INSTR_LSHWRDI: REGISTER.DW <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWRDRA: REGISTER.DW <<= REGISTER.AW; continue;
case INSTR_LSHWRDRB: REGISTER.DW <<= REGISTER.BW; continue;
case INSTR_LSHWRDRC: REGISTER.DW <<= REGISTER.CW; continue;
case INSTR_LSHWRDRD: REGISTER.DW <<= REGISTER.DW; continue;
case INSTR_LSHWRDR0: REGISTER.DW <<= REGISTER._0W; continue;
case INSTR_LSHWRDR1: REGISTER.DW <<= REGISTER._1W; continue;
case INSTR_LSHWRDR2: REGISTER.DW <<= REGISTER._2W; continue;
case INSTR_LSHWRDR3: REGISTER.DW <<= REGISTER._3W; continue;
case INSTR_LSHWRDR4: REGISTER.DW <<= REGISTER._4W; continue;
case INSTR_LSHWRDR5: REGISTER.DW <<= REGISTER._5W; continue;
case INSTR_LSHWRDR6: REGISTER.DW <<= REGISTER._6W; continue;
case INSTR_LSHWRDR7: REGISTER.DW <<= REGISTER._7W; continue;
case INSTR_LSHWRDR8: REGISTER.DW <<= REGISTER._8W; continue;
case INSTR_LSHWRDR9: REGISTER.DW <<= REGISTER._9W; continue;
case INSTR_LSHWRDR10: REGISTER.DW <<= REGISTER._10W; continue;
case INSTR_LSHWRDR11: REGISTER.DW <<= REGISTER._11W; continue;
case INSTR_LSHWRDR12: REGISTER.DW <<= REGISTER._12W; continue;
case INSTR_LSHWRDRIP: REGISTER.DW <<= REGISTER.IPW; continue;
case INSTR_LSHWRDRSP: REGISTER.DW <<= REGISTER.SPW; continue;
case INSTR_LSHWRDRBP: REGISTER.DW <<= REGISTER.BPW; continue;
case INSTR_LSHWR0I: REGISTER._0W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR0RA: REGISTER._0W <<= REGISTER.AW; continue;
case INSTR_LSHWR0RB: REGISTER._0W <<= REGISTER.BW; continue;
case INSTR_LSHWR0RC: REGISTER._0W <<= REGISTER.CW; continue;
case INSTR_LSHWR0RD: REGISTER._0W <<= REGISTER.DW; continue;
case INSTR_LSHWR0R0: REGISTER._0W <<= REGISTER._0W; continue;
case INSTR_LSHWR0R1: REGISTER._0W <<= REGISTER._1W; continue;
case INSTR_LSHWR0R2: REGISTER._0W <<= REGISTER._2W; continue;
case INSTR_LSHWR0R3: REGISTER._0W <<= REGISTER._3W; continue;
case INSTR_LSHWR0R4: REGISTER._0W <<= REGISTER._4W; continue;
case INSTR_LSHWR0R5: REGISTER._0W <<= REGISTER._5W; continue;
case INSTR_LSHWR0R6: REGISTER._0W <<= REGISTER._6W; continue;
case INSTR_LSHWR0R7: REGISTER._0W <<= REGISTER._7W; continue;
case INSTR_LSHWR0R8: REGISTER._0W <<= REGISTER._8W; continue;
case INSTR_LSHWR0R9: REGISTER._0W <<= REGISTER._9W; continue;
case INSTR_LSHWR0R10: REGISTER._0W <<= REGISTER._10W; continue;
case INSTR_LSHWR0R11: REGISTER._0W <<= REGISTER._11W; continue;
case INSTR_LSHWR0R12: REGISTER._0W <<= REGISTER._12W; continue;
case INSTR_LSHWR0RIP: REGISTER._0W <<= REGISTER.IPW; continue;
case INSTR_LSHWR0RSP: REGISTER._0W <<= REGISTER.SPW; continue;
case INSTR_LSHWR0RBP: REGISTER._0W <<= REGISTER.BPW; continue;
case INSTR_LSHWR1I: REGISTER._1W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR1RA: REGISTER._1W <<= REGISTER.AW; continue;
case INSTR_LSHWR1RB: REGISTER._1W <<= REGISTER.BW; continue;
case INSTR_LSHWR1RC: REGISTER._1W <<= REGISTER.CW; continue;
case INSTR_LSHWR1RD: REGISTER._1W <<= REGISTER.DW; continue;
case INSTR_LSHWR1R0: REGISTER._1W <<= REGISTER._0W; continue;
case INSTR_LSHWR1R1: REGISTER._1W <<= REGISTER._1W; continue;
case INSTR_LSHWR1R2: REGISTER._1W <<= REGISTER._2W; continue;
case INSTR_LSHWR1R3: REGISTER._1W <<= REGISTER._3W; continue;
case INSTR_LSHWR1R4: REGISTER._1W <<= REGISTER._4W; continue;
case INSTR_LSHWR1R5: REGISTER._1W <<= REGISTER._5W; continue;
case INSTR_LSHWR1R6: REGISTER._1W <<= REGISTER._6W; continue;
case INSTR_LSHWR1R7: REGISTER._1W <<= REGISTER._7W; continue;
case INSTR_LSHWR1R8: REGISTER._1W <<= REGISTER._8W; continue;
case INSTR_LSHWR1R9: REGISTER._1W <<= REGISTER._9W; continue;
case INSTR_LSHWR1R10: REGISTER._1W <<= REGISTER._10W; continue;
case INSTR_LSHWR1R11: REGISTER._1W <<= REGISTER._11W; continue;
case INSTR_LSHWR1R12: REGISTER._1W <<= REGISTER._12W; continue;
case INSTR_LSHWR1RIP: REGISTER._1W <<= REGISTER.IPW; continue;
case INSTR_LSHWR1RSP: REGISTER._1W <<= REGISTER.SPW; continue;
case INSTR_LSHWR1RBP: REGISTER._1W <<= REGISTER.BPW; continue;
case INSTR_LSHWR2I: REGISTER._2W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR2RA: REGISTER._2W <<= REGISTER.AW; continue;
case INSTR_LSHWR2RB: REGISTER._2W <<= REGISTER.BW; continue;
case INSTR_LSHWR2RC: REGISTER._2W <<= REGISTER.CW; continue;
case INSTR_LSHWR2RD: REGISTER._2W <<= REGISTER.DW; continue;
case INSTR_LSHWR2R0: REGISTER._2W <<= REGISTER._0W; continue;
case INSTR_LSHWR2R1: REGISTER._2W <<= REGISTER._1W; continue;
case INSTR_LSHWR2R2: REGISTER._2W <<= REGISTER._2W; continue;
case INSTR_LSHWR2R3: REGISTER._2W <<= REGISTER._3W; continue;
case INSTR_LSHWR2R4: REGISTER._2W <<= REGISTER._4W; continue;
case INSTR_LSHWR2R5: REGISTER._2W <<= REGISTER._5W; continue;
case INSTR_LSHWR2R6: REGISTER._2W <<= REGISTER._6W; continue;
case INSTR_LSHWR2R7: REGISTER._2W <<= REGISTER._7W; continue;
case INSTR_LSHWR2R8: REGISTER._2W <<= REGISTER._8W; continue;
case INSTR_LSHWR2R9: REGISTER._2W <<= REGISTER._9W; continue;
case INSTR_LSHWR2R10: REGISTER._2W <<= REGISTER._10W; continue;
case INSTR_LSHWR2R11: REGISTER._2W <<= REGISTER._11W; continue;
case INSTR_LSHWR2R12: REGISTER._2W <<= REGISTER._12W; continue;
case INSTR_LSHWR2RIP: REGISTER._2W <<= REGISTER.IPW; continue;
case INSTR_LSHWR2RSP: REGISTER._2W <<= REGISTER.SPW; continue;
case INSTR_LSHWR2RBP: REGISTER._2W <<= REGISTER.BPW; continue;
case INSTR_LSHWR3I: REGISTER._3W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR3RA: REGISTER._3W <<= REGISTER.AW; continue;
case INSTR_LSHWR3RB: REGISTER._3W <<= REGISTER.BW; continue;
case INSTR_LSHWR3RC: REGISTER._3W <<= REGISTER.CW; continue;
case INSTR_LSHWR3RD: REGISTER._3W <<= REGISTER.DW; continue;
case INSTR_LSHWR3R0: REGISTER._3W <<= REGISTER._0W; continue;
case INSTR_LSHWR3R1: REGISTER._3W <<= REGISTER._1W; continue;
case INSTR_LSHWR3R2: REGISTER._3W <<= REGISTER._2W; continue;
case INSTR_LSHWR3R3: REGISTER._3W <<= REGISTER._3W; continue;
case INSTR_LSHWR3R4: REGISTER._3W <<= REGISTER._4W; continue;
case INSTR_LSHWR3R5: REGISTER._3W <<= REGISTER._5W; continue;
case INSTR_LSHWR3R6: REGISTER._3W <<= REGISTER._6W; continue;
case INSTR_LSHWR3R7: REGISTER._3W <<= REGISTER._7W; continue;
case INSTR_LSHWR3R8: REGISTER._3W <<= REGISTER._8W; continue;
case INSTR_LSHWR3R9: REGISTER._3W <<= REGISTER._9W; continue;
case INSTR_LSHWR3R10: REGISTER._3W <<= REGISTER._10W; continue;
case INSTR_LSHWR3R11: REGISTER._3W <<= REGISTER._11W; continue;
case INSTR_LSHWR3R12: REGISTER._3W <<= REGISTER._12W; continue;
case INSTR_LSHWR3RIP: REGISTER._3W <<= REGISTER.IPW; continue;
case INSTR_LSHWR3RSP: REGISTER._3W <<= REGISTER.SPW; continue;
case INSTR_LSHWR3RBP: REGISTER._3W <<= REGISTER.BPW; continue;
case INSTR_LSHWR4I: REGISTER._4W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR4RA: REGISTER._4W <<= REGISTER.AW; continue;
case INSTR_LSHWR4RB: REGISTER._4W <<= REGISTER.BW; continue;
case INSTR_LSHWR4RC: REGISTER._4W <<= REGISTER.CW; continue;
case INSTR_LSHWR4RD: REGISTER._4W <<= REGISTER.DW; continue;
case INSTR_LSHWR4R0: REGISTER._4W <<= REGISTER._0W; continue;
case INSTR_LSHWR4R1: REGISTER._4W <<= REGISTER._1W; continue;
case INSTR_LSHWR4R2: REGISTER._4W <<= REGISTER._2W; continue;
case INSTR_LSHWR4R3: REGISTER._4W <<= REGISTER._3W; continue;
case INSTR_LSHWR4R4: REGISTER._4W <<= REGISTER._4W; continue;
case INSTR_LSHWR4R5: REGISTER._4W <<= REGISTER._5W; continue;
case INSTR_LSHWR4R6: REGISTER._4W <<= REGISTER._6W; continue;
case INSTR_LSHWR4R7: REGISTER._4W <<= REGISTER._7W; continue;
case INSTR_LSHWR4R8: REGISTER._4W <<= REGISTER._8W; continue;
case INSTR_LSHWR4R9: REGISTER._4W <<= REGISTER._9W; continue;
case INSTR_LSHWR4R10: REGISTER._4W <<= REGISTER._10W; continue;
case INSTR_LSHWR4R11: REGISTER._4W <<= REGISTER._11W; continue;
case INSTR_LSHWR4R12: REGISTER._4W <<= REGISTER._12W; continue;
case INSTR_LSHWR4RIP: REGISTER._4W <<= REGISTER.IPW; continue;
case INSTR_LSHWR4RSP: REGISTER._4W <<= REGISTER.SPW; continue;
case INSTR_LSHWR4RBP: REGISTER._4W <<= REGISTER.BPW; continue;
case INSTR_LSHWR5I: REGISTER._5W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR5RA: REGISTER._5W <<= REGISTER.AW; continue;
case INSTR_LSHWR5RB: REGISTER._5W <<= REGISTER.BW; continue;
case INSTR_LSHWR5RC: REGISTER._5W <<= REGISTER.CW; continue;
case INSTR_LSHWR5RD: REGISTER._5W <<= REGISTER.DW; continue;
case INSTR_LSHWR5R0: REGISTER._5W <<= REGISTER._0W; continue;
case INSTR_LSHWR5R1: REGISTER._5W <<= REGISTER._1W; continue;
case INSTR_LSHWR5R2: REGISTER._5W <<= REGISTER._2W; continue;
case INSTR_LSHWR5R3: REGISTER._5W <<= REGISTER._3W; continue;
case INSTR_LSHWR5R4: REGISTER._5W <<= REGISTER._4W; continue;
case INSTR_LSHWR5R5: REGISTER._5W <<= REGISTER._5W; continue;
case INSTR_LSHWR5R6: REGISTER._5W <<= REGISTER._6W; continue;
case INSTR_LSHWR5R7: REGISTER._5W <<= REGISTER._7W; continue;
case INSTR_LSHWR5R8: REGISTER._5W <<= REGISTER._8W; continue;
case INSTR_LSHWR5R9: REGISTER._5W <<= REGISTER._9W; continue;
case INSTR_LSHWR5R10: REGISTER._5W <<= REGISTER._10W; continue;
case INSTR_LSHWR5R11: REGISTER._5W <<= REGISTER._11W; continue;
case INSTR_LSHWR5R12: REGISTER._5W <<= REGISTER._12W; continue;
case INSTR_LSHWR5RIP: REGISTER._5W <<= REGISTER.IPW; continue;
case INSTR_LSHWR5RSP: REGISTER._5W <<= REGISTER.SPW; continue;
case INSTR_LSHWR5RBP: REGISTER._5W <<= REGISTER.BPW; continue;
case INSTR_LSHWR6I: REGISTER._6W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR6RA: REGISTER._6W <<= REGISTER.AW; continue;
case INSTR_LSHWR6RB: REGISTER._6W <<= REGISTER.BW; continue;
case INSTR_LSHWR6RC: REGISTER._6W <<= REGISTER.CW; continue;
case INSTR_LSHWR6RD: REGISTER._6W <<= REGISTER.DW; continue;
case INSTR_LSHWR6R0: REGISTER._6W <<= REGISTER._0W; continue;
case INSTR_LSHWR6R1: REGISTER._6W <<= REGISTER._1W; continue;
case INSTR_LSHWR6R2: REGISTER._6W <<= REGISTER._2W; continue;
case INSTR_LSHWR6R3: REGISTER._6W <<= REGISTER._3W; continue;
case INSTR_LSHWR6R4: REGISTER._6W <<= REGISTER._4W; continue;
case INSTR_LSHWR6R5: REGISTER._6W <<= REGISTER._5W; continue;
case INSTR_LSHWR6R6: REGISTER._6W <<= REGISTER._6W; continue;
case INSTR_LSHWR6R7: REGISTER._6W <<= REGISTER._7W; continue;
case INSTR_LSHWR6R8: REGISTER._6W <<= REGISTER._8W; continue;
case INSTR_LSHWR6R9: REGISTER._6W <<= REGISTER._9W; continue;
case INSTR_LSHWR6R10: REGISTER._6W <<= REGISTER._10W; continue;
case INSTR_LSHWR6R11: REGISTER._6W <<= REGISTER._11W; continue;
case INSTR_LSHWR6R12: REGISTER._6W <<= REGISTER._12W; continue;
case INSTR_LSHWR6RIP: REGISTER._6W <<= REGISTER.IPW; continue;
case INSTR_LSHWR6RSP: REGISTER._6W <<= REGISTER.SPW; continue;
case INSTR_LSHWR6RBP: REGISTER._6W <<= REGISTER.BPW; continue;
case INSTR_LSHWR7I: REGISTER._7W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR7RA: REGISTER._7W <<= REGISTER.AW; continue;
case INSTR_LSHWR7RB: REGISTER._7W <<= REGISTER.BW; continue;
case INSTR_LSHWR7RC: REGISTER._7W <<= REGISTER.CW; continue;
case INSTR_LSHWR7RD: REGISTER._7W <<= REGISTER.DW; continue;
case INSTR_LSHWR7R0: REGISTER._7W <<= REGISTER._0W; continue;
case INSTR_LSHWR7R1: REGISTER._7W <<= REGISTER._1W; continue;
case INSTR_LSHWR7R2: REGISTER._7W <<= REGISTER._2W; continue;
case INSTR_LSHWR7R3: REGISTER._7W <<= REGISTER._3W; continue;
case INSTR_LSHWR7R4: REGISTER._7W <<= REGISTER._4W; continue;
case INSTR_LSHWR7R5: REGISTER._7W <<= REGISTER._5W; continue;
case INSTR_LSHWR7R6: REGISTER._7W <<= REGISTER._6W; continue;
case INSTR_LSHWR7R7: REGISTER._7W <<= REGISTER._7W; continue;
case INSTR_LSHWR7R8: REGISTER._7W <<= REGISTER._8W; continue;
case INSTR_LSHWR7R9: REGISTER._7W <<= REGISTER._9W; continue;
case INSTR_LSHWR7R10: REGISTER._7W <<= REGISTER._10W; continue;
case INSTR_LSHWR7R11: REGISTER._7W <<= REGISTER._11W; continue;
case INSTR_LSHWR7R12: REGISTER._7W <<= REGISTER._12W; continue;
case INSTR_LSHWR7RIP: REGISTER._7W <<= REGISTER.IPW; continue;
case INSTR_LSHWR7RSP: REGISTER._7W <<= REGISTER.SPW; continue;
case INSTR_LSHWR7RBP: REGISTER._7W <<= REGISTER.BPW; continue;
case INSTR_LSHWR8I: REGISTER._8W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR8RA: REGISTER._8W <<= REGISTER.AW; continue;
case INSTR_LSHWR8RB: REGISTER._8W <<= REGISTER.BW; continue;
case INSTR_LSHWR8RC: REGISTER._8W <<= REGISTER.CW; continue;
case INSTR_LSHWR8RD: REGISTER._8W <<= REGISTER.DW; continue;
case INSTR_LSHWR8R0: REGISTER._8W <<= REGISTER._0W; continue;
case INSTR_LSHWR8R1: REGISTER._8W <<= REGISTER._1W; continue;
case INSTR_LSHWR8R2: REGISTER._8W <<= REGISTER._2W; continue;
case INSTR_LSHWR8R3: REGISTER._8W <<= REGISTER._3W; continue;
case INSTR_LSHWR8R4: REGISTER._8W <<= REGISTER._4W; continue;
case INSTR_LSHWR8R5: REGISTER._8W <<= REGISTER._5W; continue;
case INSTR_LSHWR8R6: REGISTER._8W <<= REGISTER._6W; continue;
case INSTR_LSHWR8R7: REGISTER._8W <<= REGISTER._7W; continue;
case INSTR_LSHWR8R8: REGISTER._8W <<= REGISTER._8W; continue;
case INSTR_LSHWR8R9: REGISTER._8W <<= REGISTER._9W; continue;
case INSTR_LSHWR8R10: REGISTER._8W <<= REGISTER._10W; continue;
case INSTR_LSHWR8R11: REGISTER._8W <<= REGISTER._11W; continue;
case INSTR_LSHWR8R12: REGISTER._8W <<= REGISTER._12W; continue;
case INSTR_LSHWR8RIP: REGISTER._8W <<= REGISTER.IPW; continue;
case INSTR_LSHWR8RSP: REGISTER._8W <<= REGISTER.SPW; continue;
case INSTR_LSHWR8RBP: REGISTER._8W <<= REGISTER.BPW; continue;
case INSTR_LSHWR9I: REGISTER._9W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR9RA: REGISTER._9W <<= REGISTER.AW; continue;
case INSTR_LSHWR9RB: REGISTER._9W <<= REGISTER.BW; continue;
case INSTR_LSHWR9RC: REGISTER._9W <<= REGISTER.CW; continue;
case INSTR_LSHWR9RD: REGISTER._9W <<= REGISTER.DW; continue;
case INSTR_LSHWR9R0: REGISTER._9W <<= REGISTER._0W; continue;
case INSTR_LSHWR9R1: REGISTER._9W <<= REGISTER._1W; continue;
case INSTR_LSHWR9R2: REGISTER._9W <<= REGISTER._2W; continue;
case INSTR_LSHWR9R3: REGISTER._9W <<= REGISTER._3W; continue;
case INSTR_LSHWR9R4: REGISTER._9W <<= REGISTER._4W; continue;
case INSTR_LSHWR9R5: REGISTER._9W <<= REGISTER._5W; continue;
case INSTR_LSHWR9R6: REGISTER._9W <<= REGISTER._6W; continue;
case INSTR_LSHWR9R7: REGISTER._9W <<= REGISTER._7W; continue;
case INSTR_LSHWR9R8: REGISTER._9W <<= REGISTER._8W; continue;
case INSTR_LSHWR9R9: REGISTER._9W <<= REGISTER._9W; continue;
case INSTR_LSHWR9R10: REGISTER._9W <<= REGISTER._10W; continue;
case INSTR_LSHWR9R11: REGISTER._9W <<= REGISTER._11W; continue;
case INSTR_LSHWR9R12: REGISTER._9W <<= REGISTER._12W; continue;
case INSTR_LSHWR9RIP: REGISTER._9W <<= REGISTER.IPW; continue;
case INSTR_LSHWR9RSP: REGISTER._9W <<= REGISTER.SPW; continue;
case INSTR_LSHWR9RBP: REGISTER._9W <<= REGISTER.BPW; continue;
case INSTR_LSHWR10I: REGISTER._10W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR10RA: REGISTER._10W <<= REGISTER.AW; continue;
case INSTR_LSHWR10RB: REGISTER._10W <<= REGISTER.BW; continue;
case INSTR_LSHWR10RC: REGISTER._10W <<= REGISTER.CW; continue;
case INSTR_LSHWR10RD: REGISTER._10W <<= REGISTER.DW; continue;
case INSTR_LSHWR10R0: REGISTER._10W <<= REGISTER._0W; continue;
case INSTR_LSHWR10R1: REGISTER._10W <<= REGISTER._1W; continue;
case INSTR_LSHWR10R2: REGISTER._10W <<= REGISTER._2W; continue;
case INSTR_LSHWR10R3: REGISTER._10W <<= REGISTER._3W; continue;
case INSTR_LSHWR10R4: REGISTER._10W <<= REGISTER._4W; continue;
case INSTR_LSHWR10R5: REGISTER._10W <<= REGISTER._5W; continue;
case INSTR_LSHWR10R6: REGISTER._10W <<= REGISTER._6W; continue;
case INSTR_LSHWR10R7: REGISTER._10W <<= REGISTER._7W; continue;
case INSTR_LSHWR10R8: REGISTER._10W <<= REGISTER._8W; continue;
case INSTR_LSHWR10R9: REGISTER._10W <<= REGISTER._9W; continue;
case INSTR_LSHWR10R10: REGISTER._10W <<= REGISTER._10W; continue;
case INSTR_LSHWR10R11: REGISTER._10W <<= REGISTER._11W; continue;
case INSTR_LSHWR10R12: REGISTER._10W <<= REGISTER._12W; continue;
case INSTR_LSHWR10RIP: REGISTER._10W <<= REGISTER.IPW; continue;
case INSTR_LSHWR10RSP: REGISTER._10W <<= REGISTER.SPW; continue;
case INSTR_LSHWR10RBP: REGISTER._10W <<= REGISTER.BPW; continue;
case INSTR_LSHWR11I: REGISTER._11W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR11RA: REGISTER._11W <<= REGISTER.AW; continue;
case INSTR_LSHWR11RB: REGISTER._11W <<= REGISTER.BW; continue;
case INSTR_LSHWR11RC: REGISTER._11W <<= REGISTER.CW; continue;
case INSTR_LSHWR11RD: REGISTER._11W <<= REGISTER.DW; continue;
case INSTR_LSHWR11R0: REGISTER._11W <<= REGISTER._0W; continue;
case INSTR_LSHWR11R1: REGISTER._11W <<= REGISTER._1W; continue;
case INSTR_LSHWR11R2: REGISTER._11W <<= REGISTER._2W; continue;
case INSTR_LSHWR11R3: REGISTER._11W <<= REGISTER._3W; continue;
case INSTR_LSHWR11R4: REGISTER._11W <<= REGISTER._4W; continue;
case INSTR_LSHWR11R5: REGISTER._11W <<= REGISTER._5W; continue;
case INSTR_LSHWR11R6: REGISTER._11W <<= REGISTER._6W; continue;
case INSTR_LSHWR11R7: REGISTER._11W <<= REGISTER._7W; continue;
case INSTR_LSHWR11R8: REGISTER._11W <<= REGISTER._8W; continue;
case INSTR_LSHWR11R9: REGISTER._11W <<= REGISTER._9W; continue;
case INSTR_LSHWR11R10: REGISTER._11W <<= REGISTER._10W; continue;
case INSTR_LSHWR11R11: REGISTER._11W <<= REGISTER._11W; continue;
case INSTR_LSHWR11R12: REGISTER._11W <<= REGISTER._12W; continue;
case INSTR_LSHWR11RIP: REGISTER._11W <<= REGISTER.IPW; continue;
case INSTR_LSHWR11RSP: REGISTER._11W <<= REGISTER.SPW; continue;
case INSTR_LSHWR11RBP: REGISTER._11W <<= REGISTER.BPW; continue;
case INSTR_LSHWR12I: REGISTER._12W <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWR12RA: REGISTER._12W <<= REGISTER.AW; continue;
case INSTR_LSHWR12RB: REGISTER._12W <<= REGISTER.BW; continue;
case INSTR_LSHWR12RC: REGISTER._12W <<= REGISTER.CW; continue;
case INSTR_LSHWR12RD: REGISTER._12W <<= REGISTER.DW; continue;
case INSTR_LSHWR12R0: REGISTER._12W <<= REGISTER._0W; continue;
case INSTR_LSHWR12R1: REGISTER._12W <<= REGISTER._1W; continue;
case INSTR_LSHWR12R2: REGISTER._12W <<= REGISTER._2W; continue;
case INSTR_LSHWR12R3: REGISTER._12W <<= REGISTER._3W; continue;
case INSTR_LSHWR12R4: REGISTER._12W <<= REGISTER._4W; continue;
case INSTR_LSHWR12R5: REGISTER._12W <<= REGISTER._5W; continue;
case INSTR_LSHWR12R6: REGISTER._12W <<= REGISTER._6W; continue;
case INSTR_LSHWR12R7: REGISTER._12W <<= REGISTER._7W; continue;
case INSTR_LSHWR12R8: REGISTER._12W <<= REGISTER._8W; continue;
case INSTR_LSHWR12R9: REGISTER._12W <<= REGISTER._9W; continue;
case INSTR_LSHWR12R10: REGISTER._12W <<= REGISTER._10W; continue;
case INSTR_LSHWR12R11: REGISTER._12W <<= REGISTER._11W; continue;
case INSTR_LSHWR12R12: REGISTER._12W <<= REGISTER._12W; continue;
case INSTR_LSHWR12RIP: REGISTER._12W <<= REGISTER.IPW; continue;
case INSTR_LSHWR12RSP: REGISTER._12W <<= REGISTER.SPW; continue;
case INSTR_LSHWR12RBP: REGISTER._12W <<= REGISTER.BPW; continue;
case INSTR_LSHWRIPI: REGISTER.IPW <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWRIPRA: REGISTER.IPW <<= REGISTER.AW; continue;
case INSTR_LSHWRIPRB: REGISTER.IPW <<= REGISTER.BW; continue;
case INSTR_LSHWRIPRC: REGISTER.IPW <<= REGISTER.CW; continue;
case INSTR_LSHWRIPRD: REGISTER.IPW <<= REGISTER.DW; continue;
case INSTR_LSHWRIPR0: REGISTER.IPW <<= REGISTER._0W; continue;
case INSTR_LSHWRIPR1: REGISTER.IPW <<= REGISTER._1W; continue;
case INSTR_LSHWRIPR2: REGISTER.IPW <<= REGISTER._2W; continue;
case INSTR_LSHWRIPR3: REGISTER.IPW <<= REGISTER._3W; continue;
case INSTR_LSHWRIPR4: REGISTER.IPW <<= REGISTER._4W; continue;
case INSTR_LSHWRIPR5: REGISTER.IPW <<= REGISTER._5W; continue;
case INSTR_LSHWRIPR6: REGISTER.IPW <<= REGISTER._6W; continue;
case INSTR_LSHWRIPR7: REGISTER.IPW <<= REGISTER._7W; continue;
case INSTR_LSHWRIPR8: REGISTER.IPW <<= REGISTER._8W; continue;
case INSTR_LSHWRIPR9: REGISTER.IPW <<= REGISTER._9W; continue;
case INSTR_LSHWRIPR10: REGISTER.IPW <<= REGISTER._10W; continue;
case INSTR_LSHWRIPR11: REGISTER.IPW <<= REGISTER._11W; continue;
case INSTR_LSHWRIPR12: REGISTER.IPW <<= REGISTER._12W; continue;
case INSTR_LSHWRIPRIP: REGISTER.IPW <<= REGISTER.IPW; continue;
case INSTR_LSHWRIPRSP: REGISTER.IPW <<= REGISTER.SPW; continue;
case INSTR_LSHWRIPRBP: REGISTER.IPW <<= REGISTER.BPW; continue;
case INSTR_LSHWRSPI: REGISTER.SPW <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWRSPRA: REGISTER.SPW <<= REGISTER.AW; continue;
case INSTR_LSHWRSPRB: REGISTER.SPW <<= REGISTER.BW; continue;
case INSTR_LSHWRSPRC: REGISTER.SPW <<= REGISTER.CW; continue;
case INSTR_LSHWRSPRD: REGISTER.SPW <<= REGISTER.DW; continue;
case INSTR_LSHWRSPR0: REGISTER.SPW <<= REGISTER._0W; continue;
case INSTR_LSHWRSPR1: REGISTER.SPW <<= REGISTER._1W; continue;
case INSTR_LSHWRSPR2: REGISTER.SPW <<= REGISTER._2W; continue;
case INSTR_LSHWRSPR3: REGISTER.SPW <<= REGISTER._3W; continue;
case INSTR_LSHWRSPR4: REGISTER.SPW <<= REGISTER._4W; continue;
case INSTR_LSHWRSPR5: REGISTER.SPW <<= REGISTER._5W; continue;
case INSTR_LSHWRSPR6: REGISTER.SPW <<= REGISTER._6W; continue;
case INSTR_LSHWRSPR7: REGISTER.SPW <<= REGISTER._7W; continue;
case INSTR_LSHWRSPR8: REGISTER.SPW <<= REGISTER._8W; continue;
case INSTR_LSHWRSPR9: REGISTER.SPW <<= REGISTER._9W; continue;
case INSTR_LSHWRSPR10: REGISTER.SPW <<= REGISTER._10W; continue;
case INSTR_LSHWRSPR11: REGISTER.SPW <<= REGISTER._11W; continue;
case INSTR_LSHWRSPR12: REGISTER.SPW <<= REGISTER._12W; continue;
case INSTR_LSHWRSPRIP: REGISTER.SPW <<= REGISTER.IPW; continue;
case INSTR_LSHWRSPRSP: REGISTER.SPW <<= REGISTER.SPW; continue;
case INSTR_LSHWRSPRBP: REGISTER.SPW <<= REGISTER.BPW; continue;
case INSTR_LSHWRBPI: REGISTER.BPW <<= *(short*) (RAM + REGISTER.IP); REGISTER.IP += 2; continue;
case INSTR_LSHWRBPRA: REGISTER.BPW <<= REGISTER.AW; continue;
case INSTR_LSHWRBPRB: REGISTER.BPW <<= REGISTER.BW; continue;
case INSTR_LSHWRBPRC: REGISTER.BPW <<= REGISTER.CW; continue;
case INSTR_LSHWRBPRD: REGISTER.BPW <<= REGISTER.DW; continue;
case INSTR_LSHWRBPR0: REGISTER.BPW <<= REGISTER._0W; continue;
case INSTR_LSHWRBPR1: REGISTER.BPW <<= REGISTER._1W; continue;
case INSTR_LSHWRBPR2: REGISTER.BPW <<= REGISTER._2W; continue;
case INSTR_LSHWRBPR3: REGISTER.BPW <<= REGISTER._3W; continue;
case INSTR_LSHWRBPR4: REGISTER.BPW <<= REGISTER._4W; continue;
case INSTR_LSHWRBPR5: REGISTER.BPW <<= REGISTER._5W; continue;
case INSTR_LSHWRBPR6: REGISTER.BPW <<= REGISTER._6W; continue;
case INSTR_LSHWRBPR7: REGISTER.BPW <<= REGISTER._7W; continue;
case INSTR_LSHWRBPR8: REGISTER.BPW <<= REGISTER._8W; continue;
case INSTR_LSHWRBPR9: REGISTER.BPW <<= REGISTER._9W; continue;
case INSTR_LSHWRBPR10: REGISTER.BPW <<= REGISTER._10W; continue;
case INSTR_LSHWRBPR11: REGISTER.BPW <<= REGISTER._11W; continue;
case INSTR_LSHWRBPR12: REGISTER.BPW <<= REGISTER._12W; continue;
case INSTR_LSHWRBPRIP: REGISTER.BPW <<= REGISTER.IPW; continue;
case INSTR_LSHWRBPRSP: REGISTER.BPW <<= REGISTER.SPW; continue;
case INSTR_LSHWRBPRBP: REGISTER.BPW <<= REGISTER.BPW; continue;
case INSTR_LSHBRAI: REGISTER.AB <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBRARA: REGISTER.AB <<= REGISTER.AB; continue;
case INSTR_LSHBRARB: REGISTER.AB <<= REGISTER.BB; continue;
case INSTR_LSHBRARC: REGISTER.AB <<= REGISTER.CB; continue;
case INSTR_LSHBRARD: REGISTER.AB <<= REGISTER.DB; continue;
case INSTR_LSHBRAR0: REGISTER.AB <<= REGISTER._0B; continue;
case INSTR_LSHBRAR1: REGISTER.AB <<= REGISTER._1B; continue;
case INSTR_LSHBRAR2: REGISTER.AB <<= REGISTER._2B; continue;
case INSTR_LSHBRAR3: REGISTER.AB <<= REGISTER._3B; continue;
case INSTR_LSHBRAR4: REGISTER.AB <<= REGISTER._4B; continue;
case INSTR_LSHBRAR5: REGISTER.AB <<= REGISTER._5B; continue;
case INSTR_LSHBRAR6: REGISTER.AB <<= REGISTER._6B; continue;
case INSTR_LSHBRAR7: REGISTER.AB <<= REGISTER._7B; continue;
case INSTR_LSHBRAR8: REGISTER.AB <<= REGISTER._8B; continue;
case INSTR_LSHBRAR9: REGISTER.AB <<= REGISTER._9B; continue;
case INSTR_LSHBRAR10: REGISTER.AB <<= REGISTER._10B; continue;
case INSTR_LSHBRAR11: REGISTER.AB <<= REGISTER._11B; continue;
case INSTR_LSHBRAR12: REGISTER.AB <<= REGISTER._12B; continue;
case INSTR_LSHBRARIP: REGISTER.AB <<= REGISTER.IPB; continue;
case INSTR_LSHBRARSP: REGISTER.AB <<= REGISTER.SPB; continue;
case INSTR_LSHBRARBP: REGISTER.AB <<= REGISTER.BPB; continue;
case INSTR_LSHBRBI: REGISTER.BB <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBRBRA: REGISTER.BB <<= REGISTER.AB; continue;
case INSTR_LSHBRBRB: REGISTER.BB <<= REGISTER.BB; continue;
case INSTR_LSHBRBRC: REGISTER.BB <<= REGISTER.CB; continue;
case INSTR_LSHBRBRD: REGISTER.BB <<= REGISTER.DB; continue;
case INSTR_LSHBRBR0: REGISTER.BB <<= REGISTER._0B; continue;
case INSTR_LSHBRBR1: REGISTER.BB <<= REGISTER._1B; continue;
case INSTR_LSHBRBR2: REGISTER.BB <<= REGISTER._2B; continue;
case INSTR_LSHBRBR3: REGISTER.BB <<= REGISTER._3B; continue;
case INSTR_LSHBRBR4: REGISTER.BB <<= REGISTER._4B; continue;
case INSTR_LSHBRBR5: REGISTER.BB <<= REGISTER._5B; continue;
case INSTR_LSHBRBR6: REGISTER.BB <<= REGISTER._6B; continue;
case INSTR_LSHBRBR7: REGISTER.BB <<= REGISTER._7B; continue;
case INSTR_LSHBRBR8: REGISTER.BB <<= REGISTER._8B; continue;
case INSTR_LSHBRBR9: REGISTER.BB <<= REGISTER._9B; continue;
case INSTR_LSHBRBR10: REGISTER.BB <<= REGISTER._10B; continue;
case INSTR_LSHBRBR11: REGISTER.BB <<= REGISTER._11B; continue;
case INSTR_LSHBRBR12: REGISTER.BB <<= REGISTER._12B; continue;
case INSTR_LSHBRBRIP: REGISTER.BB <<= REGISTER.IPB; continue;
case INSTR_LSHBRBRSP: REGISTER.BB <<= REGISTER.SPB; continue;
case INSTR_LSHBRBRBP: REGISTER.BB <<= REGISTER.BPB; continue;
case INSTR_LSHBRCI: REGISTER.CB <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBRCRA: REGISTER.CB <<= REGISTER.AB; continue;
case INSTR_LSHBRCRB: REGISTER.CB <<= REGISTER.BB; continue;
case INSTR_LSHBRCRC: REGISTER.CB <<= REGISTER.CB; continue;
case INSTR_LSHBRCRD: REGISTER.CB <<= REGISTER.DB; continue;
case INSTR_LSHBRCR0: REGISTER.CB <<= REGISTER._0B; continue;
case INSTR_LSHBRCR1: REGISTER.CB <<= REGISTER._1B; continue;
case INSTR_LSHBRCR2: REGISTER.CB <<= REGISTER._2B; continue;
case INSTR_LSHBRCR3: REGISTER.CB <<= REGISTER._3B; continue;
case INSTR_LSHBRCR4: REGISTER.CB <<= REGISTER._4B; continue;
case INSTR_LSHBRCR5: REGISTER.CB <<= REGISTER._5B; continue;
case INSTR_LSHBRCR6: REGISTER.CB <<= REGISTER._6B; continue;
case INSTR_LSHBRCR7: REGISTER.CB <<= REGISTER._7B; continue;
case INSTR_LSHBRCR8: REGISTER.CB <<= REGISTER._8B; continue;
case INSTR_LSHBRCR9: REGISTER.CB <<= REGISTER._9B; continue;
case INSTR_LSHBRCR10: REGISTER.CB <<= REGISTER._10B; continue;
case INSTR_LSHBRCR11: REGISTER.CB <<= REGISTER._11B; continue;
case INSTR_LSHBRCR12: REGISTER.CB <<= REGISTER._12B; continue;
case INSTR_LSHBRCRIP: REGISTER.CB <<= REGISTER.IPB; continue;
case INSTR_LSHBRCRSP: REGISTER.CB <<= REGISTER.SPB; continue;
case INSTR_LSHBRCRBP: REGISTER.CB <<= REGISTER.BPB; continue;
case INSTR_LSHBRDI: REGISTER.DB <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBRDRA: REGISTER.DB <<= REGISTER.AB; continue;
case INSTR_LSHBRDRB: REGISTER.DB <<= REGISTER.BB; continue;
case INSTR_LSHBRDRC: REGISTER.DB <<= REGISTER.CB; continue;
case INSTR_LSHBRDRD: REGISTER.DB <<= REGISTER.DB; continue;
case INSTR_LSHBRDR0: REGISTER.DB <<= REGISTER._0B; continue;
case INSTR_LSHBRDR1: REGISTER.DB <<= REGISTER._1B; continue;
case INSTR_LSHBRDR2: REGISTER.DB <<= REGISTER._2B; continue;
case INSTR_LSHBRDR3: REGISTER.DB <<= REGISTER._3B; continue;
case INSTR_LSHBRDR4: REGISTER.DB <<= REGISTER._4B; continue;
case INSTR_LSHBRDR5: REGISTER.DB <<= REGISTER._5B; continue;
case INSTR_LSHBRDR6: REGISTER.DB <<= REGISTER._6B; continue;
case INSTR_LSHBRDR7: REGISTER.DB <<= REGISTER._7B; continue;
case INSTR_LSHBRDR8: REGISTER.DB <<= REGISTER._8B; continue;
case INSTR_LSHBRDR9: REGISTER.DB <<= REGISTER._9B; continue;
case INSTR_LSHBRDR10: REGISTER.DB <<= REGISTER._10B; continue;
case INSTR_LSHBRDR11: REGISTER.DB <<= REGISTER._11B; continue;
case INSTR_LSHBRDR12: REGISTER.DB <<= REGISTER._12B; continue;
case INSTR_LSHBRDRIP: REGISTER.DB <<= REGISTER.IPB; continue;
case INSTR_LSHBRDRSP: REGISTER.DB <<= REGISTER.SPB; continue;
case INSTR_LSHBRDRBP: REGISTER.DB <<= REGISTER.BPB; continue;
case INSTR_LSHBR0I: REGISTER._0B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR0RA: REGISTER._0B <<= REGISTER.AB; continue;
case INSTR_LSHBR0RB: REGISTER._0B <<= REGISTER.BB; continue;
case INSTR_LSHBR0RC: REGISTER._0B <<= REGISTER.CB; continue;
case INSTR_LSHBR0RD: REGISTER._0B <<= REGISTER.DB; continue;
case INSTR_LSHBR0R0: REGISTER._0B <<= REGISTER._0B; continue;
case INSTR_LSHBR0R1: REGISTER._0B <<= REGISTER._1B; continue;
case INSTR_LSHBR0R2: REGISTER._0B <<= REGISTER._2B; continue;
case INSTR_LSHBR0R3: REGISTER._0B <<= REGISTER._3B; continue;
case INSTR_LSHBR0R4: REGISTER._0B <<= REGISTER._4B; continue;
case INSTR_LSHBR0R5: REGISTER._0B <<= REGISTER._5B; continue;
case INSTR_LSHBR0R6: REGISTER._0B <<= REGISTER._6B; continue;
case INSTR_LSHBR0R7: REGISTER._0B <<= REGISTER._7B; continue;
case INSTR_LSHBR0R8: REGISTER._0B <<= REGISTER._8B; continue;
case INSTR_LSHBR0R9: REGISTER._0B <<= REGISTER._9B; continue;
case INSTR_LSHBR0R10: REGISTER._0B <<= REGISTER._10B; continue;
case INSTR_LSHBR0R11: REGISTER._0B <<= REGISTER._11B; continue;
case INSTR_LSHBR0R12: REGISTER._0B <<= REGISTER._12B; continue;
case INSTR_LSHBR0RIP: REGISTER._0B <<= REGISTER.IPB; continue;
case INSTR_LSHBR0RSP: REGISTER._0B <<= REGISTER.SPB; continue;
case INSTR_LSHBR0RBP: REGISTER._0B <<= REGISTER.BPB; continue;
case INSTR_LSHBR1I: REGISTER._1B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR1RA: REGISTER._1B <<= REGISTER.AB; continue;
case INSTR_LSHBR1RB: REGISTER._1B <<= REGISTER.BB; continue;
case INSTR_LSHBR1RC: REGISTER._1B <<= REGISTER.CB; continue;
case INSTR_LSHBR1RD: REGISTER._1B <<= REGISTER.DB; continue;
case INSTR_LSHBR1R0: REGISTER._1B <<= REGISTER._0B; continue;
case INSTR_LSHBR1R1: REGISTER._1B <<= REGISTER._1B; continue;
case INSTR_LSHBR1R2: REGISTER._1B <<= REGISTER._2B; continue;
case INSTR_LSHBR1R3: REGISTER._1B <<= REGISTER._3B; continue;
case INSTR_LSHBR1R4: REGISTER._1B <<= REGISTER._4B; continue;
case INSTR_LSHBR1R5: REGISTER._1B <<= REGISTER._5B; continue;
case INSTR_LSHBR1R6: REGISTER._1B <<= REGISTER._6B; continue;
case INSTR_LSHBR1R7: REGISTER._1B <<= REGISTER._7B; continue;
case INSTR_LSHBR1R8: REGISTER._1B <<= REGISTER._8B; continue;
case INSTR_LSHBR1R9: REGISTER._1B <<= REGISTER._9B; continue;
case INSTR_LSHBR1R10: REGISTER._1B <<= REGISTER._10B; continue;
case INSTR_LSHBR1R11: REGISTER._1B <<= REGISTER._11B; continue;
case INSTR_LSHBR1R12: REGISTER._1B <<= REGISTER._12B; continue;
case INSTR_LSHBR1RIP: REGISTER._1B <<= REGISTER.IPB; continue;
case INSTR_LSHBR1RSP: REGISTER._1B <<= REGISTER.SPB; continue;
case INSTR_LSHBR1RBP: REGISTER._1B <<= REGISTER.BPB; continue;
case INSTR_LSHBR2I: REGISTER._2B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR2RA: REGISTER._2B <<= REGISTER.AB; continue;
case INSTR_LSHBR2RB: REGISTER._2B <<= REGISTER.BB; continue;
case INSTR_LSHBR2RC: REGISTER._2B <<= REGISTER.CB; continue;
case INSTR_LSHBR2RD: REGISTER._2B <<= REGISTER.DB; continue;
case INSTR_LSHBR2R0: REGISTER._2B <<= REGISTER._0B; continue;
case INSTR_LSHBR2R1: REGISTER._2B <<= REGISTER._1B; continue;
case INSTR_LSHBR2R2: REGISTER._2B <<= REGISTER._2B; continue;
case INSTR_LSHBR2R3: REGISTER._2B <<= REGISTER._3B; continue;
case INSTR_LSHBR2R4: REGISTER._2B <<= REGISTER._4B; continue;
case INSTR_LSHBR2R5: REGISTER._2B <<= REGISTER._5B; continue;
case INSTR_LSHBR2R6: REGISTER._2B <<= REGISTER._6B; continue;
case INSTR_LSHBR2R7: REGISTER._2B <<= REGISTER._7B; continue;
case INSTR_LSHBR2R8: REGISTER._2B <<= REGISTER._8B; continue;
case INSTR_LSHBR2R9: REGISTER._2B <<= REGISTER._9B; continue;
case INSTR_LSHBR2R10: REGISTER._2B <<= REGISTER._10B; continue;
case INSTR_LSHBR2R11: REGISTER._2B <<= REGISTER._11B; continue;
case INSTR_LSHBR2R12: REGISTER._2B <<= REGISTER._12B; continue;
case INSTR_LSHBR2RIP: REGISTER._2B <<= REGISTER.IPB; continue;
case INSTR_LSHBR2RSP: REGISTER._2B <<= REGISTER.SPB; continue;
case INSTR_LSHBR2RBP: REGISTER._2B <<= REGISTER.BPB; continue;
case INSTR_LSHBR3I: REGISTER._3B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR3RA: REGISTER._3B <<= REGISTER.AB; continue;
case INSTR_LSHBR3RB: REGISTER._3B <<= REGISTER.BB; continue;
case INSTR_LSHBR3RC: REGISTER._3B <<= REGISTER.CB; continue;
case INSTR_LSHBR3RD: REGISTER._3B <<= REGISTER.DB; continue;
case INSTR_LSHBR3R0: REGISTER._3B <<= REGISTER._0B; continue;
case INSTR_LSHBR3R1: REGISTER._3B <<= REGISTER._1B; continue;
case INSTR_LSHBR3R2: REGISTER._3B <<= REGISTER._2B; continue;
case INSTR_LSHBR3R3: REGISTER._3B <<= REGISTER._3B; continue;
case INSTR_LSHBR3R4: REGISTER._3B <<= REGISTER._4B; continue;
case INSTR_LSHBR3R5: REGISTER._3B <<= REGISTER._5B; continue;
case INSTR_LSHBR3R6: REGISTER._3B <<= REGISTER._6B; continue;
case INSTR_LSHBR3R7: REGISTER._3B <<= REGISTER._7B; continue;
case INSTR_LSHBR3R8: REGISTER._3B <<= REGISTER._8B; continue;
case INSTR_LSHBR3R9: REGISTER._3B <<= REGISTER._9B; continue;
case INSTR_LSHBR3R10: REGISTER._3B <<= REGISTER._10B; continue;
case INSTR_LSHBR3R11: REGISTER._3B <<= REGISTER._11B; continue;
case INSTR_LSHBR3R12: REGISTER._3B <<= REGISTER._12B; continue;
case INSTR_LSHBR3RIP: REGISTER._3B <<= REGISTER.IPB; continue;
case INSTR_LSHBR3RSP: REGISTER._3B <<= REGISTER.SPB; continue;
case INSTR_LSHBR3RBP: REGISTER._3B <<= REGISTER.BPB; continue;
case INSTR_LSHBR4I: REGISTER._4B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR4RA: REGISTER._4B <<= REGISTER.AB; continue;
case INSTR_LSHBR4RB: REGISTER._4B <<= REGISTER.BB; continue;
case INSTR_LSHBR4RC: REGISTER._4B <<= REGISTER.CB; continue;
case INSTR_LSHBR4RD: REGISTER._4B <<= REGISTER.DB; continue;
case INSTR_LSHBR4R0: REGISTER._4B <<= REGISTER._0B; continue;
case INSTR_LSHBR4R1: REGISTER._4B <<= REGISTER._1B; continue;
case INSTR_LSHBR4R2: REGISTER._4B <<= REGISTER._2B; continue;
case INSTR_LSHBR4R3: REGISTER._4B <<= REGISTER._3B; continue;
case INSTR_LSHBR4R4: REGISTER._4B <<= REGISTER._4B; continue;
case INSTR_LSHBR4R5: REGISTER._4B <<= REGISTER._5B; continue;
case INSTR_LSHBR4R6: REGISTER._4B <<= REGISTER._6B; continue;
case INSTR_LSHBR4R7: REGISTER._4B <<= REGISTER._7B; continue;
case INSTR_LSHBR4R8: REGISTER._4B <<= REGISTER._8B; continue;
case INSTR_LSHBR4R9: REGISTER._4B <<= REGISTER._9B; continue;
case INSTR_LSHBR4R10: REGISTER._4B <<= REGISTER._10B; continue;
case INSTR_LSHBR4R11: REGISTER._4B <<= REGISTER._11B; continue;
case INSTR_LSHBR4R12: REGISTER._4B <<= REGISTER._12B; continue;
case INSTR_LSHBR4RIP: REGISTER._4B <<= REGISTER.IPB; continue;
case INSTR_LSHBR4RSP: REGISTER._4B <<= REGISTER.SPB; continue;
case INSTR_LSHBR4RBP: REGISTER._4B <<= REGISTER.BPB; continue;
case INSTR_LSHBR5I: REGISTER._5B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR5RA: REGISTER._5B <<= REGISTER.AB; continue;
case INSTR_LSHBR5RB: REGISTER._5B <<= REGISTER.BB; continue;
case INSTR_LSHBR5RC: REGISTER._5B <<= REGISTER.CB; continue;
case INSTR_LSHBR5RD: REGISTER._5B <<= REGISTER.DB; continue;
case INSTR_LSHBR5R0: REGISTER._5B <<= REGISTER._0B; continue;
case INSTR_LSHBR5R1: REGISTER._5B <<= REGISTER._1B; continue;
case INSTR_LSHBR5R2: REGISTER._5B <<= REGISTER._2B; continue;
case INSTR_LSHBR5R3: REGISTER._5B <<= REGISTER._3B; continue;
case INSTR_LSHBR5R4: REGISTER._5B <<= REGISTER._4B; continue;
case INSTR_LSHBR5R5: REGISTER._5B <<= REGISTER._5B; continue;
case INSTR_LSHBR5R6: REGISTER._5B <<= REGISTER._6B; continue;
case INSTR_LSHBR5R7: REGISTER._5B <<= REGISTER._7B; continue;
case INSTR_LSHBR5R8: REGISTER._5B <<= REGISTER._8B; continue;
case INSTR_LSHBR5R9: REGISTER._5B <<= REGISTER._9B; continue;
case INSTR_LSHBR5R10: REGISTER._5B <<= REGISTER._10B; continue;
case INSTR_LSHBR5R11: REGISTER._5B <<= REGISTER._11B; continue;
case INSTR_LSHBR5R12: REGISTER._5B <<= REGISTER._12B; continue;
case INSTR_LSHBR5RIP: REGISTER._5B <<= REGISTER.IPB; continue;
case INSTR_LSHBR5RSP: REGISTER._5B <<= REGISTER.SPB; continue;
case INSTR_LSHBR5RBP: REGISTER._5B <<= REGISTER.BPB; continue;
case INSTR_LSHBR6I: REGISTER._6B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR6RA: REGISTER._6B <<= REGISTER.AB; continue;
case INSTR_LSHBR6RB: REGISTER._6B <<= REGISTER.BB; continue;
case INSTR_LSHBR6RC: REGISTER._6B <<= REGISTER.CB; continue;
case INSTR_LSHBR6RD: REGISTER._6B <<= REGISTER.DB; continue;
case INSTR_LSHBR6R0: REGISTER._6B <<= REGISTER._0B; continue;
case INSTR_LSHBR6R1: REGISTER._6B <<= REGISTER._1B; continue;
case INSTR_LSHBR6R2: REGISTER._6B <<= REGISTER._2B; continue;
case INSTR_LSHBR6R3: REGISTER._6B <<= REGISTER._3B; continue;
case INSTR_LSHBR6R4: REGISTER._6B <<= REGISTER._4B; continue;
case INSTR_LSHBR6R5: REGISTER._6B <<= REGISTER._5B; continue;
case INSTR_LSHBR6R6: REGISTER._6B <<= REGISTER._6B; continue;
case INSTR_LSHBR6R7: REGISTER._6B <<= REGISTER._7B; continue;
case INSTR_LSHBR6R8: REGISTER._6B <<= REGISTER._8B; continue;
case INSTR_LSHBR6R9: REGISTER._6B <<= REGISTER._9B; continue;
case INSTR_LSHBR6R10: REGISTER._6B <<= REGISTER._10B; continue;
case INSTR_LSHBR6R11: REGISTER._6B <<= REGISTER._11B; continue;
case INSTR_LSHBR6R12: REGISTER._6B <<= REGISTER._12B; continue;
case INSTR_LSHBR6RIP: REGISTER._6B <<= REGISTER.IPB; continue;
case INSTR_LSHBR6RSP: REGISTER._6B <<= REGISTER.SPB; continue;
case INSTR_LSHBR6RBP: REGISTER._6B <<= REGISTER.BPB; continue;
case INSTR_LSHBR7I: REGISTER._7B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR7RA: REGISTER._7B <<= REGISTER.AB; continue;
case INSTR_LSHBR7RB: REGISTER._7B <<= REGISTER.BB; continue;
case INSTR_LSHBR7RC: REGISTER._7B <<= REGISTER.CB; continue;
case INSTR_LSHBR7RD: REGISTER._7B <<= REGISTER.DB; continue;
case INSTR_LSHBR7R0: REGISTER._7B <<= REGISTER._0B; continue;
case INSTR_LSHBR7R1: REGISTER._7B <<= REGISTER._1B; continue;
case INSTR_LSHBR7R2: REGISTER._7B <<= REGISTER._2B; continue;
case INSTR_LSHBR7R3: REGISTER._7B <<= REGISTER._3B; continue;
case INSTR_LSHBR7R4: REGISTER._7B <<= REGISTER._4B; continue;
case INSTR_LSHBR7R5: REGISTER._7B <<= REGISTER._5B; continue;
case INSTR_LSHBR7R6: REGISTER._7B <<= REGISTER._6B; continue;
case INSTR_LSHBR7R7: REGISTER._7B <<= REGISTER._7B; continue;
case INSTR_LSHBR7R8: REGISTER._7B <<= REGISTER._8B; continue;
case INSTR_LSHBR7R9: REGISTER._7B <<= REGISTER._9B; continue;
case INSTR_LSHBR7R10: REGISTER._7B <<= REGISTER._10B; continue;
case INSTR_LSHBR7R11: REGISTER._7B <<= REGISTER._11B; continue;
case INSTR_LSHBR7R12: REGISTER._7B <<= REGISTER._12B; continue;
case INSTR_LSHBR7RIP: REGISTER._7B <<= REGISTER.IPB; continue;
case INSTR_LSHBR7RSP: REGISTER._7B <<= REGISTER.SPB; continue;
case INSTR_LSHBR7RBP: REGISTER._7B <<= REGISTER.BPB; continue;
case INSTR_LSHBR8I: REGISTER._8B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR8RA: REGISTER._8B <<= REGISTER.AB; continue;
case INSTR_LSHBR8RB: REGISTER._8B <<= REGISTER.BB; continue;
case INSTR_LSHBR8RC: REGISTER._8B <<= REGISTER.CB; continue;
case INSTR_LSHBR8RD: REGISTER._8B <<= REGISTER.DB; continue;
case INSTR_LSHBR8R0: REGISTER._8B <<= REGISTER._0B; continue;
case INSTR_LSHBR8R1: REGISTER._8B <<= REGISTER._1B; continue;
case INSTR_LSHBR8R2: REGISTER._8B <<= REGISTER._2B; continue;
case INSTR_LSHBR8R3: REGISTER._8B <<= REGISTER._3B; continue;
case INSTR_LSHBR8R4: REGISTER._8B <<= REGISTER._4B; continue;
case INSTR_LSHBR8R5: REGISTER._8B <<= REGISTER._5B; continue;
case INSTR_LSHBR8R6: REGISTER._8B <<= REGISTER._6B; continue;
case INSTR_LSHBR8R7: REGISTER._8B <<= REGISTER._7B; continue;
case INSTR_LSHBR8R8: REGISTER._8B <<= REGISTER._8B; continue;
case INSTR_LSHBR8R9: REGISTER._8B <<= REGISTER._9B; continue;
case INSTR_LSHBR8R10: REGISTER._8B <<= REGISTER._10B; continue;
case INSTR_LSHBR8R11: REGISTER._8B <<= REGISTER._11B; continue;
case INSTR_LSHBR8R12: REGISTER._8B <<= REGISTER._12B; continue;
case INSTR_LSHBR8RIP: REGISTER._8B <<= REGISTER.IPB; continue;
case INSTR_LSHBR8RSP: REGISTER._8B <<= REGISTER.SPB; continue;
case INSTR_LSHBR8RBP: REGISTER._8B <<= REGISTER.BPB; continue;
case INSTR_LSHBR9I: REGISTER._9B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR9RA: REGISTER._9B <<= REGISTER.AB; continue;
case INSTR_LSHBR9RB: REGISTER._9B <<= REGISTER.BB; continue;
case INSTR_LSHBR9RC: REGISTER._9B <<= REGISTER.CB; continue;
case INSTR_LSHBR9RD: REGISTER._9B <<= REGISTER.DB; continue;
case INSTR_LSHBR9R0: REGISTER._9B <<= REGISTER._0B; continue;
case INSTR_LSHBR9R1: REGISTER._9B <<= REGISTER._1B; continue;
case INSTR_LSHBR9R2: REGISTER._9B <<= REGISTER._2B; continue;
case INSTR_LSHBR9R3: REGISTER._9B <<= REGISTER._3B; continue;
case INSTR_LSHBR9R4: REGISTER._9B <<= REGISTER._4B; continue;
case INSTR_LSHBR9R5: REGISTER._9B <<= REGISTER._5B; continue;
case INSTR_LSHBR9R6: REGISTER._9B <<= REGISTER._6B; continue;
case INSTR_LSHBR9R7: REGISTER._9B <<= REGISTER._7B; continue;
case INSTR_LSHBR9R8: REGISTER._9B <<= REGISTER._8B; continue;
case INSTR_LSHBR9R9: REGISTER._9B <<= REGISTER._9B; continue;
case INSTR_LSHBR9R10: REGISTER._9B <<= REGISTER._10B; continue;
case INSTR_LSHBR9R11: REGISTER._9B <<= REGISTER._11B; continue;
case INSTR_LSHBR9R12: REGISTER._9B <<= REGISTER._12B; continue;
case INSTR_LSHBR9RIP: REGISTER._9B <<= REGISTER.IPB; continue;
case INSTR_LSHBR9RSP: REGISTER._9B <<= REGISTER.SPB; continue;
case INSTR_LSHBR9RBP: REGISTER._9B <<= REGISTER.BPB; continue;
case INSTR_LSHBR10I: REGISTER._10B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR10RA: REGISTER._10B <<= REGISTER.AB; continue;
case INSTR_LSHBR10RB: REGISTER._10B <<= REGISTER.BB; continue;
case INSTR_LSHBR10RC: REGISTER._10B <<= REGISTER.CB; continue;
case INSTR_LSHBR10RD: REGISTER._10B <<= REGISTER.DB; continue;
case INSTR_LSHBR10R0: REGISTER._10B <<= REGISTER._0B; continue;
case INSTR_LSHBR10R1: REGISTER._10B <<= REGISTER._1B; continue;
case INSTR_LSHBR10R2: REGISTER._10B <<= REGISTER._2B; continue;
case INSTR_LSHBR10R3: REGISTER._10B <<= REGISTER._3B; continue;
case INSTR_LSHBR10R4: REGISTER._10B <<= REGISTER._4B; continue;
case INSTR_LSHBR10R5: REGISTER._10B <<= REGISTER._5B; continue;
case INSTR_LSHBR10R6: REGISTER._10B <<= REGISTER._6B; continue;
case INSTR_LSHBR10R7: REGISTER._10B <<= REGISTER._7B; continue;
case INSTR_LSHBR10R8: REGISTER._10B <<= REGISTER._8B; continue;
case INSTR_LSHBR10R9: REGISTER._10B <<= REGISTER._9B; continue;
case INSTR_LSHBR10R10: REGISTER._10B <<= REGISTER._10B; continue;
case INSTR_LSHBR10R11: REGISTER._10B <<= REGISTER._11B; continue;
case INSTR_LSHBR10R12: REGISTER._10B <<= REGISTER._12B; continue;
case INSTR_LSHBR10RIP: REGISTER._10B <<= REGISTER.IPB; continue;
case INSTR_LSHBR10RSP: REGISTER._10B <<= REGISTER.SPB; continue;
case INSTR_LSHBR10RBP: REGISTER._10B <<= REGISTER.BPB; continue;
case INSTR_LSHBR11I: REGISTER._11B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR11RA: REGISTER._11B <<= REGISTER.AB; continue;
case INSTR_LSHBR11RB: REGISTER._11B <<= REGISTER.BB; continue;
case INSTR_LSHBR11RC: REGISTER._11B <<= REGISTER.CB; continue;
case INSTR_LSHBR11RD: REGISTER._11B <<= REGISTER.DB; continue;
case INSTR_LSHBR11R0: REGISTER._11B <<= REGISTER._0B; continue;
case INSTR_LSHBR11R1: REGISTER._11B <<= REGISTER._1B; continue;
case INSTR_LSHBR11R2: REGISTER._11B <<= REGISTER._2B; continue;
case INSTR_LSHBR11R3: REGISTER._11B <<= REGISTER._3B; continue;
case INSTR_LSHBR11R4: REGISTER._11B <<= REGISTER._4B; continue;
case INSTR_LSHBR11R5: REGISTER._11B <<= REGISTER._5B; continue;
case INSTR_LSHBR11R6: REGISTER._11B <<= REGISTER._6B; continue;
case INSTR_LSHBR11R7: REGISTER._11B <<= REGISTER._7B; continue;
case INSTR_LSHBR11R8: REGISTER._11B <<= REGISTER._8B; continue;
case INSTR_LSHBR11R9: REGISTER._11B <<= REGISTER._9B; continue;
case INSTR_LSHBR11R10: REGISTER._11B <<= REGISTER._10B; continue;
case INSTR_LSHBR11R11: REGISTER._11B <<= REGISTER._11B; continue;
case INSTR_LSHBR11R12: REGISTER._11B <<= REGISTER._12B; continue;
case INSTR_LSHBR11RIP: REGISTER._11B <<= REGISTER.IPB; continue;
case INSTR_LSHBR11RSP: REGISTER._11B <<= REGISTER.SPB; continue;
case INSTR_LSHBR11RBP: REGISTER._11B <<= REGISTER.BPB; continue;
case INSTR_LSHBR12I: REGISTER._12B <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBR12RA: REGISTER._12B <<= REGISTER.AB; continue;
case INSTR_LSHBR12RB: REGISTER._12B <<= REGISTER.BB; continue;
case INSTR_LSHBR12RC: REGISTER._12B <<= REGISTER.CB; continue;
case INSTR_LSHBR12RD: REGISTER._12B <<= REGISTER.DB; continue;
case INSTR_LSHBR12R0: REGISTER._12B <<= REGISTER._0B; continue;
case INSTR_LSHBR12R1: REGISTER._12B <<= REGISTER._1B; continue;
case INSTR_LSHBR12R2: REGISTER._12B <<= REGISTER._2B; continue;
case INSTR_LSHBR12R3: REGISTER._12B <<= REGISTER._3B; continue;
case INSTR_LSHBR12R4: REGISTER._12B <<= REGISTER._4B; continue;
case INSTR_LSHBR12R5: REGISTER._12B <<= REGISTER._5B; continue;
case INSTR_LSHBR12R6: REGISTER._12B <<= REGISTER._6B; continue;
case INSTR_LSHBR12R7: REGISTER._12B <<= REGISTER._7B; continue;
case INSTR_LSHBR12R8: REGISTER._12B <<= REGISTER._8B; continue;
case INSTR_LSHBR12R9: REGISTER._12B <<= REGISTER._9B; continue;
case INSTR_LSHBR12R10: REGISTER._12B <<= REGISTER._10B; continue;
case INSTR_LSHBR12R11: REGISTER._12B <<= REGISTER._11B; continue;
case INSTR_LSHBR12R12: REGISTER._12B <<= REGISTER._12B; continue;
case INSTR_LSHBR12RIP: REGISTER._12B <<= REGISTER.IPB; continue;
case INSTR_LSHBR12RSP: REGISTER._12B <<= REGISTER.SPB; continue;
case INSTR_LSHBR12RBP: REGISTER._12B <<= REGISTER.BPB; continue;
case INSTR_LSHBRIPI: REGISTER.IPB <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBRIPRA: REGISTER.IPB <<= REGISTER.AB; continue;
case INSTR_LSHBRIPRB: REGISTER.IPB <<= REGISTER.BB; continue;
case INSTR_LSHBRIPRC: REGISTER.IPB <<= REGISTER.CB; continue;
case INSTR_LSHBRIPRD: REGISTER.IPB <<= REGISTER.DB; continue;
case INSTR_LSHBRIPR0: REGISTER.IPB <<= REGISTER._0B; continue;
case INSTR_LSHBRIPR1: REGISTER.IPB <<= REGISTER._1B; continue;
case INSTR_LSHBRIPR2: REGISTER.IPB <<= REGISTER._2B; continue;
case INSTR_LSHBRIPR3: REGISTER.IPB <<= REGISTER._3B; continue;
case INSTR_LSHBRIPR4: REGISTER.IPB <<= REGISTER._4B; continue;
case INSTR_LSHBRIPR5: REGISTER.IPB <<= REGISTER._5B; continue;
case INSTR_LSHBRIPR6: REGISTER.IPB <<= REGISTER._6B; continue;
case INSTR_LSHBRIPR7: REGISTER.IPB <<= REGISTER._7B; continue;
case INSTR_LSHBRIPR8: REGISTER.IPB <<= REGISTER._8B; continue;
case INSTR_LSHBRIPR9: REGISTER.IPB <<= REGISTER._9B; continue;
case INSTR_LSHBRIPR10: REGISTER.IPB <<= REGISTER._10B; continue;
case INSTR_LSHBRIPR11: REGISTER.IPB <<= REGISTER._11B; continue;
case INSTR_LSHBRIPR12: REGISTER.IPB <<= REGISTER._12B; continue;
case INSTR_LSHBRIPRIP: REGISTER.IPB <<= REGISTER.IPB; continue;
case INSTR_LSHBRIPRSP: REGISTER.IPB <<= REGISTER.SPB; continue;
case INSTR_LSHBRIPRBP: REGISTER.IPB <<= REGISTER.BPB; continue;
case INSTR_LSHBRSPI: REGISTER.SPB <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBRSPRA: REGISTER.SPB <<= REGISTER.AB; continue;
case INSTR_LSHBRSPRB: REGISTER.SPB <<= REGISTER.BB; continue;
case INSTR_LSHBRSPRC: REGISTER.SPB <<= REGISTER.CB; continue;
case INSTR_LSHBRSPRD: REGISTER.SPB <<= REGISTER.DB; continue;
case INSTR_LSHBRSPR0: REGISTER.SPB <<= REGISTER._0B; continue;
case INSTR_LSHBRSPR1: REGISTER.SPB <<= REGISTER._1B; continue;
case INSTR_LSHBRSPR2: REGISTER.SPB <<= REGISTER._2B; continue;
case INSTR_LSHBRSPR3: REGISTER.SPB <<= REGISTER._3B; continue;
case INSTR_LSHBRSPR4: REGISTER.SPB <<= REGISTER._4B; continue;
case INSTR_LSHBRSPR5: REGISTER.SPB <<= REGISTER._5B; continue;
case INSTR_LSHBRSPR6: REGISTER.SPB <<= REGISTER._6B; continue;
case INSTR_LSHBRSPR7: REGISTER.SPB <<= REGISTER._7B; continue;
case INSTR_LSHBRSPR8: REGISTER.SPB <<= REGISTER._8B; continue;
case INSTR_LSHBRSPR9: REGISTER.SPB <<= REGISTER._9B; continue;
case INSTR_LSHBRSPR10: REGISTER.SPB <<= REGISTER._10B; continue;
case INSTR_LSHBRSPR11: REGISTER.SPB <<= REGISTER._11B; continue;
case INSTR_LSHBRSPR12: REGISTER.SPB <<= REGISTER._12B; continue;
case INSTR_LSHBRSPRIP: REGISTER.SPB <<= REGISTER.IPB; continue;
case INSTR_LSHBRSPRSP: REGISTER.SPB <<= REGISTER.SPB; continue;
case INSTR_LSHBRSPRBP: REGISTER.SPB <<= REGISTER.BPB; continue;
case INSTR_LSHBRBPI: REGISTER.BPB <<= *(char*) (RAM + REGISTER.IP); REGISTER.IP += 1; continue;
case INSTR_LSHBRBPRA: REGISTER.BPB <<= REGISTER.AB; continue;
case INSTR_LSHBRBPRB: REGISTER.BPB <<= REGISTER.BB; continue;
case INSTR_LSHBRBPRC: REGISTER.BPB <<= REGISTER.CB; continue;
case INSTR_LSHBRBPRD: REGISTER.BPB <<= REGISTER.DB; continue;
case INSTR_LSHBRBPR0: REGISTER.BPB <<= REGISTER._0B; continue;
case INSTR_LSHBRBPR1: REGISTER.BPB <<= REGISTER._1B; continue;
case INSTR_LSHBRBPR2: REGISTER.BPB <<= REGISTER._2B; continue;
case INSTR_LSHBRBPR3: REGISTER.BPB <<= REGISTER._3B; continue;
case INSTR_LSHBRBPR4: REGISTER.BPB <<= REGISTER._4B; continue;
case INSTR_LSHBRBPR5: REGISTER.BPB <<= REGISTER._5B; continue;
case INSTR_LSHBRBPR6: REGISTER.BPB <<= REGISTER._6B; continue;
case INSTR_LSHBRBPR7: REGISTER.BPB <<= REGISTER._7B; continue;
case INSTR_LSHBRBPR8: REGISTER.BPB <<= REGISTER._8B; continue;
case INSTR_LSHBRBPR9: REGISTER.BPB <<= REGISTER._9B; continue;
case INSTR_LSHBRBPR10: REGISTER.BPB <<= REGISTER._10B; continue;
case INSTR_LSHBRBPR11: REGISTER.BPB <<= REGISTER._11B; continue;
case INSTR_LSHBRBPR12: REGISTER.BPB <<= REGISTER._12B; continue;
case INSTR_LSHBRBPRIP: REGISTER.BPB <<= REGISTER.IPB; continue;
case INSTR_LSHBRBPRSP: REGISTER.BPB <<= REGISTER.SPB; continue;
case INSTR_LSHBRBPRBP: REGISTER.BPB <<= REGISTER.BPB; continue;
// inc //
case INSTR_INCQRA: REGISTER.AQ++; continue;
case INSTR_INCQRB: REGISTER.BQ++; continue;
case INSTR_INCQRC: REGISTER.CQ++; continue;
case INSTR_INCQRD: REGISTER.DQ++; continue;
case INSTR_INCQR0: REGISTER._0Q++; continue;
case INSTR_INCQR1: REGISTER._1Q++; continue;
case INSTR_INCQR2: REGISTER._2Q++; continue;
case INSTR_INCQR3: REGISTER._3Q++; continue;
case INSTR_INCQR4: REGISTER._4Q++; continue;
case INSTR_INCQR5: REGISTER._5Q++; continue;
case INSTR_INCQR6: REGISTER._6Q++; continue;
case INSTR_INCQR7: REGISTER._7Q++; continue;
case INSTR_INCQR8: REGISTER._8Q++; continue;
case INSTR_INCQR9: REGISTER._9Q++; continue;
case INSTR_INCQR10: REGISTER._10Q++; continue;
case INSTR_INCQR11: REGISTER._11Q++; continue;
case INSTR_INCQR12: REGISTER._12Q++; continue;
case INSTR_INCQRIP: REGISTER.IPQ++; continue;
case INSTR_INCQRSP: REGISTER.SPQ++; continue;
case INSTR_INCQRBP: REGISTER.BPQ++; continue;
case INSTR_INCWRA: REGISTER.AW++; continue;
case INSTR_INCWRB: REGISTER.BW++; continue;
case INSTR_INCWRC: REGISTER.CW++; continue;
case INSTR_INCWRD: REGISTER.DW++; continue;
case INSTR_INCWR0: REGISTER._0W++; continue;
case INSTR_INCWR1: REGISTER._1W++; continue;
case INSTR_INCWR2: REGISTER._2W++; continue;
case INSTR_INCWR3: REGISTER._3W++; continue;
case INSTR_INCWR4: REGISTER._4W++; continue;
case INSTR_INCWR5: REGISTER._5W++; continue;
case INSTR_INCWR6: REGISTER._6W++; continue;
case INSTR_INCWR7: REGISTER._7W++; continue;
case INSTR_INCWR8: REGISTER._8W++; continue;
case INSTR_INCWR9: REGISTER._9W++; continue;
case INSTR_INCWR10: REGISTER._10W++; continue;
case INSTR_INCWR11: REGISTER._11W++; continue;
case INSTR_INCWR12: REGISTER._12W++; continue;
case INSTR_INCWRIP: REGISTER.IPW++; continue;
case INSTR_INCWRSP: REGISTER.SPW++; continue;
case INSTR_INCWRBP: REGISTER.BPW++; continue;
case INSTR_INCBRA: REGISTER.AB++; continue;
case INSTR_INCBRB: REGISTER.BB++; continue;
case INSTR_INCBRC: REGISTER.CB++; continue;
case INSTR_INCBRD: REGISTER.DB++; continue;
case INSTR_INCBR0: REGISTER._0B++; continue;
case INSTR_INCBR1: REGISTER._1B++; continue;
case INSTR_INCBR2: REGISTER._2B++; continue;
case INSTR_INCBR3: REGISTER._3B++; continue;
case INSTR_INCBR4: REGISTER._4B++; continue;
case INSTR_INCBR5: REGISTER._5B++; continue;
case INSTR_INCBR6: REGISTER._6B++; continue;
case INSTR_INCBR7: REGISTER._7B++; continue;
case INSTR_INCBR8: REGISTER._8B++; continue;
case INSTR_INCBR9: REGISTER._9B++; continue;
case INSTR_INCBR10: REGISTER._10B++; continue;
case INSTR_INCBR11: REGISTER._11B++; continue;
case INSTR_INCBR12: REGISTER._12B++; continue;
case INSTR_INCBRIP: REGISTER.IPB++; continue;
case INSTR_INCBRSP: REGISTER.SPB++; continue;
case INSTR_INCBRBP: REGISTER.BPB++; continue;
// dec //
case INSTR_DECQRA: REGISTER.AQ--; continue;
case INSTR_DECQRB: REGISTER.BQ--; continue;
case INSTR_DECQRC: REGISTER.CQ--; continue;
case INSTR_DECQRD: REGISTER.DQ--; continue;
case INSTR_DECQR0: REGISTER._0Q--; continue;
case INSTR_DECQR1: REGISTER._1Q--; continue;
case INSTR_DECQR2: REGISTER._2Q--; continue;
case INSTR_DECQR3: REGISTER._3Q--; continue;
case INSTR_DECQR4: REGISTER._4Q--; continue;
case INSTR_DECQR5: REGISTER._5Q--; continue;
case INSTR_DECQR6: REGISTER._6Q--; continue;
case INSTR_DECQR7: REGISTER._7Q--; continue;
case INSTR_DECQR8: REGISTER._8Q--; continue;
case INSTR_DECQR9: REGISTER._9Q--; continue;
case INSTR_DECQR10: REGISTER._10Q--; continue;
case INSTR_DECQR11: REGISTER._11Q--; continue;
case INSTR_DECQR12: REGISTER._12Q--; continue;
case INSTR_DECQRIP: REGISTER.IPQ--; continue;
case INSTR_DECQRSP: REGISTER.SPQ--; continue;
case INSTR_DECQRBP: REGISTER.BPQ--; continue;
case INSTR_DECWRA: REGISTER.AW--; continue;
case INSTR_DECWRB: REGISTER.BW--; continue;
case INSTR_DECWRC: REGISTER.CW--; continue;
case INSTR_DECWRD: REGISTER.DW--; continue;
case INSTR_DECWR0: REGISTER._0W--; continue;
case INSTR_DECWR1: REGISTER._1W--; continue;
case INSTR_DECWR2: REGISTER._2W--; continue;
case INSTR_DECWR3: REGISTER._3W--; continue;
case INSTR_DECWR4: REGISTER._4W--; continue;
case INSTR_DECWR5: REGISTER._5W--; continue;
case INSTR_DECWR6: REGISTER._6W--; continue;
case INSTR_DECWR7: REGISTER._7W--; continue;
case INSTR_DECWR8: REGISTER._8W--; continue;
case INSTR_DECWR9: REGISTER._9W--; continue;
case INSTR_DECWR10: REGISTER._10W--; continue;
case INSTR_DECWR11: REGISTER._11W--; continue;
case INSTR_DECWR12: REGISTER._12W--; continue;
case INSTR_DECWRIP: REGISTER.IPW--; continue;
case INSTR_DECWRSP: REGISTER.SPW--; continue;
case INSTR_DECWRBP: REGISTER.BPW--; continue;
case INSTR_DECBRA: REGISTER.AB--; continue;
case INSTR_DECBRB: REGISTER.BB--; continue;
case INSTR_DECBRC: REGISTER.CB--; continue;
case INSTR_DECBRD: REGISTER.DB--; continue;
case INSTR_DECBR0: REGISTER._0B--; continue;
case INSTR_DECBR1: REGISTER._1B--; continue;
case INSTR_DECBR2: REGISTER._2B--; continue;
case INSTR_DECBR3: REGISTER._3B--; continue;
case INSTR_DECBR4: REGISTER._4B--; continue;
case INSTR_DECBR5: REGISTER._5B--; continue;
case INSTR_DECBR6: REGISTER._6B--; continue;
case INSTR_DECBR7: REGISTER._7B--; continue;
case INSTR_DECBR8: REGISTER._8B--; continue;
case INSTR_DECBR9: REGISTER._9B--; continue;
case INSTR_DECBR10: REGISTER._10B--; continue;
case INSTR_DECBR11: REGISTER._11B--; continue;
case INSTR_DECBR12: REGISTER._12B--; continue;
case INSTR_DECBRIP: REGISTER.IPB--; continue;
case INSTR_DECBRSP: REGISTER.SPB--; continue;
case INSTR_DECBRBP: REGISTER.BPB--; continue;
// inverse //
case INSTR_INVQRA: REGISTER.AQ = ~REGISTER.AQ; continue;
case INSTR_INVQRB: REGISTER.BQ = ~REGISTER.BQ; continue;
case INSTR_INVQRC: REGISTER.CQ = ~REGISTER.CQ; continue;
case INSTR_INVQRD: REGISTER.DQ = ~REGISTER.DQ; continue;
case INSTR_INVQR0: REGISTER._0Q = ~REGISTER._0Q; continue;
case INSTR_INVQR1: REGISTER._1Q = ~REGISTER._1Q; continue;
case INSTR_INVQR2: REGISTER._2Q = ~REGISTER._2Q; continue;
case INSTR_INVQR3: REGISTER._3Q = ~REGISTER._3Q; continue;
case INSTR_INVQR4: REGISTER._4Q = ~REGISTER._4Q; continue;
case INSTR_INVQR5: REGISTER._5Q = ~REGISTER._5Q; continue;
case INSTR_INVQR6: REGISTER._6Q = ~REGISTER._6Q; continue;
case INSTR_INVQR7: REGISTER._7Q = ~REGISTER._7Q; continue;
case INSTR_INVQR8: REGISTER._8Q = ~REGISTER._8Q; continue;
case INSTR_INVQR9: REGISTER._9Q = ~REGISTER._9Q; continue;
case INSTR_INVQR10: REGISTER._10Q = ~REGISTER._10Q; continue;
case INSTR_INVQR11: REGISTER._11Q = ~REGISTER._11Q; continue;
case INSTR_INVQR12: REGISTER._12Q = ~REGISTER._12Q; continue;
case INSTR_INVQRIP: REGISTER.IPQ = ~REGISTER.IPQ; continue;
case INSTR_INVQRSP: REGISTER.SPQ = ~REGISTER.SPQ; continue;
case INSTR_INVQRBP: REGISTER.BPQ = ~REGISTER.BPQ; continue;
case INSTR_INVWRA: REGISTER.AW = ~REGISTER.AW; continue;
case INSTR_INVWRB: REGISTER.BW = ~REGISTER.BW; continue;
case INSTR_INVWRC: REGISTER.CW = ~REGISTER.CW; continue;
case INSTR_INVWRD: REGISTER.DW = ~REGISTER.DW; continue;
case INSTR_INVWR0: REGISTER._0W = ~REGISTER._0W; continue;
case INSTR_INVWR1: REGISTER._1W = ~REGISTER._1W; continue;
case INSTR_INVWR2: REGISTER._2W = ~REGISTER._2W; continue;
case INSTR_INVWR3: REGISTER._3W = ~REGISTER._3W; continue;
case INSTR_INVWR4: REGISTER._4W = ~REGISTER._4W; continue;
case INSTR_INVWR5: REGISTER._5W = ~REGISTER._5W; continue;
case INSTR_INVWR6: REGISTER._6W = ~REGISTER._6W; continue;
case INSTR_INVWR7: REGISTER._7W = ~REGISTER._7W; continue;
case INSTR_INVWR8: REGISTER._8W = ~REGISTER._8W; continue;
case INSTR_INVWR9: REGISTER._9W = ~REGISTER._9W; continue;
case INSTR_INVWR10: REGISTER._10W = ~REGISTER._10W; continue;
case INSTR_INVWR11: REGISTER._11W = ~REGISTER._11W; continue;
case INSTR_INVWR12: REGISTER._12W = ~REGISTER._12W; continue;
case INSTR_INVWRIP: REGISTER.IPW = ~REGISTER.IPW; continue;
case INSTR_INVWRSP: REGISTER.SPW = ~REGISTER.SPW; continue;
case INSTR_INVWRBP: REGISTER.BPW = ~REGISTER.BPW; continue;
case INSTR_INVBRA: REGISTER.AB = ~REGISTER.AB; continue;
case INSTR_INVBRB: REGISTER.BB = ~REGISTER.BB; continue;
case INSTR_INVBRC: REGISTER.CB = ~REGISTER.CB; continue;
case INSTR_INVBRD: REGISTER.DB = ~REGISTER.DB; continue;
case INSTR_INVBR0: REGISTER._0B = ~REGISTER._0B; continue;
case INSTR_INVBR1: REGISTER._1B = ~REGISTER._1B; continue;
case INSTR_INVBR2: REGISTER._2B = ~REGISTER._2B; continue;
case INSTR_INVBR3: REGISTER._3B = ~REGISTER._3B; continue;
case INSTR_INVBR4: REGISTER._4B = ~REGISTER._4B; continue;
case INSTR_INVBR5: REGISTER._5B = ~REGISTER._5B; continue;
case INSTR_INVBR6: REGISTER._6B = ~REGISTER._6B; continue;
case INSTR_INVBR7: REGISTER._7B = ~REGISTER._7B; continue;
case INSTR_INVBR8: REGISTER._8B = ~REGISTER._8B; continue;
case INSTR_INVBR9: REGISTER._9B = ~REGISTER._9B; continue;
case INSTR_INVBR10: REGISTER._10B = ~REGISTER._10B; continue;
case INSTR_INVBR11: REGISTER._11B = ~REGISTER._11B; continue;
case INSTR_INVBR12: REGISTER._12B = ~REGISTER._12B; continue;
case INSTR_INVBRIP: REGISTER.IPB = ~REGISTER.IPB; continue;
case INSTR_INVBRSP: REGISTER.SPB = ~REGISTER.SPB; continue;
case INSTR_INVBRBP: REGISTER.BPB = ~REGISTER.BPB; continue;
// not //
case INSTR_NOTQRA: REGISTER.AQ = !REGISTER.AQ; continue;
case INSTR_NOTQRB: REGISTER.BQ = !REGISTER.BQ; continue;
case INSTR_NOTQRC: REGISTER.CQ = !REGISTER.CQ; continue;
case INSTR_NOTQRD: REGISTER.DQ = !REGISTER.DQ; continue;
case INSTR_NOTQR0: REGISTER._0Q = !REGISTER._0Q; continue;
case INSTR_NOTQR1: REGISTER._1Q = !REGISTER._1Q; continue;
case INSTR_NOTQR2: REGISTER._2Q = !REGISTER._2Q; continue;
case INSTR_NOTQR3: REGISTER._3Q = !REGISTER._3Q; continue;
case INSTR_NOTQR4: REGISTER._4Q = !REGISTER._4Q; continue;
case INSTR_NOTQR5: REGISTER._5Q = !REGISTER._5Q; continue;
case INSTR_NOTQR6: REGISTER._6Q = !REGISTER._6Q; continue;
case INSTR_NOTQR7: REGISTER._7Q = !REGISTER._7Q; continue;
case INSTR_NOTQR8: REGISTER._8Q = !REGISTER._8Q; continue;
case INSTR_NOTQR9: REGISTER._9Q = !REGISTER._9Q; continue;
case INSTR_NOTQR10: REGISTER._10Q = !REGISTER._10Q; continue;
case INSTR_NOTQR11: REGISTER._11Q = !REGISTER._11Q; continue;
case INSTR_NOTQR12: REGISTER._12Q = !REGISTER._12Q; continue;
case INSTR_NOTQRIP: REGISTER.IPQ = !REGISTER.IPQ; continue;
case INSTR_NOTQRSP: REGISTER.SPQ = !REGISTER.SPQ; continue;
case INSTR_NOTQRBP: REGISTER.BPQ = !REGISTER.BPQ; continue;
case INSTR_NOTWRA: REGISTER.AW = !REGISTER.AW; continue;
case INSTR_NOTWRB: REGISTER.BW = !REGISTER.BW; continue;
case INSTR_NOTWRC: REGISTER.CW = !REGISTER.CW; continue;
case INSTR_NOTWRD: REGISTER.DW = !REGISTER.DW; continue;
case INSTR_NOTWR0: REGISTER._0W = !REGISTER._0W; continue;
case INSTR_NOTWR1: REGISTER._1W = !REGISTER._1W; continue;
case INSTR_NOTWR2: REGISTER._2W = !REGISTER._2W; continue;
case INSTR_NOTWR3: REGISTER._3W = !REGISTER._3W; continue;
case INSTR_NOTWR4: REGISTER._4W = !REGISTER._4W; continue;
case INSTR_NOTWR5: REGISTER._5W = !REGISTER._5W; continue;
case INSTR_NOTWR6: REGISTER._6W = !REGISTER._6W; continue;
case INSTR_NOTWR7: REGISTER._7W = !REGISTER._7W; continue;
case INSTR_NOTWR8: REGISTER._8W = !REGISTER._8W; continue;
case INSTR_NOTWR9: REGISTER._9W = !REGISTER._9W; continue;
case INSTR_NOTWR10: REGISTER._10W = !REGISTER._10W; continue;
case INSTR_NOTWR11: REGISTER._11W = !REGISTER._11W; continue;
case INSTR_NOTWR12: REGISTER._12W = !REGISTER._12W; continue;
case INSTR_NOTWRIP: REGISTER.IPW = !REGISTER.IPW; continue;
case INSTR_NOTWRSP: REGISTER.SPW = !REGISTER.SPW; continue;
case INSTR_NOTWRBP: REGISTER.BPW = !REGISTER.BPW; continue;
case INSTR_NOTBRA: REGISTER.AB = !REGISTER.AB; continue;
case INSTR_NOTBRB: REGISTER.BB = !REGISTER.BB; continue;
case INSTR_NOTBRC: REGISTER.CB = !REGISTER.CB; continue;
case INSTR_NOTBRD: REGISTER.DB = !REGISTER.DB; continue;
case INSTR_NOTBR0: REGISTER._0B = !REGISTER._0B; continue;
case INSTR_NOTBR1: REGISTER._1B = !REGISTER._1B; continue;
case INSTR_NOTBR2: REGISTER._2B = !REGISTER._2B; continue;
case INSTR_NOTBR3: REGISTER._3B = !REGISTER._3B; continue;
case INSTR_NOTBR4: REGISTER._4B = !REGISTER._4B; continue;
case INSTR_NOTBR5: REGISTER._5B = !REGISTER._5B; continue;
case INSTR_NOTBR6: REGISTER._6B = !REGISTER._6B; continue;
case INSTR_NOTBR7: REGISTER._7B = !REGISTER._7B; continue;
case INSTR_NOTBR8: REGISTER._8B = !REGISTER._8B; continue;
case INSTR_NOTBR9: REGISTER._9B = !REGISTER._9B; continue;
case INSTR_NOTBR10: REGISTER._10B = !REGISTER._10B; continue;
case INSTR_NOTBR11: REGISTER._11B = !REGISTER._11B; continue;
case INSTR_NOTBR12: REGISTER._12B = !REGISTER._12B; continue;
case INSTR_NOTBRIP: REGISTER.IPB = !REGISTER.IPB; continue;
case INSTR_NOTBRSP: REGISTER.SPB = !REGISTER.SPB; continue;
case INSTR_NOTBRBP: REGISTER.BPB = !REGISTER.BPB; continue;
// jump //
case INSTR_JMPI: goto jmp;
case INSTR_JEI: if(flag) { REGISTER.IP += 4; continue; } goto jmp;
case INSTR_JNEI: if(!flag) { REGISTER.IP += 4; continue; } goto jmp;
case INSTR_JGI: if(flag <= 0) { REGISTER.IP += 4; continue; } goto jmp;
case INSTR_JGEI: if(flag < 0) { REGISTER.IP += 4; continue; } goto jmp;
case INSTR_JLI: if(flag >= 0) { REGISTER.IP += 4; continue; } goto jmp;
case INSTR_JLEI: if(flag > 0) { REGISTER.IP += 4; continue; } goto jmp;
// call //
case INSTR_CALLI: goto call;
case INSTR_CLEI: if(flag) { REGISTER.IP += 4; continue; } goto call;
case INSTR_CLNEI: if(!flag) { REGISTER.IP += 4; continue; } goto call;
case INSTR_CLGI: if(flag <= 0) { REGISTER.IP += 4; continue; } goto call;
case INSTR_CLGEI: if(flag < 0) { REGISTER.IP += 4; continue; } goto call;
case INSTR_CLLI: if(flag >= 0) { REGISTER.IP += 4; continue; } goto call;
case INSTR_CLLEI: if(flag > 0) { REGISTER.IP += 4; continue; } goto call;
// ret //
case INSTR_RET: goto ret;
case INSTR_RE: if(flag) continue; goto ret;
case INSTR_RNE: if(!flag) continue; goto ret;
case INSTR_RG: if(flag <= 0) continue; goto ret;
case INSTR_RGE: if(flag < 0) continue; goto ret;
case INSTR_RL: if(flag >= 0) continue; goto ret;
case INSTR_RLE: if(flag > 0) continue; goto ret;
